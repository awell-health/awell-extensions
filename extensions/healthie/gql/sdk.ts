import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
import { print } from 'graphql'
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Cursor: any;
  ISO8601DateTime: any;
  ISO8601Duration: any;
  JSON: any;
  Upload: any;
};

/** Accepted Insurance Plan */
export type AcceptedInsurancePlan = {
  __typename?: 'AcceptedInsurancePlan';
  /** Unique identifier of the plan */
  id: Scalars['ID'];
  /** Connected ICD Code Object */
  insurance_plan?: Maybe<InsurancePlan>;
};

/** Autogenerated input type of AddCptCode */
export type AddCptCodeInput = {
  cpt_code: Scalars['String'];
  cpt_description: Scalars['String'];
};

/** Autogenerated return type of AddCptCode. */
export type AddCptCodePayload = {
  __typename?: 'AddCptCodePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AddIcdCode */
export type AddIcdCodeInput = {
  icd_category: Scalars['String'];
  icd_code: Scalars['String'];
  icd_description: Scalars['String'];
};

/** Autogenerated return type of AddIcdCode. */
export type AddIcdCodePayload = {
  __typename?: 'AddIcdCodePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of AddReplyToEmailAddresses */
export type AddReplyToEmailAddressesInput = {
  /** The list of email addresses to add to the user */
  email_list: Scalars['String'];
  /** The ID of the user to add the email addresses to */
  user_id: Scalars['ID'];
};

/** Autogenerated return type of AddReplyToEmailAddresses. */
export type AddReplyToEmailAddressesPayload = {
  __typename?: 'AddReplyToEmailAddressesPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  /** The success string if the mutation was successful */
  success_string?: Maybe<Scalars['String']>;
};

/** Payload for added user as a label-value pair */
export type AddedUsersInput = {
  /** The label for the user */
  label: Scalars['String'];
  /** The labeled value */
  value: Scalars['ID'];
};

/** Specific appointment price object for provider/client */
export type AdvanceAppointmentPrice = {
  __typename?: 'AdvanceAppointmentPrice';
  /** Appointment type ID this appointment price is associated with. */
  appointment_type_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the price */
  id: Scalars['ID'];
  /** The advance price for this appointment type */
  price: Scalars['String'];
  /** User ID this appointment price is associated with. */
  user_id: Scalars['ID'];
};

/** Payload for an advance appointment price */
export type AdvanceAppointmentPriceInput = {
  /** The ID of the appointment type */
  appointment_type_id?: InputMaybe<Scalars['ID']>;
  /** The ID of the price */
  id?: InputMaybe<Scalars['ID']>;
  /** The price of the appointment type */
  price?: InputMaybe<Scalars['String']>;
};

/** Payload for overriding an advance appointment price */
export type AdvanceAppointmentPricesInput = {
  /** The ID of the appointment type */
  appointment_type_id?: InputMaybe<Scalars['ID']>;
  /** The ID of the price */
  id?: InputMaybe<Scalars['ID']>;
  /** The price of the appointment type */
  price?: InputMaybe<Scalars['String']>;
  /** The ID of the user */
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Information on the provider's affiliate abilities */
export type Affiliate = {
  __typename?: 'Affiliate';
  /** The LeadDyno ID of the affiliate */
  affiliate_id?: Maybe<Scalars['String']>;
  /** The referral URL of the affiliate */
  affiliate_url?: Maybe<Scalars['String']>;
  /** The URL of the affiliate's dashboard */
  dashboard_url?: Maybe<Scalars['String']>;
  /** Unique identifier of the affiliate */
  id: Scalars['ID'];
};

/** An allergy/sensitivity/preference for a client */
export type AllergySensitivity = {
  __typename?: 'AllergySensitivity';
  /** Enum field. Options: allergy, sensitivity, preference */
  category: Scalars['String'];
  /** Type of allergy or like/dislike for preference */
  category_type?: Maybe<Scalars['String']>;
  /** Date/Time created */
  created_at: Scalars['String'];
  /** User who created this allergy */
  created_by?: Maybe<User>;
  /** The unique identifier of the allergy */
  id: Scalars['ID'];
  /**
   * If the allergy is current.
   * @deprecated Use status instead
   */
  is_current?: Maybe<Scalars['Boolean']>;
  /** The name of the allergy/sensitivity/preference */
  name?: Maybe<Scalars['String']>;
  /** The date of onset */
  onset_date?: Maybe<Scalars['String']>;
  /** Description of the reaction on the allergen */
  reaction?: Maybe<Scalars['String']>;
  /** The type of the reaction. Options are [allergy, adverse_reaction] */
  reaction_type?: Maybe<Scalars['String']>;
  /** The severity of the allergy */
  severity?: Maybe<Scalars['String']>;
  /** The allergy's current status. Options are [active, inactive, resolved] */
  status?: Maybe<Scalars['String']>;
  /** Date/Time last updated */
  updated_at?: Maybe<Scalars['String']>;
};

/** Announcements created by providers for client consumption */
export type Announcement = {
  __typename?: 'Announcement';
  /** If true, announcement is active */
  active: Scalars['Boolean'];
  /** file name of associated image */
  announcement_image_name?: Maybe<Scalars['String']>;
  /** URL of image associated with announcement */
  announcement_image_url?: Maybe<Scalars['String']>;
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** Announcement content(viewable by client) */
  description?: Maybe<Scalars['String']>;
  /** Unique identifier of the announcement */
  id: Scalars['ID'];
  /** Date and time announcement active status was changed */
  last_toggled_at?: Maybe<Scalars['String']>;
  /** User that updated active status of this announcement most recently */
  last_toggled_by?: Maybe<User>;
  /** Name of announcement(only viewable by provider) */
  name?: Maybe<Scalars['String']>;
  /** Title of announcement(viewable by client) */
  title?: Maybe<Scalars['String']>;
  /** User that created this announcement */
  user?: Maybe<User>;
  /** Comma separated list of user group ids associated with this announcement */
  user_group_ids?: Maybe<Scalars['String']>;
  /** Comma separated list of user group names associated with this announcement */
  user_group_names?: Maybe<Scalars['String']>;
};

/** Announcement image upload */
export type AnnouncementImageUpload = {
  /** The announcement image */
  image?: InputMaybe<Scalars['Upload']>;
};

/** A created API Key */
export type ApiKey = {
  __typename?: 'ApiKey';
  /** The datetime the API Key was created */
  created_at: Scalars['String'];
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** Upon the initial creation of the key, this field displays the actual key to be used to authenticate. */
  displayable_key?: Maybe<Scalars['String']>;
  /** Unique identifier of the key */
  id: Scalars['ID'];
  /** A user-chosen name for the API key. */
  name?: Maybe<Scalars['String']>;
};

/** API Key sorting enum */
export enum ApiKeyOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC'
}

/** An Apple Health Sync */
export type AppleHealth = {
  __typename?: 'AppleHealth';
  /** The unique identifier of the apple health */
  id: Scalars['ID'];
  /** The last time the apple health was synced */
  last_sync_date?: Maybe<Scalars['String']>;
};

/** A tag applied to a user */
export type AppliedTag = {
  __typename?: 'AppliedTag';
  /** The time the tag was applied */
  created_at: Scalars['String'];
  /** The unique identifier of the applied tag */
  id: Scalars['ID'];
  /** The tag applied */
  tag?: Maybe<Tag>;
  /** The unique identifier of the tag */
  tag_id?: Maybe<Scalars['String']>;
  /** The time the applied tag was last updated */
  updated_at: Scalars['String'];
  /** The tagged user */
  user?: Maybe<User>;
  /** The ID of the tagged user */
  user_id?: Maybe<Scalars['String']>;
};

/** An appointment object containing information about the appointment, including the attendees, date, location, and more. */
export type Appointment = {
  __typename?: 'Appointment';
  /** The actual length of the appointment (in minutes). Filled in by the provider after the appointment */
  actual_duration?: Maybe<Scalars['String']>;
  /** Get link to add appointment to google calendar */
  add_to_gcal_link?: Maybe<Scalars['String']>;
  /** The category of the appointment */
  appointment_category?: Maybe<Scalars['String']>;
  /** The number of people (both providers and attendees) who are in the appointment */
  appointment_inclusions_count?: Maybe<Scalars['Int']>;
  /** A label for the appointment */
  appointment_label?: Maybe<Scalars['String']>;
  /** the ID of the appointment location */
  appointment_location_id?: Maybe<Scalars['String']>;
  /** The type of the appointment */
  appointment_type?: Maybe<AppointmentType>;
  /** The ID of the type of appointment this is */
  appointment_type_id?: Maybe<Scalars['Int']>;
  /** List of assigned user groups to the group appointment */
  assigned_groups?: Maybe<Array<UserGroup>>;
  /** Client inclusions */
  attended_clients?: Maybe<Array<AppointmentInclusionType>>;
  /** All attendees for the appointment. */
  attendees: Array<User>;
  /** Pending Appointment inclusions */
  attendees_on_waitlist?: Maybe<Array<User>>;
  /** The backgroundColor color of the appointment */
  backgroundColor?: Maybe<Scalars['String']>;
  /** Returns true if the patient can reschedule the appointment */
  can_be_rescheduled?: Maybe<Scalars['Boolean']>;
  /** True if client able to cancel an appointment */
  can_client_cancel?: Maybe<Scalars['Boolean']>;
  /** True if client able to reschedule an appointment */
  can_client_reschedule?: Maybe<Scalars['Boolean']>;
  /** false if the client needs to confirm the appointment, and has not */
  client_confirmed?: Maybe<Scalars['Boolean']>;
  /** Whether the appointment updating on client side or not */
  client_updating?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider has confirmed the appointment or not */
  confirmed?: Maybe<Scalars['Boolean']>;
  /** True if appointment is locked */
  connected_chart_note_locked?: Maybe<Scalars['Boolean']>;
  /** The status of the connected chart note */
  connected_chart_note_string?: Maybe<Scalars['String']>;
  /** How the provider and attendees will connect (i.e In-Person or through the phone) */
  contact_type?: Maybe<Scalars['String']>;
  /** The ID of conversation related to the current appointment(only for group appts 10/2020) */
  conversation_id?: Maybe<Scalars['ID']>;
  /** The date and time that the appointment was created */
  created_at: Scalars['String'];
  /** The position of the appointment in the recurring series */
  current_position_in_recurring_series?: Maybe<Scalars['Int']>;
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** The date and time of the appointment */
  date?: Maybe<Scalars['String']>;
  /** default color of appointment based on confirmation/type */
  default_color?: Maybe<Scalars['String']>;
  /** The time the appointment was deleted. It is blank if the appointment is not deleted. */
  deleted_at?: Maybe<Scalars['String']>;
  /** The end time of the appointment */
  end?: Maybe<Scalars['String']>;
  /** The type of connection to an external calendar */
  external_id_type?: Maybe<Scalars['String']>;
  /** A URL to an external video chat site for the session */
  external_videochat_url?: Maybe<Scalars['String']>;
  /** The custom answers filled out by the booker of the appointment */
  filled_embed_form?: Maybe<FormAnswerGroup>;
  /** Form answer group associated with appointment */
  form_answer_group?: Maybe<FormAnswerGroup>;
  /** open tok token */
  generated_token?: Maybe<Scalars['String']>;
  /** When true, additional group charting fields are visibile in the Healthie UI */
  has_expanded_vbc_charting_fields?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the appointment */
  id: Scalars['ID'];
  /** ID of user that created of appointment */
  initiator_id?: Maybe<Scalars['ID']>;
  /** The status of whether this appointment is specifically meant to block availability */
  is_blocker?: Maybe<Scalars['Boolean']>;
  /** Indicates whether it's a group appointment */
  is_group?: Maybe<Scalars['Boolean']>;
  /** The status of whether the video chat uses Zoom or Healthie Default telehealth */
  is_zoom_chat?: Maybe<Scalars['Boolean']>;
  /** id of last conversation between provider and client in appointment */
  last_client_conversation_id?: Maybe<Scalars['ID']>;
  /** The length of the appointment (in minutes) */
  length?: Maybe<Scalars['Int']>;
  /** The plaintext location of the appointment (only used for in-person appointments) */
  location?: Maybe<Scalars['String']>;
  /** Location Resource */
  locationResource?: Maybe<Scalars['String']>;
  /** How many attendees can register for an appointment (only used for Group Appointments) */
  max_attendees?: Maybe<Scalars['String']>;
  /** a serialized JSON string of metadata */
  metadata?: Maybe<Scalars['JSON']>;
  /** Minimum time before the appointment when client can still cancel it */
  minimum_advance_cancel_time?: Maybe<Scalars['Int']>;
  /** Minimum time (in minutes) before the appointment when client can still reschedule it */
  minimum_advance_reschedule_time?: Maybe<Scalars['Int']>;
  /** Quick notes on the appointment (only visisble to providers) */
  notes?: Maybe<Scalars['String']>;
  /** The id of the provider */
  other_party_id?: Maybe<Scalars['Int']>;
  /** The number of times a patient rescheduled an appointment */
  patient_reschedule_count?: Maybe<Scalars['Int']>;
  /** The status of the appointment. Can be one of “Occurred”, “No-Show”, “Re-Scheduled”, “Cancelled” */
  pm_status?: Maybe<Scalars['String']>;
  /** The date and time the status of the appointment was last updated */
  pm_status_changed_at?: Maybe<Scalars['String']>;
  /** The ID of the user who last changed the status of the appointment, if available */
  pm_status_last_changed_by_id?: Maybe<Scalars['ID']>;
  /** Get the pricing info for this appointment */
  pricing_info?: Maybe<AppointmentPricingInfoType>;
  /** The provider for the appointment */
  provider?: Maybe<User>;
  /** Provider name */
  provider_name?: Maybe<Scalars['String']>;
  /** All providers for the appointment. */
  providers: Array<User>;
  /** The clients reason for scheduling the appointment */
  reason?: Maybe<Scalars['String']>;
  /** The related recurring appointment series */
  recurring_appointment?: Maybe<RecurringAppointment>;
  /**
   * The ID of the recurring appointment
   * @deprecated Use recurring_appointment instead
   */
  recurring_appointment_id?: Maybe<Scalars['String']>;
  /**
   * The status of whether this is a repeating appointment or not
   * @deprecated Use recurring_appointment instead
   */
  repeat?: Maybe<Scalars['Boolean']>;
  /**
   * How often to repeat the appointment (e.g Daily or Monthly)
   * @deprecated Use recurring_appointment instead
   */
  repeat_interval?: Maybe<Scalars['String']>;
  /**
   * How many times does the appointment repeat
   * @deprecated Use recurring_appointment instead
   */
  repeat_times?: Maybe<Scalars['Int']>;
  /** A requested payment for this appointment */
  requested_payment?: Maybe<RequestedPayment>;
  /** The ID of the user, used for the calendar */
  resourceId?: Maybe<Scalars['String']>;
  /** the ID of the room */
  room_id?: Maybe<Scalars['ID']>;
  /** A string containing info on how the appointment was scheduled */
  scheduled_by?: Maybe<Scalars['String']>;
  /** The OpenTok session ID for the appointment */
  session_id?: Maybe<Scalars['String']>;
  /** The start time of the appointment */
  start?: Maybe<Scalars['String']>;
  /** The font color of the appointment */
  textColor?: Maybe<Scalars['String']>;
  /** The status of whether the time of this appointment has been separated from the other recurring appointments in the series */
  time_recurring_override?: Maybe<Scalars['Boolean']>;
  /** Timezone abbreviation of the date of the appointment */
  timezone_abbr?: Maybe<Scalars['String']>;
  /** The title of the appointment */
  title?: Maybe<Scalars['String']>;
  /** Unauthenticated link to download an ICS file for the appointment */
  unauthenticated_ics_link?: Maybe<Scalars['String']>;
  /** The last date and time that the appointment was updated */
  updated_at?: Maybe<Scalars['String']>;
  /** Whether the appointment is through Zoom or not */
  use_zoom?: Maybe<Scalars['Boolean']>;
  /** The client in a 1:1 appointment */
  user?: Maybe<User>;
  /** The id of the client (if a 1:1 appointment). If a group appointment, will be nil */
  user_id?: Maybe<Scalars['Int']>;
  /** Zoom meeting info. Appointment should have a valid zoom link and the user should have the permission to access the meeting. Otherwise returns nil */
  zoom_appointment?: Maybe<ZoomAppointment>;
  /** URLs for Zoom cloud recordings for this appointment */
  zoom_cloud_recording_urls?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The dial-in info provided by zoom if appoint has zoom links.(separated by newline characters) */
  zoom_dial_in_info?: Maybe<Scalars['String']>;
  /** The dial-in info provided by zoom if appoint has zoom links.(separated by break tags) */
  zoom_dial_in_info_html?: Maybe<Scalars['String']>;
  /** An array of JSON objects containing the different dial in numbers for the Zoom call */
  zoom_dial_in_numbers_json?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The join link for other attendees of the Zoom call */
  zoom_join_url?: Maybe<Scalars['String']>;
  /** The Meeting ID for the Zoom call */
  zoom_meeting_id?: Maybe<Scalars['String']>;
  /** The host link to start the Zoom call */
  zoom_start_url?: Maybe<Scalars['String']>;
};


/** An appointment object containing information about the appointment, including the attendees, date, location, and more. */
export type AppointmentBackgroundColorArgs = {
  appointment_setting_updated_at?: InputMaybe<Scalars['String']>;
};


/** An appointment object containing information about the appointment, including the attendees, date, location, and more. */
export type AppointmentClient_ConfirmedArgs = {
  known_requires_client_confirmed?: InputMaybe<Scalars['Boolean']>;
};


/** An appointment object containing information about the appointment, including the attendees, date, location, and more. */
export type AppointmentPm_StatusArgs = {
  check_for_client_cancel?: InputMaybe<Scalars['Boolean']>;
};


/** An appointment object containing information about the appointment, including the attendees, date, location, and more. */
export type AppointmentProvidersArgs = {
  empty_unless_multiple?: InputMaybe<Scalars['Boolean']>;
};

/** Warnings to show provider before they book */
export type AppointmentBookingWarning = {
  __typename?: 'AppointmentBookingWarning';
  /** Category of warning (e.g no credits) */
  category?: Maybe<Scalars['String']>;
  /** Array of IDs of objects causing booking issues for a given category */
  potential_issue_ids?: Maybe<Array<Scalars['String']>>;
  /** Array of potential booking issues for a given category */
  potential_issues?: Maybe<Array<Scalars['String']>>;
  /** Subtitle describing the category */
  subtitle?: Maybe<Scalars['String']>;
};

/** An object containing appointment type credit change event */
export type AppointmentCreditChange = {
  __typename?: 'AppointmentCreditChange';
  /** The appointment related to credit change event */
  appointment?: Maybe<Appointment>;
  /** The time when credit change event was created */
  created_at: Scalars['String'];
  /** The event which caused credit change */
  credit_change_event: Scalars['String'];
  /** The specific action which caused credit change */
  credit_change_event_type?: Maybe<Scalars['String']>;
  /** The amount of credits after specific event */
  credit_quantity: Scalars['Int'];
  /** The unique identifier of the credit change */
  id: Scalars['ID'];
  /** The user who triggered credit change */
  initiator?: Maybe<User>;
  /** The offering related to credit change event */
  offering?: Maybe<Offering>;
};

/** Appointment Data */
export type AppointmentDataType = {
  __typename?: 'AppointmentDataType';
  /** Appointment Frequency */
  freq?: Maybe<AppointmentFrequencyDataType>;
  /** Appointment Month */
  month?: Maybe<Scalars['String']>;
};

/** Appointment Frequency Data */
export type AppointmentFrequencyDataType = {
  __typename?: 'AppointmentFrequencyDataType';
  /** Frequency of cancelled appointments */
  cancelled?: Maybe<Scalars['Int']>;
  /** Frequency of appointments with no status */
  no_status?: Maybe<Scalars['Int']>;
  /** Frequency of no-show appointments */
  noshow?: Maybe<Scalars['Int']>;
  /** Frequency of occurred appointments */
  occurred?: Maybe<Scalars['Int']>;
  /** Frequency of rescheduled appointments */
  rescheduled?: Maybe<Scalars['Int']>;
};

/** Provider/Client to Appointment connection */
export type AppointmentInclusionType = {
  __typename?: 'AppointmentInclusionType';
  /** The appointment the inclusion is connected to. */
  appointment?: Maybe<Appointment>;
  /** Indicate whether a group appointment attendee have taken part in the appointment */
  attended?: Maybe<Scalars['Boolean']>;
  /** Indicate if a group appointment attendee cancelled the appointment */
  cancelled?: Maybe<Scalars['Boolean']>;
  /** If the client has confirmed the appointment, or don't need to (THIS IS FIELD IS CURRENTLY USED ONLY FOR GROUP APPT's) */
  confirmed?: Maybe<Scalars['Boolean']>;
  /** The UUID of the appointment inclusion. Can be used in conjunction with appointment settings to allow unauthenticated users to modify an appointment. */
  external_uuid?: Maybe<Scalars['ID']>;
  /** The unique identifier of the appointment inclusion */
  id: Scalars['ID'];
  /** The datetime that the attendee joined the appointment */
  join_time?: Maybe<Scalars['String']>;
  /** The datetime that the attendee left the appointment */
  leave_time?: Maybe<Scalars['String']>;
  /** Attendee */
  user?: Maybe<User>;
  /**
   * Attendee ID
   * @deprecated Use `user` field
   */
  user_id?: Maybe<Scalars['ID']>;
};

/** A location where appointments are held */
export type AppointmentLocation = {
  __typename?: 'AppointmentLocation';
  /** Whether the client can select this location or not */
  clients_can_book: Scalars['Boolean'];
  /** Whether the location has any rooms */
  has_rooms?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the appointment */
  id: Scalars['ID'];
  /** The location (in plain text) */
  location?: Maybe<Scalars['String']>;
  /** The rooms at the location */
  rooms?: Maybe<Array<Room>>;
};

/** Payload for an appointment location */
export type AppointmentLocationInput = {
  /** If true, the location will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** If true, clients can book appointments at this location */
  clients_can_book?: InputMaybe<Scalars['Boolean']>;
  /** If true, this location has rooms */
  has_rooms?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the location */
  id?: InputMaybe<Scalars['ID']>;
  /** The graphql_name of the location */
  location?: InputMaybe<Scalars['String']>;
  /** The rooms at this location */
  rooms?: InputMaybe<Array<InputMaybe<RoomInput>>>;
};

/** Appointment sorting enum */
export enum AppointmentOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  DateAsc = 'DATE_ASC',
  DateDesc = 'DATE_DESC',
  Unsorted = 'UNSORTED',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

/** The appointment count for the specific day */
export type AppointmentPerDayData = {
  __typename?: 'AppointmentPerDayData';
  /** The object with the total count of appointments for each status */
  count?: Maybe<AppointmentFrequencyDataType>;
  /** The day we count appointments for */
  date?: Maybe<Scalars['String']>;
};

/** Appointments for the specific type and day */
export type AppointmentPerTypePerDayData = {
  __typename?: 'AppointmentPerTypePerDayData';
  /** The array containing the appointment count for each appointment status for the specific day */
  appointments?: Maybe<Array<AppointmentPerDayData>>;
  /** The name of the specific appointment type */
  name?: Maybe<Scalars['String']>;
};

/** The data type for the appointment count for each appointment type per user */
export type AppointmentPerTypePerUserData = {
  __typename?: 'AppointmentPerTypePerUserData';
  /** The array containing the appointment count for each appointment type for each appointment status for the specific day */
  appointment_types?: Maybe<Array<AppointmentPerTypePerDayData>>;
  /** The name of the specific user who we count appointments for */
  name?: Maybe<Scalars['String']>;
};

/** Appointments for each status for the specific day */
export type AppointmentPerUserData = {
  __typename?: 'AppointmentPerUserData';
  /** The array containing the appointment count for each appointment status for the specific day */
  appointments?: Maybe<Array<AppointmentPerDayData>>;
  /** The name of the provider who we count appointments for */
  name?: Maybe<Scalars['String']>;
};

/** Appointment pricing info */
export type AppointmentPricingInfoType = {
  __typename?: 'AppointmentPricingInfoType';
  /** CPT Code ID */
  cpt_code_id?: Maybe<Scalars['String']>;
  /** The price */
  price?: Maybe<Scalars['String']>;
  /** The units of the price */
  units?: Maybe<Scalars['String']>;
};

/** Appointment Setting options that a provider can customize */
export type AppointmentSetting = {
  __typename?: 'AppointmentSetting';
  /** Insurance plans that are accepted by the provider */
  accepted_insurance_plans?: Maybe<Array<AcceptedInsurancePlan>>;
  /** Whether or not providers will be able to set pricing per appointment type */
  allow_appointment_type_pricing?: Maybe<Scalars['Boolean']>;
  /** If true, clients will be able to cancel an appointment */
  allow_clients_to_cancel_appt?: Maybe<Scalars['Boolean']>;
  /** If true, clients will be able to reschedule an appointment */
  allow_clients_to_reschedule_appt: Scalars['Boolean'];
  /** When true, providers can specify external url (e.g., Doxy, VSee) for Video Call appointments. */
  allow_external_videochat_urls: Scalars['Boolean'];
  /** When true, a client can reschedule a past appointment (on the Web/API only) */
  allow_past_appointment_rescheduling: Scalars['Boolean'];
  /** Whether or not clients will have specific pricing for appointment types */
  allow_specific_client_pricing: Scalars['Boolean'];
  /** Whether or not providers will have specific pricing for appointment types */
  allow_specific_provider_pricing: Scalars['Boolean'];
  /** Always notify the provider when the client books */
  always_send_confirm_notification?: Maybe<Scalars['Boolean']>;
  /** Appointment Locations for this Appointment Setting */
  appointment_locations?: Maybe<Array<AppointmentLocation>>;
  /** Have different appointment confirmation emails for each appointment type */
  appointment_type_confirmed_email?: Maybe<Scalars['Boolean']>;
  /** Have different appointment reminder emails for each appointment type */
  appointment_type_reminder_email?: Maybe<Scalars['Boolean']>;
  /** When true, and when the appointment setting is associated to a specific appointment type, the reminder settings will override the provider's normal ones */
  appointment_type_reminder_override?: Maybe<Scalars['Boolean']>;
  /** Have different website booking emails for each appointment type */
  appointment_type_website_booking_email?: Maybe<Scalars['Boolean']>;
  /** Seperate confirmation emails for different appointment types */
  appt_type_confirmed_email?: Maybe<Scalars['Boolean']>;
  /** Seperate reminder emails for different appointment types */
  appt_type_reminder_email?: Maybe<Scalars['Boolean']>;
  /** Seperate website booking emails for different appointment types */
  appt_type_website_booking_email?: Maybe<Scalars['Boolean']>;
  /** Ask clients to confirm their appointment */
  ask_clients_to_confirm?: Maybe<Scalars['Boolean']>;
  /** If true, clients can confirm their appointment via text */
  ask_to_confirm_via_text?: Maybe<Scalars['Boolean']>;
  /** When true, after an appointment has been set as occurred, a CMS 1500 claim can be automatically created for the session */
  auto_create_cms1500?: Maybe<Scalars['Boolean']>;
  /** Auto-generate a payment request when an appointment is scheduled */
  auto_invoicing?: Maybe<Scalars['Boolean']>;
  /** When true, it will be automatically submitted to the clearinghouse on the following Friday at 11:59 PM */
  auto_submit_cms1500?: Maybe<Scalars['Boolean']>;
  /** Allow clients to book appointments at none, 20, 30, 60 intervals */
  booking_interval_restriction?: Maybe<Scalars['Int']>;
  /** The amount of minutes to maintain between appointments (prevent back to back appointments) */
  buffer?: Maybe<Scalars['String']>;
  /** The color schemes defined for this appointment setting */
  calendar_color_schemes?: Maybe<Array<CalendarColorScheme>>;
  /** Calendar interval */
  calendar_interval?: Maybe<Scalars['String']>;
  /** Text to display above the client's calendar within Healthie */
  calendar_text?: Maybe<Scalars['String']>;
  /** Message to show clients when they are not allowed to cancel */
  cant_cancel_message?: Maybe<Scalars['String']>;
  /** Message to show clients when they are not allowed to cancel */
  cant_reschedule_message?: Maybe<Scalars['String']>;
  /** Whether or not client with valid payment method will be charged for occured appointments */
  charge_for_occured_appts?: Maybe<Scalars['Boolean']>;
  /** If true, clients will be able to call to provider */
  client_should_call_provider?: Maybe<Scalars['Boolean']>;
  /** When false, the billing tab is hidden from clients */
  clients_have_billing?: Maybe<Scalars['Boolean']>;
  /** Confirm all client-created appointments by default */
  confirm_by_default?: Maybe<Scalars['Boolean']>;
  /** Contact type overrides for this appointment setting */
  contact_type_overrides?: Maybe<Array<ContactType>>;
  /** Show the group appointment form first */
  default_appt_form_to_group?: Maybe<Scalars['Boolean']>;
  /** The template selected will automatically appear when a new chart note is started */
  default_charting_template_id?: Maybe<Scalars['String']>;
  /** The template name selected */
  default_charting_template_name?: Maybe<Scalars['String']>;
  /** The form that should be pre-selected when creating a new group charting note */
  default_group_charting_template?: Maybe<CustomModuleForm>;
  /** Use Zoom for all telehealth appointments */
  default_to_zoom?: Maybe<Scalars['Boolean']>;
  /** Video service to use for telehealth appointments ('internal', 'zoom', or 'external') */
  default_video_service?: Maybe<Scalars['String']>;
  /** Prevent the client from rescheduling a past appointment with one of these statuses */
  disallowed_reschedulable_statuses?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The end time to show when setting weekly availability */
  end_time?: Maybe<Scalars['String']>;
  /** Facebook pixel code that runs when the client completes the embdedded scheduler/purchaser */
  fb_pixel?: Maybe<Scalars['String']>;
  /**
   * Assign a name to chart notes
   * @deprecated This now always returns true
   */
  give_notes_name?: Maybe<Scalars['Boolean']>;
  /** If true, hide insurance getting started info */
  hide_insurance_getting_started_info?: Maybe<Scalars['Boolean']>;
  /** Hide links to Healthie from appointment reminders */
  hide_link?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the setting */
  id: Scalars['ID'];
  /** When true, it will show the option to run an insurance eligibility check for a client */
  insurance_eligibility_integration?: Maybe<Scalars['Boolean']>;
  /** Whether or not to send invoice to client without a valid payment card/method */
  invoice_clients_without_payment_method?: Maybe<Scalars['Boolean']>;
  /** The maximum number of days in advance a client can book */
  max_days_in_future?: Maybe<Scalars['String']>;
  /** Maximum time a client must wait before being able to reschedule a past appointment */
  maximum_past_reschedule_time?: Maybe<Scalars['Int']>;
  /** Minimum time before the appointment when client still can cancel it (in minutes) */
  minimum_advance_cancel_time?: Maybe<Scalars['Int']>;
  /** Minimum time before the appointment when client still can reschedule it (in minutes) */
  minimum_advance_reschedule_time?: Maybe<Scalars['Int']>;
  /** Minimum time before the despired appointment type where client still can schedule it (in minutes) */
  minimum_advance_schedule_time?: Maybe<Scalars['Int']>;
  /** The minimum days in advance a client has to book */
  minimum_days_in_advance?: Maybe<Scalars['String']>;
  /** Minimum time a client must wait before being able to reschedule a past appointment */
  minimum_past_reschedule_time?: Maybe<Scalars['Int']>;
  /**
   * Either "even" or "hour" to restrict booking to even hours or half hours.
   * @deprecated Use booking_interval_restriction instead
   */
  only_book?: Maybe<Scalars['String']>;
  /**
   * Whether or not to restrict booking to even hours or half hours.
   * @deprecated Use booking_interval_restriction instead
   */
  only_book_even?: Maybe<Scalars['Boolean']>;
  /**
   * Whether or not to restrict booking to even hours or half hours.
   * @deprecated Use booking_interval_restriction instead
   */
  only_book_hour?: Maybe<Scalars['Boolean']>;
  /** Owner of this appointment_setting */
  owner?: Maybe<User>;
  /** The maximum number of times a patient can self reschedule */
  patient_reschedule_count_cap?: Maybe<Scalars['String']>;
  /** Appointment statuses that can be applied to an appointment. Includes default ones plus any custom */
  pm_statuses?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Prevent clients from booking an appointment */
  prevent_client_booking?: Maybe<Scalars['Boolean']>;
  /** Prevent clients from booking if they do not have the needed credit */
  prevent_no_credit_booking?: Maybe<Scalars['Boolean']>;
  /** When true, replies to automatic notifications will go to the provider */
  reply_to_provider?: Maybe<Scalars['Boolean']>;
  /** When true, providers and staff will always be asked to select an appointment location when scheduling, even if its a video chat. */
  require_selected_location_for_all_contact_types?: Maybe<Scalars['Boolean']>;
  /** The minimum number of days beyond the current appointment date that the patient can reschedule to */
  reschedule_max_days_before_date?: Maybe<Scalars['String']>;
  /** The maximum number of days beyond the current appointment date that the patient can reschedule to */
  reschedule_max_days_from_date?: Maybe<Scalars['String']>;
  /** Give clients their credit back when an appointment is cancelled */
  restore_credit_on_cancel?: Maybe<Scalars['Boolean']>;
  /** When true, clients are prevented from scheduling appointments the day of */
  same_day_appointments?: Maybe<Scalars['Boolean']>;
  /** When false, no appointment cancel emails are sent to patients. */
  send_appointment_cancellation_email?: Maybe<Scalars['Boolean']>;
  /** When false, no appointment update emails are sent to patients. */
  send_appointment_update_email?: Maybe<Scalars['Boolean']>;
  /** Send clients an email when a provider schedules an appointment */
  send_booking_notice?: Maybe<Scalars['Boolean']>;
  /** Send an email 5 minutes before a video chat starts */
  send_email_before_appointment?: Maybe<Scalars['Boolean']>;
  /** Send email reminder to complete intake forms two days before */
  send_intake_forms_reminder?: Maybe<Scalars['Boolean']>;
  /** Send a push notification 5 minutes before a video chat starts */
  send_push_before_appointment?: Maybe<Scalars['Boolean']>;
  /** Send an email reminder four days before the appointment */
  send_reminder_four_days_before?: Maybe<Scalars['Boolean']>;
  /** Send an email reminder one day before the appointment */
  send_reminder_one_day_before?: Maybe<Scalars['Boolean']>;
  /** Send an email reminder one hour before the appointment */
  send_reminder_one_hour_before?: Maybe<Scalars['Boolean']>;
  /** Send an email reminder three days before the appointment */
  send_reminder_three_days_before?: Maybe<Scalars['Boolean']>;
  /** Send an email reminder two days before the appointment */
  send_reminder_two_days_before?: Maybe<Scalars['Boolean']>;
  /** Send an email reminder two hours before the appointment */
  send_reminder_two_hours_before?: Maybe<Scalars['Boolean']>;
  /** Send a text reminder four days before the appointment */
  send_text_reminder_four_days_before?: Maybe<Scalars['Boolean']>;
  /** Send a text reminder one day before the appointment */
  send_text_reminder_one_day_before?: Maybe<Scalars['Boolean']>;
  /** Send a text reminder one hour before the appointment */
  send_text_reminder_one_hour_before?: Maybe<Scalars['Boolean']>;
  /** Send a text reminder three days before the appointment */
  send_text_reminder_three_days_before?: Maybe<Scalars['Boolean']>;
  /** Send a text reminder two days before the appointment */
  send_text_reminder_two_days_before?: Maybe<Scalars['Boolean']>;
  /** Send a text reminder two hours before the appointment */
  send_text_reminder_two_hours_before?: Maybe<Scalars['Boolean']>;
  /** When true, providers can set a default external link for video call sessions. */
  set_default_videochat_url?: Maybe<Scalars['Boolean']>;
  /** If True, provider will see Care Plans option on a Client profile page */
  show_care_plans?: Maybe<Scalars['Boolean']>;
  /** If true, show cms1500s */
  show_cms1500s?: Maybe<Scalars['Boolean']>;
  /** When false, the faxing tab on the left hand side is hidden from providers */
  show_faxes?: Maybe<Scalars['Boolean']>;
  /** If true, show the insurance authorization section on the clients profile */
  show_insurance_authorization?: Maybe<Scalars['Boolean']>;
  /** If true, show office ally */
  show_office_ally?: Maybe<Scalars['Boolean']>;
  /** If true, show superbills */
  show_superbills?: Maybe<Scalars['Boolean']>;
  /** Facebook pixel code that runs when the client starts the embdedded scheduler/purchaser */
  start_fb_pixel?: Maybe<Scalars['String']>;
  /** The start time to show when setting weekly availability */
  start_time?: Maybe<Scalars['String']>;
  /** Set different availability for each appointment type */
  times_by_appointment_type?: Maybe<Scalars['Boolean']>;
  /** Set different availability for each contact type */
  times_by_contact_type?: Maybe<Scalars['Boolean']>;
  /** Set different availability for each appointment location */
  times_by_location?: Maybe<Scalars['Boolean']>;
  /** The last date and time that the appointment setting was updated */
  updated_at?: Maybe<Scalars['String']>;
  /** Whether or not to use the client credit system */
  use_client_credit_system?: Maybe<Scalars['Boolean']>;
  /** If true, you can see where each client came from */
  use_client_sources?: Maybe<Scalars['Boolean']>;
  /** If true, clients will be placed in a waiting room instead of joining the Zoom call directly */
  use_zoom_waiting_room?: Maybe<Scalars['Boolean']>;
  /** The id of the user */
  user_id?: Maybe<Scalars['String']>;
  /** Default video url settings */
  video_url_default?: Maybe<VideoUrlDefault>;
};

/** The data for the appointment summary */
export type AppointmentSummaryData = {
  __typename?: 'AppointmentSummaryData';
  /** The array containing the appointment count for each appointment status for the specific day */
  appointment_history?: Maybe<Array<AppointmentPerDayData>>;
  /** The array containing the appointment count for each appointment status for each provider for the specific day */
  appointment_history_per_provider?: Maybe<Array<AppointmentPerUserData>>;
  /** The array containing the appointment count for each appointment status for each provider for each appointment type for the specific day */
  appointment_history_per_provider_and_type?: Maybe<Array<AppointmentPerTypePerUserData>>;
  /** The array containing the appointment count for each appointment status for each appointment type for the specific day */
  appointment_history_per_type?: Maybe<Array<AppointmentPerTypePerDayData>>;
  /** The count of appointments for each appointment type */
  appointments_per_type_count?: Maybe<Array<AppointmentTypeAppointmentCountData>>;
  /** The average amount of appointments per day */
  avg_per_day?: Maybe<Scalars['Int']>;
  /** The difference between the current average amount of appointments and the average count of appointments in prior period */
  avg_per_day_percent_diff?: Maybe<Scalars['Int']>;
  /** The busiest week day in selected period */
  busiest_days_of_week?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** When true, the data is in the process of being generated and stored in the cache. */
  cache_generation_in_progress?: Maybe<Scalars['Boolean']>;
  /** The difference in contrast to previous period in percents */
  percent_diff?: Maybe<Scalars['Int']>;
  /** The total appointment count */
  total_count?: Maybe<Scalars['Int']>;
};

/** An object containing information about the type of appointment */
export type AppointmentType = {
  __typename?: 'AppointmentType';
  /** The number of clients with advance pricing for this appointment type */
  advance_pricing_for_clients_count?: Maybe<Scalars['String']>;
  /** The number of providers with advance pricing for this appointment type */
  advance_pricing_for_providers_count?: Maybe<Scalars['String']>;
  /** The appointment setting associated with this appointment type. An associated appointment setting overrides the providers general one. */
  appointment_setting?: Maybe<AppointmentSetting>;
  /** The cpt code and units for this appointment type */
  appointment_type_cpt_code?: Maybe<AppointmentTypeCptCodeType>;
  /** When true, the appointment pricing will be automatically increase based on actual duration */
  auto_increase_charge_for_actual_duration?: Maybe<Scalars['Boolean']>;
  /** Is true if upcoming availability exists */
  availability_exists_for?: Maybe<Scalars['Boolean']>;
  /** List of available contact types for this appointment type */
  available_contact_types?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** When true, this appointment type is bookable by user groups associated through appointment_type_user_groups and appointment type is NOT bookable by ALL users */
  bookable_by_groups?: Maybe<Scalars['Boolean']>;
  /** user groups that can book this appointment type. Associated through appointment_type_user_groups */
  bookable_groups?: Maybe<Array<UserGroup>>;
  /** When true, this appointment type is bookable by users without a user group */
  bookable_without_group: Scalars['Boolean'];
  /** Checks to see if the client call to provider */
  client_call_provider?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can self-book this type of appointment */
  clients_can_book: Scalars['Boolean'];
  /** Checks to see if the client has enough credit to book */
  clients_have_credit?: Maybe<Scalars['Boolean']>;
  /** The date the Appointment Type was created */
  created_at: Scalars['String'];
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** If the provider's organization has this feature, this will customize the content of SMS reminder's Healthie sends. */
  custom_text_reminder_body?: Maybe<Scalars['String']>;
  /** Date time appointment type was deleted */
  deleted_at?: Maybe<Scalars['String']>;
  /** When true, the client will not be asked to add a reason when booking an appointment of this type */
  dont_ask_for_reason?: Maybe<Scalars['Boolean']>;
  /** ID of the embedded custom module form */
  embed_question_form_id?: Maybe<Scalars['String']>;
  /** All form requests which should be created after appointment */
  form_requests_after_appointment?: Maybe<Array<AppointmentTypeFormConnection>>;
  /** All form requests which should be created after appointment booking */
  form_requests_after_appointment_booking?: Maybe<Array<AppointmentTypeFormConnection>>;
  /** All form requests which should be created before appointment */
  form_requests_before_appointment?: Maybe<Array<AppointmentTypeFormConnection>>;
  /** Is true if group appointment available */
  has_available_group_appts?: Maybe<Scalars['Boolean']>;
  /** When true, this appointment type has specific appointment settings that override the general ones */
  has_specific_appointment_settings?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the appointment type */
  id: Scalars['ID'];
  /** The status of whether appointments of this types are group appointments or not */
  is_group: Scalars['Boolean'];
  /** The status of whether waitlist is enabled for an appointment or not */
  is_waitlist_enabled: Scalars['Boolean'];
  /** The length of the appointment type (in minutes) */
  length?: Maybe<Scalars['Int']>;
  /** the name of the appointment type */
  name?: Maybe<Scalars['String']>;
  /** A custom message to display if there are no available slots on a given day for an appointment type. */
  no_availability_message?: Maybe<Scalars['String']>;
  /** The position of the appointment type when shown in a list of other appointment types */
  position?: Maybe<Scalars['Int']>;
  /** The price and cpt_code_price */
  price_and_cpt_price?: Maybe<PriceAndCptPriceType>;
  /** The pricing for this appointment type */
  pricing?: Maybe<Scalars['String']>;
  /** Get the pricing info for this appointment type */
  pricing_info?: Maybe<AppointmentPricingInfoType>;
  /** Pricing option for this appointment type */
  pricing_option?: Maybe<Scalars['String']>;
  /** providers associated with appointment type */
  provider_appt_type_connections?: Maybe<Array<ProviderApptTypeConnection>>;
  /** When this setting is turned on, provider state licensing requirements will be enforced when clients try to schedule appointments. */
  require_in_state_clients?: Maybe<Scalars['Boolean']>;
  /** Whether or not appointment type should use specific providers */
  require_specific_providers: Scalars['Boolean'];
  /** position of appointment type when displayed in packages list */
  row_order?: Maybe<Scalars['String']>;
  /** A label that includes the length of the appointment */
  time_on_label?: Maybe<Scalars['String']>;
  /** The date the Appointment Type was updated */
  updated_at: Scalars['String'];
  /** The user group associated with this appointment type. */
  user_group?: Maybe<UserGroup>;
  /** The ID of the group clients are placed in after booking */
  user_group_id?: Maybe<Scalars['String']>;
  /** The creator of the appointment type */
  user_id?: Maybe<Scalars['Int']>;
  /** If provider state matches users or appointment type doesn't require state license restrictions. */
  valid_state_licensing_for?: Maybe<Scalars['Boolean']>;
};


/** An object containing information about the type of appointment */
export type AppointmentTypeAvailability_Exists_ForArgs = {
  appointment_location_id?: InputMaybe<Scalars['String']>;
  org_level?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['String']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** An object containing information about the type of appointment */
export type AppointmentTypeHas_Available_Group_ApptsArgs = {
  appointment_location_id?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['String']>;
};


/** An object containing information about the type of appointment */
export type AppointmentTypeValid_State_Licensing_ForArgs = {
  client_state_of_residence?: InputMaybe<Scalars['String']>;
  org_level?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['String']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

/** The count of appointments for each appointment type */
export type AppointmentTypeAppointmentCountData = {
  __typename?: 'AppointmentTypeAppointmentCountData';
  /** The unique identifier of the count */
  appointment_count?: Maybe<Scalars['Int']>;
  /** The name of the appointment type for which we count appointments for */
  name?: Maybe<Scalars['String']>;
};

/** Payload for an appointment setting */
export type AppointmentTypeAppointmentSettingInput = {
  /** If true, the appointment setting will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting allows appointment type pricing */
  allow_appointment_type_pricing?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting allows clients to cancel appointments */
  allow_clients_to_cancel_appt?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting allows clients to reschedule appointments */
  allow_clients_to_reschedule_appt?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting allows past appointment rescheduling */
  allow_past_appointment_rescheduling?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting allows specific client pricing */
  allow_specific_client_pricing?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting allows specific provider pricing */
  allow_specific_provider_pricing?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting overrides the appointment type reminder */
  appointment_type_reminder_override?: InputMaybe<Scalars['Boolean']>;
  /** The booking interval restriction for the appointment setting */
  booking_interval_restriction?: InputMaybe<Scalars['Int']>;
  /** The buffer time for the appointment setting */
  buffer?: InputMaybe<Scalars['String']>;
  /** Whether the appointment setting charges for occurred appointments */
  charge_for_occured_appts?: InputMaybe<Scalars['Boolean']>;
  /** The disallowed reschedulable statuses for the appointment setting */
  disallowed_reschedulable_statuses?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The ID of the appointment setting */
  id?: InputMaybe<Scalars['ID']>;
  /** Whether the appointment setting invoices clients without a payment method */
  invoice_clients_without_payment_method?: InputMaybe<Scalars['Boolean']>;
  /** The maximum number of days in the future when appointments can be scheduled */
  max_days_in_future?: InputMaybe<Scalars['String']>;
  /** The maximum number of minutes in the past that the patient can reschedule */
  maximum_past_reschedule_time?: InputMaybe<Scalars['Int']>;
  /** Prevents the patient from canceling too close the appointment time. In minutes */
  minimum_advance_cancel_time?: InputMaybe<Scalars['Int']>;
  /** Prevents the patient from rescheduling too close the appointment time. In minutes */
  minimum_advance_reschedule_time?: InputMaybe<Scalars['Int']>;
  /** Prevents the patient from scheduling too close to the desired appointment time. In minutes */
  minimum_advance_schedule_time?: InputMaybe<Scalars['Int']>;
  /** DEPRECATED: Use minimum_advance_schedule_time instead */
  minimum_days_in_advance?: InputMaybe<Scalars['String']>;
  /** The minimum number of minutes in the past that the patient can reschedule */
  minimum_past_reschedule_time?: InputMaybe<Scalars['Int']>;
  /** DEPRECATED: Use booking_interval_restriction instead */
  only_book?: InputMaybe<Scalars['String']>;
  /** DEPRECATED: Use booking_interval_restriction instead */
  only_book_even?: InputMaybe<Scalars['Boolean']>;
  /** DEPRECATED: Use booking_interval_restriction instead */
  only_book_hour?: InputMaybe<Scalars['Boolean']>;
  /** The maximum number of times a patient can reschedule an appointment */
  patient_reschedule_count_cap?: InputMaybe<Scalars['String']>;
  /** Whether the appointment setting prevents booking without credit */
  prevent_no_credit_booking?: InputMaybe<Scalars['Boolean']>;
  /** The pricing for the appointment setting */
  pricing?: InputMaybe<Scalars['String']>;
  /** The maximum number of days before the appointment that the patient can reschedule */
  reschedule_max_days_before_date?: InputMaybe<Scalars['String']>;
  /** The maximum number of days after the appointment that the patient can reschedule */
  reschedule_max_days_from_date?: InputMaybe<Scalars['String']>;
  /** Whether the appointment setting allows same day appointments */
  same_day_appointments?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting sends a booking notice */
  send_booking_notice?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting sends a reminder four days before the appointment */
  send_reminder_four_days_before?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting sends a reminder one day before the appointment */
  send_reminder_one_day_before?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting sends a reminder one hour before the appointment */
  send_reminder_one_hour_before?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting sends a reminder three days before the appointment */
  send_reminder_three_days_before?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting sends a reminder two days before the appointment */
  send_reminder_two_days_before?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting sends a reminder two hours before the appointment */
  send_reminder_two_hours_before?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting sends a text reminder four days before the appointment */
  send_text_reminder_four_days_before?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting sends a text reminder one day before the appointment */
  send_text_reminder_one_day_before?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting sends a text reminder one hour before the appointment */
  send_text_reminder_one_hour_before?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting sends a text reminder three days before the appointment */
  send_text_reminder_three_days_before?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting sends a text reminder two days before the appointment */
  send_text_reminder_two_days_before?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting sends a text reminder two hours before the appointment */
  send_text_reminder_two_hours_before?: InputMaybe<Scalars['Boolean']>;
  /** Whether the appointment setting uses the client credit system */
  use_client_credit_system?: InputMaybe<Scalars['Boolean']>;
};

/** Payload for a CPT code associated with an appointment type */
export type AppointmentTypeCptCode = {
  /** The ID of the CPT code */
  cpt_code_id?: InputMaybe<Scalars['String']>;
  /** The number of units for the CPT code */
  units?: InputMaybe<Scalars['String']>;
};

/** AppointmentTypeCptCode object */
export type AppointmentTypeCptCodeType = {
  __typename?: 'AppointmentTypeCptCodeType';
  /** Appointment Type ID */
  appointment_type_id: Scalars['ID'];
  /** CPT Code ID */
  cpt_code_id: Scalars['ID'];
  /** The unique identifier of the object */
  id: Scalars['ID'];
  /** Units */
  units?: Maybe<Scalars['String']>;
};

/** An object containing information the clients' remaining credit for a given appointment type */
export type AppointmentTypeCredit = {
  __typename?: 'AppointmentTypeCredit';
  /** The Appointment Type connected to the credit */
  appointment_type?: Maybe<AppointmentType>;
  /** the id of the appointment type */
  appointment_type_id?: Maybe<Scalars['String']>;
  /** An Alias of ID that makes creating the form easier */
  form_id?: Maybe<Scalars['String']>;
  /** The unique identifier of the credit */
  id?: Maybe<Scalars['ID']>;
  /** The quantity of the credit */
  quantity?: Maybe<Scalars['String']>;
  /** The id of the holder of the credit */
  user_id?: Maybe<Scalars['Int']>;
};

/** Payload for appointment type credit */
export type AppointmentTypeCreditInput = {
  /** The appointment type ID of the credit */
  appointment_type_id?: InputMaybe<Scalars['String']>;
  /** The ID of the credit */
  id?: InputMaybe<Scalars['ID']>;
  /** The quantity of the credit */
  quantity?: InputMaybe<Scalars['String']>;
};

/** An object containing event which should be taken before or after appointment */
export type AppointmentTypeFormConnection = {
  __typename?: 'AppointmentTypeFormConnection';
  /** ID of the form for the form completion request */
  custom_module_form?: Maybe<CustomModuleForm>;
  /** The unique identifier of the form */
  id: Scalars['ID'];
  /** Form requests will be sent before or after given interval, depends on `send_trigger` */
  interval?: Maybe<Scalars['ISO8601Duration']>;
  /** Determines when action should be taken(before or after appointment) */
  send_trigger?: Maybe<Scalars['String']>;
};

/** Payload for connecting an appointment type to a custom module form */
export type AppointmentTypeFormConnectionInput = {
  /** If true, the appointment type form connection will be destroyed */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the custom module form */
  custom_module_form_id?: InputMaybe<Scalars['ID']>;
  /** The ID of the appointment type form connection */
  id?: InputMaybe<Scalars['ID']>;
  /** Form requests will be sent before or after given interval, depends on `send_trigger` */
  interval?: InputMaybe<Scalars['ISO8601Duration']>;
};

/** Appointment Type sorting enum */
export enum AppointmentTypeOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  /** Sort ascending by the manual order set for Appointment Types on the list */
  PositionAsc = 'POSITION_ASC',
  /** Sort descending by the manual order set for Appointment Types on the list */
  PositionDesc = 'POSITION_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

/** Payload for an AttendedClient */
export type AttendedClientsInput = {
  /** If the client attended the event */
  attended?: InputMaybe<Scalars['Boolean']>;
  /** If the client cancelled the event */
  cancelled?: InputMaybe<Scalars['Boolean']>;
  /** If the client confirmed the event */
  confirmed?: InputMaybe<Scalars['Boolean']>;
  /** The unique identifier of the object */
  id?: InputMaybe<Scalars['ID']>;
  /** The ID of the user */
  user_id?: InputMaybe<Scalars['ID']>;
};

/** The auto task generators belonging to a specific user */
export type AutoTaskGenerator = {
  __typename?: 'AutoTaskGenerator';
  /** Category of task */
  category: Scalars['String'];
  /** The date and time that the task was created */
  created_at: Scalars['String'];
  /** The number of days the task is due from the date it was created */
  days_due_from_created_at?: Maybe<Scalars['Int']>;
  /** The unique identifier of the generator */
  id: Scalars['ID'];
  /** True if task is active */
  is_enabled: Scalars['Boolean'];
  /** Description of the number to check */
  number_description?: Maybe<Scalars['String']>;
  /** The number to check */
  number_to_check: Scalars['Float'];
  /** Description of the task */
  task_description: Scalars['String'];
  /** The last date and time that the task was updated */
  updated_at: Scalars['String'];
  /** The id of the user who creates the task */
  user_id?: Maybe<Scalars['String']>;
  /** The id of the user */
  user_id_for_task?: Maybe<Scalars['String']>;
};

/** The autoscored section for a filled form */
export type AutoscoredSectionType = {
  __typename?: 'AutoscoredSectionType';
  /** The key of the section */
  section_key?: Maybe<Scalars['String']>;
  /** The title of the section */
  section_title?: Maybe<Scalars['String']>;
  /** The value of the section */
  value?: Maybe<Scalars['Float']>;
};

/** An object containing availability ranges for a provider */
export type Availability = {
  __typename?: 'Availability';
  /** If not nil, the specific location the availability is for */
  appointment_location_id?: Maybe<Scalars['String']>;
  /** If not nil, the specific appointment type the availability is for */
  appointment_type_id?: Maybe<Scalars['Int']>;
  /** If not nil, the specific contact type the availability is for */
  contact_type_id?: Maybe<Scalars['Int']>;
  /** The 0-indexed day of the week the availability is on */
  day_of_week?: Maybe<Scalars['Int']>;
  /** Duration between range start and range end in hours and minutes. Example:(4h 20min) */
  duration_string?: Maybe<Scalars['String']>;
  /** The end date of the availability */
  end_on?: Maybe<Scalars['String']>;
  /** The unique identifier of the availability */
  id: Scalars['ID'];
  /** The status of whether the availability repeats every week */
  is_repeating?: Maybe<Scalars['Boolean']>;
  /** The origin start of the availability */
  origin_start_date?: Maybe<Scalars['String']>;
  /** The end of the datetime of the availability */
  range_end?: Maybe<Scalars['String']>;
  /** The start of the datetime of the availability */
  range_start?: Maybe<Scalars['String']>;
  /** Availability ID */
  repeating_availability_id?: Maybe<Scalars['ID']>;
  /** The ID of the user, used for the calendar */
  resourceId?: Maybe<Scalars['String']>;
  /** Timezone abbreviation of the availability time range */
  timezone_abbr?: Maybe<Scalars['String']>;
  /** Provider this availability belongs to */
  user?: Maybe<User>;
  /** The ID of the person who the availability is for */
  user_id?: Maybe<Scalars['Int']>;
};

/** Payload for an availability */
export type AvailabilityInput = {
  /** The ID of the appointment location */
  appointment_location_id?: InputMaybe<Scalars['String']>;
  /** The ID of the appointment type */
  appointment_type_id?: InputMaybe<Scalars['String']>;
  /** The ID of the contact type */
  contact_type_id?: InputMaybe<Scalars['String']>;
  /** The day of the week for the availability */
  day_of_week?: InputMaybe<Scalars['Int']>;
  /** The end time for the availability */
  end_time?: InputMaybe<Scalars['String']>;
  /** Whether the availability is repeating */
  is_repeating?: InputMaybe<Scalars['Boolean']>;
  /** The end of the availability range */
  range_end?: InputMaybe<Scalars['String']>;
  /** The start of the availability range */
  range_start?: InputMaybe<Scalars['String']>;
  /** The time for the availability */
  time?: InputMaybe<Scalars['String']>;
  /** The timezone for the availability */
  timezone?: InputMaybe<Scalars['String']>;
  /** The ID of the user */
  user_id?: InputMaybe<Scalars['String']>;
};

/** Benefit associated with policy */
export type Benefit = {
  __typename?: 'Benefit';
  /** Enumerated field: Medical or Preventive. Describes the type of benefit */
  category?: Maybe<Scalars['String']>;
  /** Coinsurance percentage due */
  coinsurance?: Maybe<Scalars['String']>;
  /** Copay amount due */
  copay?: Maybe<Scalars['String']>;
  /** Deductible amount for the calendar year */
  deductible_calendar_year?: Maybe<Scalars['String']>;
  /** Deductible amount for the year to date */
  deductible_year_to_date?: Maybe<Scalars['String']>;
  /** The unique identifier of the benefit */
  id: Scalars['ID'];
  /** If true, benefits include telemedicine */
  telemedicine?: Maybe<Scalars['Boolean']>;
};

/** Payload for a benefit */
export type BenefitInput = {
  /** If true, the benefit will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The category of the benefit */
  category?: InputMaybe<Scalars['String']>;
  /** The coinsurance for the benefit */
  coinsurance?: InputMaybe<Scalars['String']>;
  /** The copay for the benefit */
  copay?: InputMaybe<Scalars['String']>;
  /** The deductible calendar year for the benefit */
  deductible_calendar_year?: InputMaybe<Scalars['String']>;
  /** The deductible year to date for the benefit */
  deductible_year_to_date?: InputMaybe<Scalars['String']>;
  /** The id of the benefit */
  id?: InputMaybe<Scalars['ID']>;
  /** Whether or not the benefit covers telemedicine */
  telemedicine?: InputMaybe<Scalars['Boolean']>;
};

/** Payload for a billing address to create a new Healthie subscription. */
export type BillingAddressInput = {
  /** The city */
  city?: InputMaybe<Scalars['String']>;
  /** The country code */
  country?: InputMaybe<Scalars['String']>;
  /** The first line of the address */
  line1?: InputMaybe<Scalars['String']>;
  /** The second line of the address */
  line2?: InputMaybe<Scalars['String']>;
  /** The zip code */
  postal_code?: InputMaybe<Scalars['String']>;
  /** The state */
  state?: InputMaybe<Scalars['String']>;
};

/** Billing */
export type BillingItem = {
  __typename?: 'BillingItem';
  /** amount of billing item */
  amount_paid?: Maybe<Scalars['String']>;
  /** Fee charged by stripe in cents */
  application_fee_amount?: Maybe<Scalars['String']>;
  /** card brand and last4 digits in the event of a failed charge */
  card_source?: Maybe<Scalars['String']>;
  /** the related charge backs */
  charge_backs?: Maybe<Array<ChargeBack>>;
  /** coupon code */
  coupon_code?: Maybe<Scalars['String']>;
  /** cpt codes super bills id */
  cpt_codes_super_bills_id?: Maybe<Scalars['ID']>;
  /** created at date */
  created_at: Scalars['String'];
  /** type of currency */
  currency?: Maybe<Scalars['String']>;
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** date payment was deleted */
  deleted_at?: Maybe<Scalars['String']>;
  /** Error message returned when payment failed */
  failure_reason?: Maybe<Scalars['String']>;
  /** Name of person who gifted this package(if applicable). Returns nil if not an offering or if not a gift */
  gifted_by?: Maybe<Scalars['String']>;
  /** Name of person who received this package as a gift. Returns nil if not an offering or if not a gift */
  gifted_to?: Maybe<Scalars['String']>;
  /** The unique identifier of the billing item */
  id: Scalars['ID'];
  /**
   * id of invoice
   * @deprecated Use requested_payment_id instead. This will return the same data as that
   */
  invoice_id?: Maybe<Scalars['ID']>;
  /** canceled indicator */
  is_canceled?: Maybe<Scalars['Boolean']>;
  /** Whether this payment is recurring */
  is_recurring?: Maybe<Scalars['Boolean']>;
  /** The index number of partial payment */
  item_position_number?: Maybe<Scalars['Int']>;
  /** The payment, after refunds are taken out */
  net_payment?: Maybe<Scalars['String']>;
  /** Nil unless the payment is an uncharged upcoming scheduled payment. Otherwise, is the payment amount that is scheduled to be charged */
  next_scheduled_payment_amount?: Maybe<Scalars['String']>;
  /** payment note */
  note?: Maybe<Scalars['String']>;
  /** offering connected to the payment */
  offering?: Maybe<Offering>;
  /** offering coupon connected to the payment */
  offering_coupon?: Maybe<OfferingCoupon>;
  /** id of coupon */
  offering_coupon_id?: Maybe<Scalars['ID']>;
  /** offering id */
  offering_id?: Maybe<Scalars['ID']>;
  /** original price */
  original_price?: Maybe<Scalars['String']>;
  /** payment medium */
  payment_medium?: Maybe<Scalars['ID']>;
  /** provider */
  provider?: Maybe<User>;
  /** receipt last sent at date */
  receipt_last_sent_at?: Maybe<Scalars['String']>;
  /** recipient of this payment */
  recipient?: Maybe<User>;
  /** id of receiver */
  recipient_id?: Maybe<Scalars['ID']>;
  /** recurring payment connected to the payment */
  recurring_payment?: Maybe<RecurringPayment>;
  /** amount of refund */
  refund_amount?: Maybe<Scalars['String']>;
  /** date of refund */
  refund_date?: Maybe<Scalars['String']>;
  /** the related refundings */
  refund_items?: Maybe<Array<RefundItem>>;
  /** Individual responsible for payment. If user_id, user exists in Healthie, if not, individual doesn't have a Healthie account */
  requested_payer?: Maybe<RequestedPayer>;
  /** the connected requested payment */
  requested_payment?: Maybe<RequestedPayment>;
  /** id of requested payment (we call them invoices in our UI) */
  requested_payment_id?: Maybe<Scalars['ID']>;
  /** sender of this payment */
  sender?: Maybe<User>;
  /** id of sender */
  sender_id?: Maybe<Scalars['ID']>;
  /** The description text to show for the payment */
  shown_description?: Maybe<Scalars['String']>;
  /** The note text to show for the payment */
  shown_note?: Maybe<Scalars['String']>;
  /** Enum status of billing item succeeded/failed */
  state?: Maybe<Scalars['String']>;
  /** id of stripe charge */
  stripe_charge_id?: Maybe<Scalars['ID']>;
  /** A JSON hash containing information on why Stripe was unable to process a charge */
  stripe_error?: Maybe<Scalars['String']>;
  /** if a failed payment is retried successfully then this will reference that successful payment */
  successful_retried_payment?: Maybe<BillingItem>;
  /** updated at date */
  updated_at?: Maybe<Scalars['String']>;
  /** User Package Selection connected to this payment */
  user_package_selection?: Maybe<UserPackageSelection>;
};

/** BillingItem sorting enum */
export enum BillingItemOrderKeys {
  AmountPaidAsc = 'AMOUNT_PAID_ASC',
  AmountPaidDesc = 'AMOUNT_PAID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  /** Sort by the payment medium ascending */
  MethodAsc = 'METHOD_ASC',
  /** Sort by the payment medium descending */
  MethodDesc = 'METHOD_DESC',
  PatientFirstNameAsc = 'PATIENT_FIRST_NAME_ASC',
  PatientFirstNameDesc = 'PATIENT_FIRST_NAME_DESC',
  ProviderFirstNameAsc = 'PROVIDER_FIRST_NAME_ASC',
  ProviderFirstNameDesc = 'PROVIDER_FIRST_NAME_DESC',
  StateAsc = 'STATE_ASC',
  StateDesc = 'STATE_DESC'
}

/** Body Report is a sub category of a HealthAssessment */
export type BodyReport = {
  __typename?: 'BodyReport';
  /** amr of user */
  amr?: Maybe<Scalars['String']>;
  /** bmi of user */
  bmi?: Maybe<Scalars['String']>;
  /** body_fat_percent of user */
  body_fat_percent?: Maybe<Scalars['String']>;
  /** body_weight of user */
  body_weight?: Maybe<Scalars['String']>;
  /** c_bmi of user */
  c_bmi?: Maybe<Scalars['String']>;
  /** fat_mass of user */
  fat_mass?: Maybe<Scalars['String']>;
  /** lean_body_mass of user */
  lean_body_mass?: Maybe<Scalars['String']>;
  /** rmr of user */
  rmr?: Maybe<Scalars['String']>;
};

/** Brand options that a client can customize */
export type Brand = {
  __typename?: 'Brand';
  /** Brand Owner's about description */
  about_description?: Maybe<Scalars['String']>;
  /** Brand Owner's bg color */
  bg_color?: Maybe<Scalars['String']>;
  /** Brand Owner's brand email */
  brand_email?: Maybe<Scalars['String']>;
  /** Name of provider's brand */
  brand_name?: Maybe<Scalars['String']>;
  /** Owner of this brand */
  brand_owner?: Maybe<User>;
  /** Whether or not brand owner has practice plus */
  brand_owner_has_practice_plus?: Maybe<Scalars['Boolean']>;
  /** Whether or not brand owner has whitelabel */
  brand_owner_has_whitelabel?: Maybe<Scalars['Boolean']>;
  /** Brand Owner's brand phone */
  brand_phone?: Maybe<Scalars['String']>;
  /** Brand Owner's contact info */
  contact_description?: Maybe<Scalars['String']>;
  /** Custom sign in path for provider with practice plus */
  custom_sign_in_path?: Maybe<Scalars['String']>;
  /** Whether or not we should display the header text of a package embed */
  display_embed_title?: Maybe<Scalars['Boolean']>;
  /** Brand Owner's display name */
  display_name?: Maybe<Scalars['String']>;
  /** Whether or not we should display the package image on embed and sharing link pages */
  display_package_image?: Maybe<Scalars['Boolean']>;
  /** Brand Owner's email background color */
  email_background_color?: Maybe<Scalars['String']>;
  /** The primary color that will use to customize a customer's embed process */
  embed_primary_color?: Maybe<Scalars['String']>;
  /** URL to a hosted stylesheet that will apply to Embeddable Layout */
  embeddable_layout_css_url?: Maybe<Scalars['String']>;
  /** Brand Owner's Facebook link */
  facebook?: Maybe<Scalars['String']>;
  /** Brand Owner's font color of choice */
  font_color?: Maybe<Scalars['String']>;
  /** The brand's Universal GA ID */
  ga_id?: Maybe<Scalars['String']>;
  /** The brand's Google Tag Manager ID */
  gtm_id?: Maybe<Scalars['String']>;
  /** The unique identifier of the brand */
  id: Scalars['ID'];
  /** Brand Owner's Instagram link */
  instagram?: Maybe<Scalars['String']>;
  /** Custom HTML that replaces the content on the standard intake flow completed screen */
  intake_completed_html?: Maybe<Scalars['String']>;
  /** Brand owner's logo */
  logo?: Maybe<Scalars['Upload']>;
  /** Brand Owner's logo */
  logo_file_name?: Maybe<Scalars['String']>;
  /** The URL to the logo */
  logo_url?: Maybe<Scalars['String']>;
  /** URL to a hosted stylesheet that will apply to Main Layout */
  main_layout_css_url?: Maybe<Scalars['String']>;
  /** Brand Owner's selected color */
  selected_color?: Maybe<Scalars['String']>;
  /** Brand Owner's slogan */
  slogan?: Maybe<Scalars['String']>;
  /** Brand Owner's tab accent color */
  tab_accent_color?: Maybe<Scalars['String']>;
  /** Brand Owner's credentials */
  titles?: Maybe<Scalars['String']>;
  /** Brand Owner's Twitter link */
  twitter?: Maybe<Scalars['String']>;
  /** ID of Brand Owner */
  user_id?: Maybe<Scalars['String']>;
  /** Brand Owner's website link */
  website?: Maybe<Scalars['String']>;
};

/** Info for authentication pages for either a dietitian or partner */
export type BrandInfo = {
  __typename?: 'BrandInfo';
  /** Brand Owner's logo */
  image_url?: Maybe<Scalars['String']>;
  /** Name of the partner */
  name?: Maybe<Scalars['String']>;
  /** The brand associated with provider/partner */
  partner_brand?: Maybe<Brand>;
  /** if false the client signup tab is not shown */
  show_client_tab?: Maybe<Scalars['Boolean']>;
  /** if false the client signup tab is not shown */
  show_provider_tab?: Maybe<Scalars['Boolean']>;
  /** Header for the sign up page */
  sign_up_header?: Maybe<Scalars['String']>;
  /** Header for the sign up page */
  sign_up_text?: Maybe<Scalars['String']>;
  /** Custom HTML to be placed at the bottom of signup */
  signup_footer?: Maybe<Scalars['String']>;
  /** Unique code of the brand or provider */
  unique_code?: Maybe<Scalars['String']>;
  /** Whether the partner's users can use a username to sign in (defaults to false) */
  uses_username?: Maybe<Scalars['Boolean']>;
};

/** Payload for a new entry */
export type BulkEntryInput = {
  /** Check and either add to pre-existing average heart rate entry or create a new one */
  add_to_avg_heart_rate?: InputMaybe<Scalars['Boolean']>;
  /** The category of the entry */
  category?: InputMaybe<Scalars['String']>;
  /** Check for duplicates, currently only supported if third_party_source is apple_health */
  check_duplicates?: InputMaybe<Scalars['Boolean']>;
  /** The time the entry was created */
  created_at?: InputMaybe<Scalars['String']>;
  /** The description of the entry */
  description?: InputMaybe<Scalars['String']>;
  /** ED Post Hunger */
  ed_posthunger?: InputMaybe<Scalars['String']>;
  /** ED Pre Hunger */
  ed_prehunger?: InputMaybe<Scalars['String']>;
  /** The comma separated list of emotions */
  emotions?: InputMaybe<Scalars['String']>;
  /** If average of any type, value indicates amount of entries already included in average */
  entries_in_average?: InputMaybe<Scalars['String']>;
  /** Third party external ID associated with this entry */
  external_id?: InputMaybe<Scalars['String']>;
  /** Third party associated with the external ID on this entry. Option currently supported is 'AppleHealth' */
  external_id_type?: InputMaybe<Scalars['String']>;
  /** The image associated with the entry */
  image?: InputMaybe<Scalars['Upload']>;
  /** The base64 encoded image string */
  image_string?: InputMaybe<Scalars['String']>;
  /** The statistic associated with the metric entry */
  metric_stat?: InputMaybe<Scalars['String']>;
  /** The percieved hungriness */
  percieved_hungriness?: InputMaybe<Scalars['String']>;
  /** The reflection on the entry */
  reflection?: InputMaybe<Scalars['String']>;
  /** The list of subentries associated with this entry */
  subentries?: InputMaybe<Array<InputMaybe<SubentryInput>>>;
  /** Options are apple_health, google_fit, or fitbit */
  third_party_source?: InputMaybe<Scalars['String']>;
  /** One of MetricEntry, FoodEntry, WorkoutEntry, MirrorEntry, SleepEntry, NoteEntry, WaterIntakeEntry, PoopEntry, SymptomEntry */
  type?: InputMaybe<Scalars['String']>;
  /** The ID of the user that created the entry */
  user_id?: InputMaybe<Scalars['String']>;
};

/** A Calendar Color Scheme */
export type CalendarColorScheme = {
  __typename?: 'CalendarColorScheme';
  /** Course ID of benefit */
  appointment_setting_id?: Maybe<Scalars['String']>;
  /** The category to color code by */
  color_code_by?: Maybe<Scalars['String']>;
  /** Color code options that make up this color scheme */
  color_codes?: Maybe<Array<ColorCode>>;
  /** The default color (in case the subcategory conditions are not met) */
  default_color?: Maybe<Scalars['String']>;
  /** The unique identifier of the scheme */
  id: Scalars['ID'];
  /** The ID of the connected user */
  user_id?: Maybe<Scalars['String']>;
};

/** Payload for a calendar color scheme */
export type CalendarColorSchemeInput = {
  /** If true, the calendar color scheme will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The field, by which the color code is determined */
  color_code_by?: InputMaybe<Scalars['String']>;
  /** The color codes of the calendar color scheme */
  color_codes?: InputMaybe<Array<InputMaybe<ColorCodeInput>>>;
  /** The default color code */
  default_color?: InputMaybe<Scalars['String']>;
  /** The ID of the calendar color scheme */
  id?: InputMaybe<Scalars['ID']>;
};

/** View settings for provider calendar */
export type CalendarViewSetting = {
  __typename?: 'CalendarViewSetting';
  /** Filter appointments by status */
  appointment_status_filter: Scalars['String'];
  /** ID of appointment type to filter appointments */
  appointment_type_filter: Scalars['ID'];
  /** Filter availabilities by contact type */
  availability_contact_type_filter?: Maybe<Scalars['String']>;
  /** ID of location to filter availabilities */
  availability_location_filter?: Maybe<Scalars['ID']>;
  /** ID of provider to filter availabilities */
  availability_provider_filter?: Maybe<Scalars['ID']>;
  /** ID of appointment type to filter availabilities */
  availablilty_appt_type_filter?: Maybe<Scalars['ID']>;
  /** ID of selected calendar colour scheme */
  calendar_color_scheme_filter?: Maybe<Scalars['ID']>;
  /** Selected calendar view */
  calendar_view_filter?: Maybe<Scalars['String']>;
  /** Filter appointments by client confirmation status */
  client_confirmation_status?: Maybe<Scalars['String']>;
  /** Selected sorting for documents(This is not a calendar setting. Related to documents area) */
  document_area_sorting?: Maybe<Scalars['String']>;
  /** Visibility of color schemes section */
  expand_color_schemes?: Maybe<Scalars['Boolean']>;
  /** Visibility of appointment filters section */
  expand_filter_appointments?: Maybe<Scalars['Boolean']>;
  /** Visibility of availability filters section */
  expand_filter_availabilities?: Maybe<Scalars['Boolean']>;
  /** Visibility of 'Filter Providers' section in organization calendar */
  expand_filter_by_providers?: Maybe<Scalars['Boolean']>;
  /** Visibility of 'View By Provider' section in organization calendar */
  expand_filter_providers?: Maybe<Scalars['Boolean']>;
  /** Visibility of show section */
  expand_show_availabilities?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the setting */
  id: Scalars['ID'];
  /** ID of location to filter appointments */
  location_filter?: Maybe<Scalars['ID']>;
  /** Visibility of one time availabilities in calendar */
  one_time_availabilities?: Maybe<Scalars['Boolean']>;
  /** Selected organization calendar view */
  org_calendar_view_filter?: Maybe<Scalars['String']>;
  /** Filter appointments by provider confirmation status */
  provider_confirmation_status?: Maybe<Scalars['String']>;
  /** ID of selected provider to filter availabilities in organization calendar */
  selected_availability_provider_filter?: Maybe<Scalars['ID']>;
  /** Comma separated IDs of providers to filter availabilities in organization calendar */
  selected_availability_providers_filter?: Maybe<Scalars['String']>;
  /** ID of selected provider in organization calendar */
  selected_provider_filter?: Maybe<Scalars['ID']>;
  /** Comma separated IDs of selected providers in organization calendar */
  selected_providers_filter?: Maybe<Scalars['String']>;
  /** Visibility of all appointments */
  show_appointments?: Maybe<Scalars['Boolean']>;
  /** Visibility of all availabilities */
  show_availabilities?: Maybe<Scalars['Boolean']>;
  /** Visibility of all synced appointments */
  show_synced_appointments?: Maybe<Scalars['Boolean']>;
  /** Selected calendar timezone */
  timezone?: Maybe<Scalars['String']>;
  /** Visibility of weekly availabilities in calendar */
  weekly_availabilities?: Maybe<Scalars['Boolean']>;
};

/** Call reference information associated with a policy */
export type CallReference = {
  __typename?: 'CallReference';
  /** Date call was made */
  date_recorded?: Maybe<Scalars['String']>;
  /** The unique identifier of the reference call */
  id: Scalars['ID'];
  /** Notes taken for this reference call */
  notes?: Maybe<Scalars['String']>;
  /** call reference number provided by insurance company */
  reference_number?: Maybe<Scalars['String']>;
  /** Time call was made */
  time_recorded?: Maybe<Scalars['String']>;
  /** The ID of the patient who the call reference is for */
  user_id?: Maybe<Scalars['Int']>;
};

/** Payload for a CallReference */
export type CallReferenceInput = {
  /** The date the call was recorded */
  date_recorded?: InputMaybe<Scalars['String']>;
  /** The ID of the CallReference */
  id?: InputMaybe<Scalars['ID']>;
  /** Notes about the call */
  notes?: InputMaybe<Scalars['String']>;
  /** The reference number for the call */
  reference_number?: InputMaybe<Scalars['String']>;
  /** The time the call was recorded */
  time_recorded?: InputMaybe<Scalars['String']>;
};

/** Marketing campaign (email/sms) sent to clients by provider */
export type Campaign = {
  __typename?: 'Campaign';
  /** Button label in email */
  button_text?: Maybe<Scalars['String']>;
  /** URL in button */
  button_url?: Maybe<Scalars['String']>;
  /** individual clients who have received this campaign */
  clients?: Maybe<Array<User>>;
  /** Email body */
  email_body?: Maybe<Scalars['String']>;
  /** Greeting used before email body */
  email_greeting?: Maybe<Scalars['String']>;
  /** Subject line of email */
  email_subject?: Maybe<Scalars['String']>;
  /** The unique identifier of the campaign */
  id: Scalars['ID'];
  /** If true, campaign hasn't been sent and has been saved as a draft */
  is_draft?: Maybe<Scalars['Boolean']>;
  /** If true, campaign (will be/has been) sent as an email */
  is_email: Scalars['Boolean'];
  /** If true, campaign (will be/has been) sent as an sms message */
  is_sms: Scalars['Boolean'];
  /** Name of a campaign labeled by provider */
  name?: Maybe<Scalars['String']>;
  /** SMS text message content */
  sms_body?: Maybe<Scalars['String']>;
  /** Groups of users with the same tags who have received this campaign */
  tags?: Maybe<Array<Tag>>;
  /** Name of a campaign labeled by provider */
  user?: Maybe<User>;
  /** User groups who have received this campaign */
  user_groups?: Maybe<Array<UserGroup>>;
};


/** Marketing campaign (email/sms) sent to clients by provider */
export type CampaignClientsArgs = {
  offset?: InputMaybe<Scalars['Int']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};

/** Info on connection to Candid Health */
export type CandidHealthConnection = {
  __typename?: 'CandidHealthConnection';
  /** The unique identifier of the connection */
  id: Scalars['ID'];
  /** True if the Candid connection is turned by user */
  is_enabled: Scalars['Boolean'];
};

/** A Care Plan */
export type CarePlan = {
  __typename?: 'CarePlan';
  /** The name of a user group or a patient the care plan has been assigned to */
  assigned_to?: Maybe<Scalars['String']>;
  /** Date of creation */
  created_at: Scalars['String'];
  /** Provider who created care plan */
  creator?: Maybe<User>;
  /** The care plan description */
  description?: Maybe<Scalars['String']>;
  /** Associated documents */
  documents: Array<Document>;
  /** Feature Toggle of the care plan */
  feature_toggle?: Maybe<FeatureToggle>;
  /** Associated goals */
  goals: Array<Goal>;
  /** Shows whether a group care plan(or a single one, if patient_id argument is not passed) is active for a given user. Make sure to pass patient_id argument if you need to check the status of a group care_plan for the given user */
  group_plan_is_active_for_given_user?: Maybe<Scalars['Boolean']>;
  /** Shows whether the patient or at least one user from the related group has not skipped email. We don't want to call care_plan_mailer if all of related users have skipped_email == true */
  has_users_with_real_emails?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the plan */
  id: Scalars['ID'];
  /** Care plan is active for the associated patient */
  is_active?: Maybe<Scalars['Boolean']>;
  /** Indicates whether a care plan is for a group */
  is_group?: Maybe<Scalars['Boolean']>;
  /** Care plan status */
  is_hidden: Scalars['Boolean'];
  /** Indicates if care plan can be used as a template and can be assigned on other users */
  is_template: Scalars['Boolean'];
  /** The name of care plan */
  name?: Maybe<Scalars['String']>;
  /** A user the care plan has been assigned to */
  patient?: Maybe<User>;
  /** Ordered (Ascending) associated recommendations */
  recommendations: Array<Recommendation>;
  /** Date when record was last updated */
  updated_at: Scalars['String'];
  /** A user group the care plan has been assigned to */
  user_group?: Maybe<UserGroup>;
};


/** A Care Plan */
export type CarePlanGroup_Plan_Is_Active_For_Given_UserArgs = {
  patient_id?: InputMaybe<Scalars['ID']>;
};

/** A connection between a care plan and a connectable item */
export type CarePlanConnection = {
  __typename?: 'CarePlanConnection';
  /** The ID of the connected care plan */
  care_plan_id?: Maybe<Scalars['ID']>;
  /** The ID of the connected item */
  connectable_id?: Maybe<Scalars['ID']>;
  /** The type of the connected item */
  connectable_type?: Maybe<Scalars['String']>;
  /** The unique identifier of the connection */
  id: Scalars['ID'];
};

/** CarePlan sorting enum */
export enum CarePlanOrderKeys {
  ClientFirstNameAsc = 'CLIENT_FIRST_NAME_ASC',
  ClientFirstNameDesc = 'CLIENT_FIRST_NAME_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  DeactivatedAsc = 'DEACTIVATED_ASC',
  DeactivatedDesc = 'DEACTIVATED_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC'
}

/** Info on connection to Change Health */
export type ChangeClaimSubmitter = {
  __typename?: 'ChangeClaimSubmitter';
  /** The unique identifier of the connection */
  id: Scalars['ID'];
  /** True if the Change connection is turned by user */
  is_enabled?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of ChangeDevicesAvailability */
export type ChangeDevicesAvailabilityInput = {
  appointment_id?: InputMaybe<Scalars['String']>;
  devices_unavailability?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of ChangeDevicesAvailability. */
export type ChangeDevicesAvailabilityPayload = {
  __typename?: 'ChangeDevicesAvailabilityPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** A Chargeback object, contains info on the dispute reason, status, and evidence submitted */
export type ChargeBack = {
  __typename?: 'ChargeBack';
  /** The payment in Healthie that was disputed */
  billing_item?: Maybe<BillingItem>;
  /** The date and time the chargeback was initiated */
  created_at: Scalars['String'];
  /** The amount that was disputed */
  disputed_amount?: Maybe<Scalars['String']>;
  /** Evidence to contest the chargeback */
  evidence?: Maybe<ChargeBackEvidence>;
  /** Fields that should be submitted for this chargeback */
  evidence_fields_to_submit?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The dispute fee charged by the payment processor */
  fee?: Maybe<Scalars['String']>;
  /** A formatted version of the reason */
  formatted_reason?: Maybe<Scalars['String']>;
  /** A formatted version of the status */
  formatted_status?: Maybe<Scalars['String']>;
  /** The unique identifier of the chargeback */
  id: Scalars['ID'];
  /** The reason for the chargeback. Matches Stripe's list of reasons at https://stripe.com/docs/api/disputes/object?lang=ruby */
  reason?: Maybe<Scalars['String']>;
  /** The date and time that evidence needs to be submitted by */
  response_required_by?: Maybe<Scalars['String']>;
  /** The status of the chargeback */
  status?: Maybe<Scalars['String']>;
  /** The total cost of the chargeback. Includes both the disputed amount and the fee */
  total_amount?: Maybe<Scalars['String']>;
  /** The date and time the chargeback was last updated */
  updated_at: Scalars['String'];
};

/** A Chargeback Evidence object, contains info to contest the dispute */
export type ChargeBackEvidence = {
  __typename?: 'ChargeBackEvidence';
  /** The billing address provided by the customer. */
  billing_address?: Maybe<Scalars['String']>;
  /** ID of the uploaded cancellation_policy. */
  cancellation_policy?: Maybe<Scalars['String']>;
  /** An explanation of how and when the customer was shown your refund policy prior to purchase. */
  cancellation_policy_disclosure?: Maybe<Scalars['String']>;
  /** A justification for why the customer’s subscription was not canceled. */
  cancellation_rebuttal?: Maybe<Scalars['String']>;
  /** ID of the uploaded customer_communication. */
  customer_communication?: Maybe<Scalars['String']>;
  /** The email address of the customer. */
  customer_email_address?: Maybe<Scalars['String']>;
  /** The name of the customer. */
  customer_name?: Maybe<Scalars['String']>;
  /** A description of the product or services that were sold. */
  product_description?: Maybe<Scalars['String']>;
  /** ID of the uploaded refund_policy. */
  refund_policy?: Maybe<Scalars['String']>;
  /** Documentation demonstrating that the customer was shown your refund policy prior to purchase. */
  refund_policy_disclosure?: Maybe<Scalars['String']>;
  /** A justification for why the customer is not entitled to a refund. */
  refund_refusal_explanation?: Maybe<Scalars['String']>;
  /** ID of the uploaded uncategorized_file. */
  uncategorized_file?: Maybe<Scalars['String']>;
  /** Any additional evidence or statements. */
  uncategorized_text?: Maybe<Scalars['String']>;
};

/** Payload for a chargeback evidence */
export type ChargeBackEvidenceInput = {
  /** The billing address of the customer */
  billing_address?: InputMaybe<Scalars['String']>;
  /** The cancellation policy file */
  cancellation_policy?: InputMaybe<Scalars['Upload']>;
  /** The disclosure of the cancellation policy */
  cancellation_policy_disclosure?: InputMaybe<Scalars['String']>;
  /** The rebuttal of the cancellation */
  cancellation_rebuttal?: InputMaybe<Scalars['String']>;
  /** The communication with the customer */
  customer_communication?: InputMaybe<Scalars['Upload']>;
  /** The email address of the customer */
  customer_email_address?: InputMaybe<Scalars['String']>;
  /** The name of the customer */
  customer_name?: InputMaybe<Scalars['String']>;
  /** The description of the product */
  product_description?: InputMaybe<Scalars['String']>;
  /** The refund policy file */
  refund_policy?: InputMaybe<Scalars['Upload']>;
  /** The disclosure of the refund policy */
  refund_policy_disclosure?: InputMaybe<Scalars['String']>;
  /** The explanation of the refund refusal */
  refund_refusal_explanation?: InputMaybe<Scalars['String']>;
  /** The uncategorized file related to the chargeback */
  uncategorized_file?: InputMaybe<Scalars['Upload']>;
  /** The uncategorized reason of the chargeback */
  uncategorized_text?: InputMaybe<Scalars['String']>;
};

/** Charge back sorting enum */
export enum ChargeBackOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

/** Charting Item */
export type ChartingItemType = {
  __typename?: 'ChartingItemType';
  /** The date of the item' creation */
  created_at: Scalars['String'];
  /** The name of the custom module form */
  custom_module_form_name?: Maybe<Scalars['String']>;
  /** The type of the document */
  document?: Maybe<Document>;
  /** The ID of the filler */
  filler_id?: Maybe<Scalars['ID']>;
  /** The type of the form answer group */
  form_answer_group?: Maybe<FormAnswerGroup>;
  /** The ID of the form answer group */
  form_answer_group_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the item */
  id: Scalars['ID'];
  /** Whether the item is a document */
  is_document?: Maybe<Scalars['Boolean']>;
  /** The name of the item */
  name?: Maybe<Scalars['String']>;
  /** The name of the provider */
  provider_name?: Maybe<Scalars['String']>;
  /** Whether the item is signed */
  signed?: Maybe<Scalars['Boolean']>;
  /** Whether the item is used for a charting */
  use_for_charting?: Maybe<Scalars['Boolean']>;
  /** Whether the item is used for a program */
  use_for_program?: Maybe<Scalars['Boolean']>;
};

/** A charting note addendum */
export type ChartingNoteAddendumType = {
  __typename?: 'ChartingNoteAddendumType';
  /** The content of the addendum */
  content?: Maybe<Scalars['String']>;
  /** The date the addendum was created */
  created_at: Scalars['String'];
  /** The form answer group the addendum belongs to */
  form_answer_group?: Maybe<FormAnswerGroup>;
  /** The unique identifier of the addendum */
  id: Scalars['ID'];
  /** A provider who created the addendum */
  user?: Maybe<User>;
};

/** Chat settings for a user */
export type ChatSetting = {
  __typename?: 'ChatSetting';
  /** The text of the auto welcome message */
  auto_welcome_text?: Maybe<Scalars['String']>;
  /** The text of the setting */
  content?: Maybe<Scalars['String']>;
  /** The end of scheduled autoreply period */
  end_date?: Maybe<Scalars['String']>;
  /** Whether a user should be prompted to confirm closing a chat */
  hide_close_confirmation?: Maybe<Scalars['Boolean']>;
  /** Whether a user should be prompted to confirm opening an org chat */
  hide_org_chat_confirmation?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the chat setting */
  id: Scalars['ID'];
  /** Whether the setting is active */
  is_active?: Maybe<Scalars['Boolean']>;
  /** Whether the setting is within recurring messaging period */
  is_recurring_active?: Maybe<Scalars['Boolean']>;
  /** Allow users to no add an end date */
  no_end_date?: Maybe<Scalars['Boolean']>;
  /** Whether user should receive notifications from chat while is_active is true */
  receive_notifications?: Maybe<Scalars['Boolean']>;
  /** Whether a user should receive notifications from chat while is_recurring_active is true */
  receive_notifications_recurring?: Maybe<Scalars['Boolean']>;
  /** Whether or not the recurring messages should be all day or for a time range */
  recurring_all_day?: Maybe<Scalars['Boolean']>;
  /** The content for recurring autoreplies */
  recurring_content?: Maybe<Scalars['String']>;
  /** Front-end friendly version of recurring days */
  recurring_days_data?: Maybe<RecurringDaysData>;
  /** The end of time range for recurring messages */
  recurring_end_time?: Maybe<Scalars['String']>;
  /** Either nil, all_day, or a string representation of a time range */
  recurring_friday?: Maybe<Scalars['String']>;
  /** Either nil, all_day, or a string representation of a time range */
  recurring_monday?: Maybe<Scalars['String']>;
  /** Either nil, all_day, or a string representation of a time range */
  recurring_saturday?: Maybe<Scalars['String']>;
  /** The start of time range for recurring messages */
  recurring_start_time?: Maybe<Scalars['String']>;
  /** Either nil, all_day, or a string representation of a time range  */
  recurring_sunday?: Maybe<Scalars['String']>;
  /** Either nil, all_day, or a string representation of a time range */
  recurring_thursday?: Maybe<Scalars['String']>;
  /** Either nil, all_day, or a string representation of a time range */
  recurring_tuesday?: Maybe<Scalars['String']>;
  /** Indicates whether or not recurring messaging has been set up */
  recurring_turned_on?: Maybe<Scalars['Boolean']>;
  /** Either nil, all_day, or a string representation of a time range */
  recurring_wednesday?: Maybe<Scalars['String']>;
  /** Whether or not a schedule message is set up */
  scheduled_turned_on?: Maybe<Scalars['Boolean']>;
  /** Whether to send an auto welcome message */
  send_auto_welcome?: Maybe<Scalars['Boolean']>;
  /** The beginning of scheduled autoreply period */
  start_date?: Maybe<Scalars['String']>;
  /** The ID of the setting owner */
  user_id?: Maybe<Scalars['ID']>;
};

/** Payload for a group of answers */
export type CheckoutFormAnswerGroupInput = {
  /** The id of the custom module form */
  custom_module_form_id?: InputMaybe<Scalars['String']>;
  /** The list of answers for the form */
  form_answers?: InputMaybe<Array<InputMaybe<CheckoutFormAnswerInput>>>;
  /** The id of the form answer group */
  id?: InputMaybe<Scalars['ID']>;
};

/** Payload for an answer */
export type CheckoutFormAnswerInput = {
  /** The answer */
  answer?: InputMaybe<Scalars['String']>;
  /** The ID of the custom module */
  conditional_custom_module_id?: InputMaybe<Scalars['ID']>;
  /** The ID of the custom module */
  custom_module_id?: InputMaybe<Scalars['String']>;
  /** The type of the filter */
  filter_type?: InputMaybe<Scalars['String']>;
  /** Unique ID for the answer */
  id?: InputMaybe<Scalars['ID']>;
  /** The label for the answer */
  label?: InputMaybe<Scalars['String']>;
  /** The ID of the user who created the answer */
  user_id?: InputMaybe<Scalars['String']>;
  /** The value to filter on */
  value_to_filter?: InputMaybe<Scalars['String']>;
};

/** A created API Key */
export type ClaimEligibilityCheck = {
  __typename?: 'ClaimEligibilityCheck';
  /** A string used to identify the eligibility check in the Change system. */
  control_number: Scalars['String'];
  /** The time the eligibility check was run */
  created_at: Scalars['String'];
  /** The unique identifier of the check */
  id: Scalars['ID'];
  /** The retrieved plan status */
  plan_status?: Maybe<Scalars['String']>;
  /** The policy associated with this check */
  policy?: Maybe<Policy>;
  /** The ID of the associated policy */
  policy_id: Scalars['ID'];
  /** A JSON object containing the eligibility details */
  response?: Maybe<Scalars['String']>;
};

/** Claim Eligibility Check Errors */
export type ClaimEligibilityCheckErrors = {
  __typename?: 'ClaimEligibilityCheckErrors';
  /** The error code */
  code?: Maybe<Scalars['String']>;
  /** The description of the error */
  description?: Maybe<Scalars['String']>;
};

/** Payload for an insurance plan */
export type ClientInsurancePlanInput = {
  /** The ID of the insurance plan */
  id?: InputMaybe<Scalars['String']>;
  /** The name of the payer */
  payer_name?: InputMaybe<Scalars['String']>;
};

/** Payload for a deletable location */
export type ClientLocationInput = {
  /** If true, the location will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The city */
  city?: InputMaybe<Scalars['String']>;
  /** The country code */
  country?: InputMaybe<Scalars['String']>;
  /** The ID of the location */
  id?: InputMaybe<Scalars['ID']>;
  /** The first line of the address */
  line1?: InputMaybe<Scalars['String']>;
  /** The second line of the address */
  line2?: InputMaybe<Scalars['String']>;
  /** The graphql_name of the location */
  name?: InputMaybe<Scalars['String']>;
  /** The state */
  state?: InputMaybe<Scalars['String']>;
  /** The zip code */
  zip?: InputMaybe<Scalars['String']>;
};

/** Payload for a client policy */
export type ClientPolicyInput = {
  /** If true, the policy will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The group number */
  group_num?: InputMaybe<Scalars['String']>;
  /** The date of birth of the policy holder */
  holder_dob?: InputMaybe<Scalars['String']>;
  /** The first name of the policy holder */
  holder_first?: InputMaybe<Scalars['String']>;
  /** The gender of the policy holder */
  holder_gender?: InputMaybe<Scalars['String']>;
  /** The last name of the policy holder */
  holder_last?: InputMaybe<Scalars['String']>;
  /** The location of the policy holder */
  holder_location?: InputMaybe<ClientLocationInput>;
  /** The middle initial of the policy holder */
  holder_mi?: InputMaybe<Scalars['String']>;
  /** The phone number of the policy holder */
  holder_phone?: InputMaybe<Scalars['String']>;
  /** The relationship of the policy holder to the client */
  holder_relationship?: InputMaybe<Scalars['String']>;
  /** The ID of the policy */
  id?: InputMaybe<Scalars['ID']>;
  /** The back of the insurance card */
  insurance_card_back?: InputMaybe<Scalars['Upload']>;
  /** The ID of the back of the insurance card */
  insurance_card_back_id?: InputMaybe<Scalars['String']>;
  /** The front of the insurance card */
  insurance_card_front?: InputMaybe<Scalars['Upload']>;
  /** The ID of the front of the insurance card */
  insurance_card_front_id?: InputMaybe<Scalars['String']>;
  /** The insurance plan */
  insurance_plan?: InputMaybe<ClientInsurancePlanInput>;
  /** The ID of the insurance plan */
  insurance_plan_id?: InputMaybe<Scalars['String']>;
  /** The name of the policy */
  name?: InputMaybe<Scalars['String']>;
  /** The policy number */
  num?: InputMaybe<Scalars['String']>;
  /** The location of the payer */
  payer_location?: InputMaybe<ClientLocationInput>;
  /** The policy-related phone number */
  policy_phone_number?: InputMaybe<Scalars['String']>;
  /** The priority type of the policy */
  priority_type?: InputMaybe<Scalars['String']>;
  /** Whether the policy holder has the same address as the client */
  same_address_as_client?: InputMaybe<Scalars['Boolean']>;
  /** The type of the policy */
  type_string?: InputMaybe<Scalars['String']>;
  /** The ID of the user */
  user_id?: InputMaybe<Scalars['String']>;
};

/** A client portal settings */
export type ClientPortalSetting = {
  __typename?: 'ClientPortalSetting';
  /** Chat with provider */
  chat_with_provider: Scalars['Boolean'];
  /** The unique identifier of the setting */
  id: Scalars['ID'];
  /** If the client can schedule appointments */
  schedule_appointments: Scalars['Boolean'];
  /** If the client can view and complete forms */
  view_and_complete_forms: Scalars['Boolean'];
  /** If the client can view and create goals */
  view_and_create_goals: Scalars['Boolean'];
  /** If the client can view and create journal entries */
  view_and_create_journal_entries: Scalars['Boolean'];
  /** If the client can view and pay bills */
  view_and_pay_bills: Scalars['Boolean'];
  /** If the client can view and purchase packages */
  view_and_purchase_packages: Scalars['Boolean'];
  /** If the client can view and upload documents */
  view_and_upload_documents: Scalars['Boolean'];
};

/** Payload for a client portal setting */
export type ClientPortalSettingInput = {
  /** Whether the client can chat with the provider */
  chat_with_provider?: InputMaybe<Scalars['Boolean']>;
  /** The id of the client portal setting */
  id?: InputMaybe<Scalars['ID']>;
  /** Whether the client can schedule appointments */
  schedule_appointments?: InputMaybe<Scalars['Boolean']>;
  /** Whether the client can view and complete forms */
  view_and_complete_forms?: InputMaybe<Scalars['Boolean']>;
  /** Whether the client can view and create goals */
  view_and_create_goals?: InputMaybe<Scalars['Boolean']>;
  /** Whether the client can view and create journal entries */
  view_and_create_journal_entries?: InputMaybe<Scalars['Boolean']>;
  /** Whether the client can view and pay bills */
  view_and_pay_bills?: InputMaybe<Scalars['Boolean']>;
  /** Whether the client can view and purchase packages */
  view_and_purchase_packages?: InputMaybe<Scalars['Boolean']>;
  /** Whether the client can view and upload documents */
  view_and_upload_documents?: InputMaybe<Scalars['Boolean']>;
};

/** Info about how a client was acquire */
export type ClientSource = {
  __typename?: 'ClientSource';
  /** The unique identifier of the source */
  id: Scalars['String'];
  /** Get readable source based on ref_type */
  readable_source?: Maybe<Scalars['String']>;
  /** The source of how a client was acquire: contain ID or a Other string */
  ref_source?: Maybe<Scalars['String']>;
  /** If ref_source eq 'Other', than it may contain custom string or NULL */
  ref_source_other?: Maybe<Scalars['String']>;
  /** The type of the source of how a client was acquire */
  ref_type?: Maybe<Scalars['String']>;
  /** related insurance */
  related_insurance?: Maybe<InsurancePlan>;
  /** related object */
  related_object?: Maybe<RelatedObject>;
  /** related object */
  related_object_name?: Maybe<Scalars['String']>;
};

/** Payload for a client source */
export type ClientSourceInput = {
  /** The ID of the client source */
  id?: InputMaybe<Scalars['ID']>;
  /** The source of the client */
  ref_source?: InputMaybe<Scalars['String']>;
  /** The other source of the client */
  ref_source_other?: InputMaybe<Scalars['String']>;
  /** The type of client source */
  ref_type?: InputMaybe<Scalars['String']>;
};

/** A CMS1500 claim */
export type Cms1500 = {
  __typename?: 'Cms1500';
  /** The provider agrees to accept assignment */
  accept_assignment?: Maybe<Scalars['Boolean']>;
  /** Notes */
  additional_text?: Maybe<Scalars['String']>;
  /** The insurance discount */
  adjustment?: Maybe<Scalars['String']>;
  /** The amount that the client paid towards the claim */
  amount_paid?: Maybe<Scalars['String']>;
  /** The amount that the insurance company reimbursed */
  amount_reimbursed?: Maybe<Scalars['String']>;
  /** The billing provider for the CMS1500 */
  billing_provider?: Maybe<Organization>;
  /** The ID of the Billing Provider */
  billing_provider_id?: Maybe<Scalars['String']>;
  /** Check numbers associated with a reimbursement from the claim. Imported via ERA */
  check_numbers?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Amount the client owes */
  client_responsibility?: Maybe<Scalars['String']>;
  /** True if the provider chose to remove client responsibility */
  client_responsibility_removed?: Maybe<Scalars['Boolean']>;
  /** True if the client's signature is on file */
  client_sig_on_file?: Maybe<Scalars['Boolean']>;
  /** Cms1500 policies in use for this claim */
  cms1500_policies?: Maybe<Array<Cms1500Policy>>;
  /** The client's copay for the claim */
  copay?: Maybe<Scalars['String']>;
  /** The amount of copay still owed */
  copay_still_owed?: Maybe<Scalars['String']>;
  /** The comma separated list of cpt codes names */
  cpt_code_names?: Maybe<Scalars['String']>;
  /** CPT codes in use for this claim */
  cpt_codes_cms1500s?: Maybe<Array<CptCodesCms1500>>;
  /** The creation date of the claim */
  created_at: Scalars['String'];
  /** The claim's date of service */
  date_of_service?: Maybe<Scalars['String']>;
  /** The ID of the rendering provider */
  dietitian_id?: Maybe<Scalars['String']>;
  /**
   * Estimated fee for the specific cpt code based on previous use
   * @deprecated Use CptCodesCms1500.last_fee_amount
   */
  estimated_cpt_fees_for_user?: Maybe<Array<CptCodesCms1500>>;
  /** Chart Note ID, if CMS1500 was exported from a Chart Note */
  form_answer_group_id?: Maybe<Scalars['ID']>;
  /** ICD codes in use for this claim */
  icd_codes_cms1500s?: Maybe<Array<IcdCodesCms1500>>;
  /** The unique identifier of the CMS1500 */
  id?: Maybe<Scalars['ID']>;
  /** When true, includes referrer information on the claim */
  include_referrer_information?: Maybe<Scalars['Boolean']>;
  /** True if the insured's signature is on file */
  insured_sig_on_file?: Maybe<Scalars['Boolean']>;
  /** The value of the nineteen field */
  nineteen_reserved?: Maybe<Scalars['String']>;
  /** The specific Organization Info in use on this claim */
  org_info?: Maybe<OrganizationInfo>;
  /** The ID of the Organization Info */
  organization_info_id?: Maybe<Scalars['String']>;
  /** The original reference number of the claim */
  orig_ref_number?: Maybe<Scalars['String']>;
  /** The date that the claim was paid out to employees/contractors */
  paid_out_at?: Maybe<Scalars['String']>;
  /** The patient for the CMS1500 */
  patient?: Maybe<User>;
  /** The patient's account number */
  patient_account_num?: Maybe<Scalars['String']>;
  /** The ID of the patient */
  patient_id?: Maybe<Scalars['String']>;
  /** The primary insurance plan name for the CMS1500 */
  primary_plan_name?: Maybe<Scalars['String']>;
  /** Rejected/Denied status reason */
  reasons?: Maybe<Scalars['ID']>;
  /** The referral info for the CMS1500 */
  referral_info?: Maybe<ReferralInfo>;
  /** The date that the claim was reimbursed */
  reimbursed_at?: Maybe<Scalars['String']>;
  /** The provider for the CMS1500 */
  rendering_provider?: Maybe<User>;
  /** The Rendering Provider's other id number */
  rendering_provider_other_id?: Maybe<Scalars['String']>;
  /** Other ID info in use for this render provider */
  rendering_provider_other_id_object?: Maybe<OtherIdNumber>;
  /** The resubmission code of the claim */
  resubmission_code?: Maybe<Scalars['String']>;
  /** The service location for the CMS1500 */
  service_location?: Maybe<Location>;
  /** The ID of the service location */
  service_location_id?: Maybe<Scalars['String']>;
  /** The status of the claim */
  status?: Maybe<Scalars['String']>;
  /** The value of the ten d field */
  tend_reserved?: Maybe<Scalars['String']>;
  /** Total amount the claim was billed for */
  total_charge?: Maybe<Scalars['String']>;
  /** True if the claim reimbursement info was updated via SFTP */
  updated_by_sftp?: Maybe<Scalars['Boolean']>;
  /** When true, uses the individual npi in all npi fields */
  use_indiv_npi?: Maybe<Scalars['Boolean']>;
};

/** Cms1500 sorting enum */
export enum Cms1500OrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  PatientLastNameAsc = 'PATIENT_LAST_NAME_ASC',
  PatientLastNameDesc = 'PATIENT_LAST_NAME_DESC',
  PrimaryPlanNameAsc = 'PRIMARY_PLAN_NAME_ASC',
  PrimaryPlanNameDesc = 'PRIMARY_PLAN_NAME_DESC',
  ServiceDateAsc = 'SERVICE_DATE_ASC',
  ServiceDateDesc = 'SERVICE_DATE_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC'
}

/** A CMS1500 policy */
export type Cms1500Policy = {
  __typename?: 'Cms1500Policy';
  /** The cms1500 for the cms1500 policy */
  cms1500?: Maybe<Cms1500>;
  /** The id of the cms1500 for the cms1500 policy */
  cms1500_id?: Maybe<Scalars['String']>;
  /** The unique identifier of the policy */
  id?: Maybe<Scalars['ID']>;
  /** The policy for the cms1500 policy */
  policy?: Maybe<Policy>;
  /** The policy id of the cms1500 for the cms1500 policy */
  policy_id?: Maybe<Scalars['String']>;
};

/** Payload for associating a policy with a CMS 1500 */
export type Cms1500PolicyInput = {
  /** If true, the join table record will be deleted upon submission */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the join table record */
  id?: InputMaybe<Scalars['ID']>;
  /** The associated policy */
  policy?: InputMaybe<PolicyInput>;
  /** The ID of the policy */
  policy_id?: InputMaybe<Scalars['String']>;
};

/** Payload for referring physician */
export type Cms1500ReferringPhysicianInput = {
  /** The full name of the referring physician */
  full_name?: InputMaybe<Scalars['String']>;
  /** The ID of the referring physician */
  id?: InputMaybe<Scalars['ID']>;
};

/** CognitiveStatus object */
export type CognitiveStatus = {
  __typename?: 'CognitiveStatus';
  /** Cognitive status */
  cognitive_status?: Maybe<Scalars['String']>;
  /** The unique identifier of the status */
  id: Scalars['ID'];
  /** Start date */
  start_date?: Maybe<Scalars['String']>;
  /** User id */
  user_id: Scalars['ID'];
};

/** A Calendar Color Scheme */
export type ColorCode = {
  __typename?: 'ColorCode';
  /** The ID of the calendar color scheme */
  calendar_color_scheme_id?: Maybe<Scalars['String']>;
  /** The item to code by */
  code_by_item?: Maybe<Scalars['String']>;
  /** The item name to code by */
  code_by_item_name?: Maybe<Scalars['String']>;
  /** The color */
  color?: Maybe<Scalars['String']>;
  /** The unique identifier of the color code */
  id: Scalars['ID'];
};

/** Payload for a ColorCode */
export type ColorCodeInput = {
  /** If the color code should be destroyed */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The code by item of the color code */
  code_by_item?: InputMaybe<Scalars['String']>;
  /** The color of the color code */
  color?: InputMaybe<Scalars['String']>;
  /** The ID of the color code */
  id?: InputMaybe<Scalars['ID']>;
};

/** A color code option */
export type ColorCodeOption = {
  __typename?: 'ColorCodeOption';
  /** The label of the color code option */
  label?: Maybe<Scalars['String']>;
  /** The value of the color code option */
  value?: Maybe<Scalars['String']>;
};

/** A comment of an entry */
export type Comment = {
  __typename?: 'Comment';
  /** User who created comment */
  author?: Maybe<User>;
  /** The content of this comment */
  content?: Maybe<Scalars['String']>;
  /** The date on which the comment was posted */
  created_at: Scalars['String'];
  /** User who created comment */
  creator?: Maybe<User>;
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** The id of the entry associated with the comment */
  entry_id?: Maybe<Scalars['String']>;
  /** The unique identifier of the comment */
  id: Scalars['ID'];
  /** Indicates when posting an emoji reaction */
  is_reaction: Scalars['Boolean'];
  /** User who created comment */
  poster?: Maybe<User>;
  /** the owner of the comment */
  user_id: Scalars['ID'];
};

/** a completed course item */
export type CompletedCourseItem = {
  __typename?: 'CompletedCourseItem';
  /** The ID of the completed item */
  completed_item_id?: Maybe<Scalars['ID']>;
  /** The type of the completed item */
  completed_item_type?: Maybe<Scalars['String']>;
  /** The ID of course related to the completed item */
  course_item_id?: Maybe<Scalars['ID']>;
  /** The date when the completed item was created */
  created_at: Scalars['String'];
  /** The unique identifier of the item */
  id: Scalars['ID'];
  /** The next item after the current item */
  next_item?: Maybe<CourseItem>;
  /** The date when the completed item was updated */
  updated_at: Scalars['String'];
  /** The ID of the user related to the completed item */
  user_id?: Maybe<Scalars['ID']>;
};

/** An object with information about how an onboarding item was completed */
export type CompletedOnboardingItem = {
  __typename?: 'CompletedOnboardingItem';
  /** The URL to go to to edit the attached object */
  attached_object_edit_url?: Maybe<Scalars['String']>;
  /** The most relevant date to display */
  date_to_show?: Maybe<Scalars['String']>;
  /** The unique identifier of the item */
  id: Scalars['ID'];
  /** The id of the object that completed the onboarding item */
  item_id?: Maybe<Scalars['String']>;
  /** The type of item that was completed */
  item_type?: Maybe<Scalars['String']>;
  /** The onboarding item that was completed */
  onboarding_item?: Maybe<OnboardingItem>;
  /** The ID of the onboarding item */
  onboarding_item_id?: Maybe<Scalars['String']>;
  /** Set to true if the user skipped this */
  skipped: Scalars['Boolean'];
  /** The completed (client) */
  user?: Maybe<User>;
  /** The ID of the completer (client) */
  user_id?: Maybe<Scalars['String']>;
  /** The URL to view */
  view_url?: Maybe<Scalars['String']>;
};

/** A object containing information about whether a specific contact type can be booked */
export type ContactType = {
  __typename?: 'ContactType';
  /** ID of the connected appointment setting */
  appointment_setting_id?: Maybe<Scalars['String']>;
  /** ID of the connected appointment type */
  appointment_type_id?: Maybe<Scalars['String']>;
  /** An Alias of ID that makes creating the form easier */
  form_id?: Maybe<Scalars['String']>;
  /** The unique identifier of the contact type */
  id?: Maybe<Scalars['ID']>;
  /** The graphql_name of the contact type */
  name?: Maybe<Scalars['String']>;
  /** Whether this contact type can be used */
  show: Scalars['Boolean'];
  /** The ID of the connected user */
  user_id?: Maybe<Scalars['String']>;
};

/** Payload for overriding a contact type */
export type ContactTypeOverride = {
  /** Whether to show this contact type */
  show: Scalars['Boolean'];
};

/** Payload for overriding a contact type */
export type ContactTypeOverrideInput = {
  /** The ID of the contact type override */
  id?: InputMaybe<Scalars['ID']>;
  /** The graphql_name of the contact type */
  name?: InputMaybe<Scalars['String']>;
  /** The position of the contact type */
  position?: InputMaybe<Scalars['Int']>;
  /** Whether or not to show the contact type */
  show?: InputMaybe<Scalars['Boolean']>;
};

/** An association between conversation holders */
export type Conversation = {
  __typename?: 'Conversation';
  /** The user who closed the conversation */
  closed_by?: Maybe<User>;
  /** The date the conversation was closed */
  closed_date?: Maybe<Scalars['String']>;
  /** Display default name for community chat */
  community_chat_prefix?: Maybe<Scalars['String']>;
  /** All ConversationMemberships associated with this conversation. */
  conversation_memberships: Array<ConversationMembership>;
  /** The number of users in the conversation */
  conversation_memberships_count?: Maybe<Scalars['Int']>;
  /** The time the Conversation was created */
  created_at: Scalars['String'];
  /** The conversation membership for the current user */
  current_user_conversation_membership?: Maybe<ConversationMembership>;
  /** ID of dietitian */
  dietitian_id?: Maybe<Scalars['ID']>;
  /** first four invitees to the conversation */
  first_four_invitees?: Maybe<Array<User>>;
  /** The unique identifier of the conversation */
  id: Scalars['ID'];
  /** Whether the conversation includes multiple clients */
  includes_multiple_clients?: Maybe<Scalars['Boolean']>;
  /** The invitees to the conversation */
  invitees?: Maybe<Array<User>>;
  /** Whether the conversation is hidden for the client */
  is_hidden_for_client?: Maybe<Scalars['Boolean']>;
  /** The content of the last note, with HTML stripped */
  last_message_content?: Maybe<Scalars['String']>;
  /** ID of the last note of conversation that was sent by the convo owner and viewed by the patient */
  last_note_viewed_id?: Maybe<Scalars['String']>;
  /** The subject of conversation */
  name?: Maybe<Scalars['String']>;
  /** All notes associated with this conversation. */
  notes: Array<Note>;
  /** owner of conversation */
  owner?: Maybe<User>;
  /** ID of patient */
  patient_id?: Maybe<Scalars['ID']>;
  /** The last time the conversation was updated */
  updated_at: Scalars['String'];
  /** invitees to the conversation */
  user_groups?: Maybe<Array<UserGroup>>;
};

/** ConversationMembership entry, returns basic info related to conversation participant */
export type ConversationMembership = {
  __typename?: 'ConversationMembership';
  /** Toggle for archive status */
  archived: Scalars['Boolean'];
  /** Conversation id of conversation membership */
  conversation_id?: Maybe<Scalars['ID']>;
  /** Role in conversation */
  conversation_role?: Maybe<Scalars['String']>;
  /** Conversation linked to this membership */
  convo?: Maybe<Conversation>;
  /** The time the conversation of the */
  convo_updated_at?: Maybe<User>;
  /** The date the Conversation Membership was created */
  created_at: Scalars['String'];
  /** The creator of this ConversationMembership */
  creator?: Maybe<User>;
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** URL to the avatar to display */
  display_avatar?: Maybe<Scalars['String']>;
  /** Either the name of the owner or conversation subject? */
  display_name?: Maybe<Scalars['String']>;
  /** The first name and last name initial of the owner */
  display_name_and_initial?: Maybe<Scalars['String']>;
  /** Display the other user first name for non group convos */
  display_other_user_first_name?: Maybe<Scalars['String']>;
  /** Display title or other user name for non group convos */
  display_other_user_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the membership */
  id: Scalars['ID'];
  /** Get last conversation task */
  last_task?: Maybe<Task>;
  /** Datetime membership was updated */
  updated_at: Scalars['String'];
  /** The creator of membership */
  user_id?: Maybe<Scalars['ID']>;
  /** The list of users in conversation (to use in place of display name */
  user_list_as_display_name?: Maybe<Scalars['String']>;
  /** Whether the conversation has been viewed */
  viewed: Scalars['Boolean'];
};


/** ConversationMembership entry, returns basic info related to conversation participant */
export type ConversationMembershipLast_TaskArgs = {
  notes_type?: InputMaybe<Scalars['String']>;
};

/** Conversation Membership sorting enum */
export enum ConversationMembershipOrderKeys {
  ConversationCreatedAtAsc = 'CONVERSATION_CREATED_AT_ASC',
  ConversationCreatedAtDesc = 'CONVERSATION_CREATED_AT_DESC',
  ConversationUpdatedAtAsc = 'CONVERSATION_UPDATED_AT_ASC',
  ConversationUpdatedAtDesc = 'CONVERSATION_UPDATED_AT_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

/** Autogenerated input type of ConvertToMetric */
export type ConvertToMetricInput = {
  convert_system: Scalars['String'];
  user_id: Scalars['ID'];
};

/** Autogenerated return type of ConvertToMetric. */
export type ConvertToMetricPayload = {
  __typename?: 'ConvertToMetricPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** A Course */
export type Course = {
  __typename?: 'Course';
  /** Whether the course is active */
  active: Scalars['Boolean'];
  /** Course clients */
  clients?: Maybe<Array<CourseMembership>>;
  /** Course group memberships for the course */
  clients_groups?: Maybe<Array<CourseGroup>>;
  /** The number of completed memberships in the course */
  completed_course_memberships_count?: Maybe<Scalars['Int']>;
  /** The benefits of a course */
  course_benefits: Array<CourseBenefit>;
  /** Course group memberships for the course */
  course_groups?: Maybe<Array<CourseGroup>>;
  /** The items of a course */
  course_items: Array<CourseItem>;
  /** Course memberships for the course */
  course_memberships?: Maybe<Array<CourseMembership>>;
  /** The number of members in the course */
  course_memberships_count?: Maybe<Scalars['String']>;
  /** type of the course */
  course_type: Scalars['String'];
  /** date course was created */
  created_at: Scalars['String'];
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** date course was deleted */
  deleted_at?: Maybe<Scalars['String']>;
  /** Description of course */
  description?: Maybe<Scalars['String']>;
  /** end date of the course based on included items */
  end_date?: Maybe<Scalars['String']>;
  /** HTML-formatted benefits of the course */
  formatted_benefits?: Maybe<Scalars['String']>;
  /** The unique identifier of the course */
  id: Scalars['ID'];
  /** The number of in progress memberships in the course */
  in_progress_course_memberships_count?: Maybe<Scalars['Int']>;
  /** late enrollment for fixed type courses */
  late_enroll?: Maybe<Scalars['Boolean']>;
  /** Name of course */
  name?: Maybe<Scalars['String']>;
  /** The number of not started memberships in the course */
  not_started_course_memberships_count?: Maybe<Scalars['Int']>;
  /** Offerings contains current course */
  offerings?: Maybe<Array<Offering>>;
  /** url for course image */
  preview_image_url?: Maybe<Scalars['String']>;
  /** url for course video */
  preview_video_content?: Maybe<Scalars['String']>;
  /** start date for fixed type course */
  start_date?: Maybe<Scalars['String']>;
  /** Ungrouped Course memberships for the course */
  ungrouped_course_memberships?: Maybe<Array<CourseMembership>>;
  /** date course was updated */
  updated_at?: Maybe<Scalars['String']>;
  /** Use category toggle */
  use_category?: Maybe<Scalars['Boolean']>;
  /** Use video label toggle */
  use_video_label?: Maybe<Scalars['Boolean']>;
  /** The user groups who have access to this course */
  user_groups: Array<UserGroup>;
  /** User id of course */
  user_id?: Maybe<Scalars['ID']>;
  /** The users who have access to this course */
  users: Array<User>;
  /** The progress of users who completed the course item */
  users_course_items_progress?: Maybe<Scalars['String']>;
  /** The users course progress */
  users_progress?: Maybe<Scalars['String']>;
};


/** A Course */
export type CourseClientsArgs = {
  course_status?: InputMaybe<Scalars['String']>;
};


/** A Course */
export type CourseClients_GroupsArgs = {
  course_status?: InputMaybe<Scalars['String']>;
};


/** A Course */
export type CourseCourse_ItemsArgs = {
  include_emails?: InputMaybe<Scalars['Boolean']>;
};

/** A Course Benefit */
export type CourseBenefit = {
  __typename?: 'CourseBenefit';
  /** Benefit of a course */
  benefit?: Maybe<Scalars['String']>;
  /** Course ID of benefit */
  course_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the benefit */
  id: Scalars['ID'];
};

/** Completion info for group participants enrolled to the course */
export type CourseCompletionInfoGroupsType = {
  __typename?: 'CourseCompletionInfoGroupsType';
  /** Count of users in the group which completed the course */
  completed?: Maybe<Scalars['Int']>;
  /** Group name */
  label?: Maybe<Scalars['String']>;
  /** Count of users in the group */
  total?: Maybe<Scalars['Int']>;
  /** Group participant ids */
  user_ids?: Maybe<Array<Scalars['String']>>;
  /** Group ID */
  value?: Maybe<Scalars['String']>;
};

/** Completion info for individual participants enrolled to the course */
export type CourseCompletionInfoIndividualsType = {
  __typename?: 'CourseCompletionInfoIndividualsType';
  /** User full_name */
  label?: Maybe<Scalars['String']>;
  /** User ID */
  value?: Maybe<Scalars['String']>;
};

/** Information based on course groups & individuals completion status */
export type CourseCompletionInfoType = {
  __typename?: 'CourseCompletionInfoType';
  /** Complete info for the course user_groups */
  groups?: Maybe<Array<CourseCompletionInfoGroupsType>>;
  /** Complete info for the course individual users */
  individuals?: Maybe<Array<CourseCompletionInfoIndividualsType>>;
};

/** Relationship between a user group and a course */
export type CourseGroup = {
  __typename?: 'CourseGroup';
  /** the course associated with this membership */
  course?: Maybe<Course>;
  /** The unique identifier of the group */
  id: Scalars['ID'];
  /** start of course */
  start_at?: Maybe<Scalars['String']>;
  /** When true, new group members start the course at the current time, overriding start_at */
  start_on_group_assignment: Scalars['Boolean'];
  /** the user group associated with this membership */
  user_group?: Maybe<UserGroup>;
};

/** A Course Item */
export type CourseItem = {
  __typename?: 'CourseItem';
  /** whether the attached object is a video form */
  attached_object_is_video?: Maybe<Scalars['Boolean']>;
  /** Shows if the current course item is blocked by an incomplete previous required item */
  blocked_by_prev_item?: Maybe<Scalars['Boolean']>;
  /** category of item */
  category?: Maybe<Scalars['String']>;
  /** Check if course item was completed by a client */
  completed_by_client?: Maybe<Scalars['Boolean']>;
  /** The completed course item */
  completed_course_item?: Maybe<CompletedCourseItem>;
  /** The number of members who completed the item */
  completed_memberships_count?: Maybe<Scalars['Int']>;
  /** Determines whether or not completion of the course item is necessary to access the next */
  completion_required_for_next_module: Scalars['Boolean'];
  /** The associated course */
  course?: Maybe<Course>;
  /** id of course associated with item */
  course_id?: Maybe<Scalars['ID']>;
  /** name of course that item belongs to */
  course_name?: Maybe<Scalars['String']>;
  /** when item was created */
  created_at: Scalars['String'];
  /** type of custom module of a course item (if app) */
  custom_module_type?: Maybe<Scalars['String']>;
  /** Shows if the current course item is blocked due to course membership date restriction */
  date_restricted?: Maybe<Scalars['Boolean']>;
  /** description of item */
  description?: Maybe<Scalars['String']>;
  /** The path to edit the item */
  edit_url?: Maybe<Scalars['String']>;
  /** This is the first required module that is incomplete, and will block items in higher positions */
  first_incomplete_required_module?: Maybe<CourseItem>;
  /** Course item has matrix field */
  has_matrix_field?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the item */
  id: Scalars['ID'];
  /** The ID of an incomplete form associated with the item */
  incomplete_course_item_id?: Maybe<Scalars['ID']>;
  /** id of item */
  item_id?: Maybe<Scalars['ID']>;
  /** type of course item */
  item_type?: Maybe<Scalars['String']>;
  /** name of item */
  name?: Maybe<Scalars['String']>;
  /** The next item in the course */
  next_item?: Maybe<CourseItem>;
  /** Check if course item is available to a client */
  not_available_for_client?: Maybe<Scalars['Boolean']>;
  /** Check if course item is available to any client */
  not_available_to_any_clients?: Maybe<Scalars['Boolean']>;
  /** The position of the course item type when shown in a list of other modules on the same day */
  position?: Maybe<Scalars['Int']>;
  /** The previous item in the course */
  prev_item?: Maybe<CourseItem>;
  /** scheduled release? */
  scheduled_release?: Maybe<Scalars['String']>;
  /** when item was updated */
  updated_at: Scalars['String'];
  /** id of user associated with item */
  user_id?: Maybe<Scalars['ID']>;
  /** The path to view the item */
  view_url?: Maybe<Scalars['String']>;
};


/** A Course Item */
export type CourseItemBlocked_By_Prev_ItemArgs = {
  course_membership_id?: InputMaybe<Scalars['ID']>;
};


/** A Course Item */
export type CourseItemCompleted_By_ClientArgs = {
  client_id?: InputMaybe<Scalars['ID']>;
};


/** A Course Item */
export type CourseItemCompleted_Course_ItemArgs = {
  course_membership_id?: InputMaybe<Scalars['ID']>;
};


/** A Course Item */
export type CourseItemDate_RestrictedArgs = {
  course_membership_id?: InputMaybe<Scalars['ID']>;
};


/** A Course Item */
export type CourseItemIncomplete_Course_Item_IdArgs = {
  course_membership_id?: InputMaybe<Scalars['ID']>;
};


/** A Course Item */
export type CourseItemNot_Available_For_ClientArgs = {
  client_id?: InputMaybe<Scalars['ID']>;
};

/** Course members input as a label-value pair */
export type CourseMembersInput = {
  /** Label for the value */
  label: Scalars['String'];
  /** Value for the label */
  value: Scalars['String'];
};

/** Relationship between a user and a course */
export type CourseMembership = {
  __typename?: 'CourseMembership';
  /** the course associated with this membership */
  course?: Maybe<Course>;
  /** id of course related to this membership */
  course_id?: Maybe<Scalars['ID']>;
  /** status of related course completion */
  course_status: Scalars['String'];
  /** date membership was created */
  created_at: Scalars['String'];
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** The unique identifier of the membership */
  id: Scalars['ID'];
  /** The next incomplete item */
  next_incomplete_item?: Maybe<CourseItem>;
  /** The incomplete item after the next incomplete item */
  next_next_incomplete_item?: Maybe<CourseItem>;
  /** start of course */
  start_at?: Maybe<Scalars['String']>;
  /** date membership was updated */
  updated_at: Scalars['String'];
  /** the user associated with this membership */
  user?: Maybe<User>;
  /** id of user related to this membership */
  user_id?: Maybe<Scalars['ID']>;
};

/** The CPT code */
export type CptCode = {
  __typename?: 'CptCode';
  /**
   * The CPT code category
   * @deprecated Always returns nil
   */
  category?: Maybe<Scalars['String']>;
  /** The CPT code */
  code?: Maybe<Scalars['String']>;
  /** The date when the CPT code was created */
  created_at: Scalars['String'];
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** The description of the CPT code */
  description?: Maybe<Scalars['String']>;
  /** The name of the CPT code for use in labels */
  display_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the CPT code */
  id: Scalars['ID'];
  /** Whether a CPT code marked as favorite */
  is_favorite?: Maybe<Scalars['Boolean']>;
  /** The last fee applied to this CPT code by a provider */
  last_fee?: Maybe<Scalars['Float']>;
  /** The date when the CPT code was updated */
  updated_at: Scalars['String'];
};


/** The CPT code */
export type CptCodeIs_FavoriteArgs = {
  known_value?: InputMaybe<Scalars['Boolean']>;
};

/** cpt codes cms 1500s join table */
export type CptCodesCms1500 = {
  __typename?: 'CptCodesCms1500';
  /** cms 1500 id */
  cms1500_id?: Maybe<Scalars['ID']>;
  /** The CPT code itself */
  cpt_code?: Maybe<CptCode>;
  /**
   * icd code id
   * @deprecated Use cpt_code instead
   */
  cpt_code_id?: Maybe<Scalars['ID']>;
  /** date created */
  created_at?: Maybe<Scalars['String']>;
  /** The Early and Periodic Screening, Diagnostic and Treatment */
  epsdt?: Maybe<Scalars['String']>;
  /** Self descriptive */
  family_planning_service?: Maybe<Scalars['Boolean']>;
  /** fee */
  fee?: Maybe<Scalars['String']>;
  /** The unique identifier of the cms 1500 */
  id?: Maybe<Scalars['ID']>;
  /** First Modification */
  mod1?: Maybe<Scalars['String']>;
  /** Second Modification */
  mod2?: Maybe<Scalars['String']>;
  /** Third Modification */
  mod3?: Maybe<Scalars['String']>;
  /** Fourth Modification */
  mod4?: Maybe<Scalars['String']>;
  /** Diagnostic pointers. These are used to connect Diagnosis(ICD) with appropriate Billing Item(CPT) in CMS1500 form */
  pointers?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** service date */
  service_date?: Maybe<Scalars['String']>;
  /** units */
  units?: Maybe<Scalars['String']>;
  /** date updated */
  updated_at?: Maybe<Scalars['String']>;
};

/** Payload for a CPT code on a CMS 1500 form */
export type CptCodesCms1500Input = {
  /** If true, this record will be marked for destruction */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the CPT code */
  cpt_code_id?: InputMaybe<Scalars['String']>;
  /** The EPSDT code */
  epsdt?: InputMaybe<Scalars['String']>;
  /** The family planning service */
  family_planning_service?: InputMaybe<Scalars['Boolean']>;
  /** The fee for the service */
  fee?: InputMaybe<Scalars['String']>;
  /** The ID of the join record */
  id?: InputMaybe<Scalars['ID']>;
  /** The first modifier */
  mod1?: InputMaybe<Scalars['String']>;
  /** The second modifier */
  mod2?: InputMaybe<Scalars['String']>;
  /** The third modifier */
  mod3?: InputMaybe<Scalars['String']>;
  /** The fourth modifier */
  mod4?: InputMaybe<Scalars['String']>;
  /** The list of pointers to the service line */
  pointers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The date of the service */
  service_date?: InputMaybe<Scalars['String']>;
  /** The units for the service */
  units?: InputMaybe<Scalars['String']>;
};

/** cpt codes policies join table */
export type CptCodesPolicy = {
  __typename?: 'CptCodesPolicy';
  /** cpt code */
  code?: Maybe<Scalars['String']>;
  /** id of instance of joins between cpt_code and policy */
  cpt_code_id?: Maybe<Scalars['ID']>;
  /** date created */
  created_at: Scalars['String'];
  /** cpt code description */
  description?: Maybe<Scalars['String']>;
  /** The unique identifier of the join between cpt_code and policy. */
  id: Scalars['ID'];
  /** policy id */
  policy_id?: Maybe<Scalars['ID']>;
  /** date updated */
  updated_at: Scalars['String'];
};

/** Properties assigning a policy to a CPT code */
export type CptCodesPolicyInput = {
  /** If true, the CPT codes policy will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the CPT code */
  cpt_code_id?: InputMaybe<Scalars['String']>;
  /** The ID of the join table record */
  id?: InputMaybe<Scalars['ID']>;
  /** The ID of the policy */
  policy_id?: InputMaybe<Scalars['String']>;
};

/** cpt codes super bills join table */
export type CptCodesSuperBill = {
  __typename?: 'CptCodesSuperBill';
  /** billing item id */
  billing_item_id?: Maybe<Scalars['ID']>;
  /** cpt code */
  cpt_code?: Maybe<CptCode>;
  /** cpt code id */
  cpt_code_id?: Maybe<Scalars['ID']>;
  /** date created */
  created_at: Scalars['String'];
  /** fee */
  fee?: Maybe<Scalars['String']>;
  /** The unique identifier of the join */
  id: Scalars['ID'];
  /** First Modification */
  mod1?: Maybe<Scalars['String']>;
  /** Second Modification */
  mod2?: Maybe<Scalars['String']>;
  /** Third Modification */
  mod3?: Maybe<Scalars['String']>;
  /** Fourth Modification */
  mod4?: Maybe<Scalars['String']>;
  /** Pointers */
  pointers?: Maybe<Array<Scalars['String']>>;
  /** service date */
  service_date?: Maybe<Scalars['String']>;
  /** super bill id */
  super_bill_id?: Maybe<Scalars['ID']>;
  /** units */
  units?: Maybe<Scalars['String']>;
  /** date updated */
  updated_at: Scalars['String'];
};

/** Payload for a CPT code super bill */
export type CptCodesSuperBillInput = {
  /** If true, the CPT code super bill will be destroyed */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the CPT code */
  cpt_code_id?: InputMaybe<Scalars['String']>;
  /** The fee */
  fee?: InputMaybe<Scalars['String']>;
  /** The ID of the CPT code super bill */
  id?: InputMaybe<Scalars['ID']>;
  /** The first modifier */
  mod1?: InputMaybe<Scalars['String']>;
  /** The second modifier */
  mod2?: InputMaybe<Scalars['String']>;
  /** The third modifier */
  mod3?: InputMaybe<Scalars['String']>;
  /** The fourth modifier */
  mod4?: InputMaybe<Scalars['String']>;
  /** The list of pointers */
  pointers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The date of the service */
  service_date?: InputMaybe<Scalars['String']>;
  /** The number of units */
  units?: InputMaybe<Scalars['String']>;
};

/** Autogenerated input type of CreateChangeHealthPatient */
export type CreateChangeHealthPatientInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of CreateChangeHealthPatient. */
export type CreateChangeHealthPatientPayload = {
  __typename?: 'CreateChangeHealthPatientPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  user?: Maybe<User>;
};

/** Autogenerated input type of CreateClientViaForm */
export type CreateClientViaFormInput = {
  custom_module_form_id?: InputMaybe<Scalars['ID']>;
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  form_answers?: InputMaybe<Array<InputMaybe<FormAnswerInput>>>;
  last_name?: InputMaybe<Scalars['String']>;
  phone_number?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  /** Not in use at this time. */
  send_product_recommendation_email?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of CreateClientViaForm. */
export type CreateClientViaFormPayload = {
  __typename?: 'CreateClientViaFormPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  form_answer_group?: Maybe<FormAnswerGroup>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** A custom email */
export type CustomEmail = {
  __typename?: 'CustomEmail';
  /** created at */
  created_at: Scalars['String'];
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** type of email */
  email_type?: Maybe<Scalars['String']>;
  /** email greeting */
  greeting?: Maybe<Scalars['String']>;
  /** The unique identifier of the email */
  id: Scalars['ID'];
  /** message body */
  message_body?: Maybe<Scalars['String']>;
  /** subject of email */
  name?: Maybe<Scalars['String']>;
  /** reactivation_wait_days */
  reactivation_wait_days?: Maybe<Scalars['String']>;
  /** Appointment Type, Program or Package object */
  related_object?: Maybe<CustomEmailRelatedObject>;
  /** subject of email */
  subject?: Maybe<Scalars['String']>;
  /** updated at */
  updated_at: Scalars['String'];
  /** user id of provider */
  user_id?: Maybe<Scalars['ID']>;
};

/** CustomEmail related_object union */
export type CustomEmailRelatedObject = AppointmentType | Course | Offering;

/** A custom metric for a user */
export type CustomMetric = {
  __typename?: 'CustomMetric';
  /** feature toggle id this custom metric belongs to */
  feature_toggle_id?: Maybe<Scalars['Int']>;
  /** The unique identifier of the metric */
  id: Scalars['ID'];
  /** The name of the custom metric */
  name?: Maybe<Scalars['String']>;
  /** if yes, should show based on if there is custom metric override */
  should_show?: Maybe<Scalars['Boolean']>;
  /** if yes, should show the client based on if there is a custom metric override */
  should_show_client?: Maybe<Scalars['Boolean']>;
  /** if yes, show the custom metric */
  show: Scalars['Boolean'];
  /** if yes, show the custom metric to client */
  show_client: Scalars['Boolean'];
  /** if yes, track the custom metric */
  track: Scalars['Boolean'];
  /** user id this custom metric belongs to */
  user_id?: Maybe<Scalars['Int']>;
};

/** Payload for a custom metric */
export type CustomMetricInput = {
  /** Whether or not to destroy the custom metric */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The id of the custom metric */
  id?: InputMaybe<Scalars['ID']>;
  /** The graphql_name of the custom metric */
  name?: InputMaybe<Scalars['String']>;
  /** Whether or not to show the custom metric */
  show?: InputMaybe<Scalars['Boolean']>;
  /** Whether or not to show the custom metric to the client */
  show_client?: InputMaybe<Scalars['Boolean']>;
  /** Whether or not to track the custom metric */
  track?: InputMaybe<Scalars['Boolean']>;
};

/** A custom metric for a user */
export type CustomMetricOverride = {
  __typename?: 'CustomMetricOverride';
  /** custom metric */
  custom_metric?: Maybe<CustomMetric>;
  /** id of the custom metric */
  custom_metric_id?: Maybe<Scalars['ID']>;
  /** feature toggle id this custom metric belongs to */
  feature_toggle_id?: Maybe<Scalars['Int']>;
  /** id form helper */
  form_id?: Maybe<Scalars['String']>;
  /** The unique identifier of the override */
  id: Scalars['ID'];
  /** The name of the custom metric */
  name?: Maybe<Scalars['String']>;
  /** if yes, show the custom metric */
  show: Scalars['Boolean'];
  /** if yes, show the custom metric to the client */
  show_client: Scalars['Boolean'];
  /** if yes, track the custom metric */
  track?: Maybe<Scalars['Boolean']>;
  /** user id this custom metric belongs to */
  user_id?: Maybe<Scalars['Int']>;
};

/** Payload for overriding a custom metric */
export type CustomMetricOverridesInput = {
  /** The ID of the custom metric */
  custom_metric_id?: InputMaybe<Scalars['ID']>;
  /** The ID of the custom metric override */
  id?: InputMaybe<Scalars['ID']>;
  /** Whether or not to show the custom metric */
  show?: InputMaybe<Scalars['Boolean']>;
  /** Whether or not to show the custom metric to the client */
  show_client?: InputMaybe<Scalars['Boolean']>;
};

/** A question in a template */
export type CustomModule = {
  __typename?: 'CustomModule';
  /** The name of the form this custom module has been originally copied from */
  copied_from_form_name?: Maybe<Scalars['String']>;
  /** The conditional logic for showing/hiding the custom module */
  custom_module_condition?: Maybe<CustomModuleConditionType>;
  /** The template that this question is a part of */
  custom_module_form?: Maybe<CustomModuleForm>;
  /** The ID of the template the question is a part of */
  custom_module_form_id?: Maybe<Scalars['String']>;
  /** The ID of the form section this custom module belongs to. Used for autoscoring */
  custom_module_form_section_id?: Maybe<Scalars['ID']>;
  /** Custom column used by API users. Used to relate our form objects with objects in third-party systems */
  external_id?: Maybe<Scalars['String']>;
  /** Custom column used by API users. Used to relate our form objects with objects in third-party systems */
  external_id_type?: Maybe<Scalars['String']>;
  /** The name to use in the HIPAA form */
  hipaa_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the module */
  id: Scalars['ID'];
  /** Whether this module is a custom module */
  is_custom: Scalars['Boolean'];
  /** The label of the question */
  label?: Maybe<Scalars['String']>;
  /** The type of question */
  mod_type?: Maybe<Scalars['String']>;
  /** The default options for this question */
  options?: Maybe<Scalars['String']>;
  /** The options, broken up into an array */
  options_array?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** IDs of of other modules to include in the autoscore calculation */
  other_module_ids_to_autoscore_on?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** ID of the parent custom module */
  parent_custom_module_id?: Maybe<Scalars['String']>;
  /** The position of the question (the lower the earlier the question is shown) */
  position?: Maybe<Scalars['Float']>;
  /** Whether this question is required to be completed before the form it's in can be saved */
  required?: Maybe<Scalars['Boolean']>;
  /** The sublabel (descriotipn) of the question */
  sublabel?: Maybe<Scalars['String']>;
};

/** Payload for a CustomModuleCondition */
export type CustomModuleConditionInput = {
  /** If true, the condition will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the CustomModule that will be shown if the condition is met */
  conditional_custom_module_id?: InputMaybe<Scalars['ID']>;
  /** The type of filter to apply to the CustomModuleCondition */
  filter_type?: InputMaybe<Scalars['String']>;
  /** The ID of the CustomModuleCondition */
  id?: InputMaybe<Scalars['ID']>;
  /** The value to filter by */
  value_to_filter?: InputMaybe<Scalars['String']>;
};

/** Condition under which to show a custom module */
export type CustomModuleConditionType = {
  __typename?: 'CustomModuleConditionType';
  /** The ID of the custom module whose value determines whether to show or hide the custom module */
  conditional_custom_module_id?: Maybe<Scalars['ID']>;
  /** The ID of the custom module that will be shown or hidden */
  custom_module_id?: Maybe<Scalars['ID']>;
  /** The type of filter */
  filter_type?: Maybe<Scalars['String']>;
  /** The unique identifier of the condition */
  id: Scalars['ID'];
  /** The value to check the filter against */
  value_to_filter?: Maybe<Scalars['String']>;
};

/** A template for a form, that can then be filled out */
export type CustomModuleForm = {
  __typename?: 'CustomModuleForm';
  /** The date on which the template was created */
  created_at: Scalars['String'];
  /** The questions in the template */
  custom_modules: Array<CustomModule>;
  /** Custom column used by API users. Used to relate our form objects with objects in third-party systems */
  external_id?: Maybe<Scalars['String']>;
  /** Custom column used by API users. Used to relate our form objects with objects in third-party systems */
  external_id_type?: Maybe<Scalars['String']>;
  /** All filled out forms for this template */
  form_answer_groups: Array<FormAnswerGroup>;
  /** The form has matrix field */
  has_matrix_field?: Maybe<Scalars['Boolean']>;
  /** When true, the form has modules that the user has to fill out */
  has_non_readonly_modules?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the module form */
  id: Scalars['ID'];
  /** Whether the form contains only one custom_module with mod_type 'video' and was created as part of a program */
  is_video?: Maybe<Scalars['Boolean']>;
  /** User who last updated this form */
  last_updated_by_user?: Maybe<User>;
  /** The given name of the template */
  name?: Maybe<Scalars['String']>;
  /** Whether subsequent times filling out the template, will start with the template prefilled with the previous answers */
  prefill?: Maybe<Scalars['Boolean']>;
  /** The date on which the template was updated */
  updated_at: Scalars['String'];
  /** Whether or not this form was uploaded by Healthie team member */
  uploaded_by_healthie_team: Scalars['Boolean'];
  /** Whether the template can be used to chart with */
  use_for_charting: Scalars['Boolean'];
  /** Whether the template was made for a program */
  use_for_program: Scalars['Boolean'];
  /** The owner of the template */
  user?: Maybe<User>;
};

/** CustomModuleForm sorting enum */
export enum CustomModuleFormOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC',
  /** Sort by owner last name ascending */
  UserLastNameAsc = 'USER_LAST_NAME_ASC',
  /** Sort by owner last name descending */
  UserLastNameDesc = 'USER_LAST_NAME_DESC'
}

/** A custom sidebar override */
export type CustomSidebarOverride = {
  __typename?: 'CustomSidebarOverride';
  /** The icon of the image that will be display on the sidebar */
  icon?: Maybe<Scalars['String']>;
  /** The unique identifier of the override */
  id: Scalars['ID'];
  /** The label of the sidebar item that will be shown or hidden */
  label?: Maybe<Scalars['String']>;
  /** If true, the sidebar item will be open in an iframe within the Healthie UI */
  open_in_iframe?: Maybe<Scalars['Boolean']>;
  /** If true, the sidebar item will be displayed */
  show?: Maybe<Scalars['Boolean']>;
  /** The link to the custom icon that will be displayed on the sidebar */
  svg_url?: Maybe<Scalars['String']>;
  /** Where the link will open if clicked */
  target?: Maybe<Scalars['String']>;
  /** The link that the sidebar item will direct to */
  url?: Maybe<Scalars['String']>;
};

/** The day range input */
export type DayRangeInputObjectType = {
  /** The days range */
  days?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The time range for every day */
  time_range?: InputMaybe<Scalars['String']>;
};

/** Each day range is a time range and the days of the week that are in that time range */
export type DayRangeType = {
  __typename?: 'DayRangeType';
  /** The days of the week that are in this time range */
  days?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The time range that is in this time range */
  time_range?: Maybe<Scalars['String']>;
};

/** A Dexcom Connection */
export type DexcomConnection = {
  __typename?: 'DexcomConnection';
  /** The unique identifier of the connection */
  id: Scalars['ID'];
  /** The last time Dexcom was synced */
  last_sync_date?: Maybe<Scalars['String']>;
};

/** Payload for a diagnosis */
export type DiagnosesInput = {
  /** If true, the diagnosis will be deleted upon saving */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** Whether the diagnosis is active or not */
  active?: InputMaybe<Scalars['Boolean']>;
  /** The date of the end of the diagnosis */
  end_date?: InputMaybe<Scalars['String']>;
  /** The date of the first symptom */
  first_symptom_date?: InputMaybe<Scalars['String']>;
  /** The ID of the ICD code */
  icd_code_id?: InputMaybe<Scalars['ID']>;
  /** The ID of the diagnosis */
  id?: InputMaybe<Scalars['ID']>;
  /** Whether the diagnosis is the primary diagnosis */
  primary?: InputMaybe<Scalars['Boolean']>;
};

/** A diagnosis */
export type Diagnosis = {
  __typename?: 'Diagnosis';
  /** Active diagnosis */
  active: Scalars['Boolean'];
  /** custom module id */
  custom_module_id?: Maybe<Scalars['ID']>;
  /** End date */
  end_date?: Maybe<Scalars['String']>;
  /** First symptom date */
  first_symptom_date?: Maybe<Scalars['String']>;
  /** icd code */
  icd_code?: Maybe<IcdCode>;
  /** icd code id */
  icd_code_id?: Maybe<Scalars['ID']>;
  /** icd codes cms1500s id */
  icd_codes_cms1500s_id?: Maybe<Scalars['ID']>;
  /** icd codes super bill id */
  icd_codes_super_bill_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the diagnosis */
  id: Scalars['ID'];
  /** Primary diagnosis */
  primary?: Maybe<Scalars['Boolean']>;
  /** Date diagnosis was last updated */
  updated_at?: Maybe<Scalars['String']>;
  /** Owner of this diagnosis */
  user?: Maybe<User>;
  /** user id */
  user_id?: Maybe<Scalars['ID']>;
};

/** Payload for a dietitian */
export type DietitianInput = {
  /** The ID of the dietitian */
  id?: InputMaybe<Scalars['ID']>;
  /** The NPI of the dietitian */
  npi?: InputMaybe<Scalars['String']>;
  /** The other ID of the dietitian */
  other_id?: InputMaybe<Scalars['String']>;
  /** The other ID qualifier of the dietitian */
  other_id_qualifier?: InputMaybe<Scalars['String']>;
  /** The qualifications of the dietitian */
  qualifications?: InputMaybe<Scalars['String']>;
};

/** Information on the direct message attachment */
export type DirectMessageAttachment = {
  __typename?: 'DirectMessageAttachment';
  /** The file name of the attachment */
  attachment_name?: Maybe<Scalars['String']>;
  /** The unique ID of the direct message attachment */
  id?: Maybe<Scalars['ID']>;
};

/** A discount from stripe as object */
export type Discount = {
  __typename?: 'Discount';
  /** Amount off in cents */
  amount_off?: Maybe<Scalars['Int']>;
  /** Annual discount in cents */
  annual_discount?: Maybe<Scalars['String']>;
  /** Duration of the discount */
  duration?: Maybe<Scalars['String']>;
  /** Duration in months */
  duration_in_months?: Maybe<Scalars['Int']>;
  /** The unique identifier of the discount */
  id: Scalars['String'];
  /** Monthly discount in cents */
  monthly_discount?: Maybe<Scalars['String']>;
  /** The name of the discount */
  name?: Maybe<Scalars['String']>;
  /** Percent off in cents */
  percent_off?: Maybe<Scalars['Int']>;
};

/** A document file that contains an attachment and information about the attachment */
export type Document = {
  __typename?: 'Document';
  /** When true, the user cannot adjust settings for the document besides sharing. */
  can_only_share?: Maybe<Scalars['Boolean']>;
  /** The date the document was made available to the given client */
  created_at: Scalars['String'];
  /** The description of the document */
  description?: Maybe<Scalars['String']>;
  /** The display name of the document */
  display_name?: Maybe<Scalars['String']>;
  /** Include the file in new clients welcome email */
  email_on_welcome: Scalars['Boolean'];
  /** A URL to download the file, good for 10 seconds */
  expiring_url?: Maybe<Scalars['String']>;
  /** The extension of the document */
  extension?: Maybe<Scalars['String']>;
  /** The file type of the document */
  file_content_type?: Maybe<Scalars['String']>;
  /** The file extension in human-readable format e.g.: 'Video'/'Audio'/'Excel' etc */
  friendly_type?: Maybe<Scalars['String']>;
  /** The unique idenitifer of the document */
  id: Scalars['ID'];
  /** Include the document within the private charts section */
  include_in_charting: Scalars['Boolean'];
  /** Notes on the document (not visible to the client) */
  internal_notes?: Maybe<Scalars['String']>;
  /** Instances of the document being viewed/opened */
  opens?: Maybe<Array<DocumentViewing>>;
  /** Owner of this document */
  owner?: Maybe<User>;
  /** In the case of a private document, the user that this document is for */
  rel_user?: Maybe<User>;
  /** ID of the assigned client */
  rel_user_id?: Maybe<Scalars['ID']>;
  /** The document shared */
  shared?: Maybe<Scalars['Boolean']>;
  /** Share the file with new clients automatically */
  shared_on_welcome: Scalars['Boolean'];
  /** The number of user groups who the document is shared */
  shared_user_groups_count?: Maybe<Scalars['Int']>;
  /** The number of users who the document is directly shared with (not through groups) */
  shared_users_count?: Maybe<Scalars['Int']>;
  /** Share with all members of the organization */
  shared_with_dietitians: Scalars['Boolean'];
  /** The date the document was updated */
  updated_at: Scalars['String'];
  /** The user groups who have access to this document */
  user_groups: Array<UserGroup>;
  /** The users who have access to this document */
  users: Array<User>;
};


/** A document file that contains an attachment and information about the attachment */
export type DocumentCreated_AtArgs = {
  viewable_user_id?: InputMaybe<Scalars['String']>;
};

/** Document sorting enum */
export enum DocumentOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC'
}

/** Information about a document being opened */
export type DocumentViewing = {
  __typename?: 'DocumentViewing';
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** The ID of the document that was opened */
  document_id: Scalars['ID'];
  /** The unique identifier of the viewing */
  id: Scalars['ID'];
  /** The user who opened the document */
  user?: Maybe<User>;
  /** The ID of the user who opened the document */
  user_id: Scalars['ID'];
  /** When the document was opened */
  viewed_at: Scalars['String'];
};

/** Dosage of a medication or prescription */
export type DosageType = {
  __typename?: 'DosageType';
  /** The unique identifier of the dosage */
  id: Scalars['ID'];
  /** The medication's national drug code */
  ndc?: Maybe<Scalars['String']>;
  /** The strength of the dosage */
  strength: Scalars['String'];
};

/** Only available to Internal Healthie Users -- Roles assigned to a given User */
export type DoseSpot = {
  __typename?: 'DoseSpot';
  /** State of account being approved */
  approved: Scalars['Boolean'];
  /** User's Clinic ID */
  clinic_id?: Maybe<Scalars['String']>;
  /** User's Clinic Key */
  clinic_key?: Maybe<Scalars['String']>;
  /** Date the object was created */
  created_at: Scalars['String'];
  /** User ID associated with DoseSpot */
  dosespot_user_id?: Maybe<Scalars['String']>;
  /** The unique identifier of the type */
  id: Scalars['ID'];
  /** Number of notifications on dosespot the User has */
  notification_count: Scalars['String'];
  /** ID of the user prescribing the dosespot */
  prescribing_dosespot_user_id?: Maybe<Scalars['String']>;
  /** The dosespot status */
  registration_status?: Maybe<Scalars['Boolean']>;
  /** Date the object was last updated */
  updated_at: Scalars['String'];
  /** User ID associated with the dosespot object in Healthie */
  user_id?: Maybe<Scalars['String']>;
};

/** draft of a conversation note */
export type Draft = {
  __typename?: 'Draft';
  /** content of draft */
  content?: Maybe<Scalars['String']>;
  /** id of linked conversation membership */
  conversation_membership_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the draft */
  id: Scalars['ID'];
};

/** Autogenerated input type of EmbedForm */
export type EmbedFormInput = {
  appt_type_id?: InputMaybe<Scalars['ID']>;
  form_id?: InputMaybe<Scalars['ID']>;
  offering_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of EmbedForm. */
export type EmbedFormPayload = {
  __typename?: 'EmbedFormPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** A step that embeds a widget */
export type EmbedWidgetStepType = {
  __typename?: 'EmbedWidgetStepType';
  /** The unique identifier of the step */
  id: Scalars['String'];
  /** The title of the step */
  title?: Maybe<Scalars['String']>;
};

/** A post about a client, with different category options */
export type Entry = {
  __typename?: 'Entry';
  /** User who added the entry */
  added_by_user?: Maybe<User>;
  /** the user who actually put in the entry (not always the user who the entry is about) */
  added_by_user_id?: Maybe<Scalars['ID']>;
  /** The category of this entry */
  category?: Maybe<Scalars['String']>;
  /** All comments association with this entry. */
  comments: Array<Comment>;
  /** The time at which this entry was created */
  created_at: Scalars['String'];
  /** Default water intake for this entry user */
  default_water_intake_for_entry_user?: Maybe<Scalars['Int']>;
  /** The description for the entry */
  description?: Maybe<Scalars['String']>;
  /** A more granular 1-10 scale of how hungry the user thought they were after eating */
  ed_posthunger?: Maybe<Scalars['String']>;
  /** A more granular 1-10 scale of how hungry the user thought they were after eating */
  ed_posthunger_string?: Maybe<Scalars['String']>;
  /** A more granular 1-10 scale of how hungry the user thought they were before eating */
  ed_prehunger?: Maybe<Scalars['String']>;
  /** A more granular 1-10 scale of how hungry the user thought they were before eating */
  ed_prehunger_string?: Maybe<Scalars['String']>;
  /** The users emotions towards the meal */
  emotions?: Maybe<Scalars['String']>;
  /** The users emotions towards the meal */
  emotions_string?: Maybe<Scalars['String']>;
  /** If average of any type, value indicates amount of entries already included in average calculation */
  entries_in_average?: Maybe<Scalars['Int']>;
  /** Third party external ID associated with this entry */
  external_id?: Maybe<Scalars['String']>;
  /** Third party associated with the external ID on this entry. One option currently supported is 'AppleHealth' */
  external_id_type?: Maybe<Scalars['String']>;
  /** True if the entry has subentries */
  has_subentries?: Maybe<Scalars['Boolean']>;
  /** A hexadecimal value corresponding to the metric stat of a food entry */
  healthiness_info_hex_value?: Maybe<Scalars['String']>;
  /** A boolean to check if the entry should be hidden from the main client feed */
  hide_from_main_feed: Scalars['Boolean'];
  /** The unique identifier of the entry */
  id: Scalars['ID'];
  /** The associated image of the entry */
  image?: Maybe<Scalars['Upload']>;
  /** The URL of the entry's associated image */
  image_url?: Maybe<Scalars['String']>;
  /** Meal entries of FoodEntry */
  meals?: Maybe<Array<Meal>>;
  /** The value of the metric for the entry */
  metric_stat?: Maybe<Scalars['Float']>;
  /** Metric stat as a string */
  metric_stat_string?: Maybe<Scalars['String']>;
  /** The name for this entry */
  name?: Maybe<Scalars['String']>;
  /** Other symptom typed by the client */
  other_symptom?: Maybe<Scalars['String']>;
  /** How hungry the poster thinks they were before eating */
  percieved_hungriness?: Maybe<Scalars['Float']>;
  /** User who the entry is about */
  poster?: Maybe<User>;
  /** The water intake previously added */
  previous_water_intake_stat: Scalars['Int'];
  /** the users reflections towards the meal */
  reflection?: Maybe<Scalars['String']>;
  /** A name of third party source or full name of user who have created the entry */
  source?: Maybe<Scalars['String']>;
  /** subentries of the Entry */
  subentries?: Maybe<Array<Entry>>;
  /** Comma-separated list of symptom names */
  symptom_names?: Maybe<Scalars['String']>;
  /** Multiple symptoms ID selected by the client */
  symptoms?: Maybe<Scalars['String']>;
  /** A name of third party source which actually created the entry */
  third_party_source?: Maybe<Scalars['String']>;
  /** The type for this entry, options are - FoodEntry, WorkoutEntry, MirrorEntry, SleepEntry, NoteEntry, WaterIntakeEntry, PoopEntry', null: false */
  type?: Maybe<Scalars['String']>;
  /** The last date and time that the entry was updated */
  updated_at: Scalars['String'];
  /** A check to see if the entry has been viewed or not */
  viewed: Scalars['Boolean'];
};

/** Entry sorting enum */
export enum EntryOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  MetricStatAsc = 'METRIC_STAT_ASC',
  MetricStatDesc = 'METRIC_STAT_DESC',
  ThirdPartySourceAsc = 'THIRD_PARTY_SOURCE_ASC',
  ThirdPartySourceDesc = 'THIRD_PARTY_SOURCE_DESC',
  Unsorted = 'UNSORTED',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

/** Autogenerated input type of ExtendPaywall */
export type ExtendPaywallInput = {
  extended_paywall_date: Scalars['String'];
  force_extension?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of ExtendPaywall. */
export type ExtendPaywallPayload = {
  __typename?: 'ExtendPaywallPayload';
  additional_info?: Maybe<Scalars['String']>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** An object containing info about the provider's exrernal calendar */
export type ExternalCalendar = {
  __typename?: 'ExternalCalendar';
  /** Send appointments to the external calendar */
  add_to_calendar?: Maybe<Scalars['Boolean']>;
  /** A list of potential calendars */
  calendar_list?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Email of external calendar */
  email?: Maybe<Scalars['String']>;
  /** The type of external calerndar */
  external_type?: Maybe<Scalars['String']>;
  /** Calendar has ran first sync */
  has_ran_first_sync?: Maybe<Scalars['Boolean']>;
  /** Calendar has refresh token */
  has_refresh_token?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the calendar */
  id: Scalars['ID'];
  /** Pull in appointments from the external calendar */
  pull_from_calendar?: Maybe<Scalars['Boolean']>;
  /** Calendar has pulled in location and note info otherwise it will contain 'Busy' */
  pull_in_event_details?: Maybe<Scalars['Boolean']>;
  /** Selected calendars to pull in appointments from */
  pulled_in_calendars?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The resource name (sync partner assigned ID) for the sync */
  resource_name?: Maybe<Scalars['String']>;
};

/** A family history condition record for a client */
export type FamilyHistoryCondition = {
  __typename?: 'FamilyHistoryCondition';
  /** The unique identifier of the family history condition */
  id: Scalars['ID'];
  /** Enum field for family relationships */
  relationships?: Maybe<Array<Scalars['String']>>;
  /** snomed term associated with the condition */
  snomed_term?: Maybe<SnomedTerm>;
};

/** Attributes to change a fax dietitian */
export type FaxDietitianInput = {
  /** The custom identifier of the fax dietitian */
  id?: InputMaybe<Scalars['ID']>;
  /** The location of the fax dietitian */
  location?: InputMaybe<FaxLocationInput>;
  /** The phone number of the fax dietitian */
  phone_number?: InputMaybe<Scalars['String']>;
  /** The qualifications of the fax dietitian */
  qualifications?: InputMaybe<Scalars['String']>;
};

/** An object containing info about the user' s fax line requests */
export type FaxLineRequest = {
  __typename?: 'FaxLineRequest';
  /** The area_code */
  area_code?: Maybe<Scalars['String']>;
  /** The file type of the bill */
  bill?: Maybe<Scalars['String']>;
  /** The city */
  city?: Maybe<Scalars['String']>;
  /** The date and time that the fax line request was created */
  created_at: Scalars['String'];
  /** The file type of the loa */
  loa?: Maybe<Scalars['String']>;
  /** The request type */
  request_type?: Maybe<Scalars['String']>;
  /** The state */
  state?: Maybe<Scalars['String']>;
};

/** Attributes to change a fax location */
export type FaxLocationInput = {
  /** The city of the fax location */
  city?: InputMaybe<Scalars['String']>;
  /** The country of the fax location */
  country?: InputMaybe<Scalars['String']>;
  /** The custom identifier of the fax location */
  id?: InputMaybe<Scalars['ID']>;
  /** The first line of the fax location address */
  line1?: InputMaybe<Scalars['String']>;
  /** The second line of the fax location address */
  line2?: InputMaybe<Scalars['String']>;
  /** The state of the fax location */
  state?: InputMaybe<Scalars['String']>;
  /** The zip code of the fax location */
  zip?: InputMaybe<Scalars['String']>;
};

/** An object containing details about what the client can and can't do */
export type FeatureToggle = {
  __typename?: 'FeatureToggle';
  /** Activity level of the user */
  activity_level?: Maybe<Scalars['String']>;
  /** Allow clients to sync with Apple Health */
  allow_apple_health_sync: Scalars['Boolean'];
  /** Allow clients to sync with Clearstep */
  allow_clearstep_sync: Scalars['Boolean'];
  /** Allow send messages to community chat */
  allow_community_chat: Scalars['Boolean'];
  /** Allow clients to sync with Dexcom */
  allow_dexcom_sync?: Maybe<Scalars['Boolean']>;
  /** Allow send messages to direct chat */
  allow_direct_chat: Scalars['Boolean'];
  /** Allow clients to sync with Fitbit */
  allow_fitbit_sync: Scalars['Boolean'];
  /** Allow clients to sync with Google Fit */
  allow_google_fit_sync: Scalars['Boolean'];
  /** Allow clients to sync with Shapa */
  allow_shapa_sync: Scalars['Boolean'];
  /** Allow clients to sync with Withings */
  allow_withings_sync: Scalars['Boolean'];
  /** whether or not the eating disorder defaults are applied */
  apply_eating_disorder_default: Scalars['Boolean'];
  /** The status of whether the linked user can view and schedule appointments */
  can_schedule_appointments: Scalars['Boolean'];
  /** Whether or not clients can track poop in their journal entries */
  can_track_poop: Scalars['Boolean'];
  /** Whether or not the client can track symptoms */
  can_track_symptoms: Scalars['Boolean'];
  /** Whether or not clients can track water intake in their journal entries */
  can_track_water_intake: Scalars['Boolean'];
  /** The status of whether the linked user can view care plan */
  can_view_care_plan: Scalars['Boolean'];
  /** The status of whether the linked user can view and upload documents */
  can_view_documents: Scalars['Boolean'];
  /** The status of whether the linked user can view and complete intake forms */
  can_view_forms: Scalars['Boolean'];
  /** The status of whether the linked user can view and create goals */
  can_view_goals: Scalars['Boolean'];
  /** The status of whether the linked user can view and create journal entries */
  can_view_journal_entries: Scalars['Boolean'];
  /** The status of whether the linked user can view and purchase packages */
  can_view_packages: Scalars['Boolean'];
  /** The status of whether the linked user can view and make payments */
  can_view_payments: Scalars['Boolean'];
  /** The status of whether the linked user can view and complete programs */
  can_view_programs: Scalars['Boolean'];
  /** The care plan associated with this feature toggle */
  care_plan?: Maybe<CarePlan>;
  /** The id of the care plan associated with this feature toggle */
  care_plan_id?: Maybe<Scalars['ID']>;
  /** The date and time the entry was done */
  created_at: Scalars['String'];
  /** Custom Metrics for this toggle */
  custom_metrics?: Maybe<Array<CustomMetric>>;
  /** Default date range selector when provider opens date picker in metrics tab */
  date_range_preference: Scalars['String'];
  /** Default water intake set by provider */
  default_water_intake: Scalars['String'];
  /** When true, it will not auto submit the CMS1500 to the clearing house */
  do_not_auto_submit_cms1500: Scalars['Boolean'];
  /** The frequency with which clients get email notifications about their goals */
  email_notification_frequency?: Maybe<Scalars['String']>;
  /** Food categories */
  food_categories: Array<Scalars['String']>;
  /** If true, user has at least one entry type to track */
  has_any_entry_types?: Maybe<Scalars['Boolean']>;
  /** CCDA is available if true */
  has_ccda?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the feature toggle */
  id?: Maybe<Scalars['ID']>;
  /** Food categories */
  initial_custom_metric_overrides?: Maybe<Array<CustomMetricOverride>>;
  /** Default date range when provider opens date picker in journal tab */
  last_journal_date_range_preference?: Maybe<Scalars['String']>;
  /** Default from_date when provider opens date picker in journal tab */
  last_journal_from_date?: Maybe<Scalars['String']>;
  /** Default to_date when provider opens date picker in journal tab */
  last_journal_to_date?: Maybe<Scalars['String']>;
  /** Metric Graphs to show in line graph form */
  line_graph_metric_categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Sleep Graphs to show in line graph form */
  line_graph_sleep_categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Metric categories based on users toggle features */
  metric_categories: Array<Scalars['String']>;
  /** Mirror categories */
  mirror_categories: Array<Scalars['String']>;
  /** The frequency with which clients get push notifications about their goals */
  push_notification_frequency?: Maybe<Scalars['String']>;
  /** Metrics that should be on for this feature toggle */
  returned_custom_metrics: Array<Scalars['String']>;
  /** Send unpaid invoice reminder */
  send_unpaid_invoice_reminder?: Maybe<Scalars['Boolean']>;
  /** The status of whether entries on graphs are seperated by the poster */
  seperate_provider_metric_from_client?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can see the A1C of the client */
  show_a1c_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can view and track the client's body fat percentage */
  show_bf_percent_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can view and track the client's blood pressure */
  show_blood_pressure_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can see the blood sugar metrics of the client */
  show_blood_sugar_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can see the calculated BMI of the client */
  show_bmi_graph?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can see the bmi-growth chart of the client */
  show_bmi_growth_chart?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can see the calculated BMR (using MFJ) of the client */
  show_bmr_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can see the body temperature entries of the client */
  show_body_temperature_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can see A1C metrics of the client */
  show_client_a1c_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can view and track the client's body fat percentage */
  show_client_bf_percent_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can view and track the client's blood pressure */
  show_client_blood_pressure_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can see the blood sugar metrics of the client */
  show_client_blood_sugar_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can see the calculated BMI of the client */
  show_client_bmi_graph?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can see the bmi-growth chart of the client */
  show_client_bmi_growth_chart?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can see the calculated BMR (using MFJ) of the client */
  show_client_bmr_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can see the body temperature entries of the client */
  show_client_body_temperature_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can see the calculated BMR (using HB) of the client */
  show_client_harris_benedict?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can see the height-growth chart of the client */
  show_client_height_growth_chart?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can see oxygen saturation metrics of the client */
  show_client_ox_sat_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can view and track the client's waist circumference */
  show_client_waist_circumference_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can see the weight-growth chart of the client */
  show_client_weight_growth_chart?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can view and track the client's weight */
  show_client_weight_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client is asked to track expanded (1-10) postmeal hunger level */
  show_ed_posthunger?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client is asked to track expanded (1-10) premeal hunger level */
  show_ed_prehunger?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can post food entries */
  show_food?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client is asked to track the category (meal or snack) of the food */
  show_food_category?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client is asked to track (1-10) emotion towards the food */
  show_food_emotion?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client is asked to post a (text) reflection towards the food */
  show_food_reflection?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can see the calculated BMR (using HB) of the client */
  show_harris_benedict?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client is asked to track perceived healthiness */
  show_healthiness?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can see the height graph of the client */
  show_height_graph?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can see the height-growth chart of the client */
  show_height_growth_chart?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can post metric entries */
  show_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can post selfie entries */
  show_mirror?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client is asked to track normal (1-3) hunger level */
  show_normal_hunger?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can post note entries */
  show_note?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client is asked to track (1-10) emotion towards the note */
  show_note_emotion?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can include macro and micro nutrients for the food they track */
  show_nutrients_tracking?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can see the oxygen saturation of the client */
  show_ox_sat_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can post sleep entries */
  show_sleep?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can view and track the client's waist circumference */
  show_waist_circumference_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can see the weight-growth chart of the client */
  show_weight_growth_chart?: Maybe<Scalars['Boolean']>;
  /** The status of whether the provider can view and track the client's weight */
  show_weight_metric?: Maybe<Scalars['Boolean']>;
  /** The status of whether the client can post workout entries */
  show_workout?: Maybe<Scalars['Boolean']>;
  /** Symptom options for symptom entry type */
  symptom_options: Array<SymptomOption>;
  /** The status of whether the client uses the metric system (versus imperial) */
  use_metric_system?: Maybe<Scalars['Boolean']>;
  /** Associated user */
  user?: Maybe<User>;
  /** The user group associated with this feature toggle */
  user_group?: Maybe<UserGroup>;
  /** The user group associated with this feature toggle */
  user_group_id?: Maybe<Scalars['ID']>;
  /** The user associated with this feature toggle */
  user_id?: Maybe<Scalars['ID']>;
  /** If true, the user has active_care_plan  */
  uses_feature_toggle_from_care_plan?: Maybe<Scalars['Boolean']>;
  /** When enabled, let's providers choose to have metrics that clients can view, but not enter */
  view_not_track?: Maybe<Scalars['Boolean']>;
  /** Workout categories */
  workout_categories: Array<Scalars['String']>;
};


/** An object containing details about what the client can and can't do */
export type FeatureToggleLine_Graph_Metric_CategoriesArgs = {
  user_id?: InputMaybe<Scalars['ID']>;
};


/** An object containing details about what the client can and can't do */
export type FeatureToggleLine_Graph_Sleep_CategoriesArgs = {
  user_id?: InputMaybe<Scalars['ID']>;
};


/** An object containing details about what the client can and can't do */
export type FeatureToggleMetric_CategoriesArgs = {
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Information about field that didn’t pass validation */
export type FieldError = {
  __typename?: 'FieldError';
  /** Field name that caused these errors */
  field?: Maybe<Scalars['String']>;
  /** Validation message */
  message: Scalars['String'];
};

/** A Fitbit Sync */
export type Fitbit = {
  __typename?: 'Fitbit';
  /** The unique identifier of the fitbit */
  id: Scalars['ID'];
  /** Checking is active sync in current moment */
  is_enabled: Scalars['Boolean'];
  /** The last time the fitbit was synced */
  last_sync_date?: Maybe<Scalars['String']>;
};

/** A folder that contains documents and other folders */
export type Folder = {
  __typename?: 'Folder';
  /** When true, the user cannot adjust settings for the folder besides sharing. */
  can_only_share?: Maybe<Scalars['Boolean']>;
  /** The date the folder was made available to the given user */
  created_at: Scalars['String'];
  /** If true, the current user can edit the folder */
  current_user_can_edit?: Maybe<Scalars['Boolean']>;
  /** The description of the folder */
  description?: Maybe<Scalars['String']>;
  /** The number of documents within this folder */
  documents_count?: Maybe<Scalars['Int']>;
  /** Include the file in new clients welcome email */
  email_on_welcome: Scalars['Boolean'];
  /** The ID of the parent folder */
  folder_id?: Maybe<Scalars['String']>;
  /** The list of parent folders for this folder */
  folder_path?: Maybe<Array<Folder>>;
  /** The unique identifier of the folder */
  id: Scalars['ID'];
  /** The name of the folder */
  name?: Maybe<Scalars['String']>;
  /** Owner of this folder */
  owner?: Maybe<User>;
  /** The parent folder of this folder (nil if there is no parent) */
  parent_folder?: Maybe<Folder>;
  /** In the case of a private folder, the user that this folder is for */
  rel_user?: Maybe<User>;
  /** The ID of the connected user */
  rel_user_id?: Maybe<Scalars['String']>;
  /** The folder shared */
  shared?: Maybe<Scalars['Boolean']>;
  /** Share the file with new clients automatically */
  shared_on_welcome: Scalars['Boolean'];
  /** The number of user groups who the folder is shared */
  shared_user_groups_count?: Maybe<Scalars['Int']>;
  /** The number of users who the folder is directly shared with (not through groups) */
  shared_users_count?: Maybe<Scalars['Int']>;
  /** Share with all members of the organization */
  shared_with_dietitians: Scalars['Boolean'];
  /** The number of subfolders within this folder */
  subfolders_count?: Maybe<Scalars['Int']>;
  /** The user groups who have access to this folder */
  user_groups: Array<UserGroup>;
  /** The users who have access to this folder */
  users: Array<User>;
};


/** A folder that contains documents and other folders */
export type FolderCreated_AtArgs = {
  viewable_user_id?: InputMaybe<Scalars['String']>;
};


/** A folder that contains documents and other folders */
export type FolderFolder_PathArgs = {
  client_id?: InputMaybe<Scalars['String']>;
};

/** Folder sorting enum */
export enum FolderOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC'
}

/** A food object */
export type Food = {
  __typename?: 'Food';
  /** The name of the food creator */
  creator_name?: Maybe<Scalars['String']>;
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** first serving size of the food object */
  default_serving_size?: Maybe<ServingSize>;
  /** The name of the food to display */
  display_name?: Maybe<Scalars['String']>;
  /** The id of the food in the Edamam database */
  edamam_import_id?: Maybe<Scalars['String']>;
  /** Whether the food was imported from the FDC database */
  fdc_import: Scalars['Boolean'];
  /** The unique identifier of the food */
  id: Scalars['ID'];
  /** The name of the food */
  name: Scalars['String'];
  /** Nutrients of the food object */
  nutrients?: Maybe<Array<FoodNutrient>>;
  /** Serving sizes of the food object */
  serving_sizes?: Maybe<Array<ServingSize>>;
  /** The ID of the user who created the food */
  user_id?: Maybe<Scalars['String']>;
};

/** A food item to be served */
export type FoodItem = {
  __typename?: 'FoodItem';
  /** The food to be served */
  food?: Maybe<Food>;
  /** The unique identifier of the food item */
  id: Scalars['ID'];
  /** The modifier for the serving size */
  modifier?: Maybe<Scalars['Float']>;
  /** The serving size */
  serving_size?: Maybe<ServingSize>;
};

/** A food nutrient item object */
export type FoodNutrient = {
  __typename?: 'FoodNutrient';
  /** The category of the nutrient */
  category?: Maybe<Scalars['String']>;
  /** Whether the nutrient is imported from the FDC database */
  fdc_import: Scalars['Boolean'];
  /** The unique identifier of the food */
  food_id?: Maybe<Scalars['String']>;
  /** The unique identifier of the nutrient */
  id: Scalars['ID'];
  /** The name of the nutrient */
  name?: Maybe<Scalars['String']>;
  /** The unit of the nutrient */
  nutrient_unit?: Maybe<Scalars['String']>;
  /** The value of the nutrient */
  nutrient_value?: Maybe<Scalars['Float']>;
};

/** An answer in a filled form */
export type FormAnswer = {
  __typename?: 'FormAnswer';
  /** The answer to the question */
  answer?: Maybe<Scalars['String']>;
  /** The ID of the custom module whose value determines whether to show or hide the custom module */
  conditional_custom_module_id?: Maybe<Scalars['ID']>;
  /** The creation time of the form answer */
  created_at: Scalars['String'];
  /** The type of question that was filled out */
  custom_module?: Maybe<CustomModule>;
  /** The id of the question template */
  custom_module_id?: Maybe<Scalars['String']>;
  /** The answer to display (some conversions are made verse raw answer data) */
  displayed_answer?: Maybe<Scalars['String']>;
  /** The type of filter */
  filter_type?: Maybe<Scalars['String']>;
  /** The filled form that this answer is a part of */
  form_answer_group?: Maybe<FormAnswerGroup>;
  /** The unique identifier of the answer */
  id: Scalars['ID'];
  /** The label of the question */
  label?: Maybe<Scalars['String']>;
  /** The id of the user that the answered question is for */
  user_id?: Maybe<Scalars['String']>;
  /** The value to check the filter against */
  value_to_filter?: Maybe<Scalars['String']>;
};

/** A completed form, with metadata about the completion, and the saved answers */
export type FormAnswerGroup = {
  __typename?: 'FormAnswerGroup';
  /** The appointment the note is connected to */
  appointment?: Maybe<Appointment>;
  /** The autoscored sections for the filled form */
  autoscored_sections: Array<AutoscoredSectionType>;
  /** The addendums added to the locked charting note */
  charting_note_addendums?: Maybe<Array<ChartingNoteAddendumType>>;
  /** The CMS1500 created from the form answer group */
  cms1500?: Maybe<Cms1500>;
  /** The date on which the filled form was saved */
  created_at: Scalars['String'];
  /** The form template that was filled out */
  custom_module_form?: Maybe<CustomModuleForm>;
  /** The date the form was deleted */
  deleted_at?: Maybe<Scalars['String']>;
  /** An external ID stored on the filled form or charting note */
  external_id?: Maybe<Scalars['String']>;
  /** The user who filled out the form */
  filler?: Maybe<User>;
  /** Whether the filled form has been saved by the user (verse a hidden draft) */
  finished: Scalars['Boolean'];
  /** Signatures for the form */
  form_answer_group_signings: Array<FormAnswerGroupSigning>;
  /** A list of connections between a form_answer_group and group appointment users */
  form_answer_group_users_connections?: Maybe<Array<FormAnswerGroupUserConnection>>;
  /** The visible answers for the filled form */
  form_answers: Array<FormAnswer>;
  /** when true, the note cannot be edited */
  frozen?: Maybe<Scalars['Boolean']>;
  /** All patients that have attended in the related group appointment */
  group_appointment_attendees?: Maybe<Array<User>>;
  /** The unique identifier of the group */
  id: Scalars['ID'];
  /** A collection of individual charting notes related to the main group charting note */
  individual_client_notes?: Maybe<Array<IndividualClientType>>;
  /** Same as individual_client_notes but returns a specific instance for given user */
  individual_note?: Maybe<IndividualClientType>;
  /** Indicates whether the answer group is related to group apppointment (charting note created for group appointment) */
  is_group_appt_note?: Maybe<Scalars['Boolean']>;
  /** The date and time when the charting note was locked */
  locked_at?: Maybe<Scalars['String']>;
  /** The provider who have locked the charting note */
  locked_by?: Maybe<User>;
  /** The given name of the filled form */
  name?: Maybe<Scalars['String']>;
  /** If you have product recommendation alogrithim enabled, this will return a package containing the products recommended by the algorithim */
  offering_with_recommended_products?: Maybe<Offering>;
  /** If you have product recommendation alogrithim enabled, this will return a package containing a URL to purchase the products recommended by the algorithim */
  packages_with_recommended_products_purchase_url?: Maybe<Scalars['String']>;
  /** The date that the note was actually created */
  record_created_at?: Maybe<Scalars['String']>;
  /** The last updated date for the filled form */
  updated_at: Scalars['String'];
  /** The user the form is about */
  user?: Maybe<User>;
  /** ID of the user */
  user_id?: Maybe<Scalars['String']>;
};


/** A completed form, with metadata about the completion, and the saved answers */
export type FormAnswerGroupForm_AnswersArgs = {
  is_for_editing?: InputMaybe<Scalars['Boolean']>;
};


/** A completed form, with metadata about the completion, and the saved answers */
export type FormAnswerGroupIndividual_Client_NotesArgs = {
  order_by?: InputMaybe<IndividualClientNoteOrderKeys>;
};


/** A completed form, with metadata about the completion, and the saved answers */
export type FormAnswerGroupIndividual_NoteArgs = {
  user_id?: InputMaybe<Scalars['ID']>;
};

/** FormAnswerGroup sorting enum */
export enum FormAnswerGroupOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  RecordCreatedAtAsc = 'RECORD_CREATED_AT_ASC',
  RecordCreatedAtDesc = 'RECORD_CREATED_AT_DESC',
  Unsorted = 'UNSORTED',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

/** An instance representing connection between a charting note(form_answer_group) and a user signing the note */
export type FormAnswerGroupSigning = {
  __typename?: 'FormAnswerGroupSigning';
  /** The date and time the form was signed */
  created_at: Scalars['String'];
  /** The id of the form that was signed */
  form_answer_group_id?: Maybe<Scalars['String']>;
  /** The unique identifier of the signing */
  id: Scalars['ID'];
  /** A provider who signed the form */
  user?: Maybe<User>;
};

/** An instance representing connection between a group charting note(form_answer_group.appointment.is_group == true) and a user */
export type FormAnswerGroupUserConnection = {
  __typename?: 'FormAnswerGroupUserConnection';
  /** The unique identifier of the connection */
  id: Scalars['ID'];
  /** The user associated with the connection */
  user?: Maybe<User>;
};

/** Payload for an answer */
export type FormAnswerInput = {
  /** The answer */
  answer?: InputMaybe<Scalars['String']>;
  /** The ID of the conditional custom module */
  conditional_custom_module_id?: InputMaybe<Scalars['ID']>;
  /** The ID of the custom module */
  custom_module_id?: InputMaybe<Scalars['String']>;
  /** The type of filter */
  filter_type?: InputMaybe<Scalars['String']>;
  /** Unique ID for the answer */
  id?: InputMaybe<Scalars['ID']>;
  /** The label for the answer */
  label?: InputMaybe<Scalars['String']>;
  /** The ID of the user who created the answer */
  user_id?: InputMaybe<Scalars['String']>;
  /** The value to filter by */
  value_to_filter?: InputMaybe<Scalars['String']>;
};

/** types of forms that can be requested */
export type FormTypesToRequest = {
  __typename?: 'FormTypesToRequest';
  /** The unique identifier of the object */
  id: Scalars['String'];
  /** Whether the form contains only one custom_module with mod_type 'video' and was created as part of a program */
  is_video?: Maybe<Scalars['Boolean']>;
  /** Type of form to request */
  item_type?: Maybe<Scalars['String']>;
  /** The given name of the template */
  name?: Maybe<Scalars['String']>;
};

/** Fullscript Practitioner */
export type FullscriptPractitionerType = {
  __typename?: 'FullscriptPractitionerType';
  /** Email address of the practitioner */
  email?: Maybe<Scalars['String']>;
  /** External reference of the practitioner */
  external_ref?: Maybe<Scalars['String']>;
  /** First name of the practitioner */
  first_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the practitioner */
  id: Scalars['String'];
  /** Last name of the practitioner */
  last_name?: Maybe<Scalars['String']>;
  /** The ID of the practitioner type */
  practitioner_type_id?: Maybe<Scalars['String']>;
};

/** The type of practitioners */
export type FullscriptPractitionerTypeType = {
  __typename?: 'FullscriptPractitionerTypeType';
  /** The code for the practitioner type */
  code?: Maybe<Scalars['String']>;
  /** The description of the practitioner type */
  description?: Maybe<Scalars['String']>;
  /** The unique identifier of the practitioner type */
  id: Scalars['String'];
};

/** Fullscript Product Type */
export type FullscriptProductType = {
  __typename?: 'FullscriptProductType';
  /** Additional Info */
  additional_info?: Maybe<Scalars['String']>;
  /** Dosage of the product */
  dosage?: Maybe<Scalars['String']>;
  /** The unique identifier of the product fullscript */
  id: Scalars['String'];
  /** Ordered */
  ordered?: Maybe<Scalars['String']>;
  /** The name of the product */
  product_name?: Maybe<Scalars['String']>;
};

/** Fullscript Treatment Plan */
export type FullscriptTreatmentPlanType = {
  __typename?: 'FullscriptTreatmentPlanType';
  /** Date the treatment plan was activated */
  activation_date?: Maybe<Scalars['String']>;
  /** The unique identifier of the plan */
  id: Scalars['String'];
  /** Number of times the plan has been ordered */
  ordered_count?: Maybe<Scalars['Int']>;
  /** Personal message from the practitioner */
  personal_message?: Maybe<Scalars['String']>;
  /** The name of the practitioner */
  practitioner_name?: Maybe<Scalars['String']>;
  /** The products recommended in the plan */
  recommendations?: Maybe<Array<FullscriptProductType>>;
};

/** FunctionalStatus object */
export type FunctionalStatus = {
  __typename?: 'FunctionalStatus';
  /** Functional condition */
  functional_condition?: Maybe<Scalars['String']>;
  /** The unique identifier of the functional status */
  id: Scalars['ID'];
  /** The start date of the functional status */
  start_date?: Maybe<Scalars['String']>;
  /** The ID of the user who created the functional status */
  user_id: Scalars['ID'];
};

/** Payload for a gift */
export type GiftInput = {
  /** The email of the giver */
  giver_email?: InputMaybe<Scalars['String']>;
  /** The name of the giver */
  giver_name?: InputMaybe<Scalars['String']>;
  /** The ID of the gift */
  id?: InputMaybe<Scalars['ID']>;
  /** The message assigned to the gift */
  message?: InputMaybe<Scalars['String']>;
};

/** a goal */
export type Goal = {
  __typename?: 'Goal';
  /** Completion Percentage of a goal for a given date range. start_range/end_range should be of the form: 'yyyy-mm-dd' */
  completion_percentage_for_range?: Maybe<Scalars['Int']>;
  /**
   * The rate at which this goal is completed
   * @deprecated should use completion_percentage_for_range
   */
  completion_rate?: Maybe<Scalars['String']>;
  /** The creation timestamp of the goal */
  created_at: Scalars['String'];
  /** created user of goal */
  created_user_id?: Maybe<Scalars['ID']>;
  /** description of goal */
  description?: Maybe<Scalars['String']>;
  /** due date of goal */
  due_date?: Maybe<Scalars['String']>;
  /** All goal histories associated with this goal histories. */
  goal_histories: Array<GoalHistory>;
  /** The unique identifier of the goal */
  id: Scalars['ID'];
  /** If true, the goal is complete for the given day. date should be of the form: 'yyyy-mm-dd' */
  is_completed_for_date?: Maybe<Scalars['Boolean']>;
  /**
   * if true, the goal is currently active
   * @deprecated should use is_completed_for_date field to determine if a goal is completed for a given day
   */
  is_current?: Maybe<Scalars['Boolean']>;
  /** if true, a template has been created based off this goal */
  is_used_as_template?: Maybe<Scalars['Boolean']>;
  /** name of goal */
  name?: Maybe<Scalars['String']>;
  /** parent id */
  parent_id?: Maybe<Scalars['ID']>;
  /** The rate at which the parent goal has subgoals completed */
  parent_subgoal_completion_rate?: Maybe<Scalars['String']>;
  /** Reminder object for a given goal */
  reminder?: Maybe<Reminder>;
  /** frequency of goal */
  repeat?: Maybe<Scalars['String']>;
  /** The id of the template used to make this goal */
  source_template_id?: Maybe<Scalars['String']>;
  /** start date of goal */
  start_on: Scalars['String'];
  /** Streak info for goal */
  streak_info?: Maybe<Array<GoalStreakInfo>>;
  /**
   * The rate at which a subgoal is completed
   * @deprecated should use completion_percentage_for_range
   */
  subgoal_completion_rate?: Maybe<Scalars['String']>;
  /** Subgoals for a given goal */
  subgoals?: Maybe<Array<Goal>>;
  /** count of subgoals */
  subgoals_count?: Maybe<Scalars['String']>;
  /** Title hyperlink. Opens when the title is clicked on. */
  title_link?: Maybe<Scalars['String']>;
  /** Owner of this goal */
  user?: Maybe<User>;
  /** user id of goal */
  user_id?: Maybe<Scalars['ID']>;
};


/** a goal */
export type GoalCompletion_Percentage_For_RangeArgs = {
  end_range?: InputMaybe<Scalars['String']>;
  start_range: Scalars['String'];
};


/** a goal */
export type GoalIs_Completed_For_DateArgs = {
  date: Scalars['String'];
};


/** a goal */
export type GoalStreak_InfoArgs = {
  end_range?: InputMaybe<Scalars['String']>;
  start_range: Scalars['String'];
};

/** Goal data */
export type GoalDataType = {
  __typename?: 'GoalDataType';
  /** All goals frequency count */
  all_goals_frequency_count?: Maybe<Scalars['Int']>;
  /** All goals status count */
  all_goals_status_count?: Maybe<Scalars['Int']>;
  /** All time goals count */
  all_time_goals_count?: Maybe<Scalars['Int']>;
  /** Completed goals count */
  completed_goals_count?: Maybe<Scalars['Int']>;
  /** Daily goals count */
  daily_goals_count?: Maybe<Scalars['Int']>;
  /** Goal list */
  goals?: Maybe<Array<Goal>>;
  /** Goals count */
  goals_count?: Maybe<Scalars['Int']>;
  /** Goals overall completion rate info */
  goals_overall_completion_rate_info?: Maybe<GoalOverallCompletionRateInfo>;
  /** Goals streak count */
  goals_streak_count?: Maybe<Scalars['Int']>;
  /** Not completed goals count */
  not_completed_goals_count?: Maybe<Scalars['Int']>;
  /** One time goals count */
  one_time_goals_count?: Maybe<Scalars['Int']>;
  /** Weekly goals count */
  weekly_goals_count?: Maybe<Scalars['Int']>;
};

/** a goal history */
export type GoalHistory = {
  __typename?: 'GoalHistory';
  /** The date the goal is marked completed */
  completed_on: Scalars['String'];
  /** The completion timestamp of the goal */
  created_at: Scalars['String'];
  /** The description of the goal */
  description?: Maybe<Scalars['String']>;
  /** goal that was completed */
  goal?: Maybe<Goal>;
  /** goal id of goal history */
  goal_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the history */
  id: Scalars['ID'];
  /** If true, the goal is a subgoal */
  is_subgoal?: Maybe<Scalars['Boolean']>;
  /** The name of the goal */
  name?: Maybe<Scalars['String']>;
  /** The repeat frequency of the goal */
  repeat?: Maybe<Scalars['String']>;
  /** client of this goal */
  user?: Maybe<User>;
  /** user id of goal history */
  user_id?: Maybe<Scalars['ID']>;
};

/** a goal instance. gives a snapshot of a goal over a specific interval(start_range and end_range ) */
export type GoalInstance = {
  __typename?: 'GoalInstance';
  /** The date the interval starts for this goal instance */
  end_range?: Maybe<Scalars['String']>;
  /** the relevant goal */
  goal?: Maybe<Goal>;
  /** If true, the goal was completed in between the start and end range */
  is_completed_for_interval?: Maybe<Scalars['Boolean']>;
  /** The date the interval starts for this goal instance */
  start_range?: Maybe<Scalars['String']>;
};

/** Goal sorting enum */
export enum GoalOrderKeys {
  DueDateAsc = 'DUE_DATE_ASC',
  DueDateDesc = 'DUE_DATE_DESC',
  /** Order by due date and start date descending */
  DueDateStartDateDesc = 'DUE_DATE_START_DATE_DESC',
  FrequencyAsc = 'FREQUENCY_ASC',
  FrequencyDesc = 'FREQUENCY_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  StartDateAsc = 'START_DATE_ASC',
  StartDateDesc = 'START_DATE_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC'
}

/** Related info for a collection of goals overall completion rate */
export type GoalOverallCompletionRateInfo = {
  __typename?: 'GoalOverallCompletionRateInfo';
  /** The number of times the goals were completed */
  actual_times_completed?: Maybe<Scalars['Int']>;
  /** The actual percentage of the completion rate */
  percent?: Maybe<Scalars['Int']>;
  /** The total number of times the goals could have been completed */
  possible_times_completed?: Maybe<Scalars['Int']>;
};

/** Related info of a specific goal's streak */
export type GoalStreakInfo = {
  __typename?: 'GoalStreakInfo';
  /** The length of intervals (ie: days, weeks, etc) this streak lasted */
  count?: Maybe<Scalars['Int']>;
  /** The day this streak ended */
  end_date?: Maybe<Scalars['String']>;
  /** The day this streak began */
  start_date?: Maybe<Scalars['String']>;
};

/** a goal template */
export type GoalTemplate = {
  __typename?: 'GoalTemplate';
  /** description of template from associated goal */
  description?: Maybe<Scalars['String']>;
  /** id of the goal this template was based on */
  goal_id?: Maybe<Scalars['String']>;
  /** id of the the relevant goal template */
  id: Scalars['String'];
  /** is_healthie_default of the the relevant goal template */
  is_healthie_default: Scalars['Boolean'];
  /** name of template from associated goal */
  name?: Maybe<Scalars['String']>;
  /** frequency of template from associated goal */
  repeat: Scalars['String'];
  /** Subgoal templates for a given template */
  subgoal_templates?: Maybe<Array<GoalTemplate>>;
  /** Title hyperlink. Opens when the title is clicked on. */
  title_link?: Maybe<Scalars['String']>;
  /** user associated with this template */
  user?: Maybe<User>;
  /** user who owns this goal template */
  user_id?: Maybe<Scalars['String']>;
};

/** A GoogleFit Sync */
export type GoogleFit = {
  __typename?: 'GoogleFit';
  /** The unique identifier of the Google fit */
  id: Scalars['ID'];
  /** The last time the apple health was synced */
  last_sync_date?: Maybe<Scalars['String']>;
};

/** A connection between a user and a care plan */
export type GroupCarePlanUserConnection = {
  __typename?: 'GroupCarePlanUserConnection';
  /** The care plan active status */
  active: Scalars['Boolean'];
  /** The ID of the care plan */
  care_plan_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the join */
  id: Scalars['ID'];
  /** The ID of the user_group */
  user_group_id?: Maybe<Scalars['ID']>;
  /** The ID of the client */
  user_id?: Maybe<Scalars['ID']>;
};

/** Health Assessment contains in-depth help info and goals for a client */
export type HealthAssessment = {
  __typename?: 'HealthAssessment';
  /** The body report for the client */
  body_report?: Maybe<BodyReport>;
  /** The date the health assessment was created */
  created_at: Scalars['String'];
  /** gen */
  gender?: Maybe<Scalars['String']>;
  /** The health report for the client */
  health_report?: Maybe<HealthReport>;
  /** The height of the client */
  height?: Maybe<Scalars['String']>;
  /** The unique identifier of the health accessment */
  id: Scalars['ID'];
  /** Is the client diabetic? */
  is_diabetic?: Maybe<Scalars['Boolean']>;
  /** The race of the client */
  race?: Maybe<Scalars['String']>;
  /** The recommendation for the client */
  recommendation?: Maybe<HealthAssessmentRecommendation>;
  /** The title of the health assessment */
  title?: Maybe<Scalars['String']>;
};

/** Health Assessment Recommendation is a sub category of a HealthAssessment */
export type HealthAssessmentRecommendation = {
  __typename?: 'HealthAssessmentRecommendation';
  /** cal_deficit of user */
  cal_deficit?: Maybe<Scalars['String']>;
  /** carbs_cal of user */
  carbs_cal?: Maybe<Scalars['String']>;
  /** carbs_grams of user */
  carbs_grams?: Maybe<Scalars['String']>;
  /** Carbs percent */
  carbs_percent?: Maybe<Scalars['String']>;
  /** current_body_fat of user */
  current_body_fat?: Maybe<Scalars['String']>;
  /** current_body_weight of user */
  current_body_weight?: Maybe<Scalars['String']>;
  /** current_daily_caloric_intake of user */
  current_daily_caloric_intake?: Maybe<Scalars['String']>;
  /** current_time_to_goal of user */
  current_time_to_goal?: Maybe<Scalars['String']>;
  /** fat_cal of user */
  fat_cal?: Maybe<Scalars['String']>;
  /** fat_grams of user */
  fat_grams?: Maybe<Scalars['String']>;
  /** Fat Percent */
  fat_percent?: Maybe<Scalars['String']>;
  /** high_end_caloric_intake of user */
  high_end_caloric_intake?: Maybe<Scalars['String']>;
  /** Ideal body fat of user */
  ideal_body_fat?: Maybe<Scalars['String']>;
  /** ideal_body_weight of user */
  ideal_body_weight?: Maybe<Scalars['String']>;
  /** ideal_daily_caloric_intake of user */
  ideal_daily_caloric_intake?: Maybe<Scalars['String']>;
  /** ideal_time_to_goal of user */
  ideal_time_to_goal?: Maybe<Scalars['String']>;
  /** low_end_caloric_intake of user */
  low_end_caloric_intake?: Maybe<Scalars['String']>;
  /** protein_cal of user */
  protein_cal?: Maybe<Scalars['String']>;
  /** protein_grams of user */
  protein_grams?: Maybe<Scalars['String']>;
  /** Protei Percent */
  protein_percent?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of HealthAssessmentServiceSignup */
export type HealthAssessmentServiceSignupInput = {
  device_token?: InputMaybe<Scalars['String']>;
  device_type?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of HealthAssessmentServiceSignup. */
export type HealthAssessmentServiceSignupPayload = {
  __typename?: 'HealthAssessmentServiceSignupPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  deeplink_url?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** HealthConcern object */
export type HealthConcern = {
  __typename?: 'HealthConcern';
  /** The code for the health concern */
  code?: Maybe<Scalars['String']>;
  /** The description of the health concern */
  description?: Maybe<Scalars['String']>;
  /** The display name of the health concern */
  display_name?: Maybe<Scalars['String']>;
  /** The effective time of the health concern */
  effective_time?: Maybe<Scalars['String']>;
  /** The unique identifier of the  */
  id: Scalars['ID'];
};

/** Health Report is a sub category of a HealthAssessment */
export type HealthReport = {
  __typename?: 'HealthReport';
  /** cancer of user */
  cancer?: Maybe<Scalars['String']>;
  /** diabetes of user */
  diabetes?: Maybe<Scalars['String']>;
  /** The fit score of the user */
  fit_score?: Maybe<Scalars['String']>;
  /** lean_body_mass of user */
  heart?: Maybe<Scalars['String']>;
  /** respiratory of user */
  respiratory?: Maybe<Scalars['String']>;
  /** stroke of user */
  stroke?: Maybe<Scalars['String']>;
};

/** Human object controls authentication for users */
export type Human = {
  __typename?: 'Human';
  /** The current user */
  current_user?: Maybe<User>;
  /** The Id of the human's currently selected user */
  current_user_id?: Maybe<Scalars['ID']>;
  /** The email of the human */
  email?: Maybe<Scalars['String']>;
  /** The unique identifier of the human */
  id: Scalars['ID'];
  /** last date the human signed in */
  last_sign_in_at?: Maybe<Scalars['String']>;
};

/** icd code */
export type IcdCode = {
  __typename?: 'IcdCode';
  /** The category of the ICD code */
  category?: Maybe<Scalars['String']>;
  /** The ICD code */
  code?: Maybe<Scalars['String']>;
  /** The date the ICD code was created */
  created_at: Scalars['String'];
  /** The description of the ICD code */
  description?: Maybe<Scalars['String']>;
  /** A display name - for use in labels */
  display_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the ICD code */
  id: Scalars['ID'];
  /** Whether the ICD code is marked as favorite */
  is_favorite?: Maybe<Scalars['Boolean']>;
  /** The date the ICD code was updated */
  updated_at: Scalars['String'];
};


/** icd code */
export type IcdCodeIs_FavoriteArgs = {
  known_value?: InputMaybe<Scalars['Boolean']>;
};

/** ICD Code sorting enum */
export enum IcdCodeOrderKeys {
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  FavoritesAsc = 'FAVORITES_ASC',
  FavoritesDesc = 'FAVORITES_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

/** icd codes cms 1500s join table */
export type IcdCodesCms1500 = {
  __typename?: 'IcdCodesCms1500';
  /** Active IcdCodesCms1500 */
  active?: Maybe<Scalars['Boolean']>;
  /** cms 1500 id */
  cms1500_id?: Maybe<Scalars['ID']>;
  /** date created */
  created_at?: Maybe<Scalars['String']>;
  /** display name */
  display_name?: Maybe<Scalars['String']>;
  /** End date */
  end_date?: Maybe<Scalars['String']>;
  /** ICD codes in use for this claim */
  first_symptom_date?: Maybe<Scalars['String']>;
  /** ICD code */
  icd_code?: Maybe<IcdCode>;
  /**
   * icd code id
   * @deprecated Use icd_code instead
   */
  icd_code_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the CMS 1500 ICD code */
  id?: Maybe<Scalars['ID']>;
  /** date updated */
  updated_at?: Maybe<Scalars['String']>;
};

/** Payload for ICD code on CMS 1500 form */
export type IcdCodesCms1500Input = {
  /** If true, the ICD code will be deleted from the join table */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** Whether the ICD code is active */
  active?: InputMaybe<Scalars['Boolean']>;
  /** The end date of the ICD code */
  end_date?: InputMaybe<Scalars['String']>;
  /** The first symptom date of the ICD code */
  first_symptom_date?: InputMaybe<Scalars['String']>;
  /** The ID of the ICD code */
  icd_code_id?: InputMaybe<Scalars['String']>;
  /** The ID of the ICD code join table */
  id?: InputMaybe<Scalars['ID']>;
};

/** icd codes individual client note join table */
export type IcdCodesIndividualClientNote = {
  __typename?: 'IcdCodesIndividualClientNote';
  /** icd code */
  icd_code?: Maybe<IcdCode>;
  /** Attached ICD Code ID */
  icd_code_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the CMS 1500 ICD code */
  id?: Maybe<Scalars['ID']>;
  /** Position of the diagnosis */
  position?: Maybe<Scalars['Int']>;
};

/** Payload for an ICD Code connection to an individual client note */
export type IcdCodesIndividualClientNoteInput = {
  /** If true, the ICD Code connection to the individual client note will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the ICD Code */
  icd_code_id?: InputMaybe<Scalars['ID']>;
  /** The ID of the ICD Code connection to the individual client note */
  id?: InputMaybe<Scalars['ID']>;
  /** The position of this diagnosis, in relation to other diagnoses for this appointment inclusion. */
  position?: InputMaybe<Scalars['Int']>;
};

/** icd codes policies join table */
export type IcdCodesPolicy = {
  __typename?: 'IcdCodesPolicy';
  /** The ICD code */
  code?: Maybe<Scalars['String']>;
  /** The date when the join was created */
  created_at?: Maybe<Scalars['String']>;
  /** The description of the join */
  description?: Maybe<Scalars['String']>;
  /** The ICD code object */
  icd_code?: Maybe<IcdCode>;
  /** The ID of the joined ICD code */
  icd_code_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the join between ICD code and policy. */
  id?: Maybe<Scalars['ID']>;
  /** The ID of the joined policy */
  policy_id?: Maybe<Scalars['ID']>;
  /** The date updated */
  updated_at?: Maybe<Scalars['String']>;
};

/** Payload for assigning a policy to an ICD code */
export type IcdCodesPolicyInput = {
  /** If true, the join table record will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the ICD code */
  icd_code_id?: InputMaybe<Scalars['String']>;
  /** The ID of the join table record */
  id?: InputMaybe<Scalars['ID']>;
  /** The ID of the policy */
  policy_id?: InputMaybe<Scalars['String']>;
};

/** icd codes super bills join table */
export type IcdCodesSuperBill = {
  __typename?: 'IcdCodesSuperBill';
  /** The date the join was created */
  created_at?: Maybe<Scalars['String']>;
  /** The joined ICD code object */
  icd_code?: Maybe<IcdCode>;
  /** The ID of the ICD code */
  icd_code_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the join */
  id: Scalars['ID'];
  /** The ID of the super bill */
  super_bill_id?: Maybe<Scalars['ID']>;
  /** The last date when the join was updated */
  updated_at?: Maybe<Scalars['String']>;
};

/** Payload for an ICD code super bill */
export type IcdCodesSuperBillInput = {
  /** If true, the ICD code super bill will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the ICD code */
  icd_code_id?: InputMaybe<Scalars['String']>;
  /** The ID of the ICD code super bill */
  id?: InputMaybe<Scalars['ID']>;
};

/** User immunization */
export type Immunization = {
  __typename?: 'Immunization';
  /** Additional notes */
  additional_notes?: Maybe<Scalars['String']>;
  /** The cvx_code */
  cvx_code: Scalars['Int'];
  /** The unique identifier of the type */
  id: Scalars['ID'];
  /** Time when the immunization was received */
  received_at: Scalars['String'];
  /** The immunization status */
  status: Scalars['String'];
  /** The identifier of the user */
  user_id: Scalars['ID'];
  /** The description of the code */
  vaccine_name: Scalars['String'];
};

/** An implantable device */
export type ImplantableDevice = {
  __typename?: 'ImplantableDevice';
  /** Brand name of the implantable device. */
  brand_name?: Maybe<Scalars['String']>;
  /** Name of the company that manufactures the implantable device. */
  company_name?: Maybe<Scalars['String']>;
  /** A string representation of the date/time when the device record was created in the database. */
  created_at?: Maybe<Scalars['String']>;
  /** A unique identifier assigned to the device. */
  device_id?: Maybe<Scalars['String']>;
  /** The agency that issued the device identifier. */
  device_id_issuing_agency?: Maybe<Scalars['String']>;
  /** Dun & Bradstreet number (DUNS number) is a unique nine-digit identifier for businesses. */
  duns_number?: Maybe<Scalars['String']>;
  /** Global Medical Device Nomenclature (GMDN) terms, a system of internationally agreed generic descriptors used to identify all medical device products. */
  gmdn_terms?: Maybe<Scalars['String']>;
  /** The unique identifier of the implantable device type */
  id: Scalars['ID'];
  /** Whether the device contains natural rubber latex or not. */
  labeled_contains_nrl?: Maybe<Scalars['String']>;
  /** Status of the device's safety in an MRI environment (e.g., safe, conditional, unsafe). */
  mri_safety_status?: Maybe<Scalars['String']>;
  /** Key of the device's public record. */
  public_device_record_key?: Maybe<Scalars['String']>;
  /** Date when the public version of the device record was created or updated. */
  public_version_date?: Maybe<Scalars['String']>;
  /** Version number of the public device record. */
  public_version_number?: Maybe<Scalars['String']>;
  /** Status of the public version of the device record (e.g., active, retired). */
  public_version_status?: Maybe<Scalars['String']>;
  /** A string representation of the date/time when the device record was last updated in the database. */
  updated_at?: Maybe<Scalars['String']>;
  /** Version or model number of the device. */
  version_model_number?: Maybe<Scalars['String']>;
};

/** An Implantable Device User  */
export type ImplantableDeviceUser = {
  __typename?: 'ImplantableDeviceUser';
  /** A boolean value representing if the Implantable Device is currently active. */
  active?: Maybe<Scalars['Boolean']>;
  /** Unique identifier for the Implantable Device User connection record. */
  id?: Maybe<Scalars['ID']>;
  /** Details of the Implantable Device. */
  implantable_device?: Maybe<ImplantableDevice>;
  /** Unique identifier for the associated Implantable Device record. */
  implantable_device_id?: Maybe<Scalars['ID']>;
  /** User provided name for the Implantable Device. */
  name?: Maybe<Scalars['String']>;
  /** Recorded UDI for this associated Implantable Device User record. */
  udi?: Maybe<Scalars['String']>;
  /** User associated with the Implantable Device, including all User details. */
  user?: Maybe<User>;
  /** Unique identifier for the associated User record. */
  user_id?: Maybe<Scalars['ID']>;
};

/** An object containing info about the import data request */
export type ImportDataRequest = {
  __typename?: 'ImportDataRequest';
  /** The file type of import */
  clients_template?: Maybe<Scalars['String']>;
  /** The date and time that the import data request was created */
  created_at: Scalars['String'];
  /** The file name */
  display_name?: Maybe<Scalars['String']>;
  /** The file extension */
  extension?: Maybe<Scalars['String']>;
  /** The optional comment of import */
  optional_comment?: Maybe<Scalars['String']>;
  /** The request type */
  request_type: Scalars['String'];
};

/** Payload for an individual client note */
export type IndividualClientNoteInput = {
  /** The client's attendance status. This gets applied to the AppointmentInclusion object */
  attended?: InputMaybe<Scalars['Boolean']>;
  /** The content of the individual client note */
  content?: InputMaybe<Scalars['String']>;
  /** Diagnoses connected to the individual client attendance */
  icd_codes_individual_client_notes_attributes?: InputMaybe<Array<InputMaybe<IcdCodesIndividualClientNoteInput>>>;
  /** The ID of the individual client note */
  id?: InputMaybe<Scalars['ID']>;
  /** The datetime (ISO 8601) that the attendee joined the appointment */
  join_time?: InputMaybe<Scalars['String']>;
  /** The datetime (ISO 8601) that the attendee left the appointment */
  leave_time?: InputMaybe<Scalars['String']>;
  /** The ID of the user who created the individual client note */
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Individual client note sorting enum */
export enum IndividualClientNoteOrderKeys {
  AttendedDesc = 'ATTENDED_DESC',
  CreatedAtDesc = 'CREATED_AT_DESC'
}

/** Individual client note sorting enum */
export enum IndividualClientNoteSorting {
  /** @deprecated Use `IndividualClientNoteOrderKeys` and `order_by` instead */
  AttendedDesc = 'ATTENDED_DESC',
  /** @deprecated Use `IndividualClientNoteOrderKeys` and `order_by` instead */
  CreatedAtDesc = 'CREATED_AT_DESC'
}

/** An object containing an individual note for certain patient associated with group charting note */
export type IndividualClientType = {
  __typename?: 'IndividualClientType';
  /** The ID of related appointment_inclusion */
  appointment_inclusion_id?: Maybe<Scalars['ID']>;
  /** True if user has attended the appointment */
  attended?: Maybe<Scalars['Boolean']>;
  /** The content of the note */
  content?: Maybe<Scalars['String']>;
  /** Diagnoses connected to the individual client attendance */
  icd_codes_individual_client_notes?: Maybe<Array<IcdCodesIndividualClientNote>>;
  /** The unique identifier of the note */
  id: Scalars['ID'];
  /** The datetime that the attendee joined the appointment (comes from the related appointment inclusion) */
  join_time?: Maybe<Scalars['String']>;
  /** The datetime that the attendee left the appointment (comes from the related appointment inclusion) */
  leave_time?: Maybe<Scalars['String']>;
  /** Associated patient */
  user?: Maybe<User>;
};

/** An object containing information about the chart for an insurance authorization type */
export type InsuranceAuthorizationChartType = {
  __typename?: 'InsuranceAuthorizationChartType';
  /** The title of the earliest date value of the chart */
  earliest_date_title?: Maybe<Scalars['String']>;
  /** The value of the earliest date value of the chart */
  earliest_date_value?: Maybe<Scalars['String']>;
  /** The title of the latest date value of the chart */
  latest_date_title?: Maybe<Scalars['String']>;
  /** The value of the latest date value of the chart */
  latest_date_value?: Maybe<Scalars['String']>;
  /** The percentage width of the left section of the chart */
  left_section_width?: Maybe<Scalars['String']>;
  /** The title of the middle date value of the chart */
  middle_date_title?: Maybe<Scalars['String']>;
  /** The value of the middle date value of the chart */
  middle_date_value?: Maybe<Scalars['String']>;
  /** The percentage width of the right section of the chart */
  right_section_width?: Maybe<Scalars['String']>;
};

/** Payload for an insurance authorization */
export type InsuranceAuthorizationInput = {
  /** The authorization number */
  authorization_number?: InputMaybe<Scalars['String']>;
  /** The end date of the authorization */
  end_on?: InputMaybe<Scalars['String']>;
  /** The ID of the insurance authorization */
  id?: InputMaybe<Scalars['ID']>;
  /** The start date of the authorization */
  start_on?: InputMaybe<Scalars['String']>;
  /** The unit type */
  unit_type?: InputMaybe<Scalars['String']>;
  /** The number of authorized units */
  units_authorized?: InputMaybe<Scalars['String']>;
  /** The unit limit per visit */
  units_limit_per_visit?: InputMaybe<Scalars['String']>;
  /** The number of used units */
  units_used?: InputMaybe<Scalars['String']>;
  /** The number of authorized visits */
  visits_authorized?: InputMaybe<Scalars['String']>;
  /** The number of used visits */
  visits_used?: InputMaybe<Scalars['String']>;
};

/** An insurance authorization */
export type InsuranceAuthorizationType = {
  __typename?: 'InsuranceAuthorizationType';
  /** The authorization number */
  authorization_number?: Maybe<Scalars['String']>;
  /** Chart info for the insurance authorization */
  chart_info?: Maybe<InsuranceAuthorizationChartType>;
  /** The day that visits authorized by the insurance company have no effect */
  end_on?: Maybe<Scalars['String']>;
  /** The unique identifier of the authorization */
  id: Scalars['ID'];
  /** The day that visits authorized by the insurance company take effect */
  start_on?: Maybe<Scalars['String']>;
  /** The amount of units left */
  unit_type?: Maybe<Scalars['String']>;
  /** The amount of units authorized by the insurance company */
  units_authorized?: Maybe<Scalars['String']>;
  /** The amount of units left */
  units_left?: Maybe<Scalars['String']>;
  /** Most units/hours allowed per visit */
  units_limit_per_visit?: Maybe<Scalars['String']>;
  /** The amount of units used by the client */
  units_used?: Maybe<Scalars['String']>;
  /** Most recent date authorization was updated */
  updated_at?: Maybe<Scalars['String']>;
  /** The ID of the user for whom the authorization was created */
  user_id?: Maybe<Scalars['ID']>;
  /**
   * The amount of units authorized by the insurance company
   * @deprecated Use units_authorized instead
   */
  visits_authorized?: Maybe<Scalars['String']>;
  /**
   * The amount of units left
   * @deprecated Use units_left instead
   */
  visits_left?: Maybe<Scalars['String']>;
  /**
   * The amount of units used by the client
   * @deprecated Use units_used instead
   */
  visits_used?: Maybe<Scalars['String']>;
};

/** An Insurance Plan */
export type InsurancePlan = {
  __typename?: 'InsurancePlan';
  /** The Eligibility Payer ID for eligibility requests in Change that this maps to */
  change_healthcare_eligibility_payer_id?: Maybe<Scalars['String']>;
  /** The Payer ID for claims requests in Change that this maps to */
  change_healthcare_payer_id?: Maybe<Scalars['String']>;
  /** Location of the first policy associated to the current user and insurance plan */
  default_payer_location?: Maybe<Location>;
  /** The unique identifier of the plan */
  id: Scalars['ID'];
  /** Insurance Plan marked as accepted */
  is_accepted?: Maybe<Scalars['Boolean']>;
  /** A combined string to use for labels */
  name_and_id?: Maybe<Scalars['String']>;
  /** The Payer ID of the insurance plan */
  payer_id?: Maybe<Scalars['String']>;
  /** The name of the insurance plan */
  payer_name?: Maybe<Scalars['String']>;
  /**
   * Owner of this insurance plan
   * @deprecated Insurance Plans do not have an associated user
   */
  user?: Maybe<User>;
};


/** An Insurance Plan */
export type InsurancePlanDefault_Payer_LocationArgs = {
  ids?: InputMaybe<Scalars['String']>;
};


/** An Insurance Plan */
export type InsurancePlanIs_AcceptedArgs = {
  known_value?: InputMaybe<Scalars['Boolean']>;
};

/** Payload for an insurance plan */
export type InsurancePlanInput = {
  /** The ID of the insurance plan */
  id?: InputMaybe<Scalars['String']>;
  /** The name of the payer */
  payer_name?: InputMaybe<Scalars['String']>;
};

/** InsurancePlan sorting enum */
export enum InsurancePlanOrderKeys {
  Accepted = 'ACCEPTED',
  PayerNameAsc = 'PAYER_NAME_ASC'
}

/** The intake flow item */
export type IntakeFlowItem = {
  __typename?: 'IntakeFlowItem';
  /** Attached object */
  attached_object_edit_url?: Maybe<Scalars['String']>;
  /** The completed onboarding item for the given user id (from args) */
  completed_onboarding_item?: Maybe<CompletedOnboardingItem>;
  /** The form to fill out */
  custom_module_form?: Maybe<CustomModuleForm>;
  /** The relevant date to show */
  date_to_show?: Maybe<Scalars['String']>;
  /** The display name */
  display_name?: Maybe<Scalars['String']>;
  /** The id of the filled form that completes the request. Only present if form_type is RequestedForm */
  form_answer_group_id?: Maybe<Scalars['String']>;
  /** Form type */
  form_type?: Maybe<Scalars['String']>;
  /** The unique idenitifier of the item */
  id: Scalars['ID'];
  /** Return the ID of the incomplete form */
  incomplete_form_id?: Maybe<Scalars['String']>;
  /** The type of item */
  item_type?: Maybe<Scalars['String']>;
  /** The onboarding item that was completed */
  onboarding_item?: Maybe<OnboardingItem>;
  /** Recurring form related to the request */
  recurring_form?: Maybe<RecurringForm>;
  /** Skipped */
  skipped?: Maybe<Scalars['Boolean']>;
  /** Form status */
  status?: Maybe<Scalars['String']>;
  /** Tab type */
  tab_type?: Maybe<Scalars['String']>;
  /** View url */
  view_url?: Maybe<Scalars['String']>;
};

/** IntakeFlow sorting enum */
export enum IntakeFlowOrderKeys {
  DateAsc = 'DATE_ASC',
  DateDesc = 'DATE_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC'
}

/** Intake Flow */
export type IntakeFlowType = {
  __typename?: 'IntakeFlowType';
  /** All forms in the intake flow */
  all_forms?: Maybe<Array<IntakeFlowItem>>;
  /** Completed and skipped forms in the intake flow */
  completed_skipped?: Maybe<Array<IntakeFlowItem>>;
  /** Forms in the intake flow */
  forms?: Maybe<Array<IntakeFlowItem>>;
  /** Intake flows */
  intake_flows?: Maybe<Array<IntakeFlowItem>>;
  /** Not started and incomplete forms in the intake flow */
  not_started_incomplete?: Maybe<Array<IntakeFlowItem>>;
  /** Requested forms in the intake flow */
  requested?: Maybe<Array<IntakeFlowItem>>;
};

/** Integration Category */
export type IntegrationCategoryType = {
  __typename?: 'IntegrationCategoryType';
  /** The description of the integration category */
  description?: Maybe<Scalars['String']>;
  /** The unique identifier of the category */
  id: Scalars['ID'];
  /** The name of the integration category */
  name?: Maybe<Scalars['String']>;
  /** The list of category options */
  options?: Maybe<Array<IntegrationOptionType>>;
};

/** The option of an integration */
export type IntegrationOptionType = {
  __typename?: 'IntegrationOptionType';
  /** The name of the status when the option is disabled */
  disabled_status_name?: Maybe<Scalars['String']>;
  /** The label of the button to enable the option */
  enable_button_label?: Maybe<Scalars['String']>;
  /** The url of the button to enable the option */
  enable_button_url?: Maybe<Scalars['String']>;
  /** The name of the status when the option is enabled */
  enabled_status_name?: Maybe<Scalars['String']>;
  /** List of connected members */
  erx_connected_members?: Maybe<Array<Scalars['String']>>;
  /** The unique identifier of the option */
  id: Scalars['ID'];
  /** The unique identifier of the category the option belongs to */
  integration_category_id?: Maybe<Scalars['ID']>;
  /** Whether the option is active */
  is_active?: Maybe<Scalars['Boolean']>;
  /** Whether the option is pending */
  is_pending?: Maybe<Scalars['Boolean']>;
  /** The long description of the option */
  long_description?: Maybe<Scalars['String']>;
  /** The name of the option */
  name?: Maybe<Scalars['String']>;
  /** The short description of the option */
  short_description?: Maybe<Scalars['String']>;
  /** The type of the option */
  type?: Maybe<Scalars['String']>;
};

/** Options for lab filters */
export type LabFiltersDataType = {
  __typename?: 'LabFiltersDataType';
  /** The list of the data clients */
  clients?: Maybe<Array<User>>;
  /** The list of the labs */
  labs?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The list of the data providers */
  providers?: Maybe<Array<User>>;
  /** The list of the statuses */
  statuses?: Maybe<Array<Maybe<Scalars['String']>>>;
};

/** A lab observation request */
export type LabObservationRequest = {
  __typename?: 'LabObservationRequest';
  /** The unique identifier of the request */
  id: Scalars['ID'];
  /** The name of the lab analyte */
  lab_analyte?: Maybe<Scalars['String']>;
  /** Lab observation results for lab request */
  lab_observation_results: Array<Maybe<LabObservationResult>>;
};

/** Payload for a client portal setting */
export type LabObservationRequestInput = {
  /** The substance being measured and test code. e.g 005009^CBC With Differential/Platelet^RN */
  lab_analyte?: InputMaybe<Scalars['String']>;
  /** the analyte result */
  lab_observation_result?: InputMaybe<LabObservationResultInput>;
};

/** A lab observation result */
export type LabObservationResult = {
  __typename?: 'LabObservationResult';
  /** The flag of abnormality in the observation */
  abnormal_flag?: Maybe<Scalars['String']>;
  /** The unique identifier of the result */
  id: Scalars['ID'];
  /** The notes of the lab observation */
  notes?: Maybe<Scalars['String']>;
  /** The qualitative result of the lab observation */
  qualitative_result?: Maybe<Scalars['String']>;
  /** The quantitative result of the lab observation */
  quantitative_result?: Maybe<Scalars['String']>;
  /** The reference range of the lab observation */
  reference_range?: Maybe<Scalars['String']>;
  /** The units of the lab observation measurement */
  units?: Maybe<Scalars['String']>;
};

/** Payload for a client portal setting */
export type LabObservationResultInput = {
  /** A flag on any abnormality (e.g L for low or H for high) */
  abnormal_flag?: InputMaybe<Scalars['String']>;
  /** Extra description or context on the result */
  notes?: InputMaybe<Scalars['String']>;
  /** The qualitivate result e.g "005025^WBC^L^6690-2^Leukocytes^LN" */
  qualitative_result?: InputMaybe<Scalars['String']>;
  /** The quantitative result e.g "9.6" */
  quantitative_result?: InputMaybe<Scalars['String']>;
  /** The reference range e.g "3.4-10.8" */
  reference_range?: InputMaybe<Scalars['String']>;
  /** The units of the measurement e.g "x10E3/uL^x10E3/uL" */
  units?: InputMaybe<Scalars['String']>;
};

/** Lab Option */
export type LabOption = {
  __typename?: 'LabOption';
  /** The unique identifier of the option */
  id: Scalars['ID'];
  /** Name of the option */
  name?: Maybe<Scalars['String']>;
};

/** Lab Order Object */
export type LabOrder = {
  __typename?: 'LabOrder';
  /** abnormality in results */
  abnormal?: Maybe<Scalars['Boolean']>;
  /** Confirmation Code of Scheduled Appointment */
  appt_confirmation_code?: Maybe<Scalars['String']>;
  /** Date Lab Order was Placed */
  created_at: Scalars['String'];
  /** Get result document */
  document?: Maybe<Document>;
  /** The unique identifier of the order */
  id: Scalars['ID'];
  /** Order integration (lab_testing_api, evexia, rupa) */
  integration: Scalars['String'];
  /** Name of the lab */
  lab?: Maybe<Scalars['String']>;
  /** Name of the lab */
  lab_company?: Maybe<Scalars['String']>;
  /** Lab options included in lab order */
  lab_options: Array<LabOption>;
  /** Lab results */
  lab_results: Array<LabResult>;
  /** Order ID */
  lta_id?: Maybe<Scalars['String']>;
  /** The normalized status of the order */
  normalized_status?: Maybe<Scalars['String']>;
  /** Provider for lab order */
  orderer?: Maybe<User>;
  /** Patient for lab order */
  patient?: Maybe<User>;
  /** Get most recent pdf document */
  pdf_document?: Maybe<Document>;
  /** Order ID on the rupa health */
  rupa_order_id?: Maybe<Scalars['String']>;
  /** Show lab result with PDF document */
  show_pdf_messages?: Maybe<Scalars['Boolean']>;
  /** Status of the Lab Order */
  status?: Maybe<Scalars['String']>;
  /** Date of Test */
  test_date?: Maybe<Scalars['String']>;
  /** Date Lab Order was updated */
  updated_at: Scalars['String'];
  /** Link to view the rupa order */
  view_rupa_order_url?: Maybe<Scalars['String']>;
};

/** LabOrder sorting enum */
export enum LabOrderOrderKeys {
  ApptAsc = 'APPT_ASC',
  ApptDesc = 'APPT_DESC',
  ClientLastNameAsc = 'CLIENT_LAST_NAME_ASC',
  ClientLastNameDesc = 'CLIENT_LAST_NAME_DESC',
  LabAsc = 'LAB_ASC',
  LabDesc = 'LAB_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  ProviderLastNameAsc = 'PROVIDER_LAST_NAME_ASC',
  ProviderLastNameDesc = 'PROVIDER_LAST_NAME_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

/** Lab Result */
export type LabResult = {
  __typename?: 'LabResult';
  /** Document for lab result */
  document?: Maybe<Document>;
  /** The unique identifier of the result */
  id: Scalars['ID'];
  /** Lab observation requests for lab result */
  lab_observation_requests?: Maybe<Array<Maybe<LabObservationRequest>>>;
  /** The ID of the corresponding lab order */
  lab_order_id: Scalars['ID'];
  /** Ordering Physician for lab result */
  ordering_physician?: Maybe<User>;
  /** Patient for lab result */
  patient?: Maybe<User>;
  /** The type of the lab result */
  result_type?: Maybe<Scalars['String']>;
  /** The status of the result */
  status_flag?: Maybe<Scalars['String']>;
};

/** A location */
export type Location = {
  __typename?: 'Location';
  /** The city of the address */
  city?: Maybe<Scalars['String']>;
  /** The Country Code of the address */
  country?: Maybe<Scalars['String']>;
  /** The unique identifier of the location */
  id: Scalars['ID'];
  /** The first line of the address */
  line1?: Maybe<Scalars['String']>;
  /** The second line of the address */
  line2?: Maybe<Scalars['String']>;
  /** The name of the location */
  name?: Maybe<Scalars['String']>;
  /** The NPI of the location */
  npi?: Maybe<Scalars['String']>;
  /** The Other ID of the location */
  other_id?: Maybe<Scalars['String']>;
  /** The Other ID Qualification of the location */
  other_id_qual?: Maybe<Scalars['String']>;
  /** The place of service associated with this location */
  place_of_service?: Maybe<PlaceOfService>;
  /** The place of service id of the location */
  place_of_service_id?: Maybe<Scalars['String']>;
  /** The state of the address (Uses the 2 letter abbreviation if in US) */
  state?: Maybe<Scalars['String']>;
  /** The location condensed to a single line */
  to_oneline?: Maybe<Scalars['String']>;
  /** Owner of this location */
  user?: Maybe<User>;
  /** The ID of the user */
  user_id?: Maybe<Scalars['String']>;
  /** The zip/postal code of the address */
  zip?: Maybe<Scalars['String']>;
};

/** Payload for a CMS 1500 location */
export type LocationInput = {
  /** The city */
  city?: InputMaybe<Scalars['String']>;
  /** The country code */
  country?: InputMaybe<Scalars['String']>;
  /** The ID of the location */
  id?: InputMaybe<Scalars['ID']>;
  /** The first line of the address */
  line1?: InputMaybe<Scalars['String']>;
  /** The second line of the address */
  line2?: InputMaybe<Scalars['String']>;
  /** The graphql_name of the location */
  name?: InputMaybe<Scalars['String']>;
  /** The NPI of the location */
  npi?: InputMaybe<Scalars['String']>;
  /** The other ID of the location */
  other_id?: InputMaybe<Scalars['String']>;
  /** The other ID qual of the location */
  other_id_qual?: InputMaybe<Scalars['String']>;
  /** The place of service ID of the location */
  place_of_service_id?: InputMaybe<Scalars['String']>;
  /** The state */
  state?: InputMaybe<Scalars['String']>;
  /** The ID of user who owns the location */
  user_id?: InputMaybe<Scalars['String']>;
  /** The zip code */
  zip?: InputMaybe<Scalars['String']>;
};

/** Payload for a location */
export type LocationInputs = {
  /** The city */
  city?: InputMaybe<Scalars['String']>;
  /** The country code */
  country?: InputMaybe<Scalars['String']>;
  /** The ID of the location */
  id?: InputMaybe<Scalars['ID']>;
  /** The first line of the address */
  line1?: InputMaybe<Scalars['String']>;
  /** The second line of the address */
  line2?: InputMaybe<Scalars['String']>;
  /** The graphql_name of the location */
  name?: InputMaybe<Scalars['String']>;
  /** The state */
  state?: InputMaybe<Scalars['String']>;
  /** The zip code */
  zip?: InputMaybe<Scalars['String']>;
};

/** Location resource */
export type LocationResourceType = {
  __typename?: 'LocationResourceType';
  /** The resource ID */
  resourceId?: Maybe<Scalars['String']>;
  /** The resource title */
  resourceTitle?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of MaskAccount */
export type MaskAccountInput = {
  email?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  namespace?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of MaskAccount. */
export type MaskAccountPayload = {
  __typename?: 'MaskAccountPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** A meal that a user has created */
export type Meal = {
  __typename?: 'Meal';
  /** The food items that are part of the meal */
  food_items?: Maybe<Array<FoodItem>>;
  /** The unique identifier of the meal */
  id: Scalars['ID'];
  /** The name of the meal */
  name?: Maybe<Scalars['String']>;
  /** The user that owns the meal */
  user_id?: Maybe<Scalars['String']>;
};

/** A meal plan */
export type MealPlan = {
  __typename?: 'MealPlan';
  /** If true, meal plan is active (most recent) on client's Living Plate account */
  active?: Maybe<Scalars['Boolean']>;
  /** Date meal plan was added to client's Living Plate account */
  date_added?: Maybe<Scalars['String']>;
  /** The unique identifier of the plan */
  id: Scalars['ID'];
  /** name of the meal plan on Living Plate */
  name?: Maybe<Scalars['String']>;
  /** If one exists, name of offering that was purchased that added meal plan to client's Living Plate account */
  offering_name?: Maybe<Scalars['String']>;
};

/** Medication query result */
export type MedicationOptionType = {
  __typename?: 'MedicationOptionType';
  /** The dosage options of the medication option */
  dosage_options?: Maybe<Array<Maybe<DosageType>>>;
  /** The dosages of the medication option */
  dosages?: Maybe<Array<Scalars['String']>>;
  /** The unique identifier of the medication option */
  id: Scalars['ID'];
  /** The name of the medication option */
  name: Scalars['String'];
};

/** Medication belonging to client */
export type MedicationType = {
  __typename?: 'MedicationType';
  /** Indicates if medication is still active (medication can also be inactive if current date doesn't fall between start and end date) */
  active?: Maybe<Scalars['Boolean']>;
  /** CCDA code for this medication */
  code?: Maybe<Scalars['String']>;
  /** Comments entered by provider */
  comment?: Maybe<Scalars['String']>;
  /** The time the medication was created */
  created_at: Scalars['String'];
  /** Directions to use medication entered by provider */
  directions?: Maybe<Scalars['String']>;
  /** Dosage of medication entered by provider */
  dosage?: Maybe<Scalars['String']>;
  /** last date patient should be able to use medication */
  end_date?: Maybe<Scalars['String']>;
  /** Frequency of this medication */
  frequency?: Maybe<Scalars['String']>;
  /** The unique identifier of the medication */
  id: Scalars['ID'];
  /** Name of medication */
  name?: Maybe<Scalars['String']>;
  /** The way this medication is administered */
  route?: Maybe<Scalars['String']>;
  /** First active date of medication */
  start_date?: Maybe<Scalars['String']>;
  /** The last time the medication was updated */
  updated_at?: Maybe<Scalars['String']>;
};

/** A data point for a metric */
export type MetricDataPointType = {
  __typename?: 'MetricDataPointType';
  /** The time the data point was created */
  created_at: Scalars['String'];
  /** The entry id of the data point */
  entry_id?: Maybe<Scalars['String']>;
  /** The value of the data point */
  flex_value?: Maybe<Scalars['String']>;
  /**
   * The value of the data point
   * @deprecated Use flex value, which supports both string and number values
   */
  value?: Maybe<Scalars['Float']>;
};

/** Metric Graph data */
export type MetricGraphDataType = {
  __typename?: 'MetricGraphDataType';
  /** Category of the metric, e.g. "Weight" or "Steps" */
  category?: Maybe<Scalars['String']>;
  /** Label for the category, e.g. "Weight" or "Steps" */
  category_label?: Maybe<Scalars['String']>;
  /** Data points for the graph */
  data_points?: Maybe<Array<MetricDataPointType>>;
  /** False if the category has no entry */
  has_entry?: Maybe<Scalars['Boolean']>;
  /** Maximum value of the data points */
  max?: Maybe<Scalars['Float']>;
  /** Minimum value of the data points */
  min?: Maybe<Scalars['Float']>;
  /** Type of xtick, e.g. "date" or "time" */
  xtick_type?: Maybe<Scalars['String']>;
  /** Type of ytick, e.g. "date" or "time" */
  ytick_type?: Maybe<Scalars['String']>;
};

/** Monthly billing items data */
export type MonthlyBillingItemsDataType = {
  __typename?: 'MonthlyBillingItemsDataType';
  /** Amount of monthly billing items */
  amount?: Maybe<Scalars['Int']>;
  /** Month the data relates to */
  month?: Maybe<Scalars['String']>;
};

/** Multi line metric graph data type */
export type MultiLineMetricGraphDataType = {
  __typename?: 'MultiLineMetricGraphDataType';
  /** Category name */
  category?: Maybe<Scalars['String']>;
  /** Category label */
  category_label?: Maybe<Scalars['String']>;
  /** False if the category has no entry */
  has_entry?: Maybe<Scalars['Boolean']>;
  /** Metric graph data */
  metric_graph_datas?: Maybe<Array<MetricGraphDataType>>;
};

/** The mutation root of this schema. See available mutations. */
export type Mutation = {
  __typename?: 'Mutation';
  /** Add CPT Code and Description to the Database */
  addCptCode?: Maybe<AddCptCodePayload>;
  /** Create Dosespot E-Rx for provider account */
  addDosespot?: Maybe<CreateDosespotPayload>;
  /** Add ICD Code and Description to the Database */
  addIcdCode?: Maybe<AddIcdCodePayload>;
  /** Add Living Plate Integration to provider */
  addLivingPlate?: Maybe<AddLivingPlatePayload>;
  /** Apply selected tags on a specific user */
  bulkApply?: Maybe<BulkApplyPayload>;
  /** Apply care plan to the passed array of clients and/or groups */
  bulkApplyCarePlanTemplate?: Maybe<BulkApplyCarePlanTemplatePayload>;
  /** bulk create Availability */
  bulkCreateAvailability?: Maybe<BulkCreateAvailabilityPayload>;
  /** creates bulk Entries (intended for apple health only for the time being) */
  bulkCreateEntries?: Maybe<BulkCreateEntriesPayload>;
  /** Delete tasks */
  bulkDeleteTasks?: Maybe<BulkDeleteTasksPayload>;
  /** Update unseen card issues on a provider */
  bulkUpdateCardIssues?: Maybe<BulkUpdateCardIssuesPayload>;
  /** Trigger notification email or care plan activation for each user related to the selected care plans. In case of activation, a group care plan will be activated for each user of user_group(unless a user already have an active care plan). If you want to activate selected care plan for only one user(user of group) use ToggleCarePlanStatusForSpecificUser mutation */
  bulkUpdateCarePlanUsers?: Maybe<BulkUpdateCarePlanUsersPayload>;
  /** Update multiple clients at once. Will change user group for multiple clients if user_group_id passed, otherwise clients will be archived */
  bulkUpdateClients?: Maybe<BulkUpdateClientsPayload>;
  /** disabled devices in video chat */
  changeDevicesAvailability?: Maybe<ChangeDevicesAvailabilityPayload>;
  /** Complete the checkout for booking or buying */
  completeCheckout?: Maybe<CompleteCheckoutPayload>;
  /** Create CompletedCourseItem for related document */
  completeCourseDocument?: Maybe<CompleteCourseDocumentPayload>;
  /** Convert to Metric */
  convertToMetric?: Maybe<ConvertToMetricPayload>;
  /** Copy a Course */
  copyCourse?: Maybe<CopyCoursePayload>;
  /** Copy Custom Module */
  copyCustomModule?: Maybe<CopyCustomModulePayload>;
  /** copy Custom Module Form */
  copyCustomModuleForm?: Maybe<CopyCustomModuleFormPayload>;
  /** Copy an Offering */
  copyOffering?: Maybe<CopyOfferingPayload>;
  /** Create Accepted Insurance Plans */
  createAcceptedInsurancePlan?: Maybe<CreateAcceptedInsurancePlanPayload>;
  /** Create a new addendum for the selected charting note */
  createAddendum?: Maybe<CreateAddendumPayload>;
  /** Create AllergySensitivity */
  createAllergySensitivity?: Maybe<CreateAllergySensitivityPayload>;
  /** Create Announcement */
  createAnnouncement?: Maybe<CreateAnnouncementPayload>;
  /** create API Key. This capability needs to be turned on for your account first */
  createApiKey?: Maybe<CreateApiKeyPayload>;
  /** Create AppleHealth */
  createAppleHealth?: Maybe<CreateAppleHealthPayload>;
  /** create appointment mutation for providers. Clients use the completeCheckout mutation */
  createAppointment?: Maybe<CreateAppointmentPayload>;
  /** create an Appointment Setting */
  createAppointmentSetting?: Maybe<CreateAppointmentSettingPayload>;
  /** create Appointment Type */
  createAppointmentType?: Maybe<CreateAppointmentTypePayload>;
  /** Create an Appointment Type CPT Code Object */
  createAppointmentTypeCptCode?: Maybe<CreateAppointmentTypeCptCodePayload>;
  /** Create auto task generator */
  createAutoTaskGenerator?: Maybe<CreateAutoTaskGeneratorPayload>;
  /** Create availability */
  createAvailability?: Maybe<CreateAvailabilityPayload>;
  /** create billing item */
  createBillingItem?: Maybe<CreateBillingItemPayload>;
  /** create Brand */
  createBrand?: Maybe<CreateBrandPayload>;
  /** create Campaign */
  createCampaign?: Maybe<CreateCampaignPayload>;
  /** Create and return a care plan */
  createCarePlan?: Maybe<CreateCarePlanPayload>;
  /** Create Change Health for provider account */
  createChangeHealth?: Maybe<CreateChangeHealthPayload>;
  /** creates ChangeHealth patient record */
  createChangeHealthPatient?: Maybe<CreateChangeHealthPatientPayload>;
  /** create an Chat Setting */
  createChatSetting?: Maybe<CreateChatSettingPayload>;
  /** Create a Client */
  createClient?: Maybe<CreateClientPayload>;
  /** create a client account via a form (e.g a lead capture form) or match to an existing client by name and email. This endpoint is meant to be called unauthenticated. If you want the client to buy or book something at the same time, use the CompleteCheckout mutation. */
  createClientViaForm?: Maybe<CreateClientViaFormPayload>;
  /** create CMS1500 */
  createCms1500?: Maybe<CreateCms1500Payload>;
  /** Create a CognitiveStatus Object */
  createCognitiveStatus?: Maybe<CreateCognitiveStatusPayload>;
  /** create Comment */
  createComment?: Maybe<CreateCommentPayload>;
  /** create CompletedCourseItem */
  createCompletedCourseItem?: Maybe<CreateCompletedCourseItemPayload>;
  /** create CompletedOnboardingItem */
  createCompletedOnboardingItem?: Maybe<CreateCompletedOnboardingItemPayload>;
  /** Creates a Contact */
  createContact?: Maybe<CreateContactPayload>;
  /** create Conversation */
  createConversation?: Maybe<CreateConversationPayload>;
  /** create Course */
  createCourse?: Maybe<CreateCoursePayload>;
  /** create CourseBenefit */
  createCourseBenefit?: Maybe<CreateCourseBenefitPayload>;
  /** create CourseItem */
  createCourseItem?: Maybe<CreateCourseItemPayload>;
  /** create custom email */
  createCustomEmail?: Maybe<CreateCustomEmailPayload>;
  /** Create a Custom Food */
  createCustomFood?: Maybe<CreateCustomFoodPayload>;
  /** create Custom Module */
  createCustomModule?: Maybe<CreateCustomModulePayload>;
  /** create Custom Module Form */
  createCustomModuleForm?: Maybe<CreateCustomModuleFormPayload>;
  /** create Document */
  createDocument?: Maybe<CreateDocumentPayload>;
  /** Create dosespot clinician */
  createDosespotClinician?: Maybe<CreateDosespotClinicianPayload>;
  /** create Draft */
  createDraft?: Maybe<CreateDraftPayload>;
  /** create ebook */
  createEbook?: Maybe<CreateEbookPayload>;
  /** creates a new Entry */
  createEntry?: Maybe<CreateEntryPayload>;
  /** Create an External Calendar */
  createExternalCalendar?: Maybe<CreateExternalCalendarPayload>;
  /** Create Family History */
  createFamilyHistory?: Maybe<CreateFamilyHistoryPayload>;
  /** create Fax Acct Info */
  createFaxAcctInfo?: Maybe<CreateFaxAcctInfoPayload>;
  /** Create and return a fax line request */
  createFaxLineRequest?: Maybe<CreateFaxLineRequestPayload>;
  /** Create a FeatureToggle and Return FeatureToggle */
  createFeatureToggle?: Maybe<CreateFeatureTogglePayload>;
  /** Create Fitbit */
  createFitbit?: Maybe<CreateFitbitPayload>;
  /** create Folder */
  createFolder?: Maybe<CreateFolderPayload>;
  /** create FormAnswerGroup */
  createFormAnswerGroup?: Maybe<CreateFormAnswerGroupPayload>;
  /** create FormAnswerGroupSigning */
  createFormAnswerGroupSigning?: Maybe<CreateFormAnswerGroupSigningPayload>;
  /** Create a Fullscript practitioner account using the Fullscript API */
  createFullscriptPractitioner?: Maybe<CreateFullscriptPractitionerPayload>;
  /** Create a FunctionalStatus Object */
  createFunctionalStatus?: Maybe<CreateFunctionalStatusPayload>;
  /** create Goal */
  createGoal?: Maybe<CreateGoalPayload>;
  /** create Goal History */
  createGoalHistory?: Maybe<CreateGoalHistoryPayload>;
  /** Create GoogleFit */
  createGoogleFit?: Maybe<CreateGoogleFitPayload>;
  /** Create a Group */
  createGroup?: Maybe<CreateGroupPayload>;
  /** Create a HealthConcern Object */
  createHealthConcern?: Maybe<CreateHealthConcernPayload>;
  /** Create an Immunization */
  createImmunization?: Maybe<CreateImmunizationPayload>;
  /** Create Implantable Device User association */
  createImplantableDeviceUser?: Maybe<CreateImplantableDeviceUserPayload>;
  /** Create an import data request */
  createImportDataRequest?: Maybe<CreateImportDataRequestPayload>;
  /** create an insurance authorization */
  createInsuranceAuthorization?: Maybe<CreateInsuranceAuthorizationPayload>;
  /** Create Insurance Plan */
  createInsurancePlan?: Maybe<CreateInsurancePlanPayload>;
  /** Create Lab Order */
  createLabOrder?: Maybe<CreateLabOrderPayload>;
  /** create Location */
  createLocation?: Maybe<CreateLocationPayload>;
  /** Create a Meal */
  createMeal?: Maybe<CreateMealPayload>;
  /** Create Medication */
  createMedication?: Maybe<CreateMedicationPayload>;
  /** create Message Blast */
  createMessageBlast?: Maybe<CreateMessageBlastPayload>;
  /** create Note */
  createNote?: Maybe<CreateNotePayload>;
  /** create a Notification Contact */
  createNotificationContact?: Maybe<CreateNotificationContactPayload>;
  /** create offering */
  createOffering?: Maybe<CreateOfferingPayload>;
  /** Create an Offering Coupon */
  createOfferingCoupon?: Maybe<CreateOfferingCouponPayload>;
  /** create OfficeallySftpAccount */
  createOfficeallySftpAccount?: Maybe<CreateOfficeallySftpAccountPayload>;
  /** create OnboardingFlow */
  createOnboardingFlow?: Maybe<CreateOnboardingFlowPayload>;
  /** create OnboardingItem */
  createOnboardingItem?: Maybe<CreateOnboardingItemPayload>;
  /** creates a new entry or add to existing water intake entry for the day */
  createOrAddToWaterIntakeEntry?: Maybe<CreateOrAddToWaterIntakeEntryPayload>;
  /** create Organization */
  createOrganization?: Maybe<CreateOrganizationPayload>;
  /** Create an Organization CPT Code Object */
  createOrganizationCptCode?: Maybe<CreateOrganizationCptCodePayload>;
  /** create OrganizationMembership */
  createOrganizationMembership?: Maybe<CreateOrganizationMembershipPayload>;
  /** Creates a Patner */
  createPartner?: Maybe<CreatePartnerPayload>;
  /** Create a Stripe Payment Intent. Currently just used for Klarna support. When the payment succeeds, Healthie will receive a webhook and automatically complete the checkout. */
  createPaymentIntent?: Maybe<CreatePaymentIntentPayload>;
  /** create Permission Template */
  createPermissionTemplate?: Maybe<CreatePermissionTemplatePayload>;
  /** create Personalization Questionnaire */
  createPersonalizationQuestionnaire?: Maybe<CreatePersonalizationQuestionnairePayload>;
  /** Create favorite CPT/ICD code */
  createPreferredMedicalCode?: Maybe<CreatePreferredMedicalCodePayload>;
  /** Create a Procedure Object */
  createProcedure?: Maybe<CreateProcedurePayload>;
  /** Create a product */
  createProduct?: Maybe<CreateProductPayload>;
  /** Create ProviderCPTCode Objects */
  createProviderCptCodes?: Maybe<CreateProviderCptCodesPayload>;
  /** Create a care plan recommendation */
  createRecommendation?: Maybe<CreateRecommendationPayload>;
  /** Create new Referring Physician */
  createReferral?: Maybe<CreateReferralPayload>;
  /** Create new Referring Physician */
  createReferringPhysician?: Maybe<CreateReferringPhysicianPayload>;
  /** create requested form */
  createRequestedFormCompletion?: Maybe<CreateRequestedFormPayload>;
  /** create requested payment */
  createRequestedPayment?: Maybe<CreateRequestedPaymentPayload>;
  /** Create a Rupa order */
  createRupaOrder?: Maybe<CreateRupaOrderPayload>;
  /** Create a sent direct message */
  createSentDirectMessage?: Maybe<CreateSentDirectMessagePayload>;
  /** create Sent Fax */
  createSentFax?: Maybe<CreateSentFaxPayload>;
  /** Create a Smart Phrase */
  createSmartPhrase?: Maybe<CreateSmartPhrasePayload>;
  /** Create a Smoking Status */
  createSmokingStatus?: Maybe<CreateSmokingStatusPayload>;
  /** Creates a new payment card */
  createStripeCustomerDetail?: Maybe<CreateStripeCustomerDetailPayload>;
  /** create Subscription */
  createSubscription?: Maybe<CreateSubscriptionPayload>;
  /** create super bill */
  createSuperBill?: Maybe<CreateSuperBillPayload>;
  /** Create a custom user tag */
  createTag?: Maybe<CreateTagPayload>;
  /** Create a task for provider */
  createTask?: Maybe<CreateTaskPayload>;
  /** Create a UniqueDeviceIdentifier Object */
  createUniqueDeviceIdentifier?: Maybe<CreateUniqueDeviceIdentifierPayload>;
  /** Creates a Visitor */
  createVisitor?: Maybe<CreateVisitorPayload>;
  /** Create Webhook */
  createWebhook?: Maybe<CreateWebhookPayload>;
  /** Destroy Accepted Insurance Plan */
  deleteAcceptedInsurancePlan?: Maybe<DeleteAcceptedInsurancePlanPayload>;
  /** Destroy AllergySensitivity */
  deleteAllergySensitivity?: Maybe<DeleteAllergySensitivityPayload>;
  /** Destroy Announcement */
  deleteAnnouncement?: Maybe<DestroyAnnouncementPayload>;
  /** Destroy API Key */
  deleteApiKey?: Maybe<DeleteApiKeyPayload>;
  /** Destroy AppleHealth */
  deleteAppleHealth?: Maybe<DeleteAppleHealthPayload>;
  /** Delete an Appointment */
  deleteAppointment?: Maybe<DeleteAppointmentPayload>;
  /** Destroy an AppointmentType */
  deleteAppointmentType?: Maybe<DeleteAppointmentTypePayload>;
  /** Delete a AppointmentTypeCptCode Object */
  deleteAppointmentTypeCptCode?: Maybe<DeleteAppointmentTypeCptCodePayload>;
  /** Delete auto task generator */
  deleteAutoTaskGenerator?: Maybe<DeleteAutoTaskGeneratorPayload>;
  /** delete Availability */
  deleteAvailability?: Maybe<DeleteAvailabilityPayload>;
  /** Destroy a Billing Item */
  deleteBillingItem?: Maybe<DeleteBillingItemPayload>;
  /** Destroy a Care Plan */
  deleteCarePlan?: Maybe<DeleteCarePlanPayload>;
  /** Remove connection for related item(document/goal/recommendation) */
  deleteCarePlanConnection?: Maybe<DeleteCarePlanConnectionPayload>;
  /** Destroy a Cms1500 */
  deleteCms1500?: Maybe<DeleteCms1500Payload>;
  /** Delete a CognitivesStatus Object */
  deleteCognitiveStatus?: Maybe<DeleteCognitiveStatusPayload>;
  /** Destroy a Comment */
  deleteComment?: Maybe<DeleteCommentPayload>;
  /** Destroy a Conversation Membership */
  deleteConversationMembership?: Maybe<DeleteConversationMembershipPayload>;
  /** Destroy a Course */
  deleteCourse?: Maybe<DeleteCoursePayload>;
  /** Destroy a Course Benefit */
  deleteCourseBenefit?: Maybe<DeleteCourseBenefitPayload>;
  /** Destroy a Course Group */
  deleteCourseGroup?: Maybe<DeleteCourseGroupPayload>;
  /** Destroy a Course Item */
  deleteCourseItem?: Maybe<DeleteCourseItemPayload>;
  /** Destroy a Course Membership */
  deleteCourseMembership?: Maybe<DeleteCourseMembershipPayload>;
  /** Destroy a Custom Email */
  deleteCustomEmail?: Maybe<DeleteCustomEmailPayload>;
  /** Destroy a Custom Food */
  deleteCustomFood?: Maybe<DeleteCustomFoodPayload>;
  /** Destroy an CustomModule */
  deleteCustomModule?: Maybe<DeleteCustomModulePayload>;
  /** Destroy an CustomModuleForm */
  deleteCustomModuleForm?: Maybe<DeleteCustomModuleFormPayload>;
  /** Destroy Dexcom Connection */
  deleteDexcomConnection?: Maybe<DeleteDexcomConnectionPayload>;
  /** Destroy a Document */
  deleteDocument?: Maybe<DeleteDocumentPayload>;
  /** Delete Dosespot E-Rx for provider account */
  deleteDosespot?: Maybe<DeleteDosespotPayload>;
  /** Destroy a Entry */
  deleteEntry?: Maybe<DeleteEntryPayload>;
  /** Destroy an External Calendar */
  deleteExternalCalendar?: Maybe<DeleteExternalCalendarPayload>;
  /** Delete a Family History Condition */
  deleteFamilyHistory?: Maybe<DeleteFamilyHistoryPayload>;
  /** destroy Fax Acct Info */
  deleteFaxAcctInfo?: Maybe<DestroyFaxAcctInfoPayload>;
  /** Destroy Fitbit */
  deleteFitbit?: Maybe<DeleteFitbitPayload>;
  /** Destroy a Folder */
  deleteFolder?: Maybe<DeleteFolderPayload>;
  /** Destroy a Form Answer Group */
  deleteFormAnswerGroup?: Maybe<DeleteFormAnswerGroupPayload>;
  /** Delete a FunctionalsStatus Object */
  deleteFunctionalStatus?: Maybe<DeleteFunctionalStatusPayload>;
  /** Destroy a Goal */
  deleteGoal?: Maybe<DeleteGoalPayload>;
  /** Destroy a Goal GoalHistory */
  deleteGoalHistory?: Maybe<DeleteGoalHistoryPayload>;
  /** Destroy GoogleFit */
  deleteGoogleFit?: Maybe<DeleteGoogleFitPayload>;
  /** Delete a HealthConcern Object */
  deleteHealthConcern?: Maybe<DeleteHealthConcernPayload>;
  /** Delete an Implantable Device User association */
  deleteImplantableDeviceUser?: Maybe<DeleteImplantableDeviceUserPayload>;
  /** delete an insurance authorization */
  deleteInsuranceAuthorization?: Maybe<DeleteInsuranceAuthorizationPayload>;
  /** Delete Insurance Plan */
  deleteInsurancePlan?: Maybe<DeleteInsurancePlanPayload>;
  /** Destroy a Location */
  deleteLocation?: Maybe<DeleteLocationPayload>;
  /** Destroy a Meal */
  deleteMeal?: Maybe<DeleteMealPayload>;
  /** Destroy Medication */
  deleteMedication?: Maybe<DestroyMedicationPayload>;
  /** Destroy a Note */
  deleteNote?: Maybe<DeleteNotePayload>;
  /** delete a Notification Contact */
  deleteNotificationContact?: Maybe<DeleteNotificationContactPayload>;
  /** Destroy an Offering */
  deleteOffering?: Maybe<DeleteOfferingPayload>;
  /** Destroy an Offering Coupon */
  deleteOfferingCoupon?: Maybe<DeleteOfferingCouponPayload>;
  /** Destroy a OnboardingFlow */
  deleteOnboardingFlow?: Maybe<DeleteOnboardingFlowPayload>;
  /** Destroy a OnboardingItem */
  deleteOnboardingItem?: Maybe<DeleteOnboardingItemPayload>;
  /** Delete a OrganizationCptCode Object */
  deleteOrganizationCptCode?: Maybe<DeleteOrganizationCptCodePayload>;
  /** Destroy an organization info */
  deleteOrganizationInfo?: Maybe<DeleteOrganizationInfoPayload>;
  /** Destroy a Organization Membership */
  deleteOrganizationMembership?: Maybe<DeleteOrganizationMembershipPayload>;
  /** delete Permission Template */
  deletePermissionTemplate?: Maybe<DeletePermissionTemplatePayload>;
  /** Delete favorite CPT/ICD code */
  deletePreferredMedicalCode?: Maybe<DeletePreferredMedicalCodePayload>;
  /** Delete a Procedure Object */
  deleteProcedure?: Maybe<DeleteProcedurePayload>;
  /** Delete a product */
  deleteProduct?: Maybe<DeleteProductPayload>;
  /** Delete a ProviderCptCode Object */
  deleteProviderCptCode?: Maybe<DeleteProviderCptCodePayload>;
  /** Destroy a received fax */
  deleteReceivedFax?: Maybe<DeleteReceivedFaxPayload>;
  /** Destroy a care plan recommendation */
  deleteRecommendation?: Maybe<DeleteRecommendationPayload>;
  /** Delete recurring form request */
  deleteRecurringForm?: Maybe<DestroyRecurringFormPayload>;
  /** Delete referral */
  deleteReferral?: Maybe<DeleteReferralPayload>;
  /** Delete referring physician  */
  deleteReferringPhysician?: Maybe<DeleteReferringPhysicianPayload>;
  /** Destroy a requested form */
  deleteRequestedFormCompletion?: Maybe<DeleteRequestedFormPayload>;
  /** destroy requested payment */
  deleteRequestedPayment?: Maybe<DeleteRequestedPaymentPayload>;
  /** Destroy Shapa Connection */
  deleteShapaConnection?: Maybe<DeleteShapaConnectionPayload>;
  /** Destroy a Smart Phrase */
  deleteSmartPhrase?: Maybe<DeleteSmartPhrasePayload>;
  /** Delete a Smoking Status */
  deleteSmokingStatus?: Maybe<DeleteSmokingStatusPayload>;
  /** Deletes a payment card */
  deleteStripeCustomerDetail?: Maybe<DeleteStripeCustomerDetailPayload>;
  /** Destroy a Super Bill */
  deleteSuperBill?: Maybe<DeleteSuperBillPayload>;
  /** Delete a custom user tag */
  deleteTag?: Maybe<DeleteTagPayload>;
  /** Destroy a task */
  deleteTask?: Maybe<DeleteTaskPayload>;
  /** Delete a UniqueDeviceIdentifier Object */
  deleteUniqueDeviceIdentifier?: Maybe<DeleteUniqueDeviceIdentifierPayload>;
  /** Delete a Group */
  deleteUserGroup?: Maybe<DeleteUserGroupPayload>;
  /** Destroy Webhook */
  deleteWebhook?: Maybe<DeleteWebhookPayload>;
  /** Destroy Withings Connection */
  deleteWithingsConnection?: Maybe<DeleteWithingsConnectionPayload>;
  /** Dismiss All Announcements For A User */
  dismissAllAnnouncements?: Maybe<DismissAllAnnouncementsPayload>;
  /** Dismiss Announcement */
  dismissAnnouncement?: Maybe<DismissAnnouncementPayload>;
  /** Update User Account to Dummy User Account */
  dummyUser?: Maybe<DummyUserPayload>;
  /** edit Availability */
  editAvailability?: Maybe<EditAvailabilityPayload>;
  /** Embed Forms to Objects */
  embedForm?: Maybe<EmbedFormPayload>;
  /** Generate Patients Dosespot SSO for a Given Provider  */
  enableDosespotSelfSignup?: Maybe<EnableSelfSignupPayload>;
  /** Creates a template from existing Care Plan. Original object is not touched */
  exportCarePlanToTemplate?: Maybe<ExportToTemplatePayload>;
  /** Export Client EHI data */
  exportClientEhi?: Maybe<ExportClientEhiPayload>;
  /** extend paywall for a provider */
  extendPaywall?: Maybe<ExtendPaywallPayload>;
  /** Generate a PDF of charting notes for a client */
  generateChartingPdf?: Maybe<GenerateChartingPdfPayload>;
  /** Generate Patients Dosespot SSO for a Given Provider  */
  generateDosespotSingleSignOn?: Maybe<DosespotSsoPayload>;
  /** Sign up Healthie User in the Health Assessment Service */
  healthAssessmentServiceSignup?: Maybe<HealthAssessmentServiceSignupPayload>;
  /** Mask in as another user */
  maskAccount?: Maybe<MaskAccountPayload>;
  /** all data related to the merging account (form answers, billing items, charting notes, etc) will be associated with the selected account after merging. The selected account's client profile information will remain unchanged (name, DOB, etc) */
  mergeClients?: Maybe<MergeClientsPayload>;
  /** Pair a client with a provider */
  pairAccounts?: Maybe<PairAccountsPayload>;
  /** refetch ChangeHealth Lab Orders for a specified patient */
  refetchChangeHealthLabOrder?: Maybe<RefetchChangeHealthLabOrderPayload>;
  /** Remove applied tag on a specific user */
  removeAppliedTag?: Maybe<RemoveAppliedTagPayload>;
  /** Remove Card that is on File for Client */
  removeCardOnFile?: Maybe<RemoveCardOnFilePayload>;
  /** remove Draft */
  removeDraft?: Maybe<RemoveDraftPayload>;
  /** Remove group care plan user connection for a specific user */
  removeUserFromGroupCarePlan?: Maybe<RemoveUserFromGroupCarePlanPayload>;
  /** resend Sent Fax */
  resendSentFax?: Maybe<ResendSentFaxPayload>;
  /** send the human a password reset email */
  resetPassword?: Maybe<ResetPasswordPayload>;
  /** Restores Previous Version to be Current Version */
  restoreVersion?: Maybe<RestoreVersionsPayload>;
  /** Resync existed rupa lab orders data for a specific rupa connection of the current user */
  resyncRupaLabOrders?: Maybe<ResyncRupaLabOrdersPayload>;
  /** revoke token or API key. */
  revokeToken?: Maybe<RevokeTokenPayload>;
  /** Run an eligibility check on a policy */
  runEligibilityCheck?: Maybe<RunEligibilityCheckMutationPayload>;
  /** Trigger care plan email for given client */
  sendCarePlanEmail?: Maybe<SendCarePlanEmailPayload>;
  /** Send the trainer an email that the client wants to speak to them */
  sendSpeakToTrainerNotification?: Maybe<SendSpeakToTrainerNotificationPayload>;
  /** Send Welcome Email to Client */
  sendWelcomeEmail?: Maybe<SendWelcomeEmailPayload>;
  /** Add form answer group answers as document viewable by client */
  shareAnswersAsDocument?: Maybe<ShareAnswersAsDocumentPayload>;
  /** share Course with another provider */
  shareCourse?: Maybe<ShareCoursePayload>;
  /** share Custom Module Form */
  shareCustomModuleForm?: Maybe<ShareCustomModuleFormPayload>;
  /** SignIn */
  signIn?: Maybe<SignInPayload>;
  /** Sign up */
  signUp?: Maybe<SignUpPayload>;
  /** Toggle 2 Factor Authentication for User */
  toggle2Fa?: Maybe<Toggle2FaPayload>;
  /** Add Role to User Account */
  toggleAdvancedSettings?: Maybe<ToggleAdvancedSettingsPayload>;
  /** Toggle availability by appointment type, location, or contact type */
  toggleAvailability?: Maybe<ToggleAvailabilityPayload>;
  /** Toggle BAA for external calendar */
  toggleBaa?: Maybe<ToggleBaaPayload>;
  /** Deactivate/activate a group/single Care Plan for a given user */
  toggleCarePlanStatusForSpecificUser?: Maybe<ToggleCarePlanStatusForSpecificUserPayload>;
  /** toggle paywall for a provider */
  togglePaywall?: Maybe<TogglePaywallPayload>;
  /** Toggle Reason for Appointment on Appointment Type of Provider */
  toggleReasonForAppt?: Maybe<ToggleReasonForApptPayload>;
  /** Unlock Charting Note */
  unlockChartingNote?: Maybe<UnlockChartingNotePayload>;
  /** Update a Notification Setting to unsubscribe from a specific notification type */
  unsubscribeFromNotification?: Maybe<UnsubscribeFromNotificationPayload>;
  /** Update existing addendum for the selected charting note */
  updateAddendum?: Maybe<UpdateAddendumPayload>;
  /** Update AllergySensitivity */
  updateAllergySensitivity?: Maybe<UpdateAllergySensitivityPayload>;
  /** Update Announcement */
  updateAnnouncement?: Maybe<UpdateAnnouncementPayload>;
  /** Update AppleHealth */
  updateAppleHealth?: Maybe<UpdateAppleHealthPayload>;
  /** Update the Appointment */
  updateAppointment?: Maybe<UpdateAppointmentPayload>;
  /** Update AppointmentInclusion */
  updateAppointmentInclusion?: Maybe<UpdateAppointmentInclusionPayload>;
  /** update Appointment Setting */
  updateAppointmentSetting?: Maybe<UpdateAppointmentSettingPayload>;
  /** Update an Appointment Type and return Appointment Type */
  updateAppointmentType?: Maybe<UpdateAppointmentTypePayload>;
  /** Update a AppointmentTypeCptCode Object */
  updateAppointmentTypeCptCode?: Maybe<UpdateAppointmentTypeCptCodePayload>;
  /** Update auto task generator */
  updateAutoTaskGenerator?: Maybe<UpdateAutoTaskGeneratorPayload>;
  /** Update a BillingItem */
  updateBillingItem?: Maybe<UpdateBillingItemPayload>;
  /** Update a Brand and return Brand */
  updateBrand?: Maybe<UpdateBrandPayload>;
  /** Update Care Plan by Care Plan Template */
  updateByTemplate?: Maybe<UpdateByTemplatePayload>;
  /** Update and return calendar view setting */
  updateCalendarViewSetting?: Maybe<UpdateCalendarViewSettingPayload>;
  /** Update Calorie Levels in the Health Assessment Service */
  updateCalorieLevel?: Maybe<UpdateCalorieLevelPayload>;
  /** update Campaign */
  updateCampaign?: Maybe<UpdateCampaignPayload>;
  /** Update and return a Care Plan */
  updateCarePlan?: Maybe<UpdateCarePlanPayload>;
  /** Update ChangeHealthAccount (used for Labs) */
  updateChangeHealthAccount?: Maybe<UpdateChangeHealthAccountPayload>;
  /** Update ChargeBack */
  updateChargeBack?: Maybe<UpdateChargeBackPayload>;
  /** update Chat Setting */
  updateChatSetting?: Maybe<UpdateChatSettingPayload>;
  /** Update Client */
  updateClient?: Maybe<UpdateClientPayload>;
  /** update CMS1500 */
  updateCms1500?: Maybe<UpdateCms1500Payload>;
  /** Update a CognitiveStatus Object */
  updateCognitiveStatus?: Maybe<UpdateCognitiveStatusPayload>;
  /** Update a Conversation and return Conversation */
  updateConversation?: Maybe<UpdateConversationPayload>;
  /** Update a ConversationMembership and return ConversationMembership */
  updateConversationMembership?: Maybe<UpdateConversationMembershipPayload>;
  /** Update a Course */
  updateCourse?: Maybe<UpdateCoursePayload>;
  /** update a Course Group */
  updateCourseGroup?: Maybe<UpdateCourseGroupPayload>;
  /** Update a CourseItem */
  updateCourseItem?: Maybe<UpdateCourseItemPayload>;
  /** update a Course Membership */
  updateCourseMembership?: Maybe<UpdateCourseMembershipPayload>;
  /** Update Currency on User Object */
  updateCurrency?: Maybe<UpdateCurrencyPayload>;
  /** Update a Custom Email */
  updateCustomEmail?: Maybe<UpdateCustomEmailPayload>;
  /** Update a Custom Food */
  updateCustomFood?: Maybe<UpdateCustomFoodPayload>;
  /** Update an Custom Module and return Custom Module */
  updateCustomModule?: Maybe<UpdateCustomModulePayload>;
  /** Update an Custom Module Form and return Custom Module Form */
  updateCustomModuleForm?: Maybe<UpdateCustomModuleFormPayload>;
  /** Update a Document and return Document */
  updateDocument?: Maybe<UpdateDocumentPayload>;
  /** Updates an Entry and returns an Entry */
  updateEntry?: Maybe<UpdateEntryPayload>;
  /** Update an External Calendar */
  updateExternalCalendar?: Maybe<UpdateExternalCalendarPayload>;
  /** Update Family History */
  updateFamilyHistory?: Maybe<UpdateFamilyHistoryPayload>;
  /** update Fax Acct Info */
  updateFaxAcctInfo?: Maybe<UpdateFaxAcctInfoPayload>;
  /** Update a FeatureToggle and Return FeatureToggle */
  updateFeatureToggle?: Maybe<UpdateFeatureTogglePayload>;
  /** Update Fitbit */
  updateFitbit?: Maybe<UpdateFitbitPayload>;
  /** Update a Folder and return Folder */
  updateFolder?: Maybe<UpdateFolderPayload>;
  /** update FormAnswerGroup */
  updateFormAnswerGroup?: Maybe<UpdateFormAnswerGroupPayload>;
  /** Update a FunctionalStatus Object */
  updateFunctionalStatus?: Maybe<UpdateFunctionalStatusPayload>;
  /** Update a Goal */
  updateGoal?: Maybe<UpdateGoalPayload>;
  /** Update GoogleFit */
  updateGoogleFit?: Maybe<UpdateGoogleFitPayload>;
  /** Updates the care plan status for groups */
  updateGroupCarePlan?: Maybe<UpdateGroupCarePlanPayload>;
  /** Update a HealthConcern Object */
  updateHealthConcern?: Maybe<UpdateHealthConcernPayload>;
  /** Update a Human */
  updateHuman?: Maybe<UpdateHumanPayload>;
  /** Update an Immunization and return Immunization */
  updateImmunization?: Maybe<UpdateImmunizationPayload>;
  /** Update Implantable Device User association */
  updateImplantableDeviceUser?: Maybe<UpdateImplantableDeviceUserPayload>;
  /** update an insurance authorization */
  updateInsuranceAuthorization?: Maybe<UpdateInsuranceAuthorizationPayload>;
  /** Update Insurance Plan */
  updateInsurancePlan?: Maybe<UpdateInsurancePlanPayload>;
  /** Update Lab Order */
  updateLabOrder?: Maybe<UpdateLabOrderPayload>;
  /** update Location */
  updateLocation?: Maybe<UpdateLocationPayload>;
  /** Update Macronutrient Split in the Health Assessment Service */
  updateMacronutrientSplit?: Maybe<UpdateMacronutrientSplitPayload>;
  /** Update a Meal */
  updateMeal?: Maybe<UpdateMealPayload>;
  /** Update Medication */
  updateMedication?: Maybe<UpdateMedicationPayload>;
  /** Update a Note */
  updateNote?: Maybe<UpdateNotePayload>;
  /** Update a Note Scheduler and return NoteSchedulerType */
  updateNoteScheduler?: Maybe<UpdateNoteSchedulerPayload>;
  /** update a notification */
  updateNotification?: Maybe<UpdateNotificationPayload>;
  /** Update a Notification Contact */
  updateNotificationContact?: Maybe<UpdateNotificationContactPayload>;
  /** Update multiple notification records at once */
  updateNotificationRecords?: Maybe<BulkUpdateNotificationRecordsPayload>;
  /** Update a Notification Setting and return Notification Setting */
  updateNotificationSetting?: Maybe<UpdateNotificationSettingPayload>;
  /** update multiple notifications at once */
  updateNotifications?: Maybe<BulkUpdateNotificationsPayload>;
  /** Update an Offering */
  updateOffering?: Maybe<UpdateOfferingPayload>;
  /** update OfficeallySftpAccount */
  updateOfficeallySftpAccount?: Maybe<UpdateOfficeallySftpAccountPayload>;
  /** Update a OnboardingFlow and return OnboardingFlow */
  updateOnboardingFlow?: Maybe<UpdateOnboardingFlowPayload>;
  /** Update a OnboardingItem and return OnboardingItem */
  updateOnboardingItem?: Maybe<UpdateOnboardingItemPayload>;
  /** Update Org Owner of Organization */
  updateOrgOwner?: Maybe<UpdateOrgOwnerPayload>;
  /** Update Organization */
  updateOrganization?: Maybe<UpdateOrganizationPayload>;
  /** Update a OrganizationCptCode Object */
  updateOrganizationCptCode?: Maybe<UpdateOrganizationCptCodePayload>;
  /** Update org members */
  updateOrganizationMember?: Maybe<UpdateOrganizationMemberPayload>;
  /** Update a OrganizationMembership */
  updateOrganizationMembership?: Maybe<UpdateOrganizationMembershipPayload>;
  /** update Permission Template */
  updatePermissionTemplate?: Maybe<UpdatePermissionTemplatePayload>;
  /** Update a policy */
  updatePolicy?: Maybe<UpdatePolicyMutationPayload>;
  /** Update a Procedure Object */
  updateProcedure?: Maybe<UpdateProcedurePayload>;
  /** Update a product */
  updateProduct?: Maybe<UpdateProductPayload>;
  /** Update ProviderCptCode Objects */
  updateProviderCptCodes?: Maybe<UpdateProviderCptCodesPayload>;
  /** update a received fax */
  updateReceivedFax?: Maybe<UpdateReceivedFaxPayload>;
  /** Update a care plan recommendation */
  updateRecommendation?: Maybe<UpdateRecommendationPayload>;
  /** update a recurring form */
  updateRecurringForm?: Maybe<UpdateRecurringFormPayload>;
  /** Update Referral */
  updateReferral?: Maybe<UpdateReferralPayload>;
  /** Update Referring Physician */
  updateReferringPhysician?: Maybe<UpdateReferringPhysicianPayload>;
  /** Add Reply To Email Addresses to User */
  updateReplyToEmailAddresses?: Maybe<AddReplyToEmailAddressesPayload>;
  /** update requested payment */
  updateRequestedPayment?: Maybe<UpdateRequestedPaymentPayload>;
  /** Update a Smart Phrase */
  updateSmartPhrase?: Maybe<UpdateSmartPhrasePayload>;
  /** Update a Smoking Status */
  updateSmokingStatus?: Maybe<UpdateSmokingStatusPayload>;
  /** Archive/Unarchive a Course */
  updateState?: Maybe<UpdateStatePayload>;
  /** Updates a payment card */
  updateStripeCustomerDetail?: Maybe<UpdateStripeCustomerDetailPayload>;
  /** Update Stripe Verification Details */
  updateStripeVerificationDetails?: Maybe<UpdateStripeVerificationDetailsPayload>;
  /** update Subscription */
  updateSubscription?: Maybe<UpdateSubscriptionPayload>;
  /** Update a SuperBill */
  updateSuperBill?: Maybe<UpdateSuperBillPayload>;
  /** Update a custom user tag */
  updateTag?: Maybe<UpdateTagPayload>;
  /** Update a task for provider */
  updateTask?: Maybe<UpdateTaskPayload>;
  /** Update multiple tasks provider */
  updateTasksBulk?: Maybe<BulkUpdateTasksPayload>;
  /** Update a UniqueDeviceIdentifier Object */
  updateUniqueDeviceIdentifier?: Maybe<UpdateUniqueDeviceIdentifierPayload>;
  /** Update the current user, or a patient that the current user has access to. To update other org members, use updateOrganizationMembership */
  updateUser?: Maybe<UpdateUserPayload>;
  /** Updates the appointment pricing for this user */
  updateUserAppointmentPricing?: Maybe<UpdateUserAppointmentPricingPayload>;
  /** Update User's Email Address */
  updateUserEmail?: Maybe<UpdateUserEmailPayload>;
  /** Update a Group */
  updateUserGroup?: Maybe<UpdateUserGroupPayload>;
  /** Update Webhook */
  updateWebhook?: Maybe<UpdateWebhookPayload>;
  /** Upload a CMS1500 batch to CandidHealth */
  uploadBatchToCandidHealth?: Maybe<UploadBatchToCandidHealthPayload>;
  /** Upload a CMS1500 batch to ChangeHealth */
  uploadBatchToChangeHealth?: Maybe<UploadBatchToChangeHealthPayload>;
  /** Upload a CMS1500 batch to OfficeAlly */
  uploadBatchToOfficeally?: Maybe<UploadBatchToOfficeallyPayload>;
  /** Upload a CMS1500 to integrations: ChangeHealth, OfficeAlly, CandidHealth */
  uploadCms1500sToIntegrations?: Maybe<UploadToIntegrationsPayload>;
  /** Verify 2FA code for Human */
  validateVerificationToken?: Maybe<ValidateVerificationTokenPayload>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationAddCptCodeArgs = {
  input?: InputMaybe<AddCptCodeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationAddDosespotArgs = {
  input?: InputMaybe<CreateDosespotInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationAddIcdCodeArgs = {
  input?: InputMaybe<AddIcdCodeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationAddLivingPlateArgs = {
  input?: InputMaybe<AddLivingPlateInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationBulkApplyArgs = {
  input?: InputMaybe<BulkApplyInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationBulkApplyCarePlanTemplateArgs = {
  input?: InputMaybe<BulkApplyCarePlanTemplateInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationBulkCreateAvailabilityArgs = {
  input?: InputMaybe<BulkCreateAvailabilityInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationBulkCreateEntriesArgs = {
  input?: InputMaybe<BulkCreateEntriesInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationBulkDeleteTasksArgs = {
  input?: InputMaybe<BulkDeleteTasksInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationBulkUpdateCardIssuesArgs = {
  input?: InputMaybe<BulkUpdateCardIssuesInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationBulkUpdateCarePlanUsersArgs = {
  input?: InputMaybe<BulkUpdateCarePlanUsersInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationBulkUpdateClientsArgs = {
  input?: InputMaybe<BulkUpdateClientsInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationChangeDevicesAvailabilityArgs = {
  input?: InputMaybe<ChangeDevicesAvailabilityInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCompleteCheckoutArgs = {
  input?: InputMaybe<CompleteCheckoutInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCompleteCourseDocumentArgs = {
  input?: InputMaybe<CompleteCourseDocumentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationConvertToMetricArgs = {
  input?: InputMaybe<ConvertToMetricInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCopyCourseArgs = {
  input?: InputMaybe<CopyCourseInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCopyCustomModuleArgs = {
  input?: InputMaybe<CopyCustomModuleInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCopyCustomModuleFormArgs = {
  input?: InputMaybe<CopyCustomModuleFormInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCopyOfferingArgs = {
  input?: InputMaybe<CopyOfferingInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateAcceptedInsurancePlanArgs = {
  input?: InputMaybe<CreateAcceptedInsurancePlanInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateAddendumArgs = {
  input?: InputMaybe<CreateAddendumInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateAllergySensitivityArgs = {
  input?: InputMaybe<CreateAllergySensitivityInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateAnnouncementArgs = {
  input?: InputMaybe<CreateAnnouncementInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateApiKeyArgs = {
  input?: InputMaybe<CreateApiKeyInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateAppleHealthArgs = {
  input?: InputMaybe<CreateAppleHealthInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateAppointmentArgs = {
  input?: InputMaybe<CreateAppointmentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateAppointmentSettingArgs = {
  input?: InputMaybe<CreateAppointmentSettingInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateAppointmentTypeArgs = {
  input?: InputMaybe<CreateAppointmentTypeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateAppointmentTypeCptCodeArgs = {
  input?: InputMaybe<CreateAppointmentTypeCptCodeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateAutoTaskGeneratorArgs = {
  input?: InputMaybe<CreateAutoTaskGeneratorInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateAvailabilityArgs = {
  input?: InputMaybe<CreateAvailabilityInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateBillingItemArgs = {
  input?: InputMaybe<CreateBillingItemInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateBrandArgs = {
  input?: InputMaybe<CreateBrandInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCampaignArgs = {
  input?: InputMaybe<CreateCampaignInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCarePlanArgs = {
  input?: InputMaybe<CreateCarePlanInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateChangeHealthArgs = {
  input?: InputMaybe<CreateChangeHealthInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateChangeHealthPatientArgs = {
  input?: InputMaybe<CreateChangeHealthPatientInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateChatSettingArgs = {
  input?: InputMaybe<CreateChatSettingInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateClientArgs = {
  input?: InputMaybe<CreateClientInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateClientViaFormArgs = {
  input?: InputMaybe<CreateClientViaFormInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCms1500Args = {
  input?: InputMaybe<CreateCms1500Input>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCognitiveStatusArgs = {
  input?: InputMaybe<CreateCognitiveStatusInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCommentArgs = {
  input?: InputMaybe<CreateCommentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCompletedCourseItemArgs = {
  input?: InputMaybe<CreateCompletedCourseItemInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCompletedOnboardingItemArgs = {
  input?: InputMaybe<CreateCompletedOnboardingItemInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateContactArgs = {
  input?: InputMaybe<CreateContactInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateConversationArgs = {
  input?: InputMaybe<CreateConversationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCourseArgs = {
  input?: InputMaybe<CreateCourseInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCourseBenefitArgs = {
  input?: InputMaybe<CreateCourseBenefitInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCourseItemArgs = {
  input?: InputMaybe<CreateCourseItemInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCustomEmailArgs = {
  input?: InputMaybe<CreateCustomEmailInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCustomFoodArgs = {
  input?: InputMaybe<CreateCustomFoodInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCustomModuleArgs = {
  input?: InputMaybe<CreateCustomModuleInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateCustomModuleFormArgs = {
  input?: InputMaybe<CreateCustomModuleFormInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateDocumentArgs = {
  input?: InputMaybe<CreateDocumentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateDosespotClinicianArgs = {
  input?: InputMaybe<CreateDosespotClinicianInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateDraftArgs = {
  input?: InputMaybe<CreateDraftInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateEbookArgs = {
  input?: InputMaybe<CreateEbookInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateEntryArgs = {
  input?: InputMaybe<CreateEntryInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateExternalCalendarArgs = {
  input?: InputMaybe<CreateExternalCalendarInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateFamilyHistoryArgs = {
  input?: InputMaybe<CreateFamilyHistoryInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateFaxAcctInfoArgs = {
  input?: InputMaybe<CreateFaxAcctInfoInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateFaxLineRequestArgs = {
  input?: InputMaybe<CreateFaxLineRequestInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateFeatureToggleArgs = {
  input?: InputMaybe<CreateFeatureToggleInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateFitbitArgs = {
  input?: InputMaybe<CreateFitbitInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateFolderArgs = {
  input?: InputMaybe<CreateFolderInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateFormAnswerGroupArgs = {
  input?: InputMaybe<CreateFormAnswerGroupInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateFormAnswerGroupSigningArgs = {
  input?: InputMaybe<CreateFormAnswerGroupSigningInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateFullscriptPractitionerArgs = {
  input?: InputMaybe<CreateFullscriptPractitionerInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateFunctionalStatusArgs = {
  input?: InputMaybe<CreateFunctionalStatusInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateGoalArgs = {
  input?: InputMaybe<CreateGoalInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateGoalHistoryArgs = {
  input?: InputMaybe<CreateGoalHistoryInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateGoogleFitArgs = {
  input?: InputMaybe<CreateGoogleFitInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateGroupArgs = {
  input?: InputMaybe<CreateGroupInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateHealthConcernArgs = {
  input?: InputMaybe<CreateHealthConcernInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateImmunizationArgs = {
  input?: InputMaybe<CreateImmunizationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateImplantableDeviceUserArgs = {
  input?: InputMaybe<CreateImplantableDeviceUserInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateImportDataRequestArgs = {
  input?: InputMaybe<CreateImportDataRequestInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateInsuranceAuthorizationArgs = {
  input?: InputMaybe<CreateInsuranceAuthorizationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateInsurancePlanArgs = {
  input?: InputMaybe<CreateInsurancePlanInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateLabOrderArgs = {
  input?: InputMaybe<CreateLabOrderInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateLocationArgs = {
  input?: InputMaybe<CreateLocationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateMealArgs = {
  input?: InputMaybe<CreateMealInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateMedicationArgs = {
  input?: InputMaybe<CreateMedicationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateMessageBlastArgs = {
  input?: InputMaybe<CreateMessageBlastInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateNoteArgs = {
  input?: InputMaybe<CreateNoteInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateNotificationContactArgs = {
  input?: InputMaybe<CreateNotificationContactInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateOfferingArgs = {
  input?: InputMaybe<CreateOfferingInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateOfferingCouponArgs = {
  input?: InputMaybe<CreateOfferingCouponInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateOfficeallySftpAccountArgs = {
  input?: InputMaybe<CreateOfficeallySftpAccountInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateOnboardingFlowArgs = {
  input?: InputMaybe<CreateOnboardingFlowInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateOnboardingItemArgs = {
  input?: InputMaybe<CreateOnboardingItemInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateOrAddToWaterIntakeEntryArgs = {
  input?: InputMaybe<CreateOrAddToWaterIntakeEntryInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateOrganizationArgs = {
  input?: InputMaybe<CreateOrganizationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateOrganizationCptCodeArgs = {
  input?: InputMaybe<CreateOrganizationCptCodeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateOrganizationMembershipArgs = {
  input?: InputMaybe<CreateOrganizationMembershipInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreatePartnerArgs = {
  input?: InputMaybe<CreatePartnerInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreatePaymentIntentArgs = {
  input?: InputMaybe<CreatePaymentIntentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreatePermissionTemplateArgs = {
  input?: InputMaybe<CreatePermissionTemplateInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreatePersonalizationQuestionnaireArgs = {
  input?: InputMaybe<CreatePersonalizationQuestionnaireInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreatePreferredMedicalCodeArgs = {
  input?: InputMaybe<CreatePreferredMedicalCodeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateProcedureArgs = {
  input?: InputMaybe<CreateProcedureInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateProductArgs = {
  input?: InputMaybe<CreateProductInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateProviderCptCodesArgs = {
  input?: InputMaybe<CreateProviderCptCodesInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateRecommendationArgs = {
  input?: InputMaybe<CreateRecommendationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateReferralArgs = {
  input?: InputMaybe<CreateReferralInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateReferringPhysicianArgs = {
  input?: InputMaybe<CreateReferringPhysicianInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateRequestedFormCompletionArgs = {
  input?: InputMaybe<CreateRequestedFormInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateRequestedPaymentArgs = {
  input?: InputMaybe<CreateRequestedPaymentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateRupaOrderArgs = {
  input?: InputMaybe<CreateRupaOrderInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateSentDirectMessageArgs = {
  input?: InputMaybe<CreateSentDirectMessageInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateSentFaxArgs = {
  input?: InputMaybe<CreateSentFaxInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateSmartPhraseArgs = {
  input?: InputMaybe<CreateSmartPhraseInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateSmokingStatusArgs = {
  input?: InputMaybe<CreateSmokingStatusInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateStripeCustomerDetailArgs = {
  input?: InputMaybe<CreateStripeCustomerDetailInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateSubscriptionArgs = {
  input?: InputMaybe<CreateSubscriptionInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateSuperBillArgs = {
  input?: InputMaybe<CreateSuperBillInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateTagArgs = {
  input?: InputMaybe<CreateTagInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateTaskArgs = {
  input?: InputMaybe<CreateTaskInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateUniqueDeviceIdentifierArgs = {
  input?: InputMaybe<CreateUniqueDeviceIdentifierInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateVisitorArgs = {
  input?: InputMaybe<CreateVisitorInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationCreateWebhookArgs = {
  input?: InputMaybe<CreateWebhookInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteAcceptedInsurancePlanArgs = {
  input?: InputMaybe<DeleteAcceptedInsurancePlanInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteAllergySensitivityArgs = {
  input?: InputMaybe<DeleteAllergySensitivityInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteAnnouncementArgs = {
  input?: InputMaybe<DestroyAnnouncementInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteApiKeyArgs = {
  input?: InputMaybe<DeleteApiKeyInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteAppleHealthArgs = {
  input?: InputMaybe<DeleteAppleHealthInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteAppointmentArgs = {
  input?: InputMaybe<DeleteAppointmentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteAppointmentTypeArgs = {
  input?: InputMaybe<DeleteAppointmentTypeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteAppointmentTypeCptCodeArgs = {
  input?: InputMaybe<DeleteAppointmentTypeCptCodeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteAutoTaskGeneratorArgs = {
  input?: InputMaybe<DeleteAutoTaskGeneratorInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteAvailabilityArgs = {
  input?: InputMaybe<DeleteAvailabilityInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteBillingItemArgs = {
  input?: InputMaybe<DeleteBillingItemInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCarePlanArgs = {
  input?: InputMaybe<DeleteCarePlanInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCarePlanConnectionArgs = {
  input?: InputMaybe<DeleteCarePlanConnectionInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCms1500Args = {
  input?: InputMaybe<DeleteCms1500Input>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCognitiveStatusArgs = {
  input?: InputMaybe<DeleteCognitiveStatusInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCommentArgs = {
  input?: InputMaybe<DeleteCommentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteConversationMembershipArgs = {
  input?: InputMaybe<DeleteConversationMembershipInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCourseArgs = {
  input?: InputMaybe<DeleteCourseInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCourseBenefitArgs = {
  input?: InputMaybe<DeleteCourseBenefitInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCourseGroupArgs = {
  input?: InputMaybe<DeleteCourseGroupInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCourseItemArgs = {
  input?: InputMaybe<DeleteCourseItemInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCourseMembershipArgs = {
  input?: InputMaybe<DeleteCourseMembershipInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCustomEmailArgs = {
  input?: InputMaybe<DeleteCustomEmailInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCustomFoodArgs = {
  input?: InputMaybe<DeleteCustomFoodInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCustomModuleArgs = {
  input?: InputMaybe<DeleteCustomModuleInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteCustomModuleFormArgs = {
  input?: InputMaybe<DeleteCustomModuleFormInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteDexcomConnectionArgs = {
  input?: InputMaybe<DeleteDexcomConnectionInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteDocumentArgs = {
  input?: InputMaybe<DeleteDocumentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteDosespotArgs = {
  input?: InputMaybe<DeleteDosespotInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteEntryArgs = {
  input?: InputMaybe<DeleteEntryInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteExternalCalendarArgs = {
  input?: InputMaybe<DeleteExternalCalendarInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteFamilyHistoryArgs = {
  input?: InputMaybe<DeleteFamilyHistoryInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteFaxAcctInfoArgs = {
  input?: InputMaybe<DestroyFaxAcctInfoInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteFitbitArgs = {
  input?: InputMaybe<DeleteFitbitInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteFolderArgs = {
  input?: InputMaybe<DeleteFolderInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteFormAnswerGroupArgs = {
  input?: InputMaybe<DeleteFormAnswerGroupInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteFunctionalStatusArgs = {
  input?: InputMaybe<DeleteFunctionalStatusInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteGoalArgs = {
  input?: InputMaybe<DeleteGoalInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteGoalHistoryArgs = {
  input?: InputMaybe<DeleteGoalHistoryInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteGoogleFitArgs = {
  input?: InputMaybe<DeleteGoogleFitInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteHealthConcernArgs = {
  input?: InputMaybe<DeleteHealthConcernInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteImplantableDeviceUserArgs = {
  input?: InputMaybe<DeleteImplantableDeviceUserInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteInsuranceAuthorizationArgs = {
  input?: InputMaybe<DeleteInsuranceAuthorizationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteInsurancePlanArgs = {
  input?: InputMaybe<DeleteInsurancePlanInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteLocationArgs = {
  input?: InputMaybe<DeleteLocationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteMealArgs = {
  input?: InputMaybe<DeleteMealInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteMedicationArgs = {
  input?: InputMaybe<DestroyMedicationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteNoteArgs = {
  input?: InputMaybe<DeleteNoteInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteNotificationContactArgs = {
  input?: InputMaybe<DeleteNotificationContactInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteOfferingArgs = {
  input?: InputMaybe<DeleteOfferingInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteOfferingCouponArgs = {
  input?: InputMaybe<DeleteOfferingCouponInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteOnboardingFlowArgs = {
  input?: InputMaybe<DeleteOnboardingFlowInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteOnboardingItemArgs = {
  input?: InputMaybe<DeleteOnboardingItemInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteOrganizationCptCodeArgs = {
  input?: InputMaybe<DeleteOrganizationCptCodeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteOrganizationInfoArgs = {
  input?: InputMaybe<DeleteOrganizationInfoInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteOrganizationMembershipArgs = {
  input?: InputMaybe<DeleteOrganizationMembershipInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeletePermissionTemplateArgs = {
  input?: InputMaybe<DeletePermissionTemplateInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeletePreferredMedicalCodeArgs = {
  input?: InputMaybe<DeletePreferredMedicalCodeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteProcedureArgs = {
  input?: InputMaybe<DeleteProcedureInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteProductArgs = {
  input?: InputMaybe<DeleteProductInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteProviderCptCodeArgs = {
  input?: InputMaybe<DeleteProviderCptCodeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteReceivedFaxArgs = {
  input?: InputMaybe<DeleteReceivedFaxInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteRecommendationArgs = {
  input?: InputMaybe<DeleteRecommendationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteRecurringFormArgs = {
  input?: InputMaybe<DestroyRecurringFormInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteReferralArgs = {
  input?: InputMaybe<DeleteReferralInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteReferringPhysicianArgs = {
  input?: InputMaybe<DeleteReferringPhysicianInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteRequestedFormCompletionArgs = {
  input?: InputMaybe<DeleteRequestedFormInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteRequestedPaymentArgs = {
  input?: InputMaybe<DeleteRequestedPaymentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteShapaConnectionArgs = {
  input?: InputMaybe<DeleteShapaConnectionInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteSmartPhraseArgs = {
  input?: InputMaybe<DeleteSmartPhraseInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteSmokingStatusArgs = {
  input?: InputMaybe<DeleteSmokingStatusInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteStripeCustomerDetailArgs = {
  input?: InputMaybe<DeleteStripeCustomerDetailInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteSuperBillArgs = {
  input?: InputMaybe<DeleteSuperBillInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteTagArgs = {
  input?: InputMaybe<DeleteTagInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteTaskArgs = {
  input?: InputMaybe<DeleteTaskInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteUniqueDeviceIdentifierArgs = {
  input?: InputMaybe<DeleteUniqueDeviceIdentifierInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteUserGroupArgs = {
  input?: InputMaybe<DeleteUserGroupInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteWebhookArgs = {
  input?: InputMaybe<DeleteWebhookInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDeleteWithingsConnectionArgs = {
  input?: InputMaybe<DeleteWithingsConnectionInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDismissAllAnnouncementsArgs = {
  input?: InputMaybe<DismissAllAnnouncementsInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDismissAnnouncementArgs = {
  input?: InputMaybe<DismissAnnouncementInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationDummyUserArgs = {
  input?: InputMaybe<DummyUserInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationEditAvailabilityArgs = {
  input?: InputMaybe<EditAvailabilityInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationEmbedFormArgs = {
  input?: InputMaybe<EmbedFormInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationEnableDosespotSelfSignupArgs = {
  input?: InputMaybe<EnableSelfSignupInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationExportCarePlanToTemplateArgs = {
  input?: InputMaybe<ExportToTemplateInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationExportClientEhiArgs = {
  input?: InputMaybe<ExportClientEhiInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationExtendPaywallArgs = {
  input?: InputMaybe<ExtendPaywallInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationGenerateChartingPdfArgs = {
  input?: InputMaybe<GenerateChartingPdfInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationGenerateDosespotSingleSignOnArgs = {
  input?: InputMaybe<DosespotSsoInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationHealthAssessmentServiceSignupArgs = {
  input?: InputMaybe<HealthAssessmentServiceSignupInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationMaskAccountArgs = {
  input?: InputMaybe<MaskAccountInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationMergeClientsArgs = {
  input?: InputMaybe<MergeClientsInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationPairAccountsArgs = {
  input?: InputMaybe<PairAccountsInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationRefetchChangeHealthLabOrderArgs = {
  input?: InputMaybe<RefetchChangeHealthLabOrderInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationRemoveAppliedTagArgs = {
  input?: InputMaybe<RemoveAppliedTagInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationRemoveCardOnFileArgs = {
  input?: InputMaybe<RemoveCardOnFileInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationRemoveDraftArgs = {
  input?: InputMaybe<RemoveDraftInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationRemoveUserFromGroupCarePlanArgs = {
  input?: InputMaybe<RemoveUserFromGroupCarePlanInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationResendSentFaxArgs = {
  input?: InputMaybe<ResendSentFaxInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationResetPasswordArgs = {
  input?: InputMaybe<ResetPasswordInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationRestoreVersionArgs = {
  input?: InputMaybe<RestoreVersionsInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationResyncRupaLabOrdersArgs = {
  input?: InputMaybe<ResyncRupaLabOrdersInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationRevokeTokenArgs = {
  input?: InputMaybe<RevokeTokenInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationRunEligibilityCheckArgs = {
  input?: InputMaybe<RunEligibilityCheckMutationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationSendCarePlanEmailArgs = {
  input?: InputMaybe<SendCarePlanEmailInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationSendSpeakToTrainerNotificationArgs = {
  input?: InputMaybe<SendSpeakToTrainerNotificationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationSendWelcomeEmailArgs = {
  input?: InputMaybe<SendWelcomeEmailInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationShareAnswersAsDocumentArgs = {
  input?: InputMaybe<ShareAnswersAsDocumentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationShareCourseArgs = {
  input?: InputMaybe<ShareCourseInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationShareCustomModuleFormArgs = {
  input?: InputMaybe<ShareCustomModuleFormInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationSignInArgs = {
  input?: InputMaybe<SignInInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationSignUpArgs = {
  input?: InputMaybe<SignUpInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationToggle2FaArgs = {
  input?: InputMaybe<Toggle2FaInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationToggleAdvancedSettingsArgs = {
  input?: InputMaybe<ToggleAdvancedSettingsInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationToggleAvailabilityArgs = {
  input?: InputMaybe<ToggleAvailabilityInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationToggleBaaArgs = {
  input?: InputMaybe<ToggleBaaInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationToggleCarePlanStatusForSpecificUserArgs = {
  input?: InputMaybe<ToggleCarePlanStatusForSpecificUserInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationTogglePaywallArgs = {
  input?: InputMaybe<TogglePaywallInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationToggleReasonForApptArgs = {
  input?: InputMaybe<ToggleReasonForApptInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUnlockChartingNoteArgs = {
  input?: InputMaybe<UnlockChartingNoteInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUnsubscribeFromNotificationArgs = {
  input?: InputMaybe<UnsubscribeFromNotificationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateAddendumArgs = {
  input?: InputMaybe<UpdateAddendumInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateAllergySensitivityArgs = {
  input?: InputMaybe<UpdateAllergySensitivityInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateAnnouncementArgs = {
  input?: InputMaybe<UpdateAnnouncementInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateAppleHealthArgs = {
  input?: InputMaybe<UpdateAppleHealthInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateAppointmentArgs = {
  input?: InputMaybe<UpdateAppointmentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateAppointmentInclusionArgs = {
  input?: InputMaybe<UpdateAppointmentInclusionInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateAppointmentSettingArgs = {
  input?: InputMaybe<UpdateAppointmentSettingInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateAppointmentTypeArgs = {
  input?: InputMaybe<UpdateAppointmentTypeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateAppointmentTypeCptCodeArgs = {
  input?: InputMaybe<UpdateAppointmentTypeCptCodeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateAutoTaskGeneratorArgs = {
  input?: InputMaybe<UpdateAutoTaskGeneratorInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateBillingItemArgs = {
  input?: InputMaybe<UpdateBillingItemInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateBrandArgs = {
  input?: InputMaybe<UpdateBrandInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateByTemplateArgs = {
  input?: InputMaybe<UpdateByTemplateInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCalendarViewSettingArgs = {
  input?: InputMaybe<UpdateCalendarViewSettingInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCalorieLevelArgs = {
  input?: InputMaybe<UpdateCalorieLevelInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCampaignArgs = {
  input?: InputMaybe<UpdateCampaignInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCarePlanArgs = {
  input?: InputMaybe<UpdateCarePlanInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateChangeHealthAccountArgs = {
  input?: InputMaybe<UpdateChangeHealthAccountInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateChargeBackArgs = {
  input?: InputMaybe<UpdateChargeBackInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateChatSettingArgs = {
  input?: InputMaybe<UpdateChatSettingInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateClientArgs = {
  input?: InputMaybe<UpdateClientInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCms1500Args = {
  input?: InputMaybe<UpdateCms1500Input>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCognitiveStatusArgs = {
  input?: InputMaybe<UpdateCognitiveStatusInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateConversationArgs = {
  input?: InputMaybe<UpdateConversationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateConversationMembershipArgs = {
  input?: InputMaybe<UpdateConversationMembershipInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCourseArgs = {
  input?: InputMaybe<UpdateCourseInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCourseGroupArgs = {
  input?: InputMaybe<UpdateCourseGroupInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCourseItemArgs = {
  input?: InputMaybe<UpdateCourseItemInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCourseMembershipArgs = {
  input?: InputMaybe<UpdateCourseMembershipInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCurrencyArgs = {
  input?: InputMaybe<UpdateCurrencyInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCustomEmailArgs = {
  input?: InputMaybe<UpdateCustomEmailInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCustomFoodArgs = {
  input?: InputMaybe<UpdateCustomFoodInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCustomModuleArgs = {
  input?: InputMaybe<UpdateCustomModuleInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateCustomModuleFormArgs = {
  input?: InputMaybe<UpdateCustomModuleFormInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateDocumentArgs = {
  input?: InputMaybe<UpdateDocumentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateEntryArgs = {
  input?: InputMaybe<UpdateEntryInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateExternalCalendarArgs = {
  input?: InputMaybe<UpdateExternalCalendarInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateFamilyHistoryArgs = {
  input?: InputMaybe<UpdateFamilyHistoryInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateFaxAcctInfoArgs = {
  input?: InputMaybe<UpdateFaxAcctInfoInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateFeatureToggleArgs = {
  input?: InputMaybe<UpdateFeatureToggleInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateFitbitArgs = {
  input?: InputMaybe<UpdateFitbitInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateFolderArgs = {
  input?: InputMaybe<UpdateFolderInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateFormAnswerGroupArgs = {
  input?: InputMaybe<UpdateFormAnswerGroupInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateFunctionalStatusArgs = {
  input?: InputMaybe<UpdateFunctionalStatusInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateGoalArgs = {
  input?: InputMaybe<UpdateGoalInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateGoogleFitArgs = {
  input?: InputMaybe<UpdateGoogleFitInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateGroupCarePlanArgs = {
  input?: InputMaybe<UpdateGroupCarePlanInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateHealthConcernArgs = {
  input?: InputMaybe<UpdateHealthConcernInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateHumanArgs = {
  input?: InputMaybe<UpdateHumanInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateImmunizationArgs = {
  input?: InputMaybe<UpdateImmunizationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateImplantableDeviceUserArgs = {
  input?: InputMaybe<UpdateImplantableDeviceUserInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateInsuranceAuthorizationArgs = {
  input?: InputMaybe<UpdateInsuranceAuthorizationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateInsurancePlanArgs = {
  input?: InputMaybe<UpdateInsurancePlanInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateLabOrderArgs = {
  input?: InputMaybe<UpdateLabOrderInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateLocationArgs = {
  input?: InputMaybe<UpdateLocationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateMacronutrientSplitArgs = {
  input?: InputMaybe<UpdateMacronutrientSplitInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateMealArgs = {
  input?: InputMaybe<UpdateMealInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateMedicationArgs = {
  input?: InputMaybe<UpdateMedicationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateNoteArgs = {
  input?: InputMaybe<UpdateNoteInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateNoteSchedulerArgs = {
  input?: InputMaybe<UpdateNoteSchedulerInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateNotificationArgs = {
  input?: InputMaybe<UpdateNotificationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateNotificationContactArgs = {
  input?: InputMaybe<UpdateNotificationContactInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateNotificationRecordsArgs = {
  input?: InputMaybe<BulkUpdateNotificationRecordsInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateNotificationSettingArgs = {
  input?: InputMaybe<UpdateNotificationSettingInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateNotificationsArgs = {
  input?: InputMaybe<BulkUpdateNotificationsInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateOfferingArgs = {
  input?: InputMaybe<UpdateOfferingInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateOfficeallySftpAccountArgs = {
  input?: InputMaybe<UpdateOfficeallySftpAccountInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateOnboardingFlowArgs = {
  input?: InputMaybe<UpdateOnboardingFlowInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateOnboardingItemArgs = {
  input?: InputMaybe<UpdateOnboardingItemInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateOrgOwnerArgs = {
  input?: InputMaybe<UpdateOrgOwnerInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateOrganizationArgs = {
  input?: InputMaybe<UpdateOrganizationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateOrganizationCptCodeArgs = {
  input?: InputMaybe<UpdateOrganizationCptCodeInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateOrganizationMemberArgs = {
  input?: InputMaybe<UpdateOrganizationMemberInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateOrganizationMembershipArgs = {
  input?: InputMaybe<UpdateOrganizationMembershipInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdatePermissionTemplateArgs = {
  input?: InputMaybe<UpdatePermissionTemplateInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdatePolicyArgs = {
  input?: InputMaybe<UpdatePolicyMutationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateProcedureArgs = {
  input?: InputMaybe<UpdateProcedureInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateProductArgs = {
  input?: InputMaybe<UpdateProductInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateProviderCptCodesArgs = {
  input?: InputMaybe<UpdateProviderCptCodesInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateReceivedFaxArgs = {
  input?: InputMaybe<UpdateReceivedFaxInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateRecommendationArgs = {
  input?: InputMaybe<UpdateRecommendationInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateRecurringFormArgs = {
  input?: InputMaybe<UpdateRecurringFormInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateReferralArgs = {
  input?: InputMaybe<UpdateReferralInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateReferringPhysicianArgs = {
  input?: InputMaybe<UpdateReferringPhysicianInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateReplyToEmailAddressesArgs = {
  input?: InputMaybe<AddReplyToEmailAddressesInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateRequestedPaymentArgs = {
  input?: InputMaybe<UpdateRequestedPaymentInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateSmartPhraseArgs = {
  input?: InputMaybe<UpdateSmartPhraseInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateSmokingStatusArgs = {
  input?: InputMaybe<UpdateSmokingStatusInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateStateArgs = {
  input?: InputMaybe<UpdateStateInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateStripeCustomerDetailArgs = {
  input?: InputMaybe<UpdateStripeCustomerDetailInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateStripeVerificationDetailsArgs = {
  input?: InputMaybe<UpdateStripeVerificationDetailsInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateSubscriptionArgs = {
  input?: InputMaybe<UpdateSubscriptionInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateSuperBillArgs = {
  input?: InputMaybe<UpdateSuperBillInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateTagArgs = {
  input?: InputMaybe<UpdateTagInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateTaskArgs = {
  input?: InputMaybe<UpdateTaskInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateTasksBulkArgs = {
  input?: InputMaybe<BulkUpdateTasksInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateUniqueDeviceIdentifierArgs = {
  input?: InputMaybe<UpdateUniqueDeviceIdentifierInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateUserArgs = {
  input?: InputMaybe<UpdateUserInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateUserAppointmentPricingArgs = {
  input?: InputMaybe<UpdateUserAppointmentPricingInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateUserEmailArgs = {
  input?: InputMaybe<UpdateUserEmailInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateUserGroupArgs = {
  input?: InputMaybe<UpdateUserGroupInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUpdateWebhookArgs = {
  input?: InputMaybe<UpdateWebhookInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUploadBatchToCandidHealthArgs = {
  input?: InputMaybe<UploadBatchToCandidHealthInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUploadBatchToChangeHealthArgs = {
  input?: InputMaybe<UploadBatchToChangeHealthInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUploadBatchToOfficeallyArgs = {
  input?: InputMaybe<UploadBatchToOfficeallyInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationUploadCms1500sToIntegrationsArgs = {
  input?: InputMaybe<UploadToIntegrationsInput>;
};


/** The mutation root of this schema. See available mutations. */
export type MutationValidateVerificationTokenArgs = {
  input?: InputMaybe<ValidateVerificationTokenInput>;
};

/** Chat message object */
export type Note = {
  __typename?: 'Note';
  /** url for note audio */
  attached_audio_url?: Maybe<Scalars['String']>;
  /** url for note image */
  attached_image_url?: Maybe<Scalars['String']>;
  /** note content */
  content?: Maybe<Scalars['String']>;
  /** conversation id */
  conversation_id?: Maybe<Scalars['ID']>;
  /** The time at which this note was created */
  created_at: Scalars['String'];
  /** User who created note */
  creator?: Maybe<User>;
  /** True if this note deleted by a user */
  deleted_by_user: Scalars['Boolean'];
  /** id for note document */
  document_id?: Maybe<Scalars['ID']>;
  /** Name of attached document */
  document_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the note */
  id: Scalars['ID'];
  /** Name of attached image */
  image_name?: Maybe<Scalars['String']>;
  /** True if this note is using as auto response message */
  is_autoresponse: Scalars['Boolean'];
  /** A User which created a Note on behalf of a Conversation Owner */
  on_behalf_user?: Maybe<User>;
  /**
   * receiver of note
   * @deprecated Use conversation_memberships of conversation instead
   */
  recipient_id?: Maybe<Scalars['ID']>;
  /** Scheduled sent at */
  scheduled_at?: Maybe<Scalars['String']>;
  /** Get associated task with a chat message */
  task?: Maybe<Task>;
  /** The time at which this note was updated or marked as deleted by a user */
  updated_at: Scalars['String'];
  /** creator of note */
  user_id?: Maybe<Scalars['ID']>;
  /** conditional to see if user recipient viewd note. In community chats, you need to pass in a viewer_id */
  viewed?: Maybe<Scalars['Boolean']>;
};


/** Chat message object */
export type NoteViewedArgs = {
  viewer_id?: InputMaybe<Scalars['ID']>;
};

/** Payload for a note */
export type NoteInput = {
  /** The document attached to the note */
  attached_document?: InputMaybe<Scalars['Upload']>;
  /** The image attached to the note */
  attached_image?: InputMaybe<Scalars['Upload']>;
  /** The content of the note */
  content?: InputMaybe<Scalars['String']>;
};

/** Note sorting enum */
export enum NoteOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC'
}

/** Scheduled chat notes */
export type NoteScheduler = {
  __typename?: 'NoteScheduler';
  /** Scheduled messsage blast: get first four users */
  first_four_invitees?: Maybe<Array<User>>;
  /** The unique identifier of the scheduler */
  id: Scalars['ID'];
  /** The number of invitees */
  invitees_count?: Maybe<Scalars['Int']>;
  /** Get last conversation task */
  last_task?: Maybe<Task>;
  /** The note */
  note?: Maybe<Note>;
  /** The content of the note */
  note_content?: Maybe<Scalars['String']>;
  /** Get all directly selected user ids */
  participant_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** Get all directly selected user groups */
  selected_user_groups?: Maybe<Array<UserGroup>>;
  /** Get all directly selected users */
  selected_users?: Maybe<Array<User>>;
  /** The date and time when the scheduler was last updated. */
  updated_at: Scalars['String'];
  /** Owner user of a note scheduler */
  user?: Maybe<User>;
};

/** A notification */
export type Notification = {
  __typename?: 'Notification';
  /** returns the associated entry if type is EntryNotification, otherwise, nil */
  associated_entry?: Maybe<Entry>;
  /** The id of the object associated with the notification */
  associated_object?: Maybe<Scalars['String']>;
  /** The creation time of the notification */
  created_at: Scalars['String'];
  /** creator name of this notification */
  creator_user_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the notification */
  id: Scalars['ID'];
  /** The link that the notification goes to */
  link?: Maybe<Scalars['String']>;
  /** The full link that the notification goes to */
  link_string?: Maybe<Scalars['String']>;
  /** The message body of the notification */
  message?: Maybe<Scalars['String']>;
  /** recipient of this notification */
  other_party?: Maybe<User>;
  /** The recipient of the notification */
  other_party_id?: Maybe<Scalars['String']>;
  /** This turns to true if the user clicks on the notification */
  read?: Maybe<Scalars['String']>;
  /** This turns to true if the user loads the notification */
  seen: Scalars['Boolean'];
  /** The type of notification */
  type?: Maybe<Scalars['String']>;
  /** creator of this notification */
  user?: Maybe<User>;
  /** The creator of the notification */
  user_id?: Maybe<Scalars['String']>;
};

/** A notification contact */
export type NotificationContact = {
  __typename?: 'NotificationContact';
  /** Has personal client portal access */
  client_portal_access: Scalars['Boolean'];
  /** Client portal settings */
  client_portal_setting?: Maybe<ClientPortalSetting>;
  /** contact type */
  contact_type?: Maybe<Scalars['String']>;
  /** should a notifications of user be copied to contact */
  copy_notifications: Scalars['Boolean'];
  /** contact email */
  email?: Maybe<Scalars['String']>;
  /** is emergency contact */
  emergency: Scalars['Boolean'];
  /** first name of a contact */
  first_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the contact */
  id: Scalars['ID'];
  /** last name of a contact */
  last_name?: Maybe<Scalars['String']>;
  /** Linked user to notification contact */
  linked_client?: Maybe<User>;
  /** ID of the linked user account */
  linked_client_id?: Maybe<Scalars['String']>;
  /** contact phone number */
  phone_number?: Maybe<Scalars['String']>;
  /** relationship between contact and user */
  relationship?: Maybe<Scalars['String']>;
  /** Date notification contact was last updated */
  updated_at: Scalars['String'];
  /** Owner of this notification contact */
  user?: Maybe<User>;
  /** user id */
  user_id?: Maybe<Scalars['ID']>;
};

/** Payload for a notification contact */
export type NotificationContactInput = {
  /** If true, the notification contact will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The email of the notification contact */
  email?: InputMaybe<Scalars['String']>;
  /** The ID of the notification contact */
  id?: InputMaybe<Scalars['ID']>;
};

/** Notification sorting enum */
export enum NotificationOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC'
}

/** An object containing the users preferences on notification */
export type NotificationSetting = {
  __typename?: 'NotificationSetting';
  /** The unique identifier of the setting */
  id: Scalars['ID'];
  /** An option of receiving pdates and special offers [email/sms] */
  marketing_communcation_preference: Scalars['String'];
  /** Send an email when a course module is completed */
  notification_on_module_completion: Scalars['Boolean'];
  /** Receive updates and special offers */
  receive_updates_and_offers: Scalars['Boolean'];
  /** Get an email whenever a client posts a comment */
  send_comment_emails?: Maybe<Scalars['Boolean']>;
  /** Get a push notification when there is a new comment */
  send_comment_push?: Maybe<Scalars['Boolean']>;
  /** Send an email when a client completes a program */
  send_course_complete_email?: Maybe<Scalars['Boolean']>;
  /** Send an email 5 minutes before the appointment */
  send_email_before_appointment?: Maybe<Scalars['Boolean']>;
  /** Send an email when a new appointment is booked */
  send_email_on_appointment_book?: Maybe<Scalars['Boolean']>;
  /** Send an email when an appointment is cancelled */
  send_email_on_appointment_cancel?: Maybe<Scalars['Boolean']>;
  /** Send an email to provider when client has been assigned */
  send_email_on_client_has_been_assigned_to_you?: Maybe<Scalars['Boolean']>;
  /** Get an email when fax delivery fails */
  send_email_on_fax_delivery_failure?: Maybe<Scalars['Boolean']>;
  /** Get an email when a fax is received */
  send_email_on_fax_received?: Maybe<Scalars['Boolean']>;
  /** Get an email if client completed an intake flow */
  send_email_on_intake_flow_complete?: Maybe<Scalars['Boolean']>;
  /** Get an email if client completed an intake flow item */
  send_email_on_intake_flow_item_complete?: Maybe<Scalars['Boolean']>;
  /** Get an email if client started an intake flow */
  send_email_on_intake_flow_start?: Maybe<Scalars['Boolean']>;
  /** Get an email when a new document is uploaded */
  send_email_on_new_document?: Maybe<Scalars['Boolean']>;
  /** Get an email when a new folder is created */
  send_email_on_new_folder?: Maybe<Scalars['Boolean']>;
  /** Send an email when a client purchases a package */
  send_email_on_package_purchase?: Maybe<Scalars['Boolean']>;
  /** Get an email when a scheduled payment fails */
  send_email_on_scheduled_payment_failed?: Maybe<Scalars['Boolean']>;
  /** Send an email to primary account holder when subscription payment is made */
  send_email_receipt_for_subscription_payment?: Maybe<Scalars['Boolean']>;
  /** Get an email when provider adds an emoji to a journal entry */
  send_emoji_email?: Maybe<Scalars['Boolean']>;
  /** Get a push notification when provider adds an emoji to a journal entry */
  send_emoji_push?: Maybe<Scalars['Boolean']>;
  /** Get an email whenever a client posts an entry */
  send_entry_emails?: Maybe<Scalars['Boolean']>;
  /** Send an email to client when reminder to complete goal checked */
  send_goal_reminder_email?: Maybe<Scalars['Boolean']>;
  /** Send a push notification to client when reminder to complete goal checked */
  send_goal_reminder_push?: Maybe<Scalars['Boolean']>;
  /** Get an email whenever you get a new message in a group chat */
  send_group_message_emails?: Maybe<Scalars['Boolean']>;
  /** Get a push notification when there is a new message in a group chat */
  send_group_message_push?: Maybe<Scalars['Boolean']>;
  /** Sends an email to the client provider when their insurance is about to expire */
  send_insurance_expiry_notifications?: Maybe<Scalars['Boolean']>;
  /** Get an email whenever you get a new message */
  send_message_emails?: Maybe<Scalars['Boolean']>;
  /** Get a push notification when there is a new message */
  send_message_push?: Maybe<Scalars['Boolean']>;
  /** Get an email when a new client is added to the organization */
  send_new_clients_emails?: Maybe<Scalars['Boolean']>;
  /** Send an email to the client provider when client has updated their insurance information */
  send_new_insurance_added_notifications?: Maybe<Scalars['Boolean']>;
  /** Send an email to client when new program module is available */
  send_new_module_email?: Maybe<Scalars['Boolean']>;
  /** Send a push notification to client when new program module is available */
  send_new_module_push?: Maybe<Scalars['Boolean']>;
  /** Get a push notification 5 minutes before the appointment */
  send_push_before_appointment?: Maybe<Scalars['Boolean']>;
  /** The date and time of the last update of the setting */
  updated_at?: Maybe<Scalars['String']>;
  /** The owner of the notification setting */
  user?: Maybe<User>;
};

/** Payload for a food nutrients */
export type NutrientsInput = {
  /** The number of added sugars in the food */
  added_sugars?: InputMaybe<Scalars['String']>;
  /** The amount of calcium in the food */
  calcium?: InputMaybe<Scalars['String']>;
  /** The amount of carbohydrates in the food */
  carbs?: InputMaybe<Scalars['String']>;
  /** The amount of cholesterol in the food */
  cholesterol?: InputMaybe<Scalars['String']>;
  /** The amount of fat in the food */
  fat?: InputMaybe<Scalars['String']>;
  /** The amount of iron in the food */
  iron?: InputMaybe<Scalars['String']>;
  /** The number of kilocalories in the food */
  kcal?: InputMaybe<Scalars['String']>;
  /** The amount of monounsaturated fat in the food */
  monounsaturated_fat?: InputMaybe<Scalars['String']>;
  /** The amount of polyunsaturated fat in the food */
  polyunsaturated_fat?: InputMaybe<Scalars['String']>;
  /** The amount of potassium in the food */
  potassium?: InputMaybe<Scalars['String']>;
  /** The amount of protein in the food */
  protein?: InputMaybe<Scalars['String']>;
  /** The amount of saturated fat in the food */
  saturated_fat?: InputMaybe<Scalars['String']>;
  /** The amount of sodium in the food */
  sodium?: InputMaybe<Scalars['String']>;
  /** The amount of total fiber in the food */
  total_fiber?: InputMaybe<Scalars['String']>;
  /** The amount of total sugars in the food */
  total_sugars?: InputMaybe<Scalars['String']>;
  /** The amount of trans fat in the food */
  trans_fat?: InputMaybe<Scalars['String']>;
  /** The amount of vitamin A in the food */
  vitamin_a?: InputMaybe<Scalars['String']>;
  /** The amount of vitamin C in the food */
  vitamin_c?: InputMaybe<Scalars['String']>;
  /** The amount of vitamin D in the food */
  vitamin_d?: InputMaybe<Scalars['String']>;
};

/** Offering (or Package) */
export type Offering = {
  __typename?: 'Offering';
  /** Formatted frequency string abbreviated for offering list page */
  abbreviated_frequency_times_string?: Maybe<Scalars['String']>;
  /** Whether or not this packages has been archived */
  archived: Scalars['Boolean'];
  /** Ask for a CC (even on a free package) */
  ask_for_cc: Scalars['Boolean'];
  /** frequency client will be billed for package */
  billing_frequency?: Maybe<Scalars['String']>;
  /** count of billing items for a given offering */
  billing_items_count?: Maybe<Scalars['Int']>;
  /** True if package is allowed to be gifted to other clients. Currently only available for non-recurring offerings */
  can_be_gifted: Scalars['Boolean'];
  /** If false the payment for the offering should be collected manually at a later time */
  charge_immediately: Scalars['Boolean'];
  /** course id associated with this package */
  course_id?: Maybe<Scalars['ID']>;
  /** created at */
  created_at: Scalars['String'];
  /** currency used to pay for this package */
  currency?: Maybe<Scalars['String']>;
  /** Description of the package, not allowing nil */
  description?: Maybe<Scalars['String']>;
  /** ID of the embedded custom module form */
  embed_question_form_id?: Maybe<Scalars['String']>;
  /** fb_pixel */
  fb_pixel?: Maybe<Scalars['String']>;
  /** first time payment price of package */
  first_time_payment?: Maybe<Scalars['String']>;
  /** Formatted frequency string */
  frequency_times_string?: Maybe<Scalars['String']>;
  /** The unique identifier of the offering */
  id: Scalars['ID'];
  /** A URL to purchase the package */
  immediate_purchase_url?: Maybe<Scalars['String']>;
  /** Whether the package includes a course that has ended */
  includes_ended_fixed_course?: Maybe<Scalars['Boolean']>;
  /** initial payment amount of package */
  initial_payment_amount?: Maybe<Scalars['String']>;
  /** initial price of package including applicable taxes */
  initial_price_with_taxes?: Maybe<Scalars['String']>;
  /** selected meal plan from living plate */
  living_plate_meal_plan_id?: Maybe<Scalars['String']>;
  /** if this offering has a living plate meal plan associated, returns a link to living plate meal plan preview */
  living_plate_meal_plan_name?: Maybe<Scalars['String']>;
  /** if this offering has a living plate meal plan associated, returns a link to living plate meal plan preview */
  living_plate_preview_url?: Maybe<Scalars['String']>;
  /** Number of times the package could be purchased. Unlimited if set to nil */
  max_purchases?: Maybe<Scalars['String']>;
  /** meal plan options in offering (currently only from living plate) */
  meal_plan_options?: Maybe<Array<MealPlan>>;
  /** minimum_quantity */
  minimum_quantity?: Maybe<Scalars['String']>;
  /** name of package */
  name?: Maybe<Scalars['String']>;
  /** courses related to offering */
  offering_courses?: Maybe<Array<OfferingCourse>>;
  /** user groups that are specific to this offering */
  offering_group_visibilities?: Maybe<Array<OfferingGroupVisibility>>;
  /** offering image */
  offering_image?: Maybe<OfferingImage>;
  /** id of offering image */
  offering_image_id?: Maybe<Scalars['ID']>;
  /** URL of the offering image to use */
  offering_image_url?: Maybe<Scalars['String']>;
  /** appointment types related to offering */
  offering_includes?: Maybe<Array<OfferingInclude>>;
  /** count of offering includes associated with offering */
  offering_includes_count: Scalars['Int'];
  /** lab options included in offering */
  offering_lab_options?: Maybe<Array<OfferingLabOption>>;
  /** Taxes on offering products */
  offering_product_taxes?: Maybe<Scalars['Float']>;
  /** Products included in the offering */
  offering_products?: Maybe<Array<OfferingProduct>>;
  /** on on_purchase_ifs_tag_id */
  on_purchase_ifs_tag_id?: Maybe<Scalars['String']>;
  /** Shows whether user group should be changed when client which is already in the user group is buying the package */
  override_group_on_purchase: Scalars['Boolean'];
  /** price of package */
  price?: Maybe<Scalars['String']>;
  /** price per minute */
  price_per_minute?: Maybe<Scalars['String']>;
  /** repeat times */
  repeat_times?: Maybe<Scalars['String']>;
  /** When true, the package requires appointment booking during package purchase */
  require_booking_purchase: Scalars['Boolean'];
  /** position of package when displayed in packages list */
  row_order?: Maybe<Scalars['String']>;
  /** offering image id */
  selected_image_id?: Maybe<Scalars['String']>;
  /** show free text to customers on offerings of zero price */
  show_free_text: Scalars['Boolean'];
  /** show offering toggle */
  show_offering: Scalars['Boolean'];
  /** show price toggle */
  show_price: Scalars['Boolean'];
  /** start_fb_pixel */
  start_fb_pixel?: Maybe<Scalars['String']>;
  /** total of billing_items.amount_paid for a given offering */
  total_revenue?: Maybe<Scalars['Float']>;
  /** When false, the package is at its purchase cap, and cannot be bought by a client */
  under_purchase_cap?: Maybe<Scalars['Boolean']>;
  /** updated at */
  updated_at: Scalars['String'];
  /** The user who owns the package */
  user?: Maybe<User>;
  /** user group id associated with this package */
  user_group_id?: Maybe<Scalars['ID']>;
  /** User group name associated with this offering */
  user_group_name?: Maybe<Scalars['String']>;
  /** id of user */
  user_id?: Maybe<Scalars['ID']>;
  /** count of user package selections for a given offering */
  user_package_selections_count?: Maybe<Scalars['Int']>;
  /** user pays toggle */
  user_pays: Scalars['Boolean'];
  /** video associated with offering */
  video_url?: Maybe<Scalars['String']>;
  /** Whether the package is visible to all or to a specific group or completely hidden. */
  visibility_status: Scalars['String'];
};


/** Offering (or Package) */
export type OfferingOffering_IncludesArgs = {
  appointment_type_id?: InputMaybe<Scalars['ID']>;
  only_bookable_by_client?: InputMaybe<Scalars['Boolean']>;
};

/** Offering Coupon */
export type OfferingCoupon = {
  __typename?: 'OfferingCoupon';
  /** The amount off due to this offering coupon */
  amount_off?: Maybe<Scalars['String']>;
  /** The amount off due to this offering coupon */
  amount_off_string?: Maybe<Scalars['String']>;
  /** The time this offering coupon is applied */
  applies_to_string?: Maybe<Scalars['String']>;
  /** The code of this offering coupon */
  code?: Maybe<Scalars['String']>;
  /** The time at which this offering coupon was created */
  created_at: Scalars['String'];
  /** The time at which this offering coupon was deleted */
  deleted_at?: Maybe<Scalars['String']>;
  /** The date the promo code expires at */
  expires_at?: Maybe<Scalars['String']>;
  /** The flat amount off due to this offering coupon */
  flat_amount_off?: Maybe<Scalars['String']>;
  /** The unique identifier of the coupon */
  id: Scalars['ID'];
  /** The amount of times the offering coupon has been used */
  number_of_times_used?: Maybe<Scalars['String']>;
  /** The owner of this Offering Coupon */
  offering_coupon_owner?: Maybe<User>;
  /** Names of offerings this coupon is connected to */
  package_connection_names?: Maybe<Array<Scalars['String']>>;
  /** The promo type of this offering coupon */
  promo_type?: Maybe<Scalars['String']>;
  /** The repeat times of this offering coupon */
  repeat_times?: Maybe<Scalars['String']>;
  /** concatenated string of ammount off string and applies to string */
  to_one_line?: Maybe<Scalars['String']>;
  /** The time at which this offering coupon was last updated at */
  updated_at: Scalars['String'];
  /** The amount of times the offering coupon can be used */
  usage_limit?: Maybe<Scalars['String']>;
  /** The user id who created this offering coupon */
  user_id?: Maybe<Scalars['String']>;
};

/** OfferingCoupon sorting enum */
export enum OfferingCouponOrderKeys {
  AmountAsc = 'AMOUNT_ASC',
  AmountDesc = 'AMOUNT_DESC',
  AppliesToAsc = 'APPLIES_TO_ASC',
  AppliesToDesc = 'APPLIES_TO_DESC',
  CodeAsc = 'CODE_ASC',
  CodeDesc = 'CODE_DESC',
  ExpiresAtAsc = 'EXPIRES_AT_ASC',
  ExpiresAtDesc = 'EXPIRES_AT_DESC',
  TotalUsageAsc = 'TOTAL_USAGE_ASC',
  TotalUsageDesc = 'TOTAL_USAGE_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC'
}

/** Offering Course */
export type OfferingCourse = {
  __typename?: 'OfferingCourse';
  /** course */
  course?: Maybe<Course>;
  /** id of related course */
  course_id: Scalars['ID'];
  /** created at */
  created_at: Scalars['String'];
  /** The unique identifier of the join */
  id: Scalars['ID'];
  /** id of related offering */
  offering_id?: Maybe<Scalars['ID']>;
  /** udpated at */
  updated_at: Scalars['String'];
};

/** User groups that are specific to this offering will only be visible to clients in these user groups */
export type OfferingGroupVisibility = {
  __typename?: 'OfferingGroupVisibility';
  /** The unique identifier of the visibility */
  id: Scalars['ID'];
  /** name of the user group */
  name?: Maybe<Scalars['String']>;
  /** id of related offering */
  offering_id?: Maybe<Scalars['ID']>;
  /** id of related user group */
  user_group_id?: Maybe<Scalars['ID']>;
};

/** Offering Image */
export type OfferingImage = {
  __typename?: 'OfferingImage';
  /** created at */
  created_at: Scalars['String'];
  /** The unique identifier of the offering image */
  id: Scalars['ID'];
  /** image content type */
  image_content_type?: Maybe<Scalars['String']>;
  /** image file name */
  image_file_name?: Maybe<Scalars['String']>;
  /** image file size */
  image_file_size?: Maybe<Scalars['String']>;
  /** when image was updated */
  image_updated_at?: Maybe<Scalars['String']>;
  /** url for image */
  image_url?: Maybe<Scalars['String']>;
  /** name of image */
  name?: Maybe<Scalars['String']>;
  /** updated at */
  updated_at: Scalars['String'];
};

/** Offering image upload */
export type OfferingImageUpload = {
  /** The image for upload */
  image?: InputMaybe<Scalars['Upload']>;
};

/** Offering Include */
export type OfferingInclude = {
  __typename?: 'OfferingInclude';
  /** appointment type */
  appointment_type?: Maybe<AppointmentType>;
  /** id of related appointment type */
  appointment_type_id?: Maybe<Scalars['ID']>;
  /** created at */
  created_at: Scalars['String'];
  /** expires in */
  expires_in?: Maybe<Scalars['String']>;
  /** form id */
  form_id?: Maybe<Scalars['String']>;
  /** The unique identifier of the offering include. */
  id: Scalars['ID'];
  /** whether or not the offering_include (appointment type) should be recurring */
  is_repeating: Scalars['Boolean'];
  /** id of related offering */
  offering_id?: Maybe<Scalars['ID']>;
  /** quanity of appointments in package */
  quantity?: Maybe<Scalars['String']>;
  /** whether or not the offering book */
  required_appointment_type: Scalars['Boolean'];
  /** udpated at */
  updated_at: Scalars['String'];
};

/** Payload for an include to an offering */
export type OfferingIncludesFields = {
  /** The unique identifier of the appointment type */
  appointment_type_id?: InputMaybe<Scalars['ID']>;
  /** The unique identifier of the object */
  id?: InputMaybe<Scalars['ID']>;
  /** Whether the offering is repeating */
  is_repeating?: InputMaybe<Scalars['Boolean']>;
  /** The quantity of the offering */
  quantity?: InputMaybe<Scalars['String']>;
  /** Whether the appointment type is required */
  required_appointment_type?: InputMaybe<Scalars['Boolean']>;
};

/** Offering Lab Option */
export type OfferingLabOption = {
  __typename?: 'OfferingLabOption';
  /** created at */
  created_at: Scalars['String'];
  /** The unique identifier of the lab option */
  id: Scalars['ID'];
  /** lab option */
  lab_option?: Maybe<LabOption>;
  /** id of related appointment type */
  lab_option_id?: Maybe<Scalars['ID']>;
  /** id of related offering */
  offering_id?: Maybe<Scalars['ID']>;
  /** udpated at */
  updated_at: Scalars['String'];
};

/** Offering sorting enum */
export enum OfferingOrderKeys {
  /** Sort by billing items count descending */
  BestSeller = 'BEST_SELLER',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  PriceAsc = 'PRICE_ASC',
  PriceDesc = 'PRICE_DESC',
  SetOrder = 'SET_ORDER'
}

/** Offering product type */
export type OfferingProduct = {
  __typename?: 'OfferingProduct';
  /** If true the quantity of the main product will be reduced, otherwise changing offering_product.quantity won't affect on the main product */
  deduct_main_quantity?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the offering product */
  id: Scalars['ID'];
  /** ID of related offering */
  offering_id: Scalars['ID'];
  /** The price of included product. If offering_product.price == nil, the price will be equal to product.price */
  price?: Maybe<Scalars['String']>;
  /** A product included into the offering */
  product?: Maybe<Product>;
  /** The quantity of included products */
  quantity?: Maybe<Scalars['String']>;
  /** Tax amount if product has tax rate */
  tax_amount?: Maybe<Scalars['String']>;
  /** If true tax will be added to the price */
  taxable: Scalars['Boolean'];
};

/** Payload for an offering product */
export type OfferingProductInput = {
  /** If true, the offering product will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** If true, the main quantity will be deducted */
  deduct_main_quantity?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the offering product */
  id?: InputMaybe<Scalars['ID']>;
  /** The price of the offering product */
  price?: InputMaybe<Scalars['String']>;
  /** The offering product */
  product?: InputMaybe<ProductInput>;
  /** The quantity of the offering product */
  quantity?: InputMaybe<Scalars['String']>;
  /** If true, the offering product is taxable */
  taxable?: InputMaybe<Scalars['Boolean']>;
};

/** Offerings data type */
export type OfferingsDataType = {
  __typename?: 'OfferingsDataType';
  /** The frequency of the offering */
  freq?: Maybe<Scalars['String']>;
  /** The month of the offering */
  month?: Maybe<Scalars['String']>;
};

/** Info on SFTP connection to OfficeAlly */
export type OfficeallySftpAccount = {
  __typename?: 'OfficeallySftpAccount';
  /** The OfficeAlly SFTP URL */
  ftp_url?: Maybe<Scalars['String']>;
  /** The unique identifier of the connection */
  id: Scalars['ID'];
  /** True if the SFTP connection is turned by user */
  is_enabled?: Maybe<Scalars['Boolean']>;
  /** True if the SFTP connection is working */
  is_valid?: Maybe<Scalars['Boolean']>;
  /** The last time we imported from the SFTP */
  last_imported_from?: Maybe<Scalars['String']>;
  /** The SFTP OfficeAlly Username */
  username?: Maybe<Scalars['String']>;
};

/** An onboarding flow that is comprised of onboarding items */
export type OnboardingFlow = {
  __typename?: 'OnboardingFlow';
  /** The date this onboarding flow was created */
  created_at: Scalars['String'];
  /** If true, the flow has more froms after welcome */
  has_forms_after_welcome?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the flow */
  id: Scalars['ID'];
  /** Check if current user organization has more than 1 provider */
  is_multiple_providers?: Maybe<Scalars['Boolean']>;
  /** The name of this onboarding flow */
  name?: Maybe<Scalars['String']>;
  /** All onboarding items that make up the onboarding flow */
  onboarding_items: Array<OnboardingItem>;
  /** The number of onboarding items in the flow */
  onboarding_items_count?: Maybe<Scalars['Int']>;
  /** Owner of this onboarding flow */
  user?: Maybe<User>;
  /** The user groups this onboarding flow is associated with */
  user_groups?: Maybe<Array<UserGroup>>;
  /** The number of user groups this onboarding flow is associated with */
  user_groups_count?: Maybe<Scalars['Int']>;
  /** The combined name list of the user groups this onboarding flow is associated with */
  user_groups_name_string?: Maybe<Scalars['String']>;
};


/** An onboarding flow that is comprised of onboarding items */
export type OnboardingFlowOnboarding_ItemsArgs = {
  custom_module_forms_only?: InputMaybe<Scalars['Boolean']>;
};

/** OnboardingFlow sorting enum */
export enum OnboardingFlowOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  FormsCountAsc = 'FORMS_COUNT_ASC',
  FormsCountDesc = 'FORMS_COUNT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC'
}

/** An onboarding item that has something for the client to complete */
export type OnboardingItem = {
  __typename?: 'OnboardingItem';
  /** The URL to go to to edit the attached object */
  attached_object_edit_url?: Maybe<Scalars['String']>;
  /** Custom text above the billing info screen */
  billing_disclaimer?: Maybe<Scalars['String']>;
  /** The completed onboarding item for the given user id (from args) */
  completed_onboarding_item?: Maybe<CompletedOnboardingItem>;
  /** The relevant date to show */
  date_to_show?: Maybe<Scalars['String']>;
  /** The display name for the onboarding item (based off the attached object) */
  display_name?: Maybe<Scalars['String']>;
  /** Onboarding item has matrix field */
  has_matrix_field?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the onboarding item */
  id: Scalars['ID'];
  /** Return the ID of the incomplete form */
  incomplete_form_id?: Maybe<Scalars['String']>;
  /** Show if it the last item in related onboarding flow */
  is_last_item?: Maybe<Scalars['Boolean']>;
  /** Whether the user can skip this onboarding item */
  is_skippable: Scalars['Boolean'];
  /** The ID of the associated item */
  item_id?: Maybe<Scalars['String']>;
  /** The type of item attached to this onboarding item */
  item_type?: Maybe<Scalars['String']>;
  /** The user group this onboarding flow is assigned to */
  onboarding_flow?: Maybe<OnboardingFlow>;
  /** ID of the onboarding flow */
  onboarding_flow_id?: Maybe<Scalars['ID']>;
  /** Custom text above the photo ID screen */
  photo_id_disclaimer?: Maybe<Scalars['String']>;
  /** Custom text above the insurance policy screen */
  policy_disclaimer?: Maybe<Scalars['String']>;
  /** Owner of this onboarding item */
  user?: Maybe<User>;
  /** The URL to view the onboarding item */
  view_url?: Maybe<Scalars['String']>;
  /** Custom text for the welcome screen */
  welcome_text?: Maybe<Scalars['String']>;
};


/** An onboarding item that has something for the client to complete */
export type OnboardingItemIs_Last_ItemArgs = {
  custom_module_forms_only?: InputMaybe<Scalars['Boolean']>;
};

/** Payload for a location of an organization */
export type OrgLocationInput = {
  /** The city */
  city?: InputMaybe<Scalars['String']>;
  /** The country code */
  country?: InputMaybe<Scalars['String']>;
  /** The ID of the location */
  id?: InputMaybe<Scalars['ID']>;
  /** The first line of the address */
  line1?: InputMaybe<Scalars['String']>;
  /** The second line of the address */
  line2?: InputMaybe<Scalars['String']>;
  /** The graphql_name of the location */
  name?: InputMaybe<Scalars['String']>;
  /** The NPI of the location */
  npi?: InputMaybe<Scalars['String']>;
  /** The other ID of the location */
  other_id?: InputMaybe<Scalars['String']>;
  /** The other ID qual of the location */
  other_id_qual?: InputMaybe<Scalars['String']>;
  /** The place of service ID of the location */
  place_of_service_id?: InputMaybe<Scalars['String']>;
  /** The state */
  state?: InputMaybe<Scalars['String']>;
  /** The ID of user who owns the location */
  user_id?: InputMaybe<Scalars['String']>;
  /** The zip code */
  zip?: InputMaybe<Scalars['String']>;
};

/** An organization, that is an umbrella group for multiple providers */
export type Organization = {
  __typename?: 'Organization';
  /** The active potential care team members of the organization */
  active_care_team_members?: Maybe<Array<User>>;
  /** The active users of the organization used for starting new conversations */
  active_members_for_conversation?: Maybe<Array<User>>;
  /** Returns organization appointment locations */
  appointment_locations?: Maybe<Array<AppointmentLocation>>;
  /** Can have suborgs for this org */
  can_have_suborgs?: Maybe<Scalars['Boolean']>;
  /** The creation date of the organization */
  created_at: Scalars['String'];
  /** The filled out teaching kitchen form */
  filled_tk_form?: Maybe<FormAnswerGroup>;
  /** The unique identifier of the organization */
  id: Scalars['ID'];
  /** The location of the organization */
  location?: Maybe<Location>;
  /** The name of the organization */
  name?: Maybe<Scalars['String']>;
  /** The NPI of the organization */
  npi?: Maybe<Scalars['String']>;
  /** The number of users in the organization */
  num_users?: Maybe<Scalars['String']>;
  /** The ID of the onboarding flow for org providers */
  onboarding_flow_id?: Maybe<Scalars['String']>;
  /** The active organization memberships of the organization */
  only_active_organization_memberships?: Maybe<Array<OrganizationMembership>>;
  /** The active providers of the organization */
  only_active_providers?: Maybe<Array<User>>;
  /** The number of active providers of the organization */
  only_active_providers_count?: Maybe<Scalars['Int']>;
  /** The active support users of the organization */
  only_active_support?: Maybe<Array<User>>;
  /** The number of active support user of the organization */
  only_active_support_count?: Maybe<Scalars['Int']>;
  /** Potential Organization Roles for this Organization */
  org_roles?: Maybe<Array<Scalars['String']>>;
  /** Returns organization cpt codes */
  organization_cpt_codes?: Maybe<Array<OrganizationCptCodeType>>;
  /** The first organization info of the organization */
  organization_info?: Maybe<OrganizationInfo>;
  /** The organization infos of the organization */
  organization_infos?: Maybe<Array<OrganizationInfo>>;
  /** The count of organization infos of the organization */
  organization_infos_count?: Maybe<Scalars['Int']>;
  /** The organization memberships of the organization */
  organization_memberships?: Maybe<Array<OrganizationMembership>>;
  /** The other id */
  other_id?: Maybe<Scalars['String']>;
  /** The other ID qualifier (what type of ID it is) */
  other_id_qual?: Maybe<Scalars['String']>;
  /** The owner of the organization */
  owner?: Maybe<User>;
  /** The ID of the org owner */
  owner_id?: Maybe<Scalars['ID']>;
  /** The owner of the org's subscription */
  owner_subscription?: Maybe<SubscriptionInstance>;
  /** Parent organization for this org */
  parent_organization?: Maybe<Organization>;
  /** ID of the parent organization */
  parent_organization_id?: Maybe<Scalars['ID']>;
  /** Permission templates for this org */
  permission_templates?: Maybe<Array<PermissionTemplateType>>;
  /** The phone number of the organization */
  phone_number?: Maybe<Scalars['String']>;
  /** The providers of the organization */
  providers?: Maybe<Array<User>>;
  /** The number of providers in the organization */
  providers_count?: Maybe<Scalars['Int']>;
  /** The number of users in the organization connected their rupa health account */
  rupa_health_members?: Maybe<Array<User>>;
  /** Returns organization state licenses */
  state_licenses?: Maybe<Array<Scalars['String']>>;
  /** Suborganizations for this org */
  suborganizations?: Maybe<Array<Organization>>;
  /** Returns organization tags */
  tags?: Maybe<Array<Tag>>;
  /** Tax ID of organization */
  tax_id?: Maybe<Scalars['String']>;
  /** The tax is of the organization */
  tax_id_type?: Maybe<Scalars['String']>;
  /** User groups that are in the organization */
  user_groups?: Maybe<Array<UserGroup>>;
  /** The users of the organization */
  users?: Maybe<Array<User>>;
  /** Builder ID for the Zus token */
  zus_builder_id?: Maybe<Scalars['String']>;
};


/** An organization, that is an umbrella group for multiple providers */
export type OrganizationActive_Care_Team_MembersArgs = {
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  record_identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  state_licenses?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** An organization, that is an umbrella group for multiple providers */
export type OrganizationActive_Members_For_ConversationArgs = {
  exclude_sub_org_members?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
};


/** An organization, that is an umbrella group for multiple providers */
export type OrganizationOnly_Active_ProvidersArgs = {
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};


/** An organization, that is an umbrella group for multiple providers */
export type OrganizationOnly_Active_Providers_CountArgs = {
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};


/** An organization, that is an umbrella group for multiple providers */
export type OrganizationOrganization_InfosArgs = {
  id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** An organization, that is an umbrella group for multiple providers */
export type OrganizationOrganization_MembershipsArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  use_filters?: InputMaybe<Scalars['Boolean']>;
};


/** An organization, that is an umbrella group for multiple providers */
export type OrganizationProvidersArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  licensed_in_state?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
  with_private_notes_for_id?: InputMaybe<Scalars['String']>;
  with_tag_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};


/** An organization, that is an umbrella group for multiple providers */
export type OrganizationUsersArgs = {
  active_status?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  show_all_by_default?: InputMaybe<Scalars['Boolean']>;
};

/** OrganizationCptCode object */
export type OrganizationCptCodeType = {
  __typename?: 'OrganizationCptCodeType';
  /** The CPT code id */
  cpt_code_id: Scalars['ID'];
  /** date created */
  created_at: Scalars['String'];
  /** The unique identifier of the join */
  id: Scalars['ID'];
  /** The organization id */
  organization_id: Scalars['ID'];
  /** The price per unit */
  price_per_unit?: Maybe<Scalars['String']>;
  /** date updated */
  updated_at: Scalars['String'];
};

/** Specific information for an organization */
export type OrganizationInfo = {
  __typename?: 'OrganizationInfo';
  /** The creation date of the organization */
  created_at: Scalars['String'];
  /** The External ID of the organization */
  external_id?: Maybe<Scalars['String']>;
  /** The unique identifier of the organization info */
  id: Scalars['ID'];
  /** The number type ID of the organization */
  id_number_type?: Maybe<Scalars['String']>;
  /** The location of the organization */
  location?: Maybe<Location>;
  /** The name of the organization */
  name?: Maybe<Scalars['String']>;
  /** The NPI of the organization */
  npi?: Maybe<Scalars['String']>;
  /** The associated organization */
  organization?: Maybe<Organization>;
  /** The other id */
  other_id?: Maybe<Scalars['String']>;
  /** The other ID qualifier (what type of ID it is) */
  other_id_qual?: Maybe<Scalars['String']>;
  /** The phone number of the organization */
  phone_number?: Maybe<Scalars['String']>;
  /** Set billing provider as primary */
  primary?: Maybe<Scalars['Boolean']>;
  /** The tax id of the organization */
  tax_id?: Maybe<Scalars['String']>;
  /** The tax id type of the organization */
  tax_id_type?: Maybe<Scalars['String']>;
};

/** Payload for adding an organization info */
export type OrganizationInfoInput = {
  /** The ID of the organization */
  id?: InputMaybe<Scalars['ID']>;
  /** The location of the organization */
  location?: InputMaybe<LocationInput>;
  /** The graphql_name of the organization */
  name?: InputMaybe<Scalars['String']>;
  /** The NPI of the organization */
  npi?: InputMaybe<Scalars['String']>;
  /** The ID of the organization */
  organization_id?: InputMaybe<Scalars['ID']>;
  /** The other ID of the organization */
  other_id?: InputMaybe<Scalars['String']>;
  /** The other ID qual of the organization */
  other_id_qual?: InputMaybe<Scalars['String']>;
  /** The phone number of the organization */
  phone_number?: InputMaybe<Scalars['String']>;
  /** The tax ID of the organization */
  tax_id?: InputMaybe<Scalars['String']>;
  /** The tax ID type of the organization */
  tax_id_type?: InputMaybe<Scalars['String']>;
};

/** An organization membership */
export type OrganizationMembership = {
  __typename?: 'OrganizationMembership';
  /** Allows group level actions (e.g. send group messages in chat, assigning group to course modules, request form completions from group) */
  allow_group_level_actions: Scalars['Boolean'];
  /** If true, clients who this org member has been added as a care team member will be able to schedule appointments with them. */
  allow_self_scheduling_in_care_team?: Maybe<Scalars['Boolean']>;
  /** If true, clients who this org member has been added as a care team member for will automatically see a Chat conversation with this org member. */
  auto_create_convo_for_care_team?: Maybe<Scalars['Boolean']>;
  /** If true, the user should be able to access other active organization members conversations */
  can_access_to_members_chat?: Maybe<Scalars['Boolean']>;
  /** If true, the user can add new clients */
  can_add_clients: Scalars['Boolean'];
  /** If true, the user can add new people to the organization */
  can_add_members: Scalars['Boolean'];
  /** If true, the user should be able to add other active organization members to chat */
  can_add_members_to_chat?: Maybe<Scalars['Boolean']>;
  /** If true, the user should be able to assign a task to any member of their organization */
  can_assign_tasks_to_all_org_members?: Maybe<Scalars['Boolean']>;
  /** If true, the user can be added to the care team members list for a client */
  can_be_care_team_member: Scalars['Boolean'];
  /** If true, the user can charge clients */
  can_charge_clients: Scalars['Boolean'];
  /** If true, the user can delete charting notes */
  can_delete_charting_notes: Scalars['Boolean'];
  /** If true, the user can delete faxes */
  can_delete_faxes: Scalars['Boolean'];
  /** If true, the user can edit appontment types */
  can_edit_appointment_types: Scalars['Boolean'];
  /** If true, the user can edit calendar */
  can_edit_calendar?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit client credit */
  can_edit_credit?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit documents */
  can_edit_docs?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit eduacation content */
  can_edit_education?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit forms */
  can_edit_forms?: Maybe<Scalars['Boolean']>;
  /** If true, the user can manage the people and roles in the organization */
  can_edit_members?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit client packages */
  can_edit_packages?: Maybe<Scalars['Boolean']>;
  /** If true, the user can add ,edit and delete products */
  can_edit_products?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit settings */
  can_edit_settings?: Maybe<Scalars['Boolean']>;
  /** If true, the user can enroll and remove clients from programs */
  can_enroll_clients_to_programs?: Maybe<Scalars['Boolean']>;
  /** deprecated, use can_lock_own_charting_notes instead */
  can_lock_form_answer_groups?: Maybe<Scalars['Boolean']>;
  /** If true, the user can lock charting notes other providers created */
  can_lock_others_charting_notes?: Maybe<Scalars['Boolean']>;
  /** If true, the user can lock charting notes they created */
  can_lock_own_charting_notes?: Maybe<Scalars['Boolean']>;
  /** If true, the user should be able to mark tasks that are assigned to other org members as completed */
  can_mark_assigned_tasks_to_other_org_members_as_completed?: Maybe<Scalars['Boolean']>;
  /** If true, the user can merge clients */
  can_merge_clients?: Maybe<Scalars['Boolean']>;
  /** If true, view labs page and view patient lab results */
  can_order_labs?: Maybe<Scalars['Boolean']>;
  /** If true, the user can remove clients */
  can_remove_client?: Maybe<Scalars['Boolean']>;
  /** If true, the user should be able to rename or delete tags */
  can_rename_and_delete_tags?: Maybe<Scalars['Boolean']>;
  /** If true, the user can view the billing tab */
  can_see_billing?: Maybe<Scalars['Boolean']>;
  /** If true, the user can see all calendars in the organization */
  can_see_calendar?: Maybe<Scalars['Boolean']>;
  /** If true, the user can see all clients in the organization */
  can_see_clients?: Maybe<Scalars['Boolean']>;
  /** If true, the user can see documetns within the entire org */
  can_see_docs?: Maybe<Scalars['Boolean']>;
  /** If true, the user can see incoming faxes */
  can_see_faxes?: Maybe<Scalars['Boolean']>;
  /** If true user should be able to see fullscript tab in client profile and view fullscript box in homepage */
  can_see_fullscript_tab?: Maybe<Scalars['Boolean']>;
  /** If true, the user should be able see a button that allows them to signup for dosespot in the overview section of the client profile */
  can_see_option_to_use_erx_dosespot?: Maybe<Scalars['Boolean']>;
  /** If true, the user can see sent faxes */
  can_see_sent_faxes?: Maybe<Scalars['Boolean']>;
  /** If true, the user can see transfers tab in billing page */
  can_see_transfers?: Maybe<Scalars['Boolean']>;
  /** If true, the user can set a password for organization clients */
  can_set_client_password?: Maybe<Scalars['Boolean']>;
  /** If true, the user can share documents and folders with organizations members */
  can_share_documents_and_folders_with_org_members?: Maybe<Scalars['Boolean']>;
  /** If true, the user can sign charting notes other providers created */
  can_sign_others_charting_notes?: Maybe<Scalars['Boolean']>;
  /** If true, the user can sign charting notes they created */
  can_sign_own_charting_notes?: Maybe<Scalars['Boolean']>;
  /** When true, user can submit to Candid */
  can_submit_cms_1500s_to_candid_health?: Maybe<Scalars['Boolean']>;
  /** When true, user can submit to Change */
  can_submit_cms_1500s_to_change_health?: Maybe<Scalars['Boolean']>;
  /** If true, the user can submit CMS 1500s to Office Ally */
  can_submit_cms_1500s_to_office_ally?: Maybe<Scalars['Boolean']>;
  /** If true, it will return all organization tasks for current user */
  can_view_all_org_members_tasks?: Maybe<Scalars['Boolean']>;
  /** If true, the user can view/edit cms1500s */
  can_view_cms1500s?: Maybe<Scalars['Boolean']>;
  /** If true can use goal favorites that are shared from other members of the organization */
  can_view_goal_templates?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit appontment types */
  can_view_labs?: Maybe<Scalars['Boolean']>;
  /** If true, the user can view org dashboard */
  can_view_org_dashboard?: Maybe<Scalars['Boolean']>;
  /** If true, the user can view organization-level reports */
  can_view_reports?: Maybe<Scalars['Boolean']>;
  /** If true, the user can view/edit super bills */
  can_view_super_bills?: Maybe<Scalars['Boolean']>;
  /** If true, the user can write addendums for other org members charting notes */
  can_write_org_addendums?: Maybe<Scalars['Boolean']>;
  /** E-Rx Dosespot role */
  erx_dosespot_role?: Maybe<Scalars['String']>;
  /** If true, the user will receive notif about failed notif */
  gets_failed_fax_notif?: Maybe<Scalars['Boolean']>;
  /** If true, the user will receive a fax notif */
  gets_fax_notif?: Maybe<Scalars['Boolean']>;
  /** If true the user will have their own branding  */
  has_own_branding?: Maybe<Scalars['Boolean']>;
  /** When true, user sees the primary diagnosis column for diagnoses */
  has_primary_diagnosis_column?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the of the membership */
  id: Scalars['ID'];
  /** If true, the user has been noted as being an admin */
  is_admin?: Maybe<Scalars['Boolean']>;
  /** When true, the user can view and manage developer features like webhooks. */
  is_developer?: Maybe<Scalars['Boolean']>;
  /** Whether the user is a provider in the organization */
  is_provider?: Maybe<Scalars['Boolean']>;
  /** If true, the user is notified when any client activity including intake forms, journal entries, programs, documents */
  notify_any_client_activity?: Maybe<Scalars['Boolean']>;
  /** If true the user is notified when any appontment is booked within the org */
  notify_on_book?: Maybe<Scalars['Boolean']>;
  /** If true the user is notified when any appontment is cancelled within the org */
  notify_on_cancel?: Maybe<Scalars['Boolean']>;
  /** if true, the user should get an email notification whenever a client payment fails or there is a chargeback. */
  notify_on_payment_failure?: Maybe<Scalars['Boolean']>;
  /** The organization role */
  org_role?: Maybe<Scalars['String']>;
  /** Last applied permission template */
  permission_template?: Maybe<PermissionTemplateType>;
  /** Last applying date of permission template */
  permission_template_applied_at?: Maybe<Scalars['String']>;
  /** If true, the user can request eligibility checks */
  request_eligibility_checks?: Maybe<Scalars['Boolean']>;
  /** If true, the user will see all org billing, not just individual */
  sees_all_billing?: Maybe<Scalars['Boolean']>;
  /** If true, the user will see all org clients, not just individual on clients list page */
  sees_all_clients?: Maybe<Scalars['Boolean']>;
  /** Selected licensed in values */
  selected_licensed_in_filter?: Maybe<Array<Scalars['String']>>;
  /** Selected locations values */
  selected_locations_filter?: Maybe<Array<Scalars['String']>>;
  /** Selected statuses values */
  selected_statuses_filter?: Maybe<Array<Scalars['String']>>;
  /** Selected statuses values */
  selected_tags_filter?: Maybe<Array<Scalars['String']>>;
  /** If true, the user receive email notification when any client in the organization completes an intake flow */
  send_email_on_intake_flow_complete?: Maybe<Scalars['Boolean']>;
  /** If true, the user receive email notification when any client in the organization starts an intake flow */
  send_email_on_intake_flow_start?: Maybe<Scalars['Boolean']>;
  /** If true, the user will share appontment types with the entire org */
  share_appointment_types?: Maybe<Scalars['Boolean']>;
  /** If true, the user shares custom metrics with entire org */
  share_custom_metrics?: Maybe<Scalars['Boolean']>;
  /** If true user should uses the same API access token for Fullscript */
  share_fullscript?: Maybe<Scalars['Boolean']>;
  /** If true has their goal favorites available to other members of the organization */
  share_goal_templates?: Maybe<Scalars['Boolean']>;
  /** If true, the user shares packages with entire org */
  share_packages?: Maybe<Scalars['Boolean']>;
  /** If true, all active organization members will see shared smart phrases */
  share_smart_phrases?: Maybe<Scalars['Boolean']>;
  /** If true the user will share user groups with the entire org */
  share_user_groups?: Maybe<Scalars['Boolean']>;
  /** Show availability in the calendar by default */
  show_availability_first?: Maybe<Scalars['Boolean']>;
  /** If true, show org link on left hand side */
  show_org_tab?: Maybe<Scalars['Boolean']>;
  /** If true the clients are able to start a new conversation with the member */
  start_conversation_with?: Maybe<Scalars['Boolean']>;
  /** The title of the org member */
  title?: Maybe<Scalars['String']>;
  /** The user attached to the organization membership */
  user?: Maybe<User>;
};

/** OrganizationMembership sorting enum */
export enum OrganizationMembershipOrderKeys {
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  PositionAsc = 'POSITION_ASC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC'
}

/** Alternative ID numbers for a provider */
export type OtherIdNumber = {
  __typename?: 'OtherIdNumber';
  /** The unique identifier of the other id number */
  id: Scalars['ID'];
  /** The label to use for the other id */
  label?: Maybe<Scalars['String']>;
  /** The associated organization */
  organization?: Maybe<Organization>;
  /** The ID of the associated organization */
  organization_id?: Maybe<Scalars['String']>;
  /** The other id */
  other_id?: Maybe<Scalars['String']>;
  /** The other ID qualifier (what type of ID it is) */
  other_id_qualifier?: Maybe<Scalars['String']>;
  /**
   * The associated user
   * @deprecated You never need to query the user of the other_id
   */
  user?: Maybe<User>;
  /** The ID of the associated user */
  user_id?: Maybe<Scalars['String']>;
};

/** Payload for another id number */
export type OtherIdNumberInput = {
  /** The ID of the other id number */
  id?: InputMaybe<Scalars['ID']>;
  /** The other id number */
  other_id?: InputMaybe<Scalars['String']>;
  /** The qualifier of the other id number */
  other_id_qualifier?: InputMaybe<Scalars['String']>;
  /** The user ID of the other id number */
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated input type of PairAccounts */
export type PairAccountsInput = {
  client_id?: InputMaybe<Scalars['ID']>;
  override_current_pairing?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of PairAccounts. */
export type PairAccountsPayload = {
  __typename?: 'PairAccountsPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Payload for a patient */
export type PatientInput = {
  /** The date of birth of the patient */
  dob?: InputMaybe<Scalars['String']>;
  /** The full legal name and preferred name of the patient */
  full_legal_name_with_preferred?: InputMaybe<Scalars['String']>;
  /** DEPRECATED: The gender of the patient */
  gender?: InputMaybe<Scalars['String']>;
  /** The ID of the patient */
  id?: InputMaybe<Scalars['ID']>;
  /** The location of the patient */
  location?: InputMaybe<LocationInput>;
  /** The list of policies of the patient */
  policies?: InputMaybe<Array<InputMaybe<PolicyInput>>>;
  /** The list of referring physicians of the patient */
  referring_physicians?: InputMaybe<Array<InputMaybe<Cms1500ReferringPhysicianInput>>>;
  /** The sex of the patient */
  sex?: InputMaybe<Scalars['String']>;
  /** The social security number of the patient */
  ssn?: InputMaybe<Scalars['String']>;
};

/** A location of a patient */
export type PatientLocationInputs = {
  /** The city */
  city?: InputMaybe<Scalars['String']>;
  /** The country code */
  country?: InputMaybe<Scalars['String']>;
  /** The ID of the location */
  id?: InputMaybe<Scalars['ID']>;
  /** The first line of the address */
  line1?: InputMaybe<Scalars['String']>;
  /** The second line of the address */
  line2?: InputMaybe<Scalars['String']>;
  /** The graphql_name of the location */
  name?: InputMaybe<Scalars['String']>;
  /** The state */
  state?: InputMaybe<Scalars['String']>;
  /** The zip code */
  zip?: InputMaybe<Scalars['String']>;
};

/** An permission templateType */
export type PermissionTemplateType = {
  __typename?: 'PermissionTemplateType';
  /** Allows group level actions (e.g. send group messages in chat, assigning group to course modules, request form completions from group) */
  allow_group_level_actions: Scalars['Boolean'];
  /** If true, clients who this org member has been added as a care team member will be able to schedule appointments with them. */
  allow_self_scheduling_in_care_team?: Maybe<Scalars['Boolean']>;
  /** If true, clients who this org member has been added as a care team member for will automatically see a Chat conversation with this org member. */
  auto_create_convo_for_care_team?: Maybe<Scalars['Boolean']>;
  /** If true, the user should be able to access other active organization members conversations */
  can_access_to_members_chat?: Maybe<Scalars['Boolean']>;
  /** If true, the user can add new clients */
  can_add_clients: Scalars['Boolean'];
  /** If true, the user can add new people to the organization */
  can_add_members: Scalars['Boolean'];
  /** If true, the user should be able to add other active organization members to chat */
  can_add_members_to_chat?: Maybe<Scalars['Boolean']>;
  /** If true, the user should be able to assign a task to any member of their organization */
  can_assign_tasks_to_all_org_members?: Maybe<Scalars['Boolean']>;
  /** If true, the user can be added to the care team members list for a client */
  can_be_care_team_member: Scalars['Boolean'];
  /** If true, the user can charge clients */
  can_charge_clients: Scalars['Boolean'];
  /** If true, user сan delete charting notes */
  can_delete_charting_notes: Scalars['Boolean'];
  /** If true, the user can delete faxes */
  can_delete_faxes: Scalars['Boolean'];
  /** If true, the user can edit appontment types */
  can_edit_appointment_types: Scalars['Boolean'];
  /** If true, the user can edit calendar */
  can_edit_calendar?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit client credit */
  can_edit_credit?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit documents */
  can_edit_docs?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit eduacation content */
  can_edit_education?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit forms */
  can_edit_forms?: Maybe<Scalars['Boolean']>;
  /** If true, the user can manage the people and roles in the organization */
  can_edit_members?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit client packages */
  can_edit_packages?: Maybe<Scalars['Boolean']>;
  /** If true, the user can add ,edit and delete products */
  can_edit_products?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit settings */
  can_edit_settings?: Maybe<Scalars['Boolean']>;
  /** If true, the user can enroll and remove clients from programs */
  can_enroll_clients_to_programs?: Maybe<Scalars['Boolean']>;
  /** If true, the user can lock charting notes other providers created */
  can_lock_others_charting_notes?: Maybe<Scalars['Boolean']>;
  /** If true, the user can lock charting notes they created */
  can_lock_own_charting_notes?: Maybe<Scalars['Boolean']>;
  /** If true, can mark tasks complete that are assigned to other org members */
  can_mark_assigned_tasks_to_other_org_members_as_completed?: Maybe<Scalars['Boolean']>;
  /** If true, the user can merge clients */
  can_merge_clients?: Maybe<Scalars['Boolean']>;
  /** If true, view labs page and view patient lab results */
  can_order_labs?: Maybe<Scalars['Boolean']>;
  /** If true, the user can remove clients */
  can_remove_client?: Maybe<Scalars['Boolean']>;
  /** If true, the user should be able to rename or delete tags */
  can_rename_and_delete_tags?: Maybe<Scalars['Boolean']>;
  /** If true, the user can view the billing tab */
  can_see_billing?: Maybe<Scalars['Boolean']>;
  /** If true, the user can see all calendars in the organization */
  can_see_calendar?: Maybe<Scalars['Boolean']>;
  /** If true, the user can see all clients in the organization */
  can_see_clients?: Maybe<Scalars['Boolean']>;
  /** If true, the user can see documetns within the entire org */
  can_see_docs?: Maybe<Scalars['Boolean']>;
  /** If true, the user can see incoming faxes */
  can_see_faxes?: Maybe<Scalars['Boolean']>;
  /** If true user should be able to see fullscript tab in client profile and view fullscript box in homepage */
  can_see_fullscript_tab?: Maybe<Scalars['Boolean']>;
  /** If true, the user can see sent faxes */
  can_see_sent_faxes?: Maybe<Scalars['Boolean']>;
  /** If true, the user can see transfers tab in billing page */
  can_see_transfers?: Maybe<Scalars['Boolean']>;
  /** If true, user can set client passwords */
  can_set_client_password?: Maybe<Scalars['Boolean']>;
  /** If true, the user can share documents and folders with organizations members */
  can_share_documents_and_folders_with_org_members?: Maybe<Scalars['Boolean']>;
  /** If true, the user can sign charting notes other providers created */
  can_sign_others_charting_notes?: Maybe<Scalars['Boolean']>;
  /** If true, the user can sign charting notes they created */
  can_sign_own_charting_notes?: Maybe<Scalars['Boolean']>;
  /** If true, the user can submit CMS 1500s to Office Ally */
  can_submit_cms_1500s_to_office_ally?: Maybe<Scalars['Boolean']>;
  /** If true, it will return all organization tasks for current user */
  can_view_all_org_members_tasks?: Maybe<Scalars['Boolean']>;
  /** If true, the user can view/edit cms1500s */
  can_view_cms1500s?: Maybe<Scalars['Boolean']>;
  /** If true can use goal favorites that are shared from other members of the organization */
  can_view_goal_templates?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit appontment types */
  can_view_labs?: Maybe<Scalars['Boolean']>;
  /** If true, the user can view org dashboard */
  can_view_org_dashboard?: Maybe<Scalars['Boolean']>;
  /** If true, the user can view organization-level reports */
  can_view_reports?: Maybe<Scalars['Boolean']>;
  /** If true, the user can view/edit super bills */
  can_view_super_bills?: Maybe<Scalars['Boolean']>;
  /** If true, the user can write addendums for other org members charting notes */
  can_write_org_addendums?: Maybe<Scalars['Boolean']>;
  /** The date of creation */
  created_at: Scalars['String'];
  /** If true, the user will receive notif about failed notif */
  gets_failed_fax_notif?: Maybe<Scalars['Boolean']>;
  /** If true, the user will receive a fax notif */
  gets_fax_notif?: Maybe<Scalars['Boolean']>;
  /** If true the user will have their own branding  */
  has_own_branding?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the template */
  id: Scalars['ID'];
  /** If true, the user has been noted as being an admin */
  is_admin?: Maybe<Scalars['Boolean']>;
  /** Whether the user is a provider in the organization */
  is_provider?: Maybe<Scalars['Boolean']>;
  /** Name of template */
  name?: Maybe<Scalars['String']>;
  /** If true, the user is notified when any client activity including intake forms, journal entries, programs, documents */
  notify_any_client_activity?: Maybe<Scalars['Boolean']>;
  /** If true the user is notified when any appontment is booked within the org */
  notify_on_book?: Maybe<Scalars['Boolean']>;
  /** If true the user is notified when any appontment is cancelled within the org */
  notify_on_cancel?: Maybe<Scalars['Boolean']>;
  /** If true, user will notified about all failed payments */
  notify_on_payment_failure?: Maybe<Scalars['Boolean']>;
  /** The organization role */
  org_role?: Maybe<Scalars['String']>;
  /** If true, the user can request eligibility checks */
  request_eligibility_checks?: Maybe<Scalars['Boolean']>;
  /** If true, the user will see all org billing, not just individual */
  sees_all_billing?: Maybe<Scalars['Boolean']>;
  /** If true, the user will see all org clients, not just individual on clients list page */
  sees_all_clients?: Maybe<Scalars['Boolean']>;
  /** If true, the user receive email notification when any client in the organization completes an intake flow */
  send_email_on_intake_flow_complete?: Maybe<Scalars['Boolean']>;
  /** If true, the user receive email notification when any client in the organization starts an intake flow */
  send_email_on_intake_flow_start?: Maybe<Scalars['Boolean']>;
  /** If true, the user will share appontment types with the entire org */
  share_appointment_types?: Maybe<Scalars['Boolean']>;
  /** If true, the user shares custom metrics with entire org */
  share_custom_metrics?: Maybe<Scalars['Boolean']>;
  /** If true user should uses the same API access token for Fullscript */
  share_fullscript?: Maybe<Scalars['Boolean']>;
  /** If true has their goal favorites available to other members of the organization */
  share_goal_templates?: Maybe<Scalars['Boolean']>;
  /** If true, the user shares packages with entire org */
  share_packages?: Maybe<Scalars['Boolean']>;
  /** If true, all active organization members will see shared smart phrases */
  share_smart_phrases?: Maybe<Scalars['Boolean']>;
  /** If true the user will share user groups with the entire org */
  share_user_groups?: Maybe<Scalars['Boolean']>;
  /** Show availability in the calendar by default */
  show_availability_first?: Maybe<Scalars['Boolean']>;
  /** If true, show org link on left hand side */
  show_org_tab?: Maybe<Scalars['Boolean']>;
  /** If true the clients are able to start a new conversation with the member */
  start_conversation_with?: Maybe<Scalars['Boolean']>;
  /** Date when record was last updated */
  updated_at?: Maybe<Scalars['String']>;
  /** The user attached to the organization membership */
  user?: Maybe<User>;
};

/** A pharmacy generated from Dosespot */
export type Pharmacy = {
  __typename?: 'Pharmacy';
  /** The city of the address */
  city?: Maybe<Scalars['String']>;
  /** The unique identifier of the pharmacy */
  id: Scalars['ID'];
  /** latitude coordinate of the pharmacy */
  latitude?: Maybe<Scalars['String']>;
  /** The first line of the address */
  line1?: Maybe<Scalars['String']>;
  /** The second line of the address */
  line2?: Maybe<Scalars['String']>;
  /** longitude coordinate of the pharmacy */
  longitude?: Maybe<Scalars['String']>;
  /** The name of the pharmacy */
  name?: Maybe<Scalars['String']>;
  /** The phone number of the pharmacy */
  phone_number?: Maybe<Scalars['String']>;
  /** The state of the address (Uses the 2 letter abbreviation if in US) */
  state?: Maybe<Scalars['String']>;
  /** The zip/postal code of the address */
  zip?: Maybe<Scalars['String']>;
};

/** Payload for a location of a physician */
export type PhysicianLocationInput = {
  /** The city */
  city?: InputMaybe<Scalars['String']>;
  /** The country code */
  country?: InputMaybe<Scalars['String']>;
  /** The ID of the location */
  id?: InputMaybe<Scalars['ID']>;
  /** The first line of the address */
  line1?: InputMaybe<Scalars['String']>;
  /** The second line of the address */
  line2?: InputMaybe<Scalars['String']>;
  /** The graphql_name of the location */
  name?: InputMaybe<Scalars['String']>;
  /** The NPI of the location */
  npi?: InputMaybe<Scalars['String']>;
  /** The other ID of the location */
  other_id?: InputMaybe<Scalars['String']>;
  /** The other ID qual of the location */
  other_id_qual?: InputMaybe<Scalars['String']>;
  /** The place of service ID of the location */
  place_of_service_id?: InputMaybe<Scalars['String']>;
  /** The state */
  state?: InputMaybe<Scalars['String']>;
  /** The ID of user who owns the location */
  user_id?: InputMaybe<Scalars['String']>;
  /** The zip code */
  zip?: InputMaybe<Scalars['String']>;
};

/** Payload for a referral */
export type PhysicianReferralInput = {
  /** If the referral should be destroyed */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the referral */
  id?: InputMaybe<Scalars['ID']>;
  /** The reason for the referral */
  referral_reason?: InputMaybe<Scalars['String']>;
  /** The ID of the user */
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Alternative ID numbers for a provider */
export type PlaceOfService = {
  __typename?: 'PlaceOfService';
  /** The code for the place of service */
  code?: Maybe<Scalars['String']>;
  /** A combined name and code string, correctly formatted */
  code_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the place of service */
  id: Scalars['ID'];
  /** The name of the place of service */
  name?: Maybe<Scalars['String']>;
};

/** A plan that can be used for a subscription */
export type Plan = {
  __typename?: 'Plan';
  /** The features of the plan */
  features?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The header of the plan */
  header?: Maybe<Scalars['String']>;
  /** The unique identifier of the plan */
  id: Scalars['ID'];
  /** The subheader of the plan */
  subheader?: Maybe<Scalars['String']>;
};

/** A policy */
export type Policy = {
  __typename?: 'Policy';
  /** Benefits associated with policy */
  benefits?: Maybe<Array<Benefit>>;
  /** Call reference information associated with this policy */
  call_reference?: Maybe<CallReference>;
  /** Returns a list of errors associated with the policy after doing a Change Health Insurance Eligibility Check */
  claim_eligibility_check_errors?: Maybe<Array<ClaimEligibilityCheckErrors>>;
  /** CPT codes authorized for this policy */
  cpt_codes_policies?: Maybe<Array<CptCodesPolicy>>;
  /** Date policy becomes inactive */
  effective_end?: Maybe<Scalars['String']>;
  /** Date policy becomes active */
  effective_start?: Maybe<Scalars['String']>;
  /** policy group num */
  group_num?: Maybe<Scalars['String']>;
  /** policy holder address */
  holder_address?: Maybe<Scalars['String']>;
  /** policy holder dob, required */
  holder_dob?: Maybe<Scalars['String']>;
  /** holder first name */
  holder_first?: Maybe<Scalars['String']>;
  /** holder gender */
  holder_gender?: Maybe<Scalars['String']>;
  /** holder last name */
  holder_last?: Maybe<Scalars['String']>;
  /** The address of the holder */
  holder_location?: Maybe<Location>;
  /** holder location id */
  holder_location_id?: Maybe<Scalars['String']>;
  /** holder middle initial */
  holder_mi?: Maybe<Scalars['String']>;
  /** policy holder name */
  holder_name?: Maybe<Scalars['String']>;
  /** holder phone number */
  holder_phone?: Maybe<Scalars['String']>;
  /** policy holder relationship, required */
  holder_relationship?: Maybe<Scalars['String']>;
  /** ICD codes authorized for this policy */
  icd_codes_policies?: Maybe<Array<IcdCodesPolicy>>;
  /** The unique identifier of the policy */
  id: Scalars['ID'];
  /** Insurance authorization (eligibility) associated with policy */
  insurance_authorization?: Maybe<InsuranceAuthorizationType>;
  /** True if insurance authorization is required */
  insurance_authorization_required?: Maybe<Scalars['Boolean']>;
  /** Document Id of insurance card image(back) */
  insurance_card_back_id?: Maybe<Scalars['String']>;
  /** Document Id of insurance card image(front) */
  insurance_card_front_id?: Maybe<Scalars['String']>;
  /** The insurance plan */
  insurance_plan?: Maybe<InsurancePlan>;
  /** policy plan id, required */
  insurance_plan_id?: Maybe<Scalars['String']>;
  /** The last automated eligibility check run for this policy. */
  last_eligibility_check?: Maybe<ClaimEligibilityCheck>;
  /** The name of the policy */
  name?: Maybe<Scalars['String']>;
  /** Notes in client profile recorded by provider user */
  notes?: Maybe<Scalars['String']>;
  /** policy num, required */
  num?: Maybe<Scalars['String']>;
  /** The address of the insurance plan */
  payer_location?: Maybe<Location>;
  /** payer locatoin id */
  payer_location_id?: Maybe<Scalars['String']>;
  /** policy phone number */
  policy_phone_number?: Maybe<Scalars['String']>;
  /** Priority of policy for client (primary, secondary, or inactive) */
  priority_type?: Maybe<Scalars['String']>;
  /** Referral added to this policy. Optional field that should not be nil if referral_required is true */
  referral?: Maybe<Referral>;
  /** True if referral is required for policy */
  referral_required?: Maybe<Scalars['Boolean']>;
  /** Same as client adddress toggle */
  same_address_as_client?: Maybe<Scalars['Boolean']>;
  /** Insurance plan type? */
  type_string?: Maybe<Scalars['String']>;
  /** Date policy was last updated */
  updated_at?: Maybe<Scalars['String']>;
  /** Owner of this policy */
  user?: Maybe<User>;
  /** user id, required */
  user_id?: Maybe<Scalars['ID']>;
};

/** Payload for a policy */
export type PolicyInput = {
  /** The group number */
  group_num?: InputMaybe<Scalars['String']>;
  /** The date of birth of the holder */
  holder_dob?: InputMaybe<Scalars['String']>;
  /** The first name of the holder */
  holder_first?: InputMaybe<Scalars['String']>;
  /** The gender of the holder */
  holder_gender?: InputMaybe<Scalars['String']>;
  /** The last name of the holder */
  holder_last?: InputMaybe<Scalars['String']>;
  /** The location of the holder */
  holder_location?: InputMaybe<LocationInput>;
  /** The middle initial of the holder */
  holder_mi?: InputMaybe<Scalars['String']>;
  /** The phone number of the holder */
  holder_phone?: InputMaybe<Scalars['String']>;
  /** The relationship of the holder to the client */
  holder_relationship?: InputMaybe<Scalars['String']>;
  /** The ID of the policy */
  id?: InputMaybe<Scalars['ID']>;
  /** The ID of the insurance card back */
  insurance_card_back_id?: InputMaybe<Scalars['String']>;
  /** The ID of the insurance card front */
  insurance_card_front_id?: InputMaybe<Scalars['String']>;
  /** The insurance plan associated with the policy */
  insurance_plan?: InputMaybe<InsurancePlanInput>;
  /** The ID of the insurance plan */
  insurance_plan_id?: InputMaybe<Scalars['String']>;
  /** The name of the policy */
  name?: InputMaybe<Scalars['String']>;
  /** The policy number */
  num?: InputMaybe<Scalars['String']>;
  /** The location of the payer */
  payer_location?: InputMaybe<LocationInput>;
  /** The phone number of the policy */
  policy_phone_number?: InputMaybe<Scalars['String']>;
  /** The priority type of the policy */
  priority_type?: InputMaybe<Scalars['String']>;
  /** Whether the holder has the same address as the client */
  same_address_as_client?: InputMaybe<Scalars['Boolean']>;
  /** The type of policy */
  type_string?: InputMaybe<Scalars['String']>;
  /** The ID of the user associated with the policy */
  user_id?: InputMaybe<Scalars['String']>;
};

/** A potential appointment slot */
export type PotentialAppointmentSlot = {
  __typename?: 'PotentialAppointmentSlot';
  /** The ID of the appointment this slot is for */
  appointment_id?: Maybe<Scalars['String']>;
  /** The type of appointment the slot is for. Returns nil if not a group appointment. Returning this for many slots can potentially slow down query times. */
  appointment_type?: Maybe<AppointmentType>;
  /** The hexcode color of the slot (Not used in Healthie's default self-scheduling widget) */
  color?: Maybe<Scalars['String']>;
  /** The date of the slot */
  date?: Maybe<Scalars['String']>;
  /** Whether this slot has waitlist enabled */
  has_waitlist_enabled?: Maybe<Scalars['Boolean']>;
  /** Whether this slot is fully booked */
  is_fully_booked?: Maybe<Scalars['Boolean']>;
  /** The length of the appointment type (in minutes) */
  length?: Maybe<Scalars['Int']>;
  /** The ID of the user who owns the slot */
  user_id?: Maybe<Scalars['String']>;
};

/** Preferred Medical Code */
export type PreferredMedicalCode = {
  __typename?: 'PreferredMedicalCode';
  /** ICD/CPT code description */
  code_description?: Maybe<Scalars['String']>;
  /** ICD/CPT code */
  code_indentifier?: Maybe<Scalars['String']>;
  /** Connected Cpt Code Object */
  cpt_code?: Maybe<CptCode>;
  /** Formatted name: 'F19.20: psychotics unspecified' */
  display_name?: Maybe<Scalars['String']>;
  /** Connected ICD Code Object */
  icd_code?: Maybe<IcdCode>;
  /** The unique identifier of the code */
  id: Scalars['ID'];
};

/** Prescription created in Dosespot */
export type Prescription = {
  __typename?: 'Prescription';
  /** Comment entered by provider */
  comment?: Maybe<Scalars['String']>;
  /** Date when prescription became ineffective */
  date_inactive?: Maybe<Scalars['String']>;
  /** Date prescription was written */
  date_written?: Maybe<Scalars['String']>;
  /** Number of days supplied prescription should last */
  days_supply?: Maybe<Scalars['Int']>;
  /** Direction provided to patient when taking prescription. Entered by provider */
  directions?: Maybe<Scalars['String']>;
  /** The dosage (strength) of the prescription */
  dosage?: Maybe<Scalars['String']>;
  /** The form of the prescription. Example: tablet, capsule, teaspoon */
  dose_form?: Maybe<Scalars['String']>;
  /** The classification of the drug */
  drug_classification?: Maybe<Scalars['String']>;
  /** Date when prescription became effective */
  effective_date?: Maybe<Scalars['String']>;
  /** Encounter entered by provider */
  encounter?: Maybe<Scalars['String']>;
  /** The unique identifier of the prescription */
  id: Scalars['ID'];
  /** If the prescription is urgent */
  is_urgent?: Maybe<Scalars['Boolean']>;
  /** Date prescription was last refilled */
  last_fill_date?: Maybe<Scalars['String']>;
  /** Monograph path entered by provider */
  monograph_path?: Maybe<Scalars['String']>;
  /** The prescription's national drug code */
  ndc?: Maybe<Scalars['String']>;
  /** If true, pharmacy has been instructed not to dispense a substitute/generic version */
  no_substitutions?: Maybe<Scalars['Boolean']>;
  /** Over the counter drug */
  otc?: Maybe<Scalars['String']>;
  /** Pharmacy information assigned in dosespot (Not stored in db) */
  pharmacy?: Maybe<Pharmacy>;
  /** Notes for pharmacy entered by provider */
  pharmacy_notes?: Maybe<Scalars['String']>;
  /** The name of the prescriber */
  prescriber_name?: Maybe<Scalars['String']>;
  /** Name and dosage of the prescription. Example: ibuprofen 200 mg tablet */
  product_name?: Maybe<Scalars['String']>;
  /** Quantity of medication per refill */
  quantity?: Maybe<Scalars['String']>;
  /** Number of refills prescribed */
  refills?: Maybe<Scalars['String']>;
  /** Form in which prescription is delivered */
  route?: Maybe<Scalars['String']>;
  /** The prescription reference number */
  rx_reference_number?: Maybe<Scalars['String']>;
  /** The prescription rxcui */
  rxcui?: Maybe<Scalars['String']>;
  /** The schedule of medication. Examples: PRN, QD, BID, TID, QID, Q4H, Q6H, Q8H, Q12H, Q24H, Q48H, Q72H, Q96H, QAM, QPM, QHS, QOD, QWEEK, QMONTH, QYEAR */
  schedule?: Maybe<Scalars['String']>;
  /** Status of prescription. Example: Entered, Printed, Sending, eRxSent, Deleted  */
  status?: Maybe<Scalars['String']>;
  /** Unit of medication. Example: tablet, capsule, teaspoon */
  unit?: Maybe<Scalars['String']>;
};

/** Appointment type price and cpt_code_price */
export type PriceAndCptPriceType = {
  __typename?: 'PriceAndCptPriceType';
  /** The cpt_code_price for this appointment type */
  cpt_price?: Maybe<Scalars['String']>;
  /** The price for this appointment type */
  price?: Maybe<Scalars['String']>;
};

/** Payload for a primary organization */
export type PrimaryOrganizationInfoInput = {
  /** If true, the organization will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The external ID of the organization */
  external_id?: InputMaybe<Scalars['String']>;
  /** The ID of the organization */
  id?: InputMaybe<Scalars['ID']>;
  /** The ID number type of the organization */
  id_number_type?: InputMaybe<Scalars['String']>;
  /** The location of the organization */
  location?: InputMaybe<OrgLocationInput>;
  /** The graphql_name of the organization */
  name?: InputMaybe<Scalars['String']>;
  /** The NPI of the organization */
  npi?: InputMaybe<Scalars['String']>;
  /** The other ID of the organization */
  other_id?: InputMaybe<Scalars['String']>;
  /** The other ID qual of the organization */
  other_id_qual?: InputMaybe<Scalars['String']>;
  /** The phone number of the organization */
  phone_number?: InputMaybe<Scalars['String']>;
  /** Whether the organization is primary */
  primary?: InputMaybe<Scalars['Boolean']>;
  /** The tax ID of the organization */
  tax_id?: InputMaybe<Scalars['String']>;
  /** The tax ID type of the organization */
  tax_id_type?: InputMaybe<Scalars['String']>;
};

/** Procedure object */
export type Procedure = {
  __typename?: 'Procedure';
  /** The code of the procedure */
  code?: Maybe<Scalars['String']>;
  /** The code system name of the procedure */
  code_system_name?: Maybe<Scalars['String']>;
  /** The CPT code id of the procedure */
  cpt_code_id: Scalars['ID'];
  /** The display name of the procedure */
  display_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the procedure */
  id: Scalars['ID'];
  /** The end date time of the procedure */
  procedure_end_datetime?: Maybe<Scalars['String']>;
  /** The start date time of the procedure */
  procedure_start_datetime?: Maybe<Scalars['String']>;
  /** The status of the procedure */
  status?: Maybe<Scalars['String']>;
  /** The target site of the procedure */
  target_site?: Maybe<Scalars['String']>;
  /** The user id of the procedure */
  user_id?: Maybe<Scalars['ID']>;
};

/** The product */
export type Product = {
  __typename?: 'Product';
  /** The date and time when the product was created */
  created_at: Scalars['String'];
  /** The unique identifier of the product */
  id: Scalars['ID'];
  /** The name of the product */
  name: Scalars['String'];
  /** The price of the product */
  price: Scalars['String'];
  /** The available amount of the product */
  remaining_quantity: Scalars['String'];
  /** Tax description */
  tax_description?: Maybe<Scalars['String']>;
  /** Tax rate */
  tax_rate?: Maybe<Scalars['String']>;
  /** If product has tax rate */
  taxable?: Maybe<Scalars['Boolean']>;
  /** Indicates if the product has unlimited amount */
  unlimited_quantity: Scalars['Boolean'];
  /** Owner of the product */
  user?: Maybe<User>;
};

/** Product input */
export type ProductInput = {
  /** The product id */
  id?: InputMaybe<Scalars['String']>;
  /** The product name */
  name?: InputMaybe<Scalars['String']>;
};

/** Product sorting enum */
export enum ProductOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  PriceAsc = 'PRICE_ASC',
  PriceDesc = 'PRICE_DESC',
  QuantityAsc = 'QUANTITY_ASC',
  QuantityDesc = 'QUANTITY_DESC'
}

/** Profession */
export type Profession = {
  __typename?: 'Profession';
  /** Unique identifier of the profession */
  id: Scalars['ID'];
  /** The name of the profession */
  profession: Scalars['String'];
  /** The category of the profession */
  profession_category: Scalars['String'];
};

/** Payload for a profession */
export type ProfessionsInput = {
  /** The graphql_name of the profession */
  profession?: InputMaybe<Scalars['String']>;
  /** The category of the profession */
  profession_category?: InputMaybe<Scalars['String']>;
};

/** A provider appointment location object */
export type ProviderAppointmentLocation = {
  __typename?: 'ProviderAppointmentLocation';
  /** The unique identifier of the appointment location */
  appointment_location_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the location */
  id: Scalars['ID'];
  /** The location (in plain text) */
  location?: Maybe<Scalars['String']>;
};

/** Payload to bind an appointment location to a provider */
export type ProviderAppointmentLocationsInput = {
  /** If true, the join table record will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the appointment location */
  appointment_location_id?: InputMaybe<Scalars['ID']>;
  /** The ID of the join table record */
  id?: InputMaybe<Scalars['ID']>;
};

/** Provider appointment type connection */
export type ProviderApptTypeConnection = {
  __typename?: 'ProviderApptTypeConnection';
  /** The appointment type ID associated with this connection */
  appointment_type_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the connection */
  id: Scalars['ID'];
  /** Name of the provider associated with this appointment type connection */
  provider_name?: Maybe<Scalars['String']>;
  /** User ID of the provider associated with this appointment type connection */
  user_id?: Maybe<Scalars['ID']>;
};

/** Properties for creating or updating a ProviderCptCode */
export type ProviderCptCodeInput = {
  /** The CPT code ID */
  cpt_code_id?: InputMaybe<Scalars['ID']>;
  /** The unique identifier of the code */
  id?: InputMaybe<Scalars['ID']>;
  /** The price per unit of the code */
  price_per_unit?: InputMaybe<Scalars['String']>;
  /** The unique identifier of the provider */
  provider_id?: InputMaybe<Scalars['ID']>;
};

/** ProviderCptCode object */
export type ProviderCptCodeType = {
  __typename?: 'ProviderCptCodeType';
  /** The CPT code ID */
  cpt_code_id: Scalars['ID'];
  /** The unique identifier of the type */
  id: Scalars['ID'];
  /** The price per unit */
  price_per_unit?: Maybe<Scalars['String']>;
  /** The provider ID */
  provider_id: Scalars['ID'];
};

/** The query root of this schema. See available queries. */
export type Query = {
  __typename?: 'Query';
  /** Fetch advance appointment prices */
  advanceAppointmentPrices?: Maybe<Array<AdvanceAppointmentPrice>>;
  /** Search results for allergies, allergens, and reactions */
  allergySuggestions?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fetch an announcement */
  announcement?: Maybe<Announcement>;
  /** Fetch an array of announcements for a provider */
  announcements?: Maybe<Array<Announcement>>;
  /** Number of announcements for a provider */
  announcementsCount?: Maybe<Scalars['Int']>;
  /** Fetch paginated API Keys collection */
  apiKeys?: Maybe<Array<ApiKey>>;
  /** Number of API Keys */
  apiKeysCount?: Maybe<Scalars['Int']>;
  /** An applied tag to a user */
  appliedTag?: Maybe<AppliedTag>;
  /** Applied tags to a users */
  appliedTags?: Maybe<Array<AppliedTag>>;
  /** fetch an appointment by id, group appointments are (considered public) */
  appointment?: Maybe<Appointment>;
  /** Return potential booking issues for an appointment, date, time, repeats, attendees, and provider. */
  appointmentBookingWarnings?: Maybe<Array<AppointmentBookingWarning>>;
  /** returns metadata about appointments for provider dashboard */
  appointmentFrequencyData?: Maybe<Array<AppointmentDataType>>;
  /** fetch an appointment by id, group appointments are (considered public) */
  appointmentInclusion?: Maybe<AppointmentInclusionType>;
  /** fetch an appointment location by id (considered public) */
  appointmentLocation?: Maybe<AppointmentLocation>;
  /** get appointment locations that the current user can use. (considered public) */
  appointmentLocations?: Maybe<Array<AppointmentLocation>>;
  /** Returns a json hash of the number of appointments in each day of the month. The month is the month that the passed day is in. */
  appointmentNumberPerDayOfMonth?: Maybe<Scalars['String']>;
  /** fetch a Appointment Setting by id (considered public) */
  appointmentSetting?: Maybe<AppointmentSetting>;
  /** fetch an appointment type by id (considered public) */
  appointmentType?: Maybe<AppointmentType>;
  /** Fetch credit history for the specific appointment type */
  appointmentTypeCreditChanges?: Maybe<Array<AppointmentCreditChange>>;
  /** Fetch paginated Appointment Type collection (considered public) */
  appointmentTypes?: Maybe<Array<AppointmentType>>;
  /** Number of appointment types (considered public) */
  appointmentTypesCount?: Maybe<Scalars['Int']>;
  /** Fetch paginated appointment collection */
  appointments?: Maybe<Array<Appointment>>;
  /** Number of Appointments */
  appointmentsCount?: Maybe<Scalars['Int']>;
  /** Data summary for appointment reports */
  appointmentsSummary?: Maybe<AppointmentSummaryData>;
  /** fetch auto task generators belonging to a specific user */
  autoTaskGenerators?: Maybe<Array<AutoTaskGenerator>>;
  /** Fetch availabilities for range */
  availabilities?: Maybe<Array<Availability>>;
  /** number of availabilities */
  availabilitiesCount?: Maybe<Scalars['Int']>;
  /** Fetch availability */
  availability?: Maybe<Availability>;
  /** Fetch available item types (for use in onboarding items) */
  availableItemTypes?: Maybe<Scalars['String']>;
  /** Get open appointment times for a date range. Returns array of dates sorted in ascending order */
  availableSlotsForRange?: Maybe<Array<PotentialAppointmentSlot>>;
  /** Get the Cms1500 Policies object for a given claim and client */
  baseCms1500ForUser?: Maybe<Cms1500>;
  /** Get basic info about User from signup token */
  basicUserInfoFromToken?: Maybe<User>;
  /** DEPRECATED: All ICD Codes that are allowed to be used in healthecare claims */
  billableIcdCodes?: Maybe<Array<IcdCode>>;
  /** fetch a billing item by id */
  billingItem?: Maybe<BillingItem>;
  /** Fetch paginated billing items collection */
  billingItems?: Maybe<Array<BillingItem>>;
  /** Number of billing items */
  billingItemsCount?: Maybe<Scalars['Int']>;
  /** fetch a Brand by id (considered public) */
  brand?: Maybe<Brand>;
  /** fetch a Brand by custom sign in path (considered public) */
  brandFromCustomSignInPath?: Maybe<Brand>;
  /** get info used on authentication pages for either a dietitian or partner */
  brandInfo?: Maybe<BrandInfo>;
  /** Fetch a calendar view settings for current user */
  calendarViewSetting?: Maybe<CalendarViewSetting>;
  /** Fetch an array of campaigns for a provider */
  campaigns?: Maybe<Array<Campaign>>;
  /** Number of campaigns for a provider */
  campaignsCount?: Maybe<Scalars['Int']>;
  /** Check if the user has access to the package buy limit feature */
  canCapOfferingPurchases?: Maybe<Scalars['Boolean']>;
  /** fetch the current users candidhealth connection */
  candidHealthConnection?: Maybe<CandidHealthConnection>;
  /** Fetch paginated stripe customer accounts with associated errors or soon to expire credit cards */
  cardIssues?: Maybe<Array<StripeCustomerDetail>>;
  /** Fetch paginated stripe customer accounts with associated errors or soon to expire credit cards */
  cardIssuesCount?: Maybe<Scalars['Int']>;
  /** fetch a single care plan */
  carePlan?: Maybe<CarePlan>;
  /** Fetch paginated care plan collection */
  carePlans?: Maybe<Array<CarePlan>>;
  /** Number of care plans */
  carePlansCount?: Maybe<Scalars['Int']>;
  /** Number of care plans templates */
  carePlansTemplatesCount?: Maybe<Scalars['Int']>;
  /** fetch the current users Change Health connection */
  changeClaimSubmitter?: Maybe<ChangeClaimSubmitter>;
  /** fetch a chargeback by the Healthie ID or the Stripe Dispute ID.  */
  chargeBack?: Maybe<ChargeBack>;
  /** fetch all charge backs for a user or organization */
  chargeBacks?: Maybe<Array<ChargeBack>>;
  /** fetch count of all charge backs */
  chargeBacksCount?: Maybe<Scalars['Int']>;
  /** All items to include in the charting list */
  chartingItems?: Maybe<Array<ChartingItemType>>;
  /** All items to include in the charting list */
  chartingItemsCount?: Maybe<Scalars['Int']>;
  /** Fetch a charting note addendum by id */
  chartingNoteAddendum?: Maybe<ChartingNoteAddendumType>;
  /** fetch a Chat Setting */
  chatSetting?: Maybe<ChatSetting>;
  /** get current video chats for a user. */
  closeToCurrentVideoChats?: Maybe<Array<Appointment>>;
  /** Fetch a CMS1500 by ID */
  cms1500?: Maybe<Cms1500>;
  /** Fetch paginated Cms1500s collection */
  cms1500s?: Maybe<Array<Cms1500>>;
  /** Number of Cms1500s */
  cms1500sCount?: Maybe<Scalars['Int']>;
  /** Color Code Options for a given category */
  colorCodeOptions?: Maybe<Array<ColorCodeOption>>;
  /** Fetch comment */
  comment?: Maybe<Comment>;
  /** Fetch comments collection */
  comments?: Maybe<Array<Comment>>;
  /** number of comments */
  commentsCount?: Maybe<Scalars['Int']>;
  /** fetch a completedCourseItem by course_item_id and user_id */
  completedCourseItem?: Maybe<CompletedCourseItem>;
  /** All Contact Types For Current User */
  contactTypes?: Maybe<Array<Scalars['String']>>;
  /** fetch a conversation by id */
  conversation?: Maybe<Conversation>;
  /** fetch a conversation membership by id and owner */
  conversationMembership?: Maybe<ConversationMembership>;
  /** fetch a conversationmembership by id and invitees */
  conversationMembershipInvitees?: Maybe<Array<ConversationMembership>>;
  /** Fetch paginated conversationmemberships collection */
  conversationMemberships?: Maybe<Array<ConversationMembership>>;
  /** Number of conversationmembership */
  conversationMembershipsCount?: Maybe<Scalars['Int']>;
  /** Fetch current user's conversations. It is normally better to use the conversationMemberships query. */
  conversations?: Maybe<Array<Conversation>>;
  /** Number of conversation */
  conversationsCount?: Maybe<Scalars['Int']>;
  /** fetch a course by id (considered public) */
  course?: Maybe<Course>;
  /** fetch clients belonging to a course by course_id */
  courseClients?: Maybe<Array<CourseMembership>>;
  /** total number of clients for a specific course */
  courseClientsCount?: Maybe<Scalars['Int']>;
  /** Get course completion info for users and user_groups */
  courseCompletetionInfo?: Maybe<CourseCompletionInfoType>;
  /** Course group memberships for the course */
  courseGroupClients?: Maybe<Array<User>>;
  /** Total clients in course group memberships */
  courseGroupClientsCount?: Maybe<Scalars['Int']>;
  /** fetch a courseitem by id (considered public) */
  courseItem?: Maybe<CourseItem>;
  /** get all custom custom emails for a current user */
  courseItemCustomEmails?: Maybe<Array<CustomEmail>>;
  /** get all documents for current user */
  courseItemDocuments?: Maybe<Array<Document>>;
  /** get all custom module forms for a current user */
  courseItemForms?: Maybe<Array<CustomModuleForm>>;
  /** Course items info for the course membership */
  courseItems?: Maybe<Array<CourseItem>>;
  /** fetch a courseMembership by id */
  courseMembership?: Maybe<CourseMembership>;
  /** Fetch paginated course membership collection */
  courseMemberships?: Maybe<Array<CourseMembership>>;
  /** Number of course memberships */
  courseMembershipsCount?: Maybe<Scalars['Int']>;
  /** Fetch paginated course collection */
  courses?: Maybe<Array<Course>>;
  /** Number of course */
  coursesCount?: Maybe<Scalars['Int']>;
  /** All CPT Codes */
  cptCodes?: Maybe<Array<CptCode>>;
  /** CPT Codes count */
  cptCodesCount?: Maybe<Scalars['Int']>;
  /** fetch the current user. */
  currentUser?: Maybe<User>;
  /** fetch the current users notifications count. */
  currentUserNotificationsCount?: Maybe<UserNotificationsCount>;
  /** get current video chats for a user. */
  currentVideoChats?: Maybe<Array<Appointment>>;
  /** Custom Email object */
  customEmail?: Maybe<CustomEmail>;
  /** A HTML string containing mailer template for certain email type */
  customEmailPreview?: Maybe<Scalars['String']>;
  /** Fetch paginated custom emails collection */
  customEmails?: Maybe<Array<CustomEmail>>;
  /** Number of custom emails */
  customEmailsCount?: Maybe<Scalars['Int']>;
  /** fetch a custom module form by id (templates are considered public) */
  customModuleForm?: Maybe<CustomModuleForm>;
  /** All form templates for the current user */
  customModuleForms?: Maybe<Array<CustomModuleForm>>;
  /** Fetch paginated count for provider custom module forms */
  customModuleFormsCount?: Maybe<Scalars['Int']>;
  /** get open appointment times for a range */
  daysAvailableForRange?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** fetch a document by id */
  document?: Maybe<Document>;
  /** Get Document Viewings for a specific document. A 'View' is when a document is downloaded or opened in a new tab */
  documentViewings?: Maybe<Array<DocumentViewing>>;
  /** Number of instances for a document viewings for a specific document */
  documentViewingsCount?: Maybe<Scalars['Int']>;
  /** Fetch paginated documents collection */
  documents?: Maybe<Array<Document>>;
  /** Number of documents */
  documentsCount?: Maybe<Scalars['Int']>;
  /** Fetch User Info on DoseSpot Object */
  dosespotUserInfo?: Maybe<DoseSpot>;
  /** Fetch the iframe link to prescribe for a given patient (patient must have valid phone_number, dob, location.line1, location.city, location.state, and location.zip) */
  dosespot_ui_link?: Maybe<Scalars['String']>;
  /** draft by conversation_membership id */
  draft?: Maybe<Draft>;
  /** Fetch a link from Fullscript to create a treatment plan for a given user */
  dynamicLink?: Maybe<Scalars['String']>;
  /** fetch embed steps based off of params */
  embedWidgetSteps?: Maybe<Array<EmbedWidgetStepType>>;
  /** Fetch paginated entries collection */
  entries?: Maybe<Array<Entry>>;
  /** Number of entries */
  entriesCount?: Maybe<Scalars['Int']>;
  /** fetch an entry by id */
  entry?: Maybe<Entry>;
  /** fetch a featureToggle by id */
  featureToggle?: Maybe<FeatureToggle>;
  /** fetch a featureToggle by id */
  featureToggleForEditing?: Maybe<FeatureToggle>;
  /** fetch a folder by id */
  folder?: Maybe<Folder>;
  /** Fetch paginated folders collection */
  folders?: Maybe<Array<Folder>>;
  /** Number of folders */
  foldersCount?: Maybe<Scalars['Int']>;
  /** Fetch food items */
  foodSearch?: Maybe<Array<Food>>;
  /** Get size of food items that matches the keyword */
  foodSearchCount?: Maybe<Scalars['Int']>;
  /** Fetch a form answer group by id */
  formAnswerGroup?: Maybe<FormAnswerGroup>;
  /** All filled forms for a given set of arguments */
  formAnswerGroups?: Maybe<Array<FormAnswerGroup>>;
  /** The number of filled forms for a given set of a arguments */
  formAnswerGroupsCount?: Maybe<Scalars['Int']>;
  /** Fetch available forms to request */
  formTypesToRequest?: Maybe<Array<FormTypesToRequest>>;
  /** Fullscript practitioners that share the same clinic id as organization owner */
  fullscriptPractitionerTypes?: Maybe<Array<FullscriptPractitionerTypeType>>;
  /** Fullscript practitioners that share the same clinic id as organization owner */
  fullscriptPractitioners?: Maybe<Array<FullscriptPractitionerType>>;
  /** fetch a goal by id */
  goal?: Maybe<Goal>;
  /** All completed goals for a given set of users */
  goalHistories?: Maybe<Array<GoalHistory>>;
  /** All completed goals for a given set of users */
  goalHistoriesCount?: Maybe<Scalars['Int']>;
  /** Fetch goal history */
  goalHistory?: Maybe<GoalHistory>;
  /** A goal's instances */
  goalInstances?: Maybe<Array<GoalInstance>>;
  /** Number of instances for a goal */
  goalInstancesCount?: Maybe<Scalars['Int']>;
  /** Goal templates for given user */
  goalTemplates?: Maybe<Array<GoalTemplate>>;
  /** Number of Goal templates for given user */
  goalTemplatesCount?: Maybe<Scalars['Int']>;
  /** All goals, either for a given user or for all of the providers clients */
  goals?: Maybe<Array<Goal>>;
  /** Number of goal */
  goalsCount?: Maybe<Scalars['Int']>;
  /** All goals data */
  goalsData?: Maybe<GoalDataType>;
  /**
   * Overall completion percentage of goals
   * @deprecated Use goalsOverallCompletionRateInfo instead
   */
  goalsOverallCompletionRate?: Maybe<Scalars['Int']>;
  /** Overall completion percentage of goals */
  goalsOverallCompletionRateInfo?: Maybe<GoalOverallCompletionRateInfo>;
  /** Overall completion percentage of goals */
  goalsStreakCount?: Maybe<Scalars['Int']>;
  /** When true, the user can set up question conditions in the form builder */
  hasConditionalQuestionEditing?: Maybe<Scalars['Boolean']>;
  /** When true, the user can add sublabels to questions in the form builder */
  hasSubLabels?: Maybe<Scalars['Boolean']>;
  /** Fetch a single health assessment */
  healthAssessment?: Maybe<HealthAssessment>;
  /** Fetch Health Assessments */
  healthAssessments?: Maybe<Array<HealthAssessment>>;
  /** Fetch ICD Code by ID */
  icdCode?: Maybe<IcdCode>;
  /** All ICD Codes */
  icdCodes?: Maybe<Array<IcdCode>>;
  /** Count of all ICD Codes */
  icdCodesCount?: Maybe<Scalars['Int']>;
  /** fetch import data request by user_id */
  importDataRequest?: Maybe<ImportDataRequest>;
  /** A new CMS1500 form with some objects already prefilled */
  initialCms1500?: Maybe<Cms1500>;
  /** Initial form answers for a given user and template */
  initialFormAnswers?: Maybe<Array<FormAnswer>>;
  /** appointment types related to offering */
  initializedOfferingIncludes?: Maybe<Array<OfferingInclude>>;
  /** Insurance Authorization belonging to a client */
  insuranceAuthorization?: Maybe<InsuranceAuthorizationType>;
  /** Get all potential insurance plans */
  insurancePlans?: Maybe<Array<InsurancePlan>>;
  /** Get all potential insurance plans */
  insurancePlansCount?: Maybe<Scalars['Int']>;
  /** Fetch intake flow */
  intakeFlow?: Maybe<IntakeFlowType>;
  /** Fetch list of  available integrations */
  integrationsList?: Maybe<Array<IntegrationCategoryType>>;
  /** Initial date of service for a new form answer group */
  intitialServiceDate?: Maybe<Scalars['String']>;
  /** get the base price for the invoice based off the associated item */
  invoiceBasePrice?: Maybe<Scalars['String']>;
  invoiceTemplates?: Maybe<Array<RequestedPaymentTemplate>>;
  /** Get options for lab filters */
  labFiltersData?: Maybe<LabFiltersDataType>;
  /** Fetch all lab options (considered public) */
  labOptions?: Maybe<Array<LabOption>>;
  /** Fetch onboarding flows collection */
  labOrder?: Maybe<LabOrder>;
  /** Fetch lab orders collection */
  labOrders?: Maybe<Array<LabOrder>>;
  /** Number of lab orders related to the current user */
  labOrdersCount?: Maybe<Scalars['Int']>;
  /** Fetch most recent conversationMembership */
  lastCM?: Maybe<ConversationMembership>;
  /** The 6 most recently active clients */
  lastClientActivities?: Maybe<Array<User>>;
  /** has loadMoreNotes been called */
  loadMoreNotesCalled?: Maybe<Scalars['Boolean']>;
  /** fetch a location by id */
  location?: Maybe<Location>;
  /** Get location resources */
  locationResources?: Maybe<Array<LocationResourceType>>;
  /** Get locations for a given user (or current user) */
  locations?: Maybe<Array<Location>>;
  /** A count of available locations for the current user */
  locationsCount?: Maybe<Scalars['Int']>;
  /** Fetch user meals */
  mealSearch?: Maybe<Array<Meal>>;
  /** Get size of user meals that matches the keyword */
  mealSearchCount?: Maybe<Scalars['Int']>;
  /** Meal plan options from user Living Plate account. Nil if no Living Plate account associated */
  meal_plan_options?: Maybe<Array<MealPlan>>;
  /** Fetch an array of medications options queried from Dosespot API */
  medication_options?: Maybe<Array<MedicationOptionType>>;
  /** Fetch an array of medications for a given patient */
  medications?: Maybe<Array<MedicationType>>;
  /** Fetch count of medications for a given patient */
  medications_count?: Maybe<Scalars['Int']>;
  /** Fetch data for the metric graphs for a given user */
  metricGraphData?: Maybe<MetricGraphDataType>;
  /** Fetch data for the metric graphs for a given user */
  metricGraphsData: Array<MetricGraphDataType>;
  minimumOfferingPrice?: Maybe<Scalars['String']>;
  /** returns metadata about montly payments */
  monthlyBillingItemsData?: Maybe<Array<MonthlyBillingItemsDataType>>;
  /** Fetch data for multi line metric graphs for a given user */
  multiLineMetricGraphData?: Maybe<MultiLineMetricGraphDataType>;
  /** String containing info for the user about the client upgrade price */
  newClientPriceString?: Maybe<Scalars['String']>;
  /** String containing info for the user about the org upgrade price */
  newOrganizationPriceString?: Maybe<Scalars['String']>;
  /** String containing info for the user about the org upgrade price when adding a new support user */
  newOrganizationSupportPriceString?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Fetch closest appointment */
  nextAppointment?: Maybe<Appointment>;
  /** get open appointment times for a range */
  nextAvailableSlot?: Maybe<Scalars['String']>;
  /** fetch a courseitem by id (considered public) */
  nextCourseItem?: Maybe<CourseItem>;
  /** fetch a note by id */
  note?: Maybe<Note>;
  /** get the viewed status of a note */
  noteViewedStatus?: Maybe<Scalars['Boolean']>;
  /** Fetch note scheduler by id */
  note_scheduler?: Maybe<NoteScheduler>;
  /** Fetch paginated note collection for given conversation */
  notes?: Maybe<Array<Note>>;
  /** Number of notes */
  notesCount?: Maybe<Scalars['Int']>;
  /** get count of notifications for a given user (or for the current user) */
  notificationCount?: Maybe<Scalars['Int']>;
  /** fetch a Notification Setting by id */
  notificationSetting?: Maybe<NotificationSetting>;
  /** get notifications for a given user (or for the current user) */
  notifications?: Maybe<Array<Notification>>;
  /** fetch an offering by id (considered public) */
  offering?: Maybe<Offering>;
  /** Fetch paginated list of users associated with an offering */
  offeringBillingItems?: Maybe<Array<BillingItem>>;
  /** Number of users associated with an offering */
  offeringBillingItemsCount?: Maybe<Scalars['Int']>;
  /** Fetch paginated coupon offerings collection */
  offeringCoupons?: Maybe<Array<OfferingCoupon>>;
  /** Number of offering coupons */
  offeringCouponsCount?: Maybe<Scalars['Int']>;
  /** get all user groups relating to offerings */
  offeringGroupVisibilities?: Maybe<Array<OfferingGroupVisibility>>;
  /** All OfferingImage that have no user_id */
  offeringImages?: Maybe<Array<OfferingImage>>;
  /** Fetch paginated offerings collection (considered public) */
  offerings?: Maybe<Array<Offering>>;
  /** Number of offerings (considered public) */
  offeringsCount?: Maybe<Scalars['Int']>;
  /** returns metadata about offerings purchased */
  offeringsData?: Maybe<Array<OfferingsDataType>>;
  /** fetch the current users officeally sftp connection */
  officeallySftpAccount?: Maybe<OfficeallySftpAccount>;
  /** Fetch an onboarding flow by id or uuid */
  onboardingFlow?: Maybe<OnboardingFlow>;
  /** Fetch onboarding flows collection */
  onboardingFlows?: Maybe<Array<OnboardingFlow>>;
  /** Number of onboarding flows */
  onboardingFlowsCount?: Maybe<Scalars['Int']>;
  /** fetch an onboarding item by id (considered public) */
  onboardingItem?: Maybe<OnboardingItem>;
  /** Returns all cpt codes associated with org providers */
  orgProvidersCptCodes?: Maybe<Array<ProviderCptCodeType>>;
  /** fetch an organization by id, by provider id, or by the current_user, demographic org info is (considered public) */
  organization?: Maybe<Organization>;
  /** Fetch organization info by id */
  organizationInfo?: Maybe<OrganizationInfo>;
  /** fetch members of organization */
  organizationMembers?: Maybe<Array<User>>;
  /** org members count */
  organizationMembersCount?: Maybe<Scalars['Int']>;
  /** Get the organization membership info of the current user, basic org member info is (considered public) */
  organizationMembership?: Maybe<OrganizationMembership>;
  /** Get the organization memberships */
  organizationMemberships?: Maybe<Array<OrganizationMembership>>;
  /** fetch an Other Id Number by id */
  otherIdNumber?: Maybe<OtherIdNumber>;
  /** A collection of Other ID's and its Qualifiers for given user */
  otherIdNumbers?: Maybe<Array<OtherIdNumber>>;
  /** returns true if the there are more transfers to load */
  paginate_transfers?: Maybe<Scalars['Boolean']>;
  /** Fetch permission template */
  permissionTemplate?: Maybe<PermissionTemplateType>;
  /** Get Permission Templates */
  permissionTemplates?: Maybe<Array<PermissionTemplateType>>;
  /** Number of permission templates */
  permissionTemplatesCount?: Maybe<Scalars['Int']>;
  /** Fetch a pharmacy given dosespot pharmacy id */
  pharamcy?: Maybe<Pharmacy>;
  /** Fetch an array of pharmacies given search parameters */
  pharmacies?: Maybe<Array<Pharmacy>>;
  /** fetch all place of services */
  placeOfServices?: Maybe<Array<PlaceOfService>>;
  /** fetch a Plan by id (considered public) */
  plan?: Maybe<Plan>;
  /** fetch a policy by id */
  policy?: Maybe<Policy>;
  /** Fetch collection of preferred CPT/ICD codes */
  preferred_medical_codes?: Maybe<Array<PreferredMedicalCode>>;
  /** Fetch a prescriptions for a given patient and prescription id pulled from Dosespot */
  prescription?: Maybe<Prescription>;
  /** Fetch an array of prescriptions for a given patient pulled from Dosespot */
  prescriptions?: Maybe<Array<Prescription>>;
  /** fetch a courseitem by id (considered public) */
  prevCourseItem?: Maybe<CourseItem>;
  /** Fetch paginated product collection */
  products?: Maybe<Array<Product>>;
  /** Number of products */
  productsCount?: Maybe<Scalars['Int']>;
  /** fetch a provider by id */
  provider?: Maybe<User>;
  /** get provider appointment locations. */
  providerAppointmentLocations?: Maybe<Array<AppointmentLocation>>;
  /** Returns all cpt codes associated with this provider */
  providerCptCodes?: Maybe<Array<ProviderCptCodeType>>;
  /** Fetch generic custom modules for use in the form builder */
  questionBankModules?: Maybe<Array<CustomModule>>;
  /** Fetch receipt_line_items collection by super_bill_id */
  receiptLineItems?: Maybe<Array<ReceiptLineItem>>;
  /** Fetch received direct message via ID */
  receivedDirectMessage?: Maybe<ReceivedDirectMessage>;
  /** Fetch Received Direct Meessages */
  receivedDirectMessages?: Maybe<Array<ReceivedDirectMessage>>;
  /** Fetch number of Received Direct Meessages */
  receivedDirectMessagesCount?: Maybe<Scalars['Int']>;
  /** Fetch Received Fax by ID */
  receivedFax?: Maybe<ReceivedFax>;
  /** Fetch paginated Received Faxes collection */
  receivedFaxes?: Maybe<Array<ReceivedFax>>;
  /** Number of Received Faxes */
  receivedFaxesCount?: Maybe<Scalars['Int']>;
  /** Fetch recent food items */
  recentFoods?: Maybe<Array<Food>>;
  /** Fetch recurring forms collection */
  recurringForms?: Maybe<Array<RecurringForm>>;
  /** Fetch active recurring_payments */
  recurringPayments?: Maybe<Array<RecurringPayment>>;
  /** Fetch Referral by ID */
  referral?: Maybe<Referral>;
  /** Get referring physician based on id */
  referringPhysician?: Maybe<ReferringPhysician>;
  /** all referring physicians based on current user */
  referringPhysicians?: Maybe<Array<ReferringPhysician>>;
  /** Number of referring physicians */
  referringPhysiciansCount?: Maybe<Scalars['Int']>;
  /** fetch a requested form completion by id */
  requestedFormCompletion?: Maybe<RequestedFormCompletion>;
  /** Fetch requested form completions collection */
  requestedFormCompletions?: Maybe<Array<RequestedFormCompletion>>;
  /** fetch a requested payment (invoice) by id */
  requestedPayment?: Maybe<RequestedPayment>;
  /** Fetch paginated Requested Payments collection */
  requestedPayments?: Maybe<Array<RequestedPayment>>;
  /** Number of Requested Payments */
  requestedPaymentsCount?: Maybe<Scalars['Int']>;
  /** Fetch user's scheduled message blasts */
  scheduledMessageBlasts?: Maybe<Array<NoteScheduler>>;
  /** Fetch collection of all scheduled packages */
  scheduledUserPackageSelections?: Maybe<Array<ScheduledUserPackageSelection>>;
  /** SDK configuration */
  sdkConfig: SdkConfig;
  /** Fetch sent direct message via ID */
  sentDirectMessage?: Maybe<SentDirectMessage>;
  /** Fetch number of Sent Direct Messages */
  sentDirectMessages?: Maybe<Array<SentDirectMessage>>;
  /** Fetch number of Sent Direct Meessages */
  sentDirectMessagesCount?: Maybe<Scalars['Int']>;
  /** Fetch paginated Sent Faxes collection */
  sentFaxes?: Maybe<Array<SentFax>>;
  /** Number of Sent Faxes */
  sentFaxesCount?: Maybe<Scalars['Int']>;
  /** Fetch notification list for a specific client or list of clients. */
  sentNotificationRecords?: Maybe<Array<SentNotificationRecord>>;
  /** Get number of SentNotificationRecord entries */
  sentNotificationRecordsCount?: Maybe<Scalars['Int']>;
  /** Fetch paginated Webhooks collection */
  sentWebhooks?: Maybe<Array<SentWebhook>>;
  /** Number of Webhooks */
  sentWebhooksCount?: Maybe<Scalars['Int']>;
  /** Fetch serving sizes for a food */
  servingSizes?: Maybe<Array<ServingSize>>;
  /** A HTML string of charting note answers */
  shareNotePreview?: Maybe<Scalars['String']>;
  /** Should current user see scheduled chat tab */
  showScheduledTab?: Maybe<Scalars['Boolean']>;
  /** Fetch user smart phrases */
  smartPhrases?: Maybe<Array<SmartPhrase>>;
  /** Get size of user smart phrases that matches the keyword */
  smartPhrasesCount?: Maybe<Scalars['Int']>;
  /** initial cpt codes for a new super bill */
  startingSuperBillCptCodes?: Maybe<Array<CptCodesSuperBill>>;
  /** initial icd10 codes for a new super bill */
  startingSuperBillIcd10s?: Maybe<Array<IcdCodesSuperBill>>;
  /** Return providers' state licenses */
  stateLicenses?: Maybe<Array<StateLicense>>;
  /** Default Stripe bank account object associated to a practitioner stripe account */
  stripeBankAccount?: Maybe<StripeBankAccountType>;
  /** Information about the user's stripe company */
  stripeCompany?: Maybe<StripeCompanyType>;
  /** An array containing infoformation about countries that stripe supports */
  stripeCountries?: Maybe<Array<StripeCountry>>;
  /** An object containing info about a country that stripe supports */
  stripeCountry?: Maybe<StripeCountry>;
  /** Fetch all stripe payment cards for user */
  stripeCustomerDetails?: Maybe<Array<StripeCustomerDetail>>;
  /** All subgoals for a given goal */
  subGoals?: Maybe<Array<Goal>>;
  /** Number of subgoals */
  subGoalsCount?: Maybe<Scalars['Int']>;
  /** Get the current users subscription */
  subscription?: Maybe<SubscriptionInstance>;
  /** fetch a superbill by id */
  superBill?: Maybe<SuperBill>;
  /** Fetch paginated super bills collection */
  superBills?: Maybe<Array<SuperBill>>;
  /** Number of super bills */
  superBillsCount?: Maybe<Scalars['Int']>;
  /** Endpoint for Support Dashboard Queries */
  supportDashboard?: Maybe<SupportDashboardType>;
  /** A collection of tags related to current patient/provider/organization */
  tags?: Maybe<Array<Tag>>;
  /** Number of tags */
  tagsCount?: Maybe<Scalars['Int']>;
  task?: Maybe<Task>;
  /** All tasks assigned to a provider or client */
  tasks?: Maybe<Array<Task>>;
  /** All tasks assigned to a provider or client */
  tasksCount?: Maybe<Scalars['Int']>;
  /** (DEPRECATED - use availableSlotsForRange) get open appointment times for a range. */
  timesForRange?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** fetch transactions for the current user */
  transactions?: Maybe<Array<TransactionType>>;
  /** fetch transfers for the current user */
  transfers?: Maybe<Array<TransferType>>;
  /** Fetch an array of treatment plans and recommended products from Fullscript given a user id */
  treatmentPlans?: Maybe<Array<FullscriptTreatmentPlanType>>;
  /** Get the users completed onboarding items, that are not part of the users current flow */
  unassociatedCompletedOnboardingItems?: Maybe<Array<CompletedOnboardingItem>>;
  /** fetch ungrouped course memberhips belonging to a a specific course */
  ungroupedCourseMemberships?: Maybe<Array<CourseMembership>>;
  /** count of ungrouped course memberhips for a specific course */
  ungroupedCourseMembershipsCount?: Maybe<Scalars['Int']>;
  /** fetch a user by id */
  user?: Maybe<User>;
  /** fetch a user group by id */
  userGroup?: Maybe<UserGroup>;
  /** Fetch paginated user groups collection */
  userGroups?: Maybe<Array<UserGroup>>;
  /** Number of user groups */
  userGroupsCount?: Maybe<Scalars['Int']>;
  /** Fetch collection of all purchased packages */
  userPackageSelections?: Maybe<Array<UserPackageSelection>>;
  userPackageSelectionsCount?: Maybe<Scalars['Int']>;
  /** Fetch paginated patients collection (use organizationMembers query for providers) */
  users?: Maybe<Array<User>>;
  /** Number of users */
  usersCount?: Maybe<Scalars['Int']>;
  /** Check if a coupon is valid, and return the new price (considered public) */
  validateCoupon?: Maybe<ValidateOfferingCoupon>;
  /** Check if a reset passwrd token is valid */
  validateResetPasswordToken?: Maybe<Scalars['Boolean']>;
  /** Check if a signup token is valid */
  validateSignupToken?: Maybe<Scalars['Boolean']>;
  waterIntakeEntry?: Maybe<Entry>;
  /** Fetch possible Webhook event types */
  webhookEventTypes?: Maybe<Array<Scalars['String']>>;
  /** Fetch paginated Webhooks collection */
  webhooks?: Maybe<Array<Webhook>>;
  /** Number of Webhooks */
  webhooksCount?: Maybe<Scalars['Int']>;
  /** Whitelabel setting to use */
  whitelabelSetting?: Maybe<WhitelabelSetting>;
  /** Generate a JWT to be used in the client-side Zoom SDK. This is just available on production, and requires your account to be approved by Healthie. The JWT is valid for 1 day. */
  zoomSdkJwt?: Maybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryAdvanceAppointmentPricesArgs = {
  appointment_type_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryAllergySuggestionsArgs = {
  category?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryAnnouncementArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryAnnouncementsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  exclude_dismissed?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  page_size?: InputMaybe<Scalars['Int']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryAnnouncementsCountArgs = {
  exclude_dismissed?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryApiKeysArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<ApiKeyOrderKeys>;
  page_size?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryApiKeysCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppliedTagArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppliedTagsArgs = {
  id?: InputMaybe<Scalars['ID']>;
  tag_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentArgs = {
  id?: InputMaybe<Scalars['ID']>;
  include_deleted?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentBookingWarningsArgs = {
  appointment_type_id?: InputMaybe<Scalars['ID']>;
  attendee_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  date?: InputMaybe<Scalars['String']>;
  is_repeating?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  recurring_appt_id?: InputMaybe<Scalars['String']>;
  repeat_interval?: InputMaybe<Scalars['String']>;
  repeat_times?: InputMaybe<Scalars['String']>;
  time?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentFrequencyDataArgs = {
  only_to_current_date?: InputMaybe<Scalars['Boolean']>;
  org_level?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentInclusionArgs = {
  id?: InputMaybe<Scalars['ID']>;
  uuid?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentLocationArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentLocationsArgs = {
  appointment_date?: InputMaybe<Scalars['String']>;
  appointment_type_id?: InputMaybe<Scalars['ID']>;
  ids?: InputMaybe<Array<InputMaybe<Scalars['Int']>>>;
  keywords?: InputMaybe<Scalars['String']>;
  location_ids?: InputMaybe<Scalars['String']>;
  org_level?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  resource?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentNumberPerDayOfMonthArgs = {
  date?: InputMaybe<Scalars['String']>;
  include_blockers?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentSettingArgs = {
  id?: InputMaybe<Scalars['ID']>;
  provider_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentTypeArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentTypeCreditChangesArgs = {
  appointment_type_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentTypesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  appointment_type_ids?: InputMaybe<Scalars['String']>;
  clients_can_book?: InputMaybe<Scalars['Boolean']>;
  embed_or_sharing_link?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offering_id?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<AppointmentTypeOrderKeys>;
  org_level?: InputMaybe<Scalars['Boolean']>;
  page_size?: InputMaybe<Scalars['Int']>;
  provider_id?: InputMaybe<Scalars['String']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
  show_group?: InputMaybe<Scalars['Boolean']>;
  with_deleted_appt_types?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentTypesCountArgs = {
  appointment_type_ids?: InputMaybe<Scalars['String']>;
  clients_can_book?: InputMaybe<Scalars['Boolean']>;
  embed_or_sharing_link?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offering_id?: InputMaybe<Scalars['String']>;
  org_level?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['String']>;
  show_group?: InputMaybe<Scalars['Boolean']>;
  with_deleted_appt_types?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  attendee_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  colorSchemeId?: InputMaybe<Scalars['String']>;
  currentWeek?: InputMaybe<Scalars['Boolean']>;
  endDate?: InputMaybe<Scalars['String']>;
  exclude_appointments_with_invoice?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Scalars['String']>;
  filter_by_appointment_location_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  filter_by_appointment_status?: InputMaybe<Scalars['String']>;
  filter_by_appointment_type_id?: InputMaybe<Scalars['ID']>;
  filter_by_appointment_type_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  filter_by_chart_note_written?: InputMaybe<Scalars['Boolean']>;
  filter_by_client_confirmed?: InputMaybe<Scalars['Boolean']>;
  filter_by_invoices?: InputMaybe<Scalars['Boolean']>;
  filter_by_location_id?: InputMaybe<Scalars['ID']>;
  filter_by_provider_confirmed?: InputMaybe<Scalars['Boolean']>;
  filter_synced_appointments?: InputMaybe<Scalars['Boolean']>;
  include_blockers?: InputMaybe<Scalars['Boolean']>;
  include_nil_blockers?: InputMaybe<Scalars['Boolean']>;
  include_suborganizations?: InputMaybe<Scalars['Boolean']>;
  is_active?: InputMaybe<Scalars['Boolean']>;
  is_confirmed?: InputMaybe<Scalars['Boolean']>;
  is_org?: InputMaybe<Scalars['Boolean']>;
  is_upcoming?: InputMaybe<Scalars['Boolean']>;
  is_with_clients?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<AppointmentOrderKeys>;
  page_size?: InputMaybe<Scalars['Int']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
  show_appointments?: InputMaybe<Scalars['Boolean']>;
  specificDay?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['String']>;
  unconfirmed?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['ID']>;
  with_all_statuses?: InputMaybe<Scalars['Boolean']>;
  with_others?: InputMaybe<Scalars['Boolean']>;
  without_status?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentsCountArgs = {
  currentWeek?: InputMaybe<Scalars['Boolean']>;
  endDate?: InputMaybe<Scalars['String']>;
  exclude_appointments_with_invoice?: InputMaybe<Scalars['Boolean']>;
  filter?: InputMaybe<Scalars['String']>;
  filter_by_appointment_location_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  filter_by_appointment_status?: InputMaybe<Scalars['String']>;
  filter_by_appointment_type_id?: InputMaybe<Scalars['ID']>;
  filter_by_appointment_type_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  filter_by_chart_note_written?: InputMaybe<Scalars['Boolean']>;
  filter_by_invoices?: InputMaybe<Scalars['Boolean']>;
  filter_by_location_id?: InputMaybe<Scalars['ID']>;
  filter_synced_appointments?: InputMaybe<Scalars['Boolean']>;
  include_blockers?: InputMaybe<Scalars['Boolean']>;
  include_nil_blockers?: InputMaybe<Scalars['Boolean']>;
  include_suborganizations?: InputMaybe<Scalars['Boolean']>;
  is_active?: InputMaybe<Scalars['Boolean']>;
  is_confirmed?: InputMaybe<Scalars['Boolean']>;
  is_org?: InputMaybe<Scalars['Boolean']>;
  is_upcoming?: InputMaybe<Scalars['Boolean']>;
  is_with_clients?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  show_appointments?: InputMaybe<Scalars['Boolean']>;
  specificDay?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['String']>;
  unconfirmed?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['ID']>;
  with_all_statuses?: InputMaybe<Scalars['Boolean']>;
  with_others?: InputMaybe<Scalars['Boolean']>;
  without_status?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryAppointmentsSummaryArgs = {
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  range_end?: InputMaybe<Scalars['String']>;
  range_start?: InputMaybe<Scalars['String']>;
  range_type?: InputMaybe<Scalars['String']>;
  require_cache_threshold?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryAutoTaskGeneratorsArgs = {
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryAvailabilitiesArgs = {
  appointment_location_id?: InputMaybe<Scalars['String']>;
  appointment_type_id?: InputMaybe<Scalars['String']>;
  availability_provider_id?: InputMaybe<Scalars['ID']>;
  contact_type_id?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['String']>;
  end_date_padding?: InputMaybe<Scalars['Int']>;
  includeRepeating?: InputMaybe<Scalars['Boolean']>;
  is_org?: InputMaybe<Scalars['Boolean']>;
  is_repeating?: InputMaybe<Scalars['Boolean']>;
  one_time?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  show_availability?: InputMaybe<Scalars['Boolean']>;
  startDate?: InputMaybe<Scalars['String']>;
  start_date_padding?: InputMaybe<Scalars['Int']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryAvailabilitiesCountArgs = {
  appointment_location_id?: InputMaybe<Scalars['String']>;
  appointment_type_id?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['String']>;
  is_org?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  startDate?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryAvailabilityArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryAvailableItemTypesArgs = {
  onboarding_flow_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryAvailableSlotsForRangeArgs = {
  appointment_to_reschedule_id?: InputMaybe<Scalars['ID']>;
  appointment_type_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  appt_loc_id?: InputMaybe<Scalars['String']>;
  appt_type_id?: InputMaybe<Scalars['String']>;
  clients_can_join_waitlist?: InputMaybe<Scalars['Boolean']>;
  contact_type?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['String']>;
  end_date_boundary?: InputMaybe<Scalars['String']>;
  length?: InputMaybe<Scalars['String']>;
  licensed_in_state?: InputMaybe<Scalars['String']>;
  make_unique?: InputMaybe<Scalars['Boolean']>;
  org_level?: InputMaybe<Scalars['Boolean']>;
  outside_factors?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['String']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  start_date?: InputMaybe<Scalars['String']>;
  start_date_boundary?: InputMaybe<Scalars['String']>;
  timezone?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryBaseCms1500ForUserArgs = {
  base_date?: InputMaybe<Scalars['String']>;
  cms1500_id?: InputMaybe<Scalars['String']>;
  form_answer_group_id?: InputMaybe<Scalars['ID']>;
  only_active_policies?: InputMaybe<Scalars['Boolean']>;
  patient_id?: InputMaybe<Scalars['ID']>;
  rendering_provider_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryBasicUserInfoFromTokenArgs = {
  token?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryBillingItemArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryBillingItemsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  client_id?: InputMaybe<Scalars['ID']>;
  created_at_end?: InputMaybe<Scalars['String']>;
  created_at_start?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  offerings_only?: InputMaybe<Scalars['Boolean']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<BillingItemOrderKeys>;
  page_size?: InputMaybe<Scalars['Int']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  state?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryBillingItemsCountArgs = {
  client_id?: InputMaybe<Scalars['ID']>;
  created_at_end?: InputMaybe<Scalars['String']>;
  created_at_start?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  state?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** The query root of this schema. See available queries. */
export type QueryBrandArgs = {
  custom_sign_in_path?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  locationString?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryBrandFromCustomSignInPathArgs = {
  custom_sign_in_path?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryBrandInfoArgs = {
  code?: InputMaybe<Scalars['String']>;
  dietitian_id?: InputMaybe<Scalars['String']>;
  invite_code?: InputMaybe<Scalars['String']>;
  partner_name?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryCampaignsArgs = {
  offset?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryCanCapOfferingPurchasesArgs = {
  token?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryCardIssuesArgs = {
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<StripeCustomerDetailOrderKeys>;
};


/** The query root of this schema. See available queries. */
export type QueryCarePlanArgs = {
  id?: InputMaybe<Scalars['ID']>;
  is_managing_templates?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryCarePlansArgs = {
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<CarePlanOrderKeys>;
  patient_id?: InputMaybe<Scalars['ID']>;
  template_search_keywords?: InputMaybe<Scalars['String']>;
  templates_only?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryCarePlansCountArgs = {
  patient_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryCarePlansTemplatesCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryChargeBackArgs = {
  id?: InputMaybe<Scalars['ID']>;
  stripe_dispute_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryChargeBacksArgs = {
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<ChargeBackOrderKeys>;
  per_page?: InputMaybe<Scalars['Int']>;
  show_all_for_org?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryChargeBacksCountArgs = {
  show_all_for_org?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryChartingItemsArgs = {
  custom_module_form_id?: InputMaybe<Scalars['ID']>;
  date?: InputMaybe<Scalars['String']>;
  document_id?: InputMaybe<Scalars['ID']>;
  end_date?: InputMaybe<Scalars['String']>;
  filler_id?: InputMaybe<Scalars['String']>;
  form_answer_group_id?: InputMaybe<Scalars['String']>;
  include_docs?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  start_date?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryChartingItemsCountArgs = {
  custom_module_form_id?: InputMaybe<Scalars['ID']>;
  date?: InputMaybe<Scalars['String']>;
  document_id?: InputMaybe<Scalars['ID']>;
  end_date?: InputMaybe<Scalars['String']>;
  filler_id?: InputMaybe<Scalars['String']>;
  form_answer_group_id?: InputMaybe<Scalars['String']>;
  include_docs?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  start_date?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryChartingNoteAddendumArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryChatSettingArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryCloseToCurrentVideoChatsArgs = {
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryCms1500Args = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryCms1500sArgs = {
  client_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<Cms1500OrderKeys>;
  provider_id?: InputMaybe<Scalars['ID']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
  status?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryCms1500sCountArgs = {
  client_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  status?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryColorCodeOptionsArgs = {
  appointment_setting_id?: InputMaybe<Scalars['String']>;
  color_code_by?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryCommentArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryCommentsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  entry_id?: InputMaybe<Scalars['ID']>;
  entry_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  offset?: InputMaybe<Scalars['Int']>;
  page_size?: InputMaybe<Scalars['Int']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryCommentsCountArgs = {
  entry_id?: InputMaybe<Scalars['ID']>;
  entry_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};


/** The query root of this schema. See available queries. */
export type QueryCompletedCourseItemArgs = {
  course_item_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryConversationArgs = {
  id?: InputMaybe<Scalars['ID']>;
  provider_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryConversationMembershipArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryConversationMembershipInviteesArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryConversationMembershipsArgs = {
  active_status?: InputMaybe<Scalars['String']>;
  after?: InputMaybe<Scalars['Cursor']>;
  client_id?: InputMaybe<Scalars['String']>;
  conversation_type?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  notes_type?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  only_include_shared_memberships?: InputMaybe<Scalars['Boolean']>;
  order_by?: InputMaybe<ConversationMembershipOrderKeys>;
  org_chat?: InputMaybe<Scalars['Boolean']>;
  page_size?: InputMaybe<Scalars['Int']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  read_status?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryConversationMembershipsCountArgs = {
  active_status?: InputMaybe<Scalars['String']>;
  client_id?: InputMaybe<Scalars['String']>;
  conversation_type?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  notes_type?: InputMaybe<Scalars['String']>;
  only_include_shared_memberships?: InputMaybe<Scalars['Boolean']>;
  org_chat?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  read_status?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryConversationsArgs = {
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryConversationsCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryCourseArgs = {
  course_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryCourseClientsArgs = {
  course_id?: InputMaybe<Scalars['ID']>;
  course_status?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryCourseClientsCountArgs = {
  course_id?: InputMaybe<Scalars['ID']>;
  course_status?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryCourseCompletetionInfoArgs = {
  course_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryCourseGroupClientsArgs = {
  course_group_id?: InputMaybe<Scalars['String']>;
  course_id?: InputMaybe<Scalars['ID']>;
  course_status?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryCourseGroupClientsCountArgs = {
  course_group_id?: InputMaybe<Scalars['String']>;
  course_id?: InputMaybe<Scalars['ID']>;
  course_status?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryCourseItemArgs = {
  course_membership_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryCourseItemsArgs = {
  client_id?: InputMaybe<Scalars['ID']>;
  course_id?: InputMaybe<Scalars['ID']>;
  find_for_provider?: InputMaybe<Scalars['Boolean']>;
  include_emails?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryCourseMembershipArgs = {
  course_id?: InputMaybe<Scalars['ID']>;
  course_item_id?: InputMaybe<Scalars['ID']>;
  course_membership_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
  user_group_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryCourseMembershipsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  client_id?: InputMaybe<Scalars['ID']>;
  fetch_all?: InputMaybe<Scalars['Boolean']>;
  offset?: InputMaybe<Scalars['Int']>;
  page_size?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryCourseMembershipsCountArgs = {
  client_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryCoursesArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  after?: InputMaybe<Scalars['Cursor']>;
  course_type?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  only_available?: InputMaybe<Scalars['Boolean']>;
  page_size?: InputMaybe<Scalars['Int']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryCoursesCountArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  course_type?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryCptCodesArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  for_superbill?: InputMaybe<Scalars['Boolean']>;
  is_favorited?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  page_size?: InputMaybe<Scalars['Int']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryCptCodesCountArgs = {
  is_favorited?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryCurrentVideoChatsArgs = {
  only_current?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryCustomEmailArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryCustomEmailPreviewArgs = {
  course_id?: InputMaybe<Scalars['String']>;
  email_body_only?: InputMaybe<Scalars['Boolean']>;
  email_type?: InputMaybe<Scalars['String']>;
  find_record?: InputMaybe<Scalars['Boolean']>;
  greeting?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  message_body?: InputMaybe<Scalars['String']>;
  preview_email_type?: InputMaybe<Scalars['String']>;
  reactivation_wait_days?: InputMaybe<Scalars['String']>;
  subject?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryCustomEmailsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  email_type?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  provider_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryCustomEmailsCountArgs = {
  email_type?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryCustomModuleFormArgs = {
  charting?: InputMaybe<Scalars['Boolean']>;
  default?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryCustomModuleFormsArgs = {
  active_status?: InputMaybe<Scalars['Boolean']>;
  category?: InputMaybe<Scalars['String']>;
  include_default_templates?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<CustomModuleFormOrderKeys>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryCustomModuleFormsCountArgs = {
  active_status?: InputMaybe<Scalars['Boolean']>;
  category?: InputMaybe<Scalars['String']>;
  include_default_templates?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryDaysAvailableForRangeArgs = {
  appointment_to_reschedule_id?: InputMaybe<Scalars['ID']>;
  appt_loc_id?: InputMaybe<Scalars['String']>;
  appt_type_id?: InputMaybe<Scalars['String']>;
  clients_can_join_waitlist?: InputMaybe<Scalars['Boolean']>;
  contact_type?: InputMaybe<Scalars['String']>;
  date_from_month?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['String']>;
  end_date_boundary?: InputMaybe<Scalars['String']>;
  length?: InputMaybe<Scalars['String']>;
  licensed_in_state?: InputMaybe<Scalars['String']>;
  org_level?: InputMaybe<Scalars['Boolean']>;
  outside_factors?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['String']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  start_date?: InputMaybe<Scalars['String']>;
  start_date_boundary?: InputMaybe<Scalars['String']>;
  timezone?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryDocumentArgs = {
  care_plan_id?: InputMaybe<Scalars['ID']>;
  course_id?: InputMaybe<Scalars['ID']>;
  course_item_id?: InputMaybe<Scalars['ID']>;
  custom_module_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryDocumentViewingsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  document_id?: InputMaybe<Scalars['ID']>;
  offset?: InputMaybe<Scalars['Int']>;
  per_page?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryDocumentViewingsCountArgs = {
  document_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryDocumentsArgs = {
  consolidated_user_id?: InputMaybe<Scalars['String']>;
  file_type?: InputMaybe<Scalars['String']>;
  file_types?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  filter?: InputMaybe<Scalars['String']>;
  folder_id?: InputMaybe<Scalars['String']>;
  for_template_use?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<DocumentOrderKeys>;
  private_user_id?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
  viewable_user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryDocumentsCountArgs = {
  consolidated_user_id?: InputMaybe<Scalars['String']>;
  file_type?: InputMaybe<Scalars['String']>;
  file_types?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  filter?: InputMaybe<Scalars['String']>;
  folder_id?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  private_user_id?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  viewable_user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryDosespotUserInfoArgs = {
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryDosespot_Ui_LinkArgs = {
  patient_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryDraftArgs = {
  conversation_membership_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryDynamicLinkArgs = {
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryEmbedWidgetStepsArgs = {
  is_for_web?: InputMaybe<Scalars['Boolean']>;
  locationString?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryEntriesArgs = {
  category?: InputMaybe<Scalars['String']>;
  client_id?: InputMaybe<Scalars['String']>;
  end_datetime_range?: InputMaybe<Scalars['String']>;
  end_range?: InputMaybe<Scalars['String']>;
  entry_id?: InputMaybe<Scalars['String']>;
  group_id?: InputMaybe<Scalars['String']>;
  is_org?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<EntryOrderKeys>;
  page_size?: InputMaybe<Scalars['Int']>;
  start_datetime_range?: InputMaybe<Scalars['String']>;
  start_range?: InputMaybe<Scalars['String']>;
  summary_view?: InputMaybe<Scalars['Boolean']>;
  type?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryEntriesCountArgs = {
  category?: InputMaybe<Scalars['String']>;
  client_id?: InputMaybe<Scalars['String']>;
  end_datetime_range?: InputMaybe<Scalars['String']>;
  end_range?: InputMaybe<Scalars['String']>;
  group_id?: InputMaybe<Scalars['String']>;
  is_org?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  maximum_count?: InputMaybe<Scalars['Int']>;
  start_datetime_range?: InputMaybe<Scalars['String']>;
  start_range?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryEntryArgs = {
  client_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
  type?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryFeatureToggleArgs = {
  id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryFeatureToggleForEditingArgs = {
  care_plan_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
  user_group_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryFolderArgs = {
  custom_module_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryFoldersArgs = {
  client_id?: InputMaybe<Scalars['String']>;
  consolidated_user_id?: InputMaybe<Scalars['String']>;
  document_to_move_id?: InputMaybe<Scalars['ID']>;
  filter?: InputMaybe<Scalars['String']>;
  folder_id?: InputMaybe<Scalars['String']>;
  folder_to_move_id?: InputMaybe<Scalars['ID']>;
  for_template_use?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  order_by?: InputMaybe<FolderOrderKeys>;
  private_user_id?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
  viewable_user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryFoldersCountArgs = {
  consolidated_user_id?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<Scalars['String']>;
  folder_id?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  private_user_id?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  viewable_user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryFoodSearchArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  exclude_recent?: InputMaybe<Scalars['Boolean']>;
  food_type?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  page_size?: InputMaybe<Scalars['Int']>;
  upc?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryFoodSearchCountArgs = {
  exclude_recent?: InputMaybe<Scalars['Boolean']>;
  food_type?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  upc?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryFormAnswerGroupArgs = {
  external_id?: InputMaybe<Scalars['String']>;
  for_superbills?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};


/** The query root of this schema. See available queries. */
export type QueryFormAnswerGroupsArgs = {
  custom_module_form_id?: InputMaybe<Scalars['ID']>;
  date?: InputMaybe<Scalars['String']>;
  filler_id?: InputMaybe<Scalars['String']>;
  form_answer_group_id?: InputMaybe<Scalars['String']>;
  ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  include_group_notes?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<FormAnswerGroupOrderKeys>;
  page_size?: InputMaybe<Scalars['Int']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryFormAnswerGroupsCountArgs = {
  date?: InputMaybe<Scalars['String']>;
  filler_id?: InputMaybe<Scalars['String']>;
  form_answer_group_id?: InputMaybe<Scalars['String']>;
  ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  name?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryFormTypesToRequestArgs = {
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalArgs = {
  client_id?: InputMaybe<Scalars['ID']>;
  date?: InputMaybe<Scalars['String']>;
  get_client_goal?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  last_client_goal?: InputMaybe<Scalars['Boolean']>;
  patient_goal_module?: InputMaybe<Scalars['Boolean']>;
  program_goal?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalHistoriesArgs = {
  category?: InputMaybe<Scalars['String']>;
  include_subgoals?: InputMaybe<Scalars['Boolean']>;
  offset?: InputMaybe<Scalars['Int']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
  unique?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalHistoriesCountArgs = {
  category?: InputMaybe<Scalars['String']>;
  include_subgoals?: InputMaybe<Scalars['Boolean']>;
  offset?: InputMaybe<Scalars['Int']>;
  unique?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalHistoryArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalInstancesArgs = {
  end_range?: InputMaybe<Scalars['String']>;
  goal_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  per_page?: InputMaybe<Scalars['Int']>;
  start_range?: InputMaybe<Scalars['String']>;
  status_filter?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalInstancesCountArgs = {
  end_range?: InputMaybe<Scalars['String']>;
  goal_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  per_page?: InputMaybe<Scalars['Int']>;
  start_range?: InputMaybe<Scalars['String']>;
  status_filter?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalTemplatesArgs = {
  category?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalTemplatesCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalsArgs = {
  category?: InputMaybe<Scalars['String']>;
  end_range?: InputMaybe<Scalars['String']>;
  frequency_filter?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<GoalOrderKeys>;
  per_page?: InputMaybe<Scalars['Int']>;
  rel_goal_id?: InputMaybe<Scalars['String']>;
  start_range?: InputMaybe<Scalars['String']>;
  status_filter?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalsCountArgs = {
  category?: InputMaybe<Scalars['String']>;
  end_range?: InputMaybe<Scalars['String']>;
  frequency_filter?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  rel_goal_id?: InputMaybe<Scalars['String']>;
  start_range?: InputMaybe<Scalars['String']>;
  status_filter?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalsDataArgs = {
  category?: InputMaybe<Scalars['String']>;
  end_range?: InputMaybe<Scalars['String']>;
  frequency_filter?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<GoalOrderKeys>;
  per_page?: InputMaybe<Scalars['Int']>;
  rel_goal_id?: InputMaybe<Scalars['String']>;
  start_range?: InputMaybe<Scalars['String']>;
  status_filter?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalsOverallCompletionRateArgs = {
  category?: InputMaybe<Scalars['String']>;
  end_range?: InputMaybe<Scalars['String']>;
  frequency_filter?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  rel_goal_id?: InputMaybe<Scalars['String']>;
  start_range?: InputMaybe<Scalars['String']>;
  status_filter?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalsOverallCompletionRateInfoArgs = {
  category?: InputMaybe<Scalars['String']>;
  end_range?: InputMaybe<Scalars['String']>;
  frequency_filter?: InputMaybe<Scalars['String']>;
  goal_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  rel_goal_id?: InputMaybe<Scalars['String']>;
  start_range?: InputMaybe<Scalars['String']>;
  status_filter?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryGoalsStreakCountArgs = {
  category?: InputMaybe<Scalars['String']>;
  end_range?: InputMaybe<Scalars['String']>;
  frequency_filter?: InputMaybe<Scalars['String']>;
  goal_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  rel_goal_id?: InputMaybe<Scalars['String']>;
  start_range?: InputMaybe<Scalars['String']>;
  status_filter?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryHealthAssessmentArgs = {
  device_token?: InputMaybe<Scalars['String']>;
  device_type?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  run_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryHealthAssessmentsArgs = {
  device_token?: InputMaybe<Scalars['String']>;
  device_type?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  run_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryIcdCodeArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryIcdCodesArgs = {
  is_billable?: InputMaybe<Scalars['Boolean']>;
  is_favorited?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<IcdCodeOrderKeys>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryIcdCodesCountArgs = {
  is_billable?: InputMaybe<Scalars['Boolean']>;
  is_favorited?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryImportDataRequestArgs = {
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryInitialCms1500Args = {
  form_answer_group_id?: InputMaybe<Scalars['ID']>;
  patient_id?: InputMaybe<Scalars['ID']>;
  provider_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryInitialFormAnswersArgs = {
  custom_module_form_id?: InputMaybe<Scalars['ID']>;
  incomplete_form_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryInitializedOfferingIncludesArgs = {
  offering_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryInsuranceAuthorizationArgs = {
  client_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryInsurancePlansArgs = {
  ids?: InputMaybe<Scalars['String']>;
  is_accepted?: InputMaybe<Scalars['Boolean']>;
  is_custom?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<InsurancePlanOrderKeys>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryInsurancePlansCountArgs = {
  ids?: InputMaybe<Scalars['String']>;
  is_accepted?: InputMaybe<Scalars['Boolean']>;
  is_custom?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryIntakeFlowArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  order_by?: InputMaybe<IntakeFlowOrderKeys>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryIntegrationsListArgs = {
  category?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryIntitialServiceDateArgs = {
  appointment_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryInvoiceBasePriceArgs = {
  cms1500_id?: InputMaybe<Scalars['ID']>;
  offering_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryInvoiceTemplatesArgs = {
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryLabOrderArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryLabOrdersArgs = {
  client_filter?: InputMaybe<Scalars['String']>;
  client_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  lab_filter?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<LabOrderOrderKeys>;
  provider_filter?: InputMaybe<Scalars['String']>;
  recent_orders?: InputMaybe<Scalars['Boolean']>;
  status_filter?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryLabOrdersCountArgs = {
  client_filter?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  lab_filter?: InputMaybe<Scalars['String']>;
  provider_filter?: InputMaybe<Scalars['String']>;
  status_filter?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryLastCmArgs = {
  active_status?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryLastClientActivitiesArgs = {
  limit?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryLocationArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryLocationResourcesArgs = {
  location_ids?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryLocationsArgs = {
  has_name?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryLocationsCountArgs = {
  has_name?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryMealSearchArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryMealSearchCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryMedication_OptionsArgs = {
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryMedicationsArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  patient_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryMedications_CountArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  patient_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryMetricGraphDataArgs = {
  category?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['String']>;
  entry_type?: InputMaybe<Scalars['String']>;
  has_third_party_source?: InputMaybe<Scalars['Boolean']>;
  multiplier?: InputMaybe<Scalars['String']>;
  start_date?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryMetricGraphsDataArgs = {
  end_date?: InputMaybe<Scalars['String']>;
  has_third_party_source?: InputMaybe<Scalars['Boolean']>;
  start_date?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryMinimumOfferingPriceArgs = {
  lab_option_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  state?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryMonthlyBillingItemsDataArgs = {
  gross?: InputMaybe<Scalars['Boolean']>;
  org_level?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryMultiLineMetricGraphDataArgs = {
  category?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['String']>;
  entry_type?: InputMaybe<Scalars['String']>;
  food_graph_type?: InputMaybe<Scalars['String']>;
  start_date?: InputMaybe<Scalars['String']>;
  sub_category?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryNewClientPriceStringArgs = {
  new_client_num?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryNewOrganizationPriceStringArgs = {
  new_provder_num?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryNewOrganizationSupportPriceStringArgs = {
  new_support_num?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryNextAvailableSlotArgs = {
  appointment_to_reschedule_id?: InputMaybe<Scalars['ID']>;
  appt_loc_id?: InputMaybe<Scalars['String']>;
  appt_type_id?: InputMaybe<Scalars['String']>;
  contact_type?: InputMaybe<Scalars['String']>;
  end_date_boundary?: InputMaybe<Scalars['String']>;
  length?: InputMaybe<Scalars['String']>;
  licensed_in_state?: InputMaybe<Scalars['String']>;
  org_level?: InputMaybe<Scalars['Boolean']>;
  outside_factors?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['String']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  start_date_boundary?: InputMaybe<Scalars['String']>;
  timezone?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryNextCourseItemArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryNoteArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryNoteViewedStatusArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryNote_SchedulerArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryNotesArgs = {
  conversation_id?: InputMaybe<Scalars['ID']>;
  ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<NoteOrderKeys>;
  org_chat?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  scheduled_notes?: InputMaybe<Scalars['Boolean']>;
  since_note_id?: InputMaybe<Scalars['ID']>;
  with_tasks?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryNotesCountArgs = {
  conversation_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  org_chat?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  scheduled_notes?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryNotificationCountArgs = {
  categories?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  other_party_id?: InputMaybe<Scalars['String']>;
  page_size?: InputMaybe<Scalars['Int']>;
  read_status?: InputMaybe<Scalars['Boolean']>;
  seen_status?: InputMaybe<Scalars['Boolean']>;
  types?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** The query root of this schema. See available queries. */
export type QueryNotificationSettingArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryNotificationsArgs = {
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<NotificationOrderKeys>;
  other_party_id?: InputMaybe<Scalars['String']>;
  page_size?: InputMaybe<Scalars['Int']>;
  read_status?: InputMaybe<Scalars['Boolean']>;
  seen_status?: InputMaybe<Scalars['Boolean']>;
  types?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** The query root of this schema. See available queries. */
export type QueryOfferingArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryOfferingBillingItemsArgs = {
  offering_id?: InputMaybe<Scalars['ID']>;
  offset?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryOfferingBillingItemsCountArgs = {
  offering_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryOfferingCouponsArgs = {
  from_package_details?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offering_id?: InputMaybe<Scalars['ID']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<OfferingCouponOrderKeys>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryOfferingCouponsCountArgs = {
  from_package_details?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offering_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryOfferingGroupVisibilitiesArgs = {
  provider_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryOfferingsArgs = {
  client_visibility?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  offering_id?: InputMaybe<Scalars['ID']>;
  offering_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  offering_user_group_id?: InputMaybe<Scalars['ID']>;
  offset?: InputMaybe<Scalars['Int']>;
  only_client_visible?: InputMaybe<Scalars['Boolean']>;
  order_by?: InputMaybe<OfferingOrderKeys>;
  page_size?: InputMaybe<Scalars['Int']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
  show_only_visible?: InputMaybe<Scalars['Boolean']>;
  status?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryOfferingsCountArgs = {
  client_visibility?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  offering_id?: InputMaybe<Scalars['ID']>;
  offering_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  offering_user_group_id?: InputMaybe<Scalars['ID']>;
  only_client_visible?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
  status?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryOfferingsDataArgs = {
  org_level?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryOnboardingFlowArgs = {
  id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
  uuid?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryOnboardingFlowsArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<OnboardingFlowOrderKeys>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryOnboardingFlowsCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryOnboardingItemArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryOrgProvidersCptCodesArgs = {
  org_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryOrganizationArgs = {
  email?: InputMaybe<Scalars['String']>;
  for_client?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  state_licenses?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


/** The query root of this schema. See available queries. */
export type QueryOrganizationInfoArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryOrganizationMembersArgs = {
  conversation_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  licensed_in_state?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<UserOrderKeys>;
  page_size?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryOrganizationMembersCountArgs = {
  conversation_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  licensed_in_state?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryOrganizationMembershipArgs = {
  id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryOrganizationMembershipsArgs = {
  id?: InputMaybe<Scalars['String']>;
  order_by?: InputMaybe<OrganizationMembershipOrderKeys>;
  user_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};


/** The query root of this schema. See available queries. */
export type QueryOtherIdNumberArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryOtherIdNumbersArgs = {
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryPaginate_TransfersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  starting_after?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryPermissionTemplateArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryPermissionTemplatesArgs = {
  offset?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryPharamcyArgs = {
  id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryPharmaciesArgs = {
  address?: InputMaybe<Scalars['String']>;
  city?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  ncpdp_id?: InputMaybe<Scalars['String']>;
  phone_or_fax?: InputMaybe<Scalars['String']>;
  specialties?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  state?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryPlanArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryPolicyArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryPreferred_Medical_CodesArgs = {
  code_type?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryPrescriptionArgs = {
  patient_id?: InputMaybe<Scalars['ID']>;
  prescription_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryPrescriptionsArgs = {
  patient_id?: InputMaybe<Scalars['ID']>;
  status?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryPrevCourseItemArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryProductsArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<ProductOrderKeys>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryProductsCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryProviderArgs = {
  client_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
  organization_info_id?: InputMaybe<Scalars['ID']>;
  super_bill_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryProviderAppointmentLocationsArgs = {
  provider_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryProviderCptCodesArgs = {
  provider_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryQuestionBankModulesArgs = {
  category?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryReceiptLineItemsArgs = {
  super_bill_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryReceivedDirectMessageArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryReceivedDirectMessagesArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<ReceivedDirectMessageOrderKeys>;
};


/** The query root of this schema. See available queries. */
export type QueryReceivedDirectMessagesCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryReceivedFaxArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryReceivedFaxesArgs = {
  active_status?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<ReceivedFaxOrderKeys>;
};


/** The query root of this schema. See available queries. */
export type QueryReceivedFaxesCountArgs = {
  active_status?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryRecentFoodsArgs = {
  food_type?: InputMaybe<Scalars['String']>;
  keywords?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryRecurringFormsArgs = {
  connectable_id?: InputMaybe<Scalars['String']>;
  connectable_type?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryRecurringPaymentsArgs = {
  active_status?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryReferralArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryReferringPhysicianArgs = {
  has_fax_number?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryReferringPhysiciansArgs = {
  has_fax_number?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<ReferringPhysicianOrderKeys>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryRequestedFormCompletionArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryRequestedFormCompletionsArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryRequestedPaymentArgs = {
  id?: InputMaybe<Scalars['ID']>;
  invoice_id?: InputMaybe<Scalars['String']>;
  preview?: InputMaybe<Scalars['Boolean']>;
  uuid?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryRequestedPaymentsArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  only_unpaid?: InputMaybe<Scalars['Boolean']>;
  order_by?: InputMaybe<RequestedPaymentOrderKeys>;
  preview?: InputMaybe<Scalars['Boolean']>;
  sender_id?: InputMaybe<Scalars['ID']>;
  status_filter?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryRequestedPaymentsCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  only_unpaid?: InputMaybe<Scalars['Boolean']>;
  sender_id?: InputMaybe<Scalars['ID']>;
  status_filter?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryScheduledMessageBlastsArgs = {
  client_id?: InputMaybe<Scalars['String']>;
  org_chat?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};


/** The query root of this schema. See available queries. */
export type QueryScheduledUserPackageSelectionsArgs = {
  offering_id?: InputMaybe<Scalars['ID']>;
  offset?: InputMaybe<Scalars['Int']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QuerySdkConfigArgs = {
  version?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QuerySentDirectMessageArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QuerySentDirectMessagesArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<SentDirectMessageOrderKeys>;
};


/** The query root of this schema. See available queries. */
export type QuerySentDirectMessagesCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QuerySentFaxesArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<SentFaxOrderKeys>;
};


/** The query root of this schema. See available queries. */
export type QuerySentFaxesCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QuerySentNotificationRecordsArgs = {
  end_date?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  org_level?: InputMaybe<Scalars['Boolean']>;
  patient_id?: InputMaybe<Scalars['ID']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
  start_date?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QuerySentNotificationRecordsCountArgs = {
  end_date?: InputMaybe<Scalars['String']>;
  org_level?: InputMaybe<Scalars['Boolean']>;
  patient_id?: InputMaybe<Scalars['ID']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  start_date?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QuerySentWebhooksArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<SentWebhookOrderKeys>;
};


/** The query root of this schema. See available queries. */
export type QuerySentWebhooksCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryServingSizesArgs = {
  food_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryShareNotePreviewArgs = {
  answers?: InputMaybe<Scalars['String']>;
  form_answer_group_id?: InputMaybe<Scalars['String']>;
  letterhead?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QuerySmartPhrasesArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QuerySmartPhrasesCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryStartingSuperBillCptCodesArgs = {
  form_answer_group_id?: InputMaybe<Scalars['ID']>;
  form_answer_group_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryStartingSuperBillIcd10sArgs = {
  form_answer_group_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryStateLicensesArgs = {
  provider_id?: InputMaybe<Scalars['ID']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};


/** The query root of this schema. See available queries. */
export type QueryStripeCountryArgs = {
  country_code?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryStripeCustomerDetailsArgs = {
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QuerySubGoalsArgs = {
  goal_id?: InputMaybe<Scalars['ID']>;
  offset?: InputMaybe<Scalars['Int']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QuerySubGoalsCountArgs = {
  goal_id?: InputMaybe<Scalars['ID']>;
  offset?: InputMaybe<Scalars['Int']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QuerySuperBillArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QuerySuperBillsArgs = {
  client_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<SuperBillOrderKeys>;
  provider_id?: InputMaybe<Scalars['ID']>;
  status?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QuerySuperBillsCountArgs = {
  client_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  status?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryTagsArgs = {
  applied_to_providers?: InputMaybe<Scalars['Boolean']>;
  ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  order_by?: InputMaybe<TagOrderKeys>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryTagsCountArgs = {
  applied_to_providers?: InputMaybe<Scalars['Boolean']>;
  ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryTaskArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryTasksArgs = {
  client_id?: InputMaybe<Scalars['String']>;
  completed_status?: InputMaybe<Scalars['String']>;
  created_by_self?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<TaskOrderKeys>;
  per_page?: InputMaybe<Scalars['Int']>;
  show_hidden?: InputMaybe<Scalars['Boolean']>;
  type?: InputMaybe<Scalars['String']>;
  withoutPagination?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryTasksCountArgs = {
  completed_status?: InputMaybe<Scalars['String']>;
  created_by_self?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  show_hidden?: InputMaybe<Scalars['Boolean']>;
  type?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryTimesForRangeArgs = {
  appt_loc_id?: InputMaybe<Scalars['String']>;
  appt_type_id?: InputMaybe<Scalars['String']>;
  endDate?: InputMaybe<Scalars['String']>;
  length?: InputMaybe<Scalars['String']>;
  startDate?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryTransactionsArgs = {
  payout_id?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryTransfersArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<TransferOrderKeys>;
  starting_after?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryTreatmentPlansArgs = {
  user_id?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryUnassociatedCompletedOnboardingItemsArgs = {
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryUngroupedCourseMembershipsArgs = {
  course_id?: InputMaybe<Scalars['ID']>;
  course_status?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
};


/** The query root of this schema. See available queries. */
export type QueryUngroupedCourseMembershipsCountArgs = {
  course_id?: InputMaybe<Scalars['ID']>;
  course_status?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryUserArgs = {
  clear_notifs?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  or_current_user?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryUserGroupArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryUserGroupsArgs = {
  check_group_level_actions?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<UserGroupOrderKeys>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryUserGroupsCountArgs = {
  check_group_level_actions?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryUserPackageSelectionsArgs = {
  after?: InputMaybe<Scalars['Cursor']>;
  offering_id?: InputMaybe<Scalars['ID']>;
  offset?: InputMaybe<Scalars['Int']>;
  page_size?: InputMaybe<Scalars['Int']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryUserPackageSelectionsCountArgs = {
  offering_id?: InputMaybe<Scalars['ID']>;
  offset?: InputMaybe<Scalars['Int']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryUsersArgs = {
  active_status?: InputMaybe<Scalars['String']>;
  conversation_id?: InputMaybe<Scalars['ID']>;
  convo_patients_only?: InputMaybe<Scalars['Boolean']>;
  expect_conversation_id?: InputMaybe<Scalars['Boolean']>;
  from_superadmin?: InputMaybe<Scalars['Boolean']>;
  group_id?: InputMaybe<Scalars['String']>;
  has_cc_on_file?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  keywords?: InputMaybe<Scalars['String']>;
  limited_to_provider?: InputMaybe<Scalars['Boolean']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<UserOrderKeys>;
  page_size?: InputMaybe<Scalars['Int']>;
  provider_id?: InputMaybe<Scalars['String']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
  show_all_by_default?: InputMaybe<Scalars['Boolean']>;
  tag_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  with_feature_toggles?: InputMaybe<Scalars['Boolean']>;
};


/** The query root of this schema. See available queries. */
export type QueryUsersCountArgs = {
  active_status?: InputMaybe<Scalars['String']>;
  conversation_id?: InputMaybe<Scalars['ID']>;
  convo_patients_only?: InputMaybe<Scalars['Boolean']>;
  expect_conversation_id?: InputMaybe<Scalars['Boolean']>;
  group_id?: InputMaybe<Scalars['String']>;
  has_cc_on_file?: InputMaybe<Scalars['Boolean']>;
  keywords?: InputMaybe<Scalars['String']>;
  limited_to_provider?: InputMaybe<Scalars['Boolean']>;
  provider_id?: InputMaybe<Scalars['String']>;
  tag_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};


/** The query root of this schema. See available queries. */
export type QueryValidateCouponArgs = {
  coupon_code?: InputMaybe<Scalars['String']>;
  offering_id?: InputMaybe<Scalars['ID']>;
  provider_id?: InputMaybe<Scalars['ID']>;
  requested_payment_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryValidateResetPasswordTokenArgs = {
  token?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryValidateSignupTokenArgs = {
  token?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryWaterIntakeEntryArgs = {
  created_at?: InputMaybe<Scalars['String']>;
  entry_id?: InputMaybe<Scalars['ID']>;
};


/** The query root of this schema. See available queries. */
export type QueryWebhooksArgs = {
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  order_by?: InputMaybe<WebhookOrderKeys>;
};


/** The query root of this schema. See available queries. */
export type QueryWebhooksCountArgs = {
  keywords?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryWhitelabelSettingArgs = {
  branded_url?: InputMaybe<Scalars['String']>;
};


/** The query root of this schema. See available queries. */
export type QueryZoomSdkJwtArgs = {
  mn?: InputMaybe<Scalars['String']>;
  role?: InputMaybe<Scalars['String']>;
};

/** receipt line item */
export type ReceiptLineItem = {
  __typename?: 'ReceiptLineItem';
  /** Date of service (as a date) */
  created_at: Scalars['String'];
  /** description of line item */
  description?: Maybe<Scalars['String']>;
  /** The unique identifier of the line item */
  id: Scalars['ID'];
  /** previous price */
  previous_price?: Maybe<Scalars['String']>;
  /** price of line item */
  price?: Maybe<Scalars['String']>;
  /** id of super bill */
  super_bill_id?: Maybe<Scalars['ID']>;
  /** updated at */
  updated_at: Scalars['String'];
};

/** Payload for a receipt line item */
export type ReceiptLineItemInput = {
  /** The time the receipt line item was created */
  created_at?: InputMaybe<Scalars['String']>;
  /** The description of the receipt line item */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the receipt line item */
  id?: InputMaybe<Scalars['ID']>;
  /** The previous price of the receipt line item */
  previous_price?: InputMaybe<Scalars['String']>;
  /** The current price of the receipt line item */
  price?: InputMaybe<Scalars['String']>;
};

/** A Received Direct Message */
export type ReceivedDirectMessage = {
  __typename?: 'ReceivedDirectMessage';
  /** The number of attachments for the received direct message */
  attachments_count?: Maybe<Scalars['Int']>;
  /** The XML data contained in the attach CDA file */
  cda_xml?: Maybe<Scalars['String']>;
  /** The received date of the direct message */
  created_at?: Maybe<Scalars['String']>;
  /** Array of direct message attachments */
  direct_message_attachments?: Maybe<Array<DirectMessageAttachment>>;
  /** When true, the message has an attached CDA */
  has_cda?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the fax */
  id: Scalars['ID'];
  /** The listed recipient */
  listed_recipient?: Maybe<Scalars['String']>;
  /** The listed sender */
  listed_sender?: Maybe<Scalars['String']>;
  /** The message body of the direct message */
  message_body?: Maybe<Scalars['String']>;
  /** The subject */
  subject?: Maybe<Scalars['String']>;
};

/** ReceivedDirectMessage sorting enum */
export enum ReceivedDirectMessageOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

/** A Received Fax */
export type ReceivedFax = {
  __typename?: 'ReceivedFax';
  /** The archived status of the fax */
  archived: Scalars['Boolean'];
  /** Any user added comments on the fax */
  comments?: Maybe<Scalars['String']>;
  /** The received date of the fax */
  created_at: Scalars['String'];
  /** The number of the sender of the fax */
  from_number?: Maybe<Scalars['String']>;
  /** The unique identifier of the fax */
  id: Scalars['ID'];
  /** Returns the referral provider name if fax number is found */
  referring_provider_name?: Maybe<Scalars['String']>;
  /** Whether the received fax has been viewed by the current user */
  viewed_by_current_user?: Maybe<Scalars['Boolean']>;
};

/** ReceivedFax sorting enum */
export enum ReceivedFaxOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  NumberAsc = 'NUMBER_ASC',
  NumberDesc = 'NUMBER_DESC'
}

/** A Care Plan Recommendation */
export type Recommendation = {
  __typename?: 'Recommendation';
  /** The unique identifier of the recommendation */
  id: Scalars['ID'];
  /** Recommendation text */
  recommendation_body?: Maybe<Scalars['String']>;
  /** The type of recommendation (1)Activity, (2)Nutrition, (3)Supplement, (4)Other */
  recommendation_type?: Maybe<Scalars['String']>;
  /** Sanitized recommendation_body */
  sanitized_body?: Maybe<Scalars['String']>;
};

/** A Recurring Appointment */
export type RecurringAppointment = {
  __typename?: 'RecurringAppointment';
  /** The unique identifier of the recurring appointment */
  id: Scalars['ID'];
  /** Auto-register clients for all appointments in series */
  join_all: Scalars['Boolean'];
  /** Interval between each appointment in the series */
  repeat_interval?: Maybe<Scalars['String']>;
  /** Count of the appointment recurrences */
  repeat_times?: Maybe<Scalars['String']>;
};

/** Payload for a recurring appointment */
export type RecurringAppointmentInput = {
  /** The unique identifier of the recurring appointment */
  id?: InputMaybe<Scalars['ID']>;
  /** If true, all appointments will be joined into one appointment */
  join_all?: InputMaybe<Scalars['Boolean']>;
  /** Options are ["Weekly", "Biweekly", "Monthly", or "Every 4 Weeks"] */
  repeat_interval?: InputMaybe<Scalars['String']>;
  /** Options are ["2", "3", "4", "5", "6", "7", "8", "9", "10"] */
  repeat_times?: InputMaybe<Scalars['String']>;
};

/** Each data point has a time range and the days that are in that time range */
export type RecurringDaysData = {
  __typename?: 'RecurringDaysData';
  /** The days that are in the time range */
  day_ranges?: Maybe<Array<DayRangeType>>;
  /** The unique identifier of the recurring days data */
  id: Scalars['ID'];
};

/** The recurring days input */
export type RecurringDaysInputObjectType = {
  /** The list of day ranges */
  day_ranges?: InputMaybe<Array<InputMaybe<DayRangeInputObjectType>>>;
  /** The id of the recurring day */
  id?: InputMaybe<Scalars['ID']>;
};

/** A Recurring Form */
export type RecurringForm = {
  __typename?: 'RecurringForm';
  /** Associated custom module form */
  custom_module_form?: Maybe<CustomModuleForm>;
  /** The ID of the form itself */
  form_id?: Maybe<Scalars['String']>;
  /** The type of form */
  form_type: Scalars['String'];
  /** Whether the user or group is connected to the recurring form */
  has_connected_recipient?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the recurring form */
  id: Scalars['ID'];
  /** The interval of recurrence. Can be: '23:12' / 'Monday, Tuesday' / '31st' */
  interval?: Maybe<Scalars['String']>;
  /** The type of recurrence('Daily'(1) / 'Weekly'(2) / 'Monthly'(3)) */
  interval_type?: Maybe<Scalars['String']>;
  /** Wherther the recurrence is active or not */
  is_active: Scalars['Boolean'];
  /** The day when reccurence ends */
  recurrence_end_at?: Maybe<Scalars['String']>;
  /** Get user_group assigned to the recurring form */
  userGroups?: Maybe<Array<UserGroup>>;
  /** The ID of the provider who set up recurrence */
  user_id?: Maybe<Scalars['String']>;
  /** Get patients assigned to the recurring form */
  users?: Maybe<Array<User>>;
  /** The identifiers of associated users and groups: ['1', '2', 'group-5', 'group-13'] */
  users_and_groups: Array<Maybe<Scalars['String']>>;
};


/** A Recurring Form */
export type RecurringFormHas_Connected_RecipientArgs = {
  connectable_id?: InputMaybe<Scalars['ID']>;
  connectable_type?: InputMaybe<Scalars['String']>;
};

/** Recurring Payment */
export type RecurringPayment = {
  __typename?: 'RecurringPayment';
  /** The amount of recurring payment */
  amount_paid?: Maybe<Scalars['String']>;
  /** The amount to be paid for the next payment */
  amount_to_pay?: Maybe<Scalars['String']>;
  /** The ID of the appointment associated with this recurring payment */
  appointment_id?: Maybe<Scalars['ID']>;
  /** The frequency the payment should be made */
  billing_frequency?: Maybe<Scalars['String']>;
  /** The number of billing items */
  billing_items_count?: Maybe<Scalars['String']>;
  /** The date on which the recurring payment is canceled */
  canceled_at?: Maybe<Scalars['String']>;
  /** The provider who canceled the recurring payment */
  canceled_by?: Maybe<User>;
  /** The date on which the recurring payment is created */
  created_at: Scalars['String'];
  /** Whether or not this recurring payment has scheduled billing item */
  has_scheduled_billing_item?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the recurring payment */
  id: Scalars['ID'];
  /** If the recurring payment has been canceled */
  is_canceled: Scalars['Boolean'];
  /** Whether or not the recurring payments has been paused */
  is_paused: Scalars['Boolean'];
  /** The last billing item for this recurring payment */
  last_billing_item?: Maybe<BillingItem>;
  /** The date of the next payment */
  next_payment_date?: Maybe<Scalars['String']>;
  /** The next payment date if the recurring payment is restarted */
  next_restart_payment_date?: Maybe<Scalars['String']>;
  /** The ID of the coupon */
  offering_coupon_id?: Maybe<Scalars['ID']>;
  /** The offering ID */
  offering_id?: Maybe<Scalars['ID']>;
  /** The name of the offering associated with recurring payment */
  offering_name?: Maybe<Scalars['String']>;
  /** The original price */
  original_price?: Maybe<Scalars['String']>;
  /** The date on which the recurring payment is paused */
  paused_at?: Maybe<Scalars['String']>;
  /**  The provider who paused the recurring payment */
  paused_by?: Maybe<User>;
  /** Count remaining payments or returns Until Canceled */
  payments_remaining?: Maybe<Scalars['String']>;
  /** The ID of the receiver */
  recipient_id?: Maybe<Scalars['ID']>;
  /** The number of times the payment should repeat */
  repeat_tiems?: Maybe<Scalars['String']>;
  /** The ID oft the sender */
  sender_id?: Maybe<Scalars['ID']>;
  /** The date payments should begin */
  start_at?: Maybe<Scalars['String']>;
  /** The updated at date */
  updated_at?: Maybe<Scalars['String']>;
};

/** A referral */
export type Referral = {
  __typename?: 'Referral';
  /** created at */
  created_at: Scalars['String'];
  /** The unique identifier of the referral */
  id: Scalars['ID'];
  /** The purpose of adding user to physician */
  referral_reason?: Maybe<Scalars['String']>;
  /** The associated referring physician */
  referring_physician?: Maybe<ReferringPhysician>;
  /** id of referred physician */
  referring_physician_id?: Maybe<Scalars['ID']>;
  /** updated at */
  updated_at: Scalars['String'];
  /** The associated user */
  user?: Maybe<User>;
  /** id of user related to this referral */
  user_id?: Maybe<Scalars['ID']>;
};

/** The referral information for a CMS1500 claim */
export type ReferralInfo = {
  __typename?: 'ReferralInfo';
  /** The state the auto accident occurred in */
  auto_accident_state?: Maybe<Scalars['String']>;
  /** The date of current illness, injury, or pregnancy */
  case_date?: Maybe<Scalars['String']>;
  /** The qualifier for case_date */
  case_qualifier?: Maybe<Scalars['String']>;
  /**
   * The associated CMS1500
   * @deprecated You are no longer able to get the cms1500 from the referral info
   */
  cms1500?: Maybe<Cms1500>;
  /** The id of the associated CMS1500 */
  cms1500_id?: Maybe<Scalars['String']>;
  /** Options that the condition can be related to */
  condition_related_to?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The end of the hospitalization period */
  hospitalization_end?: Maybe<Scalars['String']>;
  /** The start of the hospitalization period */
  hospitalization_start?: Maybe<Scalars['String']>;
  /** The unique identifier of the referral info */
  id?: Maybe<Scalars['ID']>;
  /** This field identifies additional date information about the patient's condition or treatment. */
  other_associated_date?: Maybe<Scalars['String']>;
  /** The qualifier for other_associated_date */
  other_associated_qualifier?: Maybe<Scalars['String']>;
  /** The prior authorization number */
  prior_auth_number?: Maybe<Scalars['String']>;
  /** The first name of the referring provider */
  ref_provider_first?: Maybe<Scalars['String']>;
  /** The last name of the referring provider */
  ref_provider_last?: Maybe<Scalars['String']>;
  /** The middle name of the referring provider */
  ref_provider_middle?: Maybe<Scalars['String']>;
  /** The NPI of the referring provider */
  ref_provider_npi?: Maybe<Scalars['String']>;
  /** The other id of the referring provider */
  ref_provider_other_id?: Maybe<Scalars['String']>;
  /** The other id qualifier of the referring provider */
  ref_provider_other_id_qual?: Maybe<Scalars['String']>;
  /** The qualifications of the referring provider */
  ref_provider_qual?: Maybe<Scalars['String']>;
  /** The date of the referral */
  referral_date?: Maybe<Scalars['String']>;
  /** The associated referring physician */
  referring_physician?: Maybe<ReferringPhysician>;
  /** The id of associated referring physician */
  referring_physician_id?: Maybe<Scalars['ID']>;
  /** The end of the unable to work period */
  unable_to_work_end?: Maybe<Scalars['String']>;
  /** The start of the unable to work period */
  unable_to_work_start?: Maybe<Scalars['String']>;
};

/** Payload for a referral info */
export type ReferralInfoInput = {
  /** The state of the auto accident */
  auto_accident_state?: InputMaybe<Scalars['String']>;
  /** The date of the case */
  case_date?: InputMaybe<Scalars['String']>;
  /** The qualifier of the case */
  case_qualifier?: InputMaybe<Scalars['String']>;
  /** The condition relationships */
  condition_related_to?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The end date of the hospitalization */
  hospitalization_end?: InputMaybe<Scalars['String']>;
  /** The start date of the hospitalization */
  hospitalization_start?: InputMaybe<Scalars['String']>;
  /** The id of the referral info */
  id?: InputMaybe<Scalars['ID']>;
  /** The other associated date */
  other_associated_date?: InputMaybe<Scalars['String']>;
  /** The other qualifier */
  other_associated_qualifier?: InputMaybe<Scalars['String']>;
  /** The prior auth number */
  prior_auth_number?: InputMaybe<Scalars['String']>;
  /** The first name of the referring provider */
  ref_provider_first?: InputMaybe<Scalars['String']>;
  /** The last name of the referring provider */
  ref_provider_last?: InputMaybe<Scalars['String']>;
  /** The middle name of the referring provider */
  ref_provider_middle?: InputMaybe<Scalars['String']>;
  /** The NPI of the referring provider */
  ref_provider_npi?: InputMaybe<Scalars['String']>;
  /** The other id of the referring provider */
  ref_provider_other_id?: InputMaybe<Scalars['String']>;
  /** The other id qualifier of the referring provider */
  ref_provider_other_id_qual?: InputMaybe<Scalars['String']>;
  /** The qualifier of the referring provider */
  ref_provider_qual?: InputMaybe<Scalars['String']>;
  /** The id of the referring physician */
  referring_physician_id?: InputMaybe<Scalars['ID']>;
  /** The end date of the unable to work */
  unable_to_work_end?: InputMaybe<Scalars['String']>;
  /** The start date of the unable to work */
  unable_to_work_start?: InputMaybe<Scalars['String']>;
};

/** Payload for a referral */
export type ReferralInput = {
  /** If true, the referral will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the referral */
  id?: InputMaybe<Scalars['ID']>;
  /** The referring physician object */
  referring_physician?: InputMaybe<ReferringPhysicianInput>;
  /** The ID of the referring physician */
  referring_physician_id?: InputMaybe<Scalars['ID']>;
};

/** a referring physician */
export type ReferringPhysician = {
  __typename?: 'ReferringPhysician';
  accepts_insurance?: Maybe<Scalars['Boolean']>;
  /** Business Name of physician */
  business_name?: Maybe<Scalars['String']>;
  /** created at */
  created_at: Scalars['String'];
  /** email of physician */
  email?: Maybe<Scalars['String']>;
  /** fax number of physician */
  fax_number?: Maybe<Scalars['String']>;
  /** first name of physician */
  first_name?: Maybe<Scalars['String']>;
  /** full name of physician */
  full_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the physician */
  id: Scalars['ID'];
  /** last name of physician */
  last_name?: Maybe<Scalars['String']>;
  /** The associated location */
  location?: Maybe<Location>;
  /** location id */
  location_id?: Maybe<Scalars['ID']>;
  /** Dietitian's notes */
  notes?: Maybe<Scalars['String']>;
  /** npi of physician */
  npi?: Maybe<Scalars['String']>;
  /** Saved Other ID associated with this provider */
  other_id?: Maybe<Scalars['String']>;
  /** Qualifier for Other ID */
  other_id_qualifier?: Maybe<Scalars['String']>;
  /** phone number of physician */
  phone_number?: Maybe<Scalars['String']>;
  /** Associated users */
  referrals?: Maybe<Array<Referral>>;
  /** Associated users count */
  referrals_count?: Maybe<Scalars['Int']>;
  /** Physician's speciality */
  speciality?: Maybe<Scalars['String']>;
  /** updated at */
  updated_at: Scalars['String'];
  /** Physician's website */
  website?: Maybe<Scalars['String']>;
};

/** Payload for a referring physician */
export type ReferringPhysicianInput = {
  /** If true, the referring physician will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The email of the referring physician */
  email?: InputMaybe<Scalars['String']>;
  /** The fax number of the referring physician */
  fax_number?: InputMaybe<Scalars['String']>;
  /** The first name of the referring physician */
  first_name?: InputMaybe<Scalars['String']>;
  /** The ID of the referring physician */
  id?: InputMaybe<Scalars['ID']>;
  /** The last name of the referring physician */
  last_name?: InputMaybe<Scalars['String']>;
  /** The legal name of the referring physician */
  legalname?: InputMaybe<Scalars['String']>;
  /** The location of the referring physician */
  location?: InputMaybe<ClientLocationInput>;
  /** The NPI of the referring physician */
  npi?: InputMaybe<Scalars['String']>;
  /** The phone number of the referring physician */
  phone_number?: InputMaybe<Scalars['String']>;
};

/** ReferringPhysician sorting enum */
export enum ReferringPhysicianOrderKeys {
  BusinessNameAsc = 'BUSINESS_NAME_ASC',
  BusinessNameDesc = 'BUSINESS_NAME_DESC',
  CityAsc = 'CITY_ASC',
  CityDesc = 'CITY_DESC',
  ClientsReferredAsc = 'CLIENTS_REFERRED_ASC',
  ClientsReferredDesc = 'CLIENTS_REFERRED_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  SpecialityAsc = 'SPECIALITY_ASC',
  SpecialityDesc = 'SPECIALITY_DESC'
}

/** Autogenerated input type of RefetchChangeHealthLabOrder */
export type RefetchChangeHealthLabOrderInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of RefetchChangeHealthLabOrder. */
export type RefetchChangeHealthLabOrderPayload = {
  __typename?: 'RefetchChangeHealthLabOrderPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** A refinding item of a related billing item */
export type RefundItem = {
  __typename?: 'RefundItem';
  /** The ID of the billing_item */
  billing_item_id?: Maybe<Scalars['String']>;
  /** The currency */
  currency?: Maybe<Scalars['String']>;
  /** The unique identifier of the refund */
  id: Scalars['ID'];
  /** The refund amount */
  refund_amount?: Maybe<Scalars['String']>;
  /** The refund date */
  refund_date?: Maybe<Scalars['String']>;
  /** The status of refunding */
  status?: Maybe<Scalars['String']>;
};

/** A Related Object */
export type RelatedObject = {
  __typename?: 'RelatedObject';
  /** A combined string to use for labels */
  full_name?: Maybe<Scalars['String']>;
  /** The Healthie unique identifier */
  id: Scalars['ID'];
};

/** A reminder object */
export type Reminder = {
  __typename?: 'Reminder';
  /** The unique identifier of the reminder */
  id: Scalars['ID'];
  /** Interval of a reminder ex. daily */
  interval_type: Scalars['String'];
  /** Value of the reminder interval ex. monday */
  interval_value?: Maybe<Scalars['String']>;
  /** True if reminder is active */
  is_enabled: Scalars['Boolean'];
};

/** Payload for a reminder */
export type ReminderInput = {
  /** The ID of the reminder. If no id is given, a reminder will be created */
  id?: InputMaybe<Scalars['ID']>;
  /** The type of the reminder interval. Options are daily, weekly, once */
  interval_type?: InputMaybe<Scalars['String']>;
  /** For daily interval -> don't send anything. For weekly interval, send in comma separated all lower-case day of week (e.g wednesday, friday). For once, send in the date (e.g 2020-11-28) */
  interval_value?: InputMaybe<Scalars['String']>;
  /** If not set to true, the reminder will not be sent */
  is_enabled?: InputMaybe<Scalars['Boolean']>;
  /** Send in true to delete the reminder */
  remove_reminder?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated input type of RemoveCardOnFile */
export type RemoveCardOnFileInput = {
  id: Scalars['ID'];
  remove_card_on_file: Scalars['Boolean'];
};

/** Autogenerated return type of RemoveCardOnFile. */
export type RemoveCardOnFilePayload = {
  __typename?: 'RemoveCardOnFilePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** The selected date range for specific report */
export type ReportsDateFilterSelection = {
  __typename?: 'ReportsDateFilterSelection';
  /** The selected date range for appointments */
  appointments?: Maybe<Scalars['String']>;
  /** The selected date range for authorizations */
  authorization?: Maybe<Scalars['String']>;
  /** The selected date range for bank transfers */
  bank_transfers?: Maybe<Scalars['String']>;
  /** The selected date range for client activities */
  client_activity?: Maybe<Scalars['String']>;
  /** The selected date range for client blood sugar metrics */
  client_blood_sugar_metrics?: Maybe<Scalars['String']>;
  /** The selected date range for client credits */
  client_credits?: Maybe<Scalars['String']>;
  /** The selected date range for clients list */
  client_list?: Maybe<Scalars['String']>;
  /** The selected date range for client metrics */
  client_metrics?: Maybe<Scalars['String']>;
  /** The selected date range for client statuses */
  client_status?: Maybe<Scalars['String']>;
  /** The selected date range for cms 1500s */
  cms_1500s?: Maybe<Scalars['String']>;
  /** The unique identifier of the selection */
  id: Scalars['ID'];
  /** The selected date range for payments */
  payments?: Maybe<Scalars['String']>;
  /** The selected date range for superbills */
  superbills?: Maybe<Scalars['String']>;
};

/** A request, from a provider to a client, to fill out a form */
export type RequestedFormCompletion = {
  __typename?: 'RequestedFormCompletion';
  /** The form to fill out */
  custom_module_form?: Maybe<CustomModuleForm>;
  /** The ID of the form to fill out */
  custom_module_form_id?: Maybe<Scalars['String']>;
  /** The relevant date to show */
  date_to_show?: Maybe<Scalars['String']>;
  /** The filled form that completes the request */
  form_answer_group?: Maybe<FormAnswerGroup>;
  /** The id of the filled form that completes the request */
  form_answer_group_id?: Maybe<Scalars['String']>;
  /** The unique identifier of the form */
  id: Scalars['ID'];
  /** type of form requested */
  item_type: Scalars['String'];
  /** The recipient (client) */
  recipient?: Maybe<User>;
  /** The ID of the recipient (client) */
  recipient_id?: Maybe<Scalars['String']>;
  /** Recurring Form related to the request */
  recurring_form?: Maybe<RecurringForm>;
  /** The sender (provider) */
  sender?: Maybe<User>;
  /** The ID of the sender (provider) */
  sender_id?: Maybe<Scalars['String']>;
  /** The status of the request */
  status?: Maybe<Scalars['String']>;
};

/** The status of the requested form */
export type RequestedFormStatusType = {
  __typename?: 'RequestedFormStatusType';
  /** Used to return something after request if the job has been triggered */
  status?: Maybe<Scalars['String']>;
};

/** A Requested Payer for the Invoice */
export type RequestedPayer = {
  __typename?: 'RequestedPayer';
  /** The address of the requested payer */
  address?: Maybe<Scalars['String']>;
  /** The email of the requested payer */
  email?: Maybe<Scalars['String']>;
  /** The unique identifier of the requested payer */
  id: Scalars['ID'];
  /** The name of the requested payer */
  name?: Maybe<Scalars['String']>;
};

/** Payload for a requested payer */
export type RequestedPayerInput = {
  /** The address of the requested payer */
  address?: InputMaybe<Scalars['String']>;
  /** The email of the requested payer */
  email?: InputMaybe<Scalars['String']>;
  /** The ID of the requested payer */
  id?: InputMaybe<Scalars['ID']>;
  /** The graphql_name of the requested payer */
  name?: InputMaybe<Scalars['String']>;
};

/** A request, from a provider to a client, to make a payment */
export type RequestedPayment = {
  __typename?: 'RequestedPayment';
  /** The appointment associated with this requested payment */
  appointment?: Maybe<Appointment>;
  /** The ID of the appointment associated with this requested payment */
  appointment_id?: Maybe<Scalars['String']>;
  /** The id of the filled form that completes the request */
  billing_item_id?: Maybe<Scalars['String']>;
  /** The payments that completes the request */
  billing_items: Array<BillingItem>;
  /** The ID of the CMS1500 to pay for */
  cms1500_id?: Maybe<Scalars['String']>;
  /** The CMS1500 service date */
  cms1500_service_date?: Maybe<Scalars['String']>;
  /** The currency of the requested payment (invoice) */
  currency?: Maybe<Scalars['String']>;
  /** The relevant date to show */
  date_to_show?: Maybe<Scalars['String']>;
  /**
   * Balance to pay
   * @deprecated use debt_decimal instead
   */
  debt?: Maybe<Scalars['Int']>;
  /** The debt, including decimals */
  debt_decimal?: Maybe<Scalars['Float']>;
  /** The details of the invoice (based off of associated item) */
  details?: Maybe<Scalars['String']>;
  /** The datetime that the share email was last sent, nil if never */
  email_sent_at?: Maybe<Scalars['String']>;
  /** The unique identifier of the payment */
  id: Scalars['ID'];
  /** The generated invoice ID */
  invoice_id?: Maybe<Scalars['String']>;
  /** The type of invoice */
  invoice_type?: Maybe<Scalars['String']>;
  /** True if requested payment was manually paid */
  is_manually_paid?: Maybe<Scalars['Boolean']>;
  /** True if the invoice is still in preview mode */
  is_preview: Scalars['Boolean'];
  /** Extra details on the invoice */
  notes?: Maybe<Scalars['String']>;
  /** The offering to purchase */
  offering?: Maybe<Offering>;
  /** The ID of the offering to buy */
  offering_id?: Maybe<Scalars['String']>;
  /** The requested payer. This will return null if the requested payer exists as a client in Healthie */
  other_requested_payer?: Maybe<RequestedPayer>;
  /** The datetime that the invoice was paid */
  paid_at?: Maybe<Scalars['String']>;
  /** Percent from total price which has been paid (if status == Partial) */
  paid_percent?: Maybe<Scalars['Int']>;
  /** price of payment requested */
  price?: Maybe<Scalars['String']>;
  /** The recipient (client) */
  recipient?: Maybe<User>;
  /** The ID of the recipient (client) */
  recipient_id?: Maybe<Scalars['String']>;
  /** Individual responsible for payment. If user_id, the user exists in Healthie, otherwise the individual doesn't have a Healthie account. */
  requested_payer?: Maybe<RequestedPayer>;
  /** The ID of the requested payer */
  requested_payer_id?: Maybe<Scalars['String']>;
  /** The template used to create this requested payment */
  requested_payment_template?: Maybe<RequestedPaymentTemplate>;
  /** The sender (provider) */
  sender?: Maybe<User>;
  /** The ID of the sender (provider) */
  sender_id?: Maybe<Scalars['String']>;
  /** The service date */
  service_date?: Maybe<Scalars['String']>;
  /** The services provided */
  services_provided?: Maybe<Scalars['String']>;
  /** The status of the request */
  status?: Maybe<Scalars['String']>;
  /** User Package Selection connected to this requested payment */
  user_package_selection?: Maybe<UserPackageSelection>;
};


/** A request, from a provider to a client, to make a payment */
export type RequestedPaymentBilling_ItemsArgs = {
  only_successful?: InputMaybe<Scalars['Boolean']>;
};

/** RequestedPayment sorting enum */
export enum RequestedPaymentOrderKeys {
  /** Sort by client last name and first name ascending */
  ClientNameAsc = 'CLIENT_NAME_ASC',
  /** Sort by client last name and first name descending */
  ClientNameDesc = 'CLIENT_NAME_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  InvoiceIdAsc = 'INVOICE_ID_ASC',
  InvoiceIdDesc = 'INVOICE_ID_DESC',
  PriceAsc = 'PRICE_ASC',
  PriceDesc = 'PRICE_DESC',
  /** Sort by provider last name and first name ascending */
  ProviderNameAsc = 'PROVIDER_NAME_ASC',
  /** Sort by provider last name and first name descending */
  ProviderNameDesc = 'PROVIDER_NAME_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TypeAsc = 'TYPE_ASC',
  TypeDesc = 'TYPE_DESC'
}

/** Requested payment template */
export type RequestedPaymentTemplate = {
  __typename?: 'RequestedPaymentTemplate';
  /** Whether the template is active or not */
  active_template: Scalars['Boolean'];
  /** The unique identifier of the template */
  id: Scalars['ID'];
  /** The name of the template */
  name?: Maybe<Scalars['String']>;
  /** The requested payment of the template */
  requested_payment?: Maybe<RequestedPayment>;
};

/** Payload for a requested payment template */
export type RequestedPaymentTemplateInput = {
  /** Whether or not the requested payment template is active */
  active_template?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the requested payment template */
  id?: InputMaybe<Scalars['ID']>;
  /** The graphql_name of the requested payment template */
  name?: InputMaybe<Scalars['String']>;
};

/** Only available to Internal Healthie Users -- Roles assigned to a given User */
export type Role = {
  __typename?: 'Role';
  /** The unique identifier of the role */
  id: Scalars['ID'];
  /** Name of the Role on the User */
  name?: Maybe<Scalars['String']>;
};

/** A room at a location */
export type Room = {
  __typename?: 'Room';
  /** Unique ID for this room */
  id: Scalars['ID'];
  /** When true, there can only be one appointment at a time in the room */
  limit_to_one: Scalars['Boolean'];
  /** Name of the room */
  name?: Maybe<Scalars['String']>;
};

/** Payload for a Room */
export type RoomInput = {
  /** If true, the room will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the room */
  id?: InputMaybe<Scalars['ID']>;
  /** If true, only one user can be in the room at a time */
  limit_to_one?: InputMaybe<Scalars['Boolean']>;
  /** The graphql_name of the room */
  name?: InputMaybe<Scalars['String']>;
};

/** Configuration for the SDK */
export type SdkConfig = {
  __typename?: 'SDKConfig';
  /** Stripe's publishable key */
  stripe_publishable_key: Scalars['String'];
};

/** Billing items that are scheduled and will have a user package selection associated with them */
export type ScheduledUserPackageSelection = {
  __typename?: 'ScheduledUserPackageSelection';
  /** The unique identifier of the room */
  id: Scalars['ID'];
  /** Related offering */
  offering?: Maybe<Offering>;
  /** Related recurring_payment */
  recurring_payment?: Maybe<RecurringPayment>;
  /** Related user */
  user?: Maybe<User>;
};

/** INTERNAL -- A Form Answer Group query for Support Dashboard */
export type SdFormAnswer = {
  __typename?: 'SdFormAnswer';
  /** Form Answer and their previous versions */
  answer?: Maybe<Scalars['String']>;
  /** Created At */
  created_at?: Maybe<Scalars['String']>;
  /** The unique identifier of the object */
  id: Scalars['ID'];
  /** Name */
  label?: Maybe<Scalars['String']>;
  /** Updated At */
  updated_at?: Maybe<Scalars['String']>;
  /** Previous Versions of FormAnswer */
  versions?: Maybe<Array<SdFormAnswerVersion>>;
};


/** INTERNAL -- A Form Answer Group query for Support Dashboard */
export type SdFormAnswerVersionsArgs = {
  cursor?: InputMaybe<Scalars['String']>;
};

/** INTERNAL -- A Form Answer Group query for Support Dashboard */
export type SdFormAnswerGroup = {
  __typename?: 'SdFormAnswerGroup';
  /** Created At */
  created_at?: Maybe<Scalars['String']>;
  /** Cursor for FormAnswerGroup Pagination */
  cursor: Scalars['String'];
  /** The form template that was filled out */
  custom_module_form?: Maybe<CustomModuleForm>;
  /** Form Answers and their previous versions */
  form_answers?: Maybe<Array<SdFormAnswer>>;
  /** The unique identifier of the object */
  id: Scalars['ID'];
  /** The date and time when the charting note was locked */
  locked_at?: Maybe<Scalars['String']>;
  /** The provider who have locked the charting note */
  locked_by?: Maybe<SdUser>;
  /** Name */
  name?: Maybe<Scalars['String']>;
  /** Updated At */
  updated_at?: Maybe<Scalars['String']>;
  /** The user the form is about */
  user?: Maybe<SdUser>;
  /** ID of the user */
  user_id?: Maybe<Scalars['String']>;
};

/** INTERNAL -- FormAnswerGroup Collection */
export type SdFormAnswerGroupCollection = {
  __typename?: 'SdFormAnswerGroupCollection';
  /** List of FormAnswerGroups */
  form_answer_groups?: Maybe<Array<SdFormAnswerGroup>>;
  /** Determines if has more FormAnswerGroups in pagination */
  has_more_fangs?: Maybe<Scalars['Boolean']>;
};

/** INTERNAL -- A Form Answer Group query for Support Dashboard */
export type SdFormAnswerVersion = {
  __typename?: 'SdFormAnswerVersion';
  /** Created At */
  created_at?: Maybe<Scalars['String']>;
  /** Description of Event: Update/Create/Delete */
  event?: Maybe<Scalars['String']>;
  /** The unique identifier of the object */
  id: Scalars['ID'];
  /** Reified Version of the Given Object */
  reified_version?: Maybe<FormAnswer>;
  /** Human ID of User that Created/Updated Version */
  whodunnit?: Maybe<Scalars['String']>;
};

/** INTERNAL -- Data on the Human Object */
export type SdHuman = {
  __typename?: 'SdHuman';
  /** The API key for the human */
  api_key?: Maybe<Scalars['String']>;
  /** The time when the human was created */
  created_at?: Maybe<Scalars['String']>;
  /** The time when the human is currently signed in */
  current_sign_in_at?: Maybe<Scalars['String']>;
  /** The IP address of the human when they signed in to the current session */
  current_sign_in_ip?: Maybe<Scalars['String']>;
  /** The current user for the human */
  current_user?: Maybe<SdUser>;
  /** The ID of the current user for the human */
  current_user_id?: Maybe<Scalars['String']>;
  /** The time when the human was deleted */
  deleted_at?: Maybe<Scalars['String']>;
  /** The email of the human */
  email?: Maybe<Scalars['String']>;
  /** The unique identifier of the human */
  id: Scalars['ID'];
  /** The time when the human last signed in */
  last_sign_in_at?: Maybe<Scalars['String']>;
  /** The IP address of the human when they last signed in */
  last_sign_in_ip?: Maybe<Scalars['String']>;
  /** The namespace of the human */
  namespace?: Maybe<Scalars['String']>;
  /** Whether the human requires 2FA */
  requires_2fa?: Maybe<Scalars['String']>;
  /** The time when the human reset their password */
  reset_password_sent_at?: Maybe<Scalars['String']>;
  /** The User with the ID matching the Search Term */
  searched_user?: Maybe<SdUser>;
  /** The number of times the human has signed in */
  sign_in_count?: Maybe<Scalars['String']>;
  /** The time when the human switched providers */
  switched_provider_at?: Maybe<Scalars['String']>;
  /** The time when the human was last updated */
  updated_at?: Maybe<Scalars['String']>;
  /** The list of users for the human */
  user_collection?: Maybe<SdUserCollection>;
  /** The username of the human */
  username?: Maybe<Scalars['String']>;
};


/** INTERNAL -- Data on the Human Object */
export type SdHumanSearched_UserArgs = {
  user_id?: InputMaybe<Scalars['ID']>;
};


/** INTERNAL -- Data on the Human Object */
export type SdHumanUser_CollectionArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  org_name?: InputMaybe<Scalars['String']>;
};

/** Interal - Lab Order Type Support Dashboard */
export type SdLabOrderType = {
  __typename?: 'SdLabOrderType';
  /** Confirmation Code of Scheduled Appointment */
  appt_confirmation_code?: Maybe<Scalars['String']>;
  /** Date Lab Order was Placed */
  created_at?: Maybe<Scalars['String']>;
  /** The unique identifier of the order */
  id: Scalars['ID'];
  /** Order integration (lab_testing_api, evexia, rupa) */
  integration?: Maybe<Scalars['String']>;
  /** Name of the lab */
  lab?: Maybe<Scalars['String']>;
  /** Name of the lab */
  lab_company?: Maybe<Scalars['String']>;
  /** Order ID */
  lta_id?: Maybe<Scalars['String']>;
  /** The normalized status of the order */
  normalized_status?: Maybe<Scalars['String']>;
  /** Provider for lab order */
  orderer?: Maybe<SdUser>;
  /** Patient for lab order */
  patient?: Maybe<SdUser>;
  /** Order ID on the rupa health */
  rupa_order_id?: Maybe<Scalars['String']>;
  /** Status of the Lab Order */
  status?: Maybe<Scalars['String']>;
  /** Date of Test */
  test_date?: Maybe<Scalars['String']>;
  /** Date Lab Order was updated */
  updated_at?: Maybe<Scalars['String']>;
  /** Link to view the rupa order */
  view_rupa_order_url?: Maybe<Scalars['String']>;
};

/** INTERNAL -- Data on the Org Object */
export type SdOrg = {
  __typename?: 'SdOrg';
  /** The number of standard seats of the organization */
  active_standard_seats?: Maybe<Scalars['Int']>;
  /** The unique identifier of the object */
  id: Scalars['ID'];
  /** Name of the organization */
  name?: Maybe<Scalars['String']>;
  /** The number of active providers of the organization */
  only_active_providers_count?: Maybe<Scalars['Int']>;
  /** The number of active support user of the organization */
  only_active_support_count?: Maybe<Scalars['Int']>;
  /** Owner of Organization */
  owner?: Maybe<SdUser>;
  /** Parent Organization for this org */
  parent_organization?: Maybe<SdOrg>;
  /** The ID of the parent organization */
  parent_organization_id?: Maybe<Scalars['ID']>;
  /** Suborganizations for this org */
  suborganizations?: Maybe<Array<SdOrg>>;
  /** The list of users in this org */
  users?: Maybe<Array<SdUser>>;
};

/** INTERNAL -- Data on the Organization Membership Object */
export type SdOrganizationMembership = {
  __typename?: 'SdOrganizationMembership';
  /** Clients can schedule sessions with this org member */
  allow_self_scheduling_in_care_team?: Maybe<Scalars['Boolean']>;
  /** Can access all Chat conversations of all org members */
  can_access_to_members_chat?: Maybe<Scalars['Boolean']>;
  /** Can add new clients */
  can_add_clients?: Maybe<Scalars['Boolean']>;
  /** Can add members to the organization */
  can_add_members?: Maybe<Scalars['Boolean']>;
  /** Can add other org members to Chat conversations */
  can_add_members_to_chat?: Maybe<Scalars['Boolean']>;
  /** Can be added as a care team member */
  can_be_care_team_member?: Maybe<Scalars['Boolean']>;
  /** Can add and edit appointment types that are then visible within the entire organization */
  can_edit_appointment_types?: Maybe<Scalars['Boolean']>;
  /** Can edit and delete appointments on behalf of other org members */
  can_edit_calendar?: Maybe<Scalars['Boolean']>;
  /** Can edit folders documents uploaded by other org members */
  can_edit_docs?: Maybe<Scalars['Boolean']>;
  /** Can create, edit, archive and delete programs */
  can_edit_education?: Maybe<Scalars['Boolean']>;
  /** Can create, edit, and delete forms, charting templates and intake flows */
  can_edit_forms?: Maybe<Scalars['Boolean']>;
  /** Can edit and remove members in the organization */
  can_edit_members?: Maybe<Scalars['Boolean']>;
  /** Can create, edit and delete packages */
  can_edit_packages?: Maybe<Scalars['Boolean']>;
  /** Can view and edit settings that impact the organization */
  can_edit_settings?: Maybe<Scalars['Boolean']>;
  /** Can enroll and remove clients from programs */
  can_enroll_clients_to_programs?: Maybe<Scalars['Boolean']>;
  /** Can lock charting notes of other providers */
  can_lock_others_charting_notes?: Maybe<Scalars['Boolean']>;
  /** Can merge clients */
  can_merge_clients?: Maybe<Scalars['Boolean']>;
  /** Can view all organizational billing */
  can_see_billing?: Maybe<Scalars['Boolean']>;
  /** Can view the organization calendar that includes all org members' schedules */
  can_see_calendar?: Maybe<Scalars['Boolean']>;
  /** Can search across all clients in the organization */
  can_see_clients?: Maybe<Scalars['Boolean']>;
  /** Can view other org members Documents */
  can_see_docs?: Maybe<Scalars['Boolean']>;
  /** Can sign charting notes of other providers */
  can_sign_others_charting_notes?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the object */
  id: Scalars['ID'];
  /** Whether the user is an admin of the organization */
  is_admin?: Maybe<Scalars['Boolean']>;
  /** Whether the user is a provider of the organization */
  is_provider?: Maybe<Scalars['Boolean']>;
  /** The role of the user in the organization */
  org_role?: Maybe<Scalars['String']>;
  /** Sees all clients in the organization on the Clients page */
  sees_all_clients?: Maybe<Scalars['Boolean']>;
};

/** INTERNAL -- Data on the User Object */
export type SdUser = {
  __typename?: 'SdUser';
  /** Whether the user is active */
  active?: Maybe<Scalars['Boolean']>;
  /** Cursor for User Pagination */
  cursor: Scalars['String'];
  /** The dietitian of the user */
  dietitian?: Maybe<SdUser>;
  /** The email of the user */
  email?: Maybe<Scalars['String']>;
  /** The full name of the user */
  full_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the user */
  id: Scalars['ID'];
  /** Whether the user is a patient */
  is_patient?: Maybe<Scalars['Boolean']>;
  /** The last name of the user */
  last_name?: Maybe<Scalars['String']>;
  /** Other organization members. */
  organization?: Maybe<SdOrg>;
  /** The organization membership of the user */
  organization_membership?: Maybe<SdOrganizationMembership>;
  /** The stripe customer details of the user */
  stripe_customer_details?: Maybe<Array<StripeCustomerDetail>>;
  /** The stripe id of the user */
  stripe_id?: Maybe<Scalars['String']>;
  /** The stripe person id of the user */
  stripe_person_id?: Maybe<Scalars['String']>;
  /** Returns the subscription for this user */
  subscription?: Maybe<SubscriptionInstance>;
  /** The total patient count of the user */
  total_patient_count?: Maybe<Scalars['Int']>;
  /** The whitelabel setting of the user */
  whitelabel_setting?: Maybe<WhitelabelSetting>;
};

/** INTERNAL -- User Collection */
export type SdUserCollection = {
  __typename?: 'SdUserCollection';
  /** Determines if has more users in pagination */
  has_more_users?: Maybe<Scalars['Boolean']>;
  /** List of Users */
  users?: Maybe<Array<SdUser>>;
};

/** Autogenerated input type of SendSpeakToTrainerNotification */
export type SendSpeakToTrainerNotificationInput = {
  email?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of SendSpeakToTrainerNotification. */
export type SendSpeakToTrainerNotificationPayload = {
  __typename?: 'SendSpeakToTrainerNotificationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of SendWelcomeEmail */
export type SendWelcomeEmailInput = {
  user_id: Scalars['ID'];
};

/** Autogenerated return type of SendWelcomeEmail. */
export type SendWelcomeEmailPayload = {
  __typename?: 'SendWelcomeEmailPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** A Received Direct Message */
export type SentDirectMessage = {
  __typename?: 'SentDirectMessage';
  /** The number of attachments for the received direct message */
  attachments_count?: Maybe<Scalars['Int']>;
  /** The received date of the direct message */
  created_at?: Maybe<Scalars['String']>;
  /** When true, the message has an attached CDA */
  has_cda?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the fax */
  id: Scalars['ID'];
  /** The body of the direct message */
  message_body?: Maybe<Scalars['String']>;
  /** The outbound recipient */
  outbound_recipient?: Maybe<Scalars['String']>;
  /** ID of the related patient */
  patient_id?: Maybe<Scalars['String']>;
  /** The status */
  status?: Maybe<Scalars['String']>;
  /** The subject of the direct message */
  subject?: Maybe<Scalars['String']>;
};

/** SentDirectMessage sorting enum */
export enum SentDirectMessageOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

/** A Sent Fax */
export type SentFax = {
  __typename?: 'SentFax';
  /** The creation date of the fax */
  created_at: Scalars['String'];
  /** Where the fax was sent */
  destination_number?: Maybe<Scalars['String']>;
  /** The unique identifier of the fax */
  id: Scalars['ID'];
  /** The ids of the chart notes sent with the fax */
  parsed_form_answer_group_ids?: Maybe<Array<Scalars['ID']>>;
  /** The patient that the fax is in regards to */
  patient?: Maybe<User>;
  /** False if no document ids or form answer group ids (fax existed before the addition of document ids column) */
  resendable?: Maybe<Scalars['Boolean']>;
  /** The sender of the fax */
  sender?: Maybe<User>;
  /** The status of the fax */
  status?: Maybe<Scalars['String']>;
  /** The display string of the fax status */
  status_display_string?: Maybe<Scalars['String']>;
  /** The updated date of the sent fax */
  updated_at?: Maybe<Scalars['String']>;
};

/** SentFax sorting enum */
export enum SentFaxOrderKeys {
  ClientLastNameAsc = 'CLIENT_LAST_NAME_ASC',
  ClientLastNameDesc = 'CLIENT_LAST_NAME_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  NumberAsc = 'NUMBER_ASC',
  NumberDesc = 'NUMBER_DESC',
  SenderLastNameAsc = 'SENDER_LAST_NAME_ASC',
  SenderLastNameDesc = 'SENDER_LAST_NAME_DESC',
  Status = 'STATUS',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC'
}

/** A Sent Notification */
export type SentNotificationRecord = {
  __typename?: 'SentNotificationRecord';
  /** The enumerated values: [:sms, :push, :email] */
  category: Scalars['String'];
  /** The time when the record was created */
  created_at: Scalars['String'];
  /** The enumerated values: [:sent, :delivered, :bounced] */
  delivery_status: Scalars['String'];
  /** The unique identifier of the record */
  id: Scalars['ID'];
  /** Description of notification context. (Ex: 'Follow-up Session on Nov 16 at 1:00 PM EST with Joe Smith') */
  notification_description?: Maybe<Scalars['String']>;
  /** Examples: 'appointment_reminder', 'folder_shared', 'reminder_to_work_on_a_goal' */
  notification_type?: Maybe<Scalars['String']>;
  /** The type categorizing notification_type into subgroups. Accepted values: [appointments, billing, chat_messages, accounting, documents, forms, goals, journals, packages, programs] */
  representation_type?: Maybe<Scalars['String']>;
  /** The ID of the user this notification was sent to */
  user_id?: Maybe<Scalars['ID']>;
};

/** The record of a sent webhook */
export type SentWebhook = {
  __typename?: 'SentWebhook';
  /** The datetime that the webhook was sent */
  created_at: Scalars['String'];
  /** The type of webhook */
  event_type?: Maybe<Scalars['String']>;
  /** Whether the webhook is enabled or not */
  http_response_status?: Maybe<Scalars['String']>;
  /** The unique identifier of the webhook */
  id: Scalars['ID'];
  /** The id of the resource the sent webhook related to */
  resource_id?: Maybe<Scalars['ID']>;
  /** The type of resource the sent webhook related to */
  resource_id_type?: Maybe<Scalars['String']>;
  /** The URL that the webhook was sent to */
  url?: Maybe<Scalars['String']>;
  /** The configured webhook thst was sent */
  webhook_id?: Maybe<Scalars['ID']>;
};

/** SentWebhook sorting enum */
export enum SentWebhookOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  EventTypeAsc = 'EVENT_TYPE_ASC',
  EventTypeDesc = 'EVENT_TYPE_DESC',
  UrlAsc = 'URL_ASC',
  UrlDesc = 'URL_DESC'
}

/** A serving size object */
export type ServingSize = {
  __typename?: 'ServingSize';
  /** The number of servings */
  amount?: Maybe<Scalars['Float']>;
  /** The calories of serving size */
  calories?: Maybe<Scalars['Float']>;
  /** Whether or not this serving size was imported from the USDA database */
  fdc_import: Scalars['Boolean'];
  /** The food id of the food this serving size belongs to */
  food_id?: Maybe<Scalars['String']>;
  /** The id of the food portion this serving size belongs to */
  food_portion_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the serving size */
  id: Scalars['ID'];
  /** percentage of 100g. For example if modifier is 2.5 then this serving size is 250g */
  modifier?: Maybe<Scalars['Float']>;
  /** The nutrients of this serving size */
  nutrients?: Maybe<Array<FoodNutrient>>;
  /** The type of serving (i.e grams, scoop, spoonful) */
  unit?: Maybe<Scalars['String']>;
};


/** A serving size object */
export type ServingSizeNutrientsArgs = {
  food_search?: InputMaybe<Scalars['Boolean']>;
};

/** The serving size of a food */
export type ServingSizeInput = {
  /** The amount of the serving size */
  amount?: InputMaybe<Scalars['String']>;
  /** The id of the serving size */
  id?: InputMaybe<Scalars['ID']>;
  /** The unit of the serving size */
  unit?: InputMaybe<Scalars['String']>;
};

/** A Shapa Connection */
export type ShapaConnection = {
  __typename?: 'ShapaConnection';
  /** The unique identifier of the connection */
  id: Scalars['ID'];
  /** The last time Shapa was synced */
  last_sync_date?: Maybe<Scalars['String']>;
};

/** A smart phrase object */
export type SmartPhrase = {
  __typename?: 'SmartPhrase';
  /** The time when the smart phrase was created */
  created_at: Scalars['String'];
  /** The unique identifier of the smatr phrase */
  id: Scalars['ID'];
  /** The name of the smart phrase */
  name?: Maybe<Scalars['String']>;
  /** The content of the smart phrase */
  phrase?: Maybe<Scalars['String']>;
  /** The smart phrase owner */
  user?: Maybe<User>;
};

/** Smoking Status object */
export type SmokingStatus = {
  __typename?: 'SmokingStatus';
  /** The unique identifier of the status */
  id: Scalars['ID'];
  /** The smoking status code */
  smoking_status_code?: Maybe<Scalars['String']>;
  /** The end date of the status */
  status_end_datetime?: Maybe<Scalars['String']>;
  /** The start date of the status */
  status_start_datetime?: Maybe<Scalars['String']>;
  /** The id of the user the status belongs to */
  user_id?: Maybe<Scalars['ID']>;
};

/** Snomed terms */
export type SnomedTerm = {
  __typename?: 'SnomedTerm';
  /** id for snomed term */
  concept_id?: Maybe<Scalars['String']>;
  /** snomed term name */
  term?: Maybe<Scalars['String']>;
};

/** The properties of the specialty */
export type SpecialtiesInput = {
  /** The graphql_name of the specialty */
  specialty?: InputMaybe<Scalars['String']>;
  /** The category of the specialty */
  specialty_category?: InputMaybe<Scalars['String']>;
};

/** Specialty */
export type Specialty = {
  __typename?: 'Specialty';
  /** The unique identifier of the specialty */
  id: Scalars['ID'];
  /** The name of the specialty */
  specialty: Scalars['String'];
  /** The name of the specialty category */
  specialty_category: Scalars['String'];
};

/** Information on an SsoConnection */
export type SsoConnection = {
  __typename?: 'SsoConnection';
  /** The type of user this SSO is for (either patient or staff) */
  for_user_type?: Maybe<Scalars['String']>;
  /** The unique identifier of the SSO connection */
  id: Scalars['ID'];
  /** The label to display on the sign in button */
  label?: Maybe<Scalars['String']>;
  /** The URL to take the user to to sign in via SSO */
  sign_in_url?: Maybe<Scalars['String']>;
  /** The URL to take the user to to sign out via SSO */
  sign_out_url?: Maybe<Scalars['String']>;
};

/** A state license object */
export type StateLicense = {
  __typename?: 'StateLicense';
  /** The full name of the state */
  full_state_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the state license */
  id: Scalars['ID'];
  /** The abbreviation of the state */
  state?: Maybe<Scalars['String']>;
};

/** Payload for a state license */
export type StateLicensesInput = {
  /** If true, the state license will be destroyed */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the state license */
  id?: InputMaybe<Scalars['ID']>;
  /** The code of the state */
  state?: InputMaybe<Scalars['String']>;
};

/** A Stripe bank account */
export type StripeBankAccountType = {
  __typename?: 'StripeBankAccountType';
  /** The name of the account holder */
  account_holder_name?: Maybe<Scalars['String']>;
  /** The type of the account holder (Individual or Company) */
  account_holder_type?: Maybe<Scalars['String']>;
  /** The last 4 digits of the bank account number */
  accounts_number_last_4?: Maybe<Scalars['String']>;
  /** The city of the business address */
  city?: Maybe<Scalars['String']>;
  /** The country of the business address */
  country?: Maybe<Scalars['String']>;
  /** The currency the bank account is in */
  currency?: Maybe<Scalars['String']>;
  /** The date of birth of the company's business representative */
  dob?: Maybe<Scalars['String']>;
  /** The ID of the bank account object (generated by Stripe) */
  id?: Maybe<Scalars['String']>;
  /** If the holder has verified government issued id */
  id_image_provided?: Maybe<Scalars['Boolean']>;
  /** The first line of the business address */
  line1?: Maybe<Scalars['String']>;
  /** The second line of the business address */
  line2?: Maybe<Scalars['String']>;
  /** The last 4 digits of the routing number */
  routing_number_last_4?: Maybe<Scalars['String']>;
  /** If the holder has a verified social security number */
  ssn_last_4_provided?: Maybe<Scalars['Boolean']>;
  /** The state of the business address */
  state?: Maybe<Scalars['String']>;
  /** If the holder has a verified business tax ID */
  tax_id_provided?: Maybe<Scalars['Boolean']>;
  /** The zip code of the business address */
  zip?: Maybe<Scalars['String']>;
};

/** A Stripe company address object */
export type StripeCompanyAddressType = {
  __typename?: 'StripeCompanyAddressType';
  /** The city or town of the address. */
  city?: Maybe<Scalars['String']>;
  /** The two-letter country code of the address. */
  country?: Maybe<Scalars['String']>;
  /** The first line of the address. */
  line1?: Maybe<Scalars['String']>;
  /** The second line of the address. */
  line2?: Maybe<Scalars['String']>;
  /** The postal code of the address. */
  postal_code?: Maybe<Scalars['String']>;
  /** The state or province of the address. */
  state?: Maybe<Scalars['String']>;
};

/** A Stripe company */
export type StripeCompanyType = {
  __typename?: 'StripeCompanyType';
  /** The company address */
  address?: Maybe<StripeCompanyAddressType>;
  /** Whether the company directors have been provided */
  directors_provided?: Maybe<Scalars['Boolean']>;
  /** Whether the company executives have been provided */
  executives_provided?: Maybe<Scalars['Boolean']>;
  /** The legal name of the company */
  name?: Maybe<Scalars['String']>;
  /** Whether the company owners have been provided */
  owners_provided?: Maybe<Scalars['Boolean']>;
  /** The company phone number */
  phone?: Maybe<Scalars['String']>;
  /** Whether the company tax ID has been provided */
  tax_id_provided?: Maybe<Scalars['Boolean']>;
  /** The verification status of the company */
  verification?: Maybe<Scalars['String']>;
};

/** A Stripe country */
export type StripeCountry = {
  __typename?: 'StripeCountry';
  /** The accepted currencies for this country */
  accepted_currencies?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The country code */
  country_code?: Maybe<Scalars['String']>;
  /** The currency of the country */
  currency?: Maybe<Scalars['String']>;
  /** A custom field 1 */
  field1?: Maybe<Scalars['String']>;
  /** A custom field 2 */
  field2?: Maybe<Scalars['String']>;
  /** The name of the country */
  name?: Maybe<Scalars['String']>;
};

/** Details of the client's credit card */
export type StripeCustomerDetail = {
  __typename?: 'StripeCustomerDetail';
  /** The name of the bank the bank account is with (nil for 'Card' source types) */
  bank_type?: Maybe<Scalars['String']>;
  /** The brand of the card */
  card_type?: Maybe<Scalars['String']>;
  /** The type of card indicated by the user. Defaults to personal, Options are 'hsa', 'fsa', and 'personal' */
  card_type_label?: Maybe<Scalars['String']>;
  /** Stripe card country */
  country?: Maybe<Scalars['String']>;
  /** The expiration date of the card */
  expiration?: Maybe<Scalars['String']>;
  /** Whether the card is expiring next month */
  expiring_next_month?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the customer detail object */
  id: Scalars['ID'];
  /** The last 4 digits of the credit card */
  last_four?: Maybe<Scalars['String']>;
  /** The status of the payment method */
  source_status?: Maybe<Scalars['String']>;
  /** The type of payment method (either 'Card' or 'Bank Account') */
  source_type?: Maybe<Scalars['String']>;
  /** The ID of the client (in Stripe) */
  stripe_id?: Maybe<Scalars['String']>;
  /** The client associated with stripe account(in Healthie) */
  user?: Maybe<User>;
  /** The ID of the client (in Healthie) */
  user_id?: Maybe<Scalars['String']>;
  /** Stripe card address zip */
  zip?: Maybe<Scalars['String']>;
};

/** StripeCustomerDetails sorting enum */
export enum StripeCustomerDetailOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  ExpirationDateAsc = 'EXPIRATION_DATE_ASC',
  ExpirationDateDesc = 'EXPIRATION_DATE_DESC',
  PatientFirstNameAsc = 'PATIENT_FIRST_NAME_ASC',
  PatientFirstNameDesc = 'PATIENT_FIRST_NAME_DESC'
}

/** An invoice from stripe as object */
export type StripeInvoice = {
  __typename?: 'StripeInvoice';
  /** The list of add-ons applied to the invoice. */
  add_ons?: Maybe<Array<StripePlan>>;
  /** The amount of the invoice, as a positive or negative integer in the smallest currency unit (e.g., 100 cents to charge $1.00 or -100 to credit $1.00). The value is multiplied by the quantity to get the full amount. If the total is zero, this field will be absent. */
  applied_balance?: Maybe<StripePlan>;
  /** The base amount of the invoice, not including any discounts, in cents. */
  base_plan?: Maybe<StripePlan>;
  /** The list of credits applied to the invoice. */
  credits?: Maybe<Array<StripePlan>>;
  /** The discount applied to the invoice. */
  discount?: Maybe<Discount>;
  /** The unique identifier of the invoice */
  id: Scalars['String'];
  /** The end of the period the invoice covers. */
  period_end?: Maybe<Scalars['String']>;
  /** The start of the period the invoice covers. */
  period_start?: Maybe<Scalars['String']>;
  /** The total amount of the invoice, including all discounts and add-ons. */
  total?: Maybe<Scalars['String']>;
};

/** A discount from stripe as object */
export type StripePlan = {
  __typename?: 'StripePlan';
  /** The amount in cents to be charged on the interval specified */
  amount?: Maybe<Scalars['String']>;
  /** The annual cost of the plan */
  annual_cost?: Maybe<Scalars['String']>;
  /** The description of the plan */
  description?: Maybe<Scalars['String']>;
  /** The unique identifier of the plan */
  id: Scalars['String'];
  /** The interval when the plan is charged */
  interval?: Maybe<Scalars['String']>;
};

/** Payload for a sub-organization */
export type SubOrganizationInfoInput = {
  /** Whether to copy the appointment settings from the parent organization */
  copy_appointment_settings?: InputMaybe<Scalars['Boolean']>;
  /** Whether to copy the onboarding flows from the parent organization */
  copy_onboarding_flows?: InputMaybe<Scalars['Boolean']>;
  /** Whether to copy the packages from the parent organization */
  copy_packages?: InputMaybe<Scalars['Boolean']>;
  /** Whether to copy the programs from the parent organization */
  copy_programs?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the suborganization */
  id?: InputMaybe<Scalars['ID']>;
  /** Whether to inherit appointment types from the parent organization */
  inherit_appointment_types?: InputMaybe<Scalars['Boolean']>;
  /** Whether to inherit custom module forms from the parent organization */
  inherit_custom_module_forms?: InputMaybe<Scalars['Boolean']>;
  /** Whether to inherit the stripe account from the parent organization */
  inherit_stripe_account?: InputMaybe<Scalars['Boolean']>;
  /** DEPRECATED: Use primary organization info input instead */
  name?: InputMaybe<Scalars['String']>;
};

/** Payload for a sub-entry */
export type SubentryInput = {
  /** The category of the sub-entry */
  category?: InputMaybe<Scalars['String']>;
  /** The description of the sub-entry */
  description?: InputMaybe<Scalars['String']>;
  /** The ID of the sub-entry */
  id?: InputMaybe<Scalars['ID']>;
  /** The statistic of the sub-entry */
  metric_stat?: InputMaybe<Scalars['String']>;
  /** The type of the sub-entry */
  type?: InputMaybe<Scalars['String']>;
};

/** Payload for a sub-goal */
export type SubgoalInput = {
  /** Whether or not this sub-goal should be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The ID of the user who created it */
  created_user_id?: InputMaybe<Scalars['String']>;
  /** The description of the sub-goal */
  description?: InputMaybe<Scalars['String']>;
  /** The date the sub-goal should end - format should be: yyyy-mm-dd */
  due_date?: InputMaybe<Scalars['String']>;
  /** The ID of the sub-goal. If no id is given, a sub-goal will be created */
  id?: InputMaybe<Scalars['ID']>;
  /** The graphql_name of the sub-goal */
  name?: InputMaybe<Scalars['String']>;
  /** The ID of the parent goal */
  parent_id?: InputMaybe<Scalars['String']>;
  /** The frequency of this goal. Possible values are: 'Daily','Weekly', 'Once' */
  repeat?: InputMaybe<Scalars['String']>;
  /** The ID of the sub-goal's template used to create this sub-goal */
  source_template_id?: InputMaybe<Scalars['String']>;
  /** The sub-goal title hyperlink. Opens when the sub-goal graphql_name is clicked on. */
  title_link?: InputMaybe<Scalars['String']>;
  /** The ID of the user who created this sub-goal. If no user_id is given, the current user will be used */
  user_id?: InputMaybe<Scalars['String']>;
};

/** Subscriptions for events tracking */
export type Subscription = {
  __typename?: 'Subscription';
  /** Track changes in appointments where user is participated */
  appointmentUserDevicesSubscription?: Maybe<Appointment>;
  /** Track changes in conversations */
  conversationChangedSubscription?: Maybe<Conversation>;
  /** Track new members of conversations */
  conversationMembershipAddedSubscription?: Maybe<ConversationMembership>;
  /** Track new updates to members of conversations */
  conversationMembershipUpdatedSubscription?: Maybe<ConversationMembership>;
  /** Track modifications of form answer groups */
  formAnswerGroupModifiedSubscription?: Maybe<FormAnswerGroup>;
  /** Track added notes */
  noteAddedSubscription?: Maybe<Note>;
  /** Track user updates */
  userUpdatedSubscription?: Maybe<UserNotificationsCount>;
  /** Track video chats */
  videoChatsSubscription?: Maybe<VideoChatsSubscriptionPayload>;
};


/** Subscriptions for events tracking */
export type SubscriptionAppointmentUserDevicesSubscriptionArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** Subscriptions for events tracking */
export type SubscriptionConversationChangedSubscriptionArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** Subscriptions for events tracking */
export type SubscriptionConversationMembershipAddedSubscriptionArgs = {
  notesType?: InputMaybe<Scalars['String']>;
};


/** Subscriptions for events tracking */
export type SubscriptionConversationMembershipUpdatedSubscriptionArgs = {
  notesType?: InputMaybe<Scalars['String']>;
};


/** Subscriptions for events tracking */
export type SubscriptionFormAnswerGroupModifiedSubscriptionArgs = {
  id?: InputMaybe<Scalars['ID']>;
};


/** Subscriptions for events tracking */
export type SubscriptionNoteAddedSubscriptionArgs = {
  conversationId?: InputMaybe<Scalars['String']>;
};

/** a subscription object */
export type SubscriptionInstance = {
  __typename?: 'SubscriptionInstance';
  /** When a customer cancels, or is set to cancel, this will be a datetime of when access will cease */
  access_will_stop_at?: Maybe<Scalars['String']>;
  /** Amount difference if switching to annual/monthly */
  amount_saved_if_plan_switched?: Maybe<Scalars['Int']>;
  /** Amount savings from monthly to annual */
  amount_savings_on_base_plan?: Maybe<Scalars['String']>;
  /** Total cost of subscription for the year */
  annual_total?: Maybe<Scalars['String']>;
  /** Expiration of credit card on Stripe */
  card_expiration?: Maybe<Scalars['String']>;
  /** Returns true if card is expired */
  card_expired?: Maybe<Scalars['Boolean']>;
  /** Type of credit card on Stripe (Mastercard, Visa, Amex, etc.) */
  card_type?: Maybe<Scalars['String']>;
  /** Number of clients under the user that owns the subscription */
  client_count?: Maybe<Scalars['Int']>;
  /** Cost per month of annual plan */
  cost_of_annual_base_plan?: Maybe<Scalars['String']>;
  /** Shows how many days are left in the users trial */
  days_left_in_trial?: Maybe<Scalars['Int']>;
  /** Discounts currently active on Stripe account */
  discounts?: Maybe<Array<Discount>>;
  /** Array of discounts applied in Stripe (most possible is 2) */
  discounts_if_switched?: Maybe<Array<Discount>>;
  /** Returns true if there is already a scheduled subscription change on this account */
  has_scheduled_change?: Maybe<Scalars['Boolean']>;
  /** The unique identifier of the subscription */
  id: Scalars['ID'];
  /** The interval of the subscription */
  interval?: Maybe<Scalars['String']>;
  /** Example of next invoice if switching plan */
  invoice_if_switched?: Maybe<StripeInvoice>;
  /** Returns true if the user is trialing */
  is_trialing?: Maybe<Scalars['Boolean']>;
  /** Last four digits of credit card on Stripe */
  last_four?: Maybe<Scalars['String']>;
  /** Last attempted invoice in Stripe */
  last_invoice?: Maybe<StripeInvoice>;
  /** When the user is scheduled to be locked out due to non-payment */
  locked_out_at?: Maybe<Scalars['String']>;
  /** Total cost of subscription for the month */
  month_total?: Maybe<Scalars['String']>;
  /** Cost per month of annual plan */
  monthly_cost_of_annual_base_plan?: Maybe<Scalars['String']>;
  /** Cost per month for base plan */
  monthly_cost_of_base_plan?: Maybe<Scalars['String']>;
  /** The number of providers that the subscription covers */
  paid_for_providers?: Maybe<Scalars['String']>;
  /** The number of support staff that the subscription covers */
  paid_for_support?: Maybe<Scalars['String']>;
  /** Percent difference if switching to annual/monthly */
  percent_change_if_plan_switched?: Maybe<Scalars['Int']>;
  /** Percent savings from monthly to annual */
  percent_savings_on_base_plan?: Maybe<Scalars['Int']>;
  /** Array of line items applied to Stripe subscription other than base plan (i.e fax line, extra providers, office ally etc.) */
  plan_add_ons?: Maybe<Array<StripePlan>>;
  /** The ID of the plan in Healthie */
  plan_id?: Maybe<Scalars['String']>;
  /** Name of the plan in Stripe */
  plan_name?: Maybe<Scalars['String']>;
  /** Returns true if the user is set to cancel */
  set_to_cancel?: Maybe<Scalars['Boolean']>;
  /** Remaining balance on stripe customer */
  stripe_balance?: Maybe<Scalars['String']>;
  /** The ID of the customer in Stripe */
  stripe_id?: Maybe<Scalars['String']>;
  /** Stripe Subscription plan name */
  stripe_plan?: Maybe<Scalars['String']>;
  /** The ID of the subscription in Stripe */
  stripe_subscription_id?: Maybe<Scalars['String']>;
  /** Upcoming invoice in Stripe */
  upcoming_invoice?: Maybe<StripeInvoice>;
  /** Owner of this subscription */
  user?: Maybe<User>;
  /** The ID of the user who owns the subscription */
  user_id?: Maybe<Scalars['String']>;
};

/** SuperBill */
export type SuperBill = {
  __typename?: 'SuperBill';
  /** address */
  address?: Maybe<Scalars['String']>;
  /** amount of super bill */
  amount_paid?: Maybe<Scalars['String']>;
  /** amount due after amount paid is subtracted from total fee */
  balance_due?: Maybe<Scalars['String']>;
  /** Returns cpt codes names list comma separated */
  cpt_code_names?: Maybe<Scalars['String']>;
  /** CPT codes in use for this super bill */
  cpt_codes_super_bills?: Maybe<Array<CptCodesSuperBill>>;
  /** date super bill was created */
  created_at: Scalars['String'];
  /** date superbill was deleted */
  deleted_at?: Maybe<Scalars['String']>;
  /** id of dietitian */
  dietitian_id?: Maybe<Scalars['ID']>;
  /** ICD codes in use for this super bill */
  icd_codes_super_bills?: Maybe<Array<IcdCodesSuperBill>>;
  /** The unique identifier of the bill */
  id: Scalars['ID'];
  /** license number */
  license_num?: Maybe<Scalars['String']>;
  /** location */
  location?: Maybe<Location>;
  /** location id */
  location_id?: Maybe<Scalars['ID']>;
  /** npi number */
  npi?: Maybe<Scalars['String']>;
  /** patient of this superbill */
  patient?: Maybe<User>;
  /** dob of patient */
  patient_dob?: Maybe<Scalars['String']>;
  /** id of patient */
  patient_id?: Maybe<Scalars['ID']>;
  /** location */
  patient_location?: Maybe<Location>;
  /** patient location id */
  patient_location_id?: Maybe<Scalars['ID']>;
  /** name of patient */
  patient_name?: Maybe<Scalars['String']>;
  /** phone number of patient */
  patient_phone?: Maybe<Scalars['String']>;
  /** place of service */
  place_of_service?: Maybe<PlaceOfService>;
  /** place of service id */
  place_of_service_id?: Maybe<Scalars['ID']>;
  /** city */
  prov_city?: Maybe<Scalars['String']>;
  /** email */
  prov_email?: Maybe<Scalars['String']>;
  /** address line one */
  prov_line1?: Maybe<Scalars['String']>;
  /** address line one */
  prov_line2?: Maybe<Scalars['String']>;
  /** phone */
  prov_phone?: Maybe<Scalars['String']>;
  /** state */
  prov_state?: Maybe<Scalars['String']>;
  /** zip */
  prov_zip?: Maybe<Scalars['String']>;
  /** provider */
  provider?: Maybe<User>;
  /** name of provider */
  provider_name?: Maybe<Scalars['String']>;
  /** receipt line items of this super bill */
  receipt_line_items?: Maybe<Array<ReceiptLineItem>>;
  /** name of referrer */
  referrer_name?: Maybe<Scalars['String']>;
  /** npi of referrer */
  referrer_npi?: Maybe<Scalars['String']>;
  /** Date of service (as a date) */
  service_date?: Maybe<Scalars['String']>;
  /** status */
  status?: Maybe<Scalars['String']>;
  /** tax id */
  tax_id?: Maybe<Scalars['String']>;
  /** total fee for superbill */
  total_fee?: Maybe<Scalars['String']>;
  /** date super bill was updated */
  updated_at: Scalars['String'];
};

/** SuperBill sorting enum */
export enum SuperBillOrderKeys {
  AmountBilledAsc = 'AMOUNT_BILLED_ASC',
  AmountBilledDesc = 'AMOUNT_BILLED_DESC',
  AmountPaidAsc = 'AMOUNT_PAID_ASC',
  AmountPaidDesc = 'AMOUNT_PAID_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  ServiceDateAsc = 'SERVICE_DATE_ASC',
  ServiceDateDesc = 'SERVICE_DATE_DESC',
  Status = 'STATUS'
}

/** Support Dashboard Endpoints */
export type SupportDashboardType = {
  __typename?: 'SupportDashboardType';
  /** INTERNAL | Fetch Appointment Type */
  appointmentTypes?: Maybe<Array<AppointmentType>>;
  /** INTERNAL | Fetch User Info on DoseSpot Object */
  dosespotUserInfo?: Maybe<DoseSpot>;
  /** INTERNAL | Fetch FormAnswer */
  formAnswer?: Maybe<SdFormAnswer>;
  /** INTERNAL | Fetch FormAnswerGroup */
  formAnswerGroup?: Maybe<SdFormAnswerGroup>;
  /** INTERNAL | Fetch FormAnswerGroups */
  formAnswerGroupCollection?: Maybe<SdFormAnswerGroupCollection>;
  /** INTERNAL | Fetch FormAnswerGroups */
  formAnswerGroups?: Maybe<Array<FormAnswerGroup>>;
  /** INTERNAL | Fetch Human */
  human?: Maybe<SdHuman>;
  /** INTERNAL | Fetch Lab Order */
  labOrder?: Maybe<SdLabOrderType>;
  /** INTERNAL | Fetch Organization */
  organization?: Maybe<SdOrg>;
  /** INTERNAL | Fetch Roles */
  roles?: Maybe<Array<Role>>;
  /** Rough Total Patient Count */
  totalPatientCount?: Maybe<Scalars['Int']>;
};


/** Support Dashboard Endpoints */
export type SupportDashboardTypeAppointmentTypesArgs = {
  provider_id?: InputMaybe<Scalars['String']>;
};


/** Support Dashboard Endpoints */
export type SupportDashboardTypeDosespotUserInfoArgs = {
  user_id: Scalars['ID'];
};


/** Support Dashboard Endpoints */
export type SupportDashboardTypeFormAnswerArgs = {
  item_id?: InputMaybe<Scalars['ID']>;
};


/** Support Dashboard Endpoints */
export type SupportDashboardTypeFormAnswerGroupArgs = {
  item_id?: InputMaybe<Scalars['ID']>;
};


/** Support Dashboard Endpoints */
export type SupportDashboardTypeFormAnswerGroupCollectionArgs = {
  cursor?: InputMaybe<Scalars['String']>;
  filler_id?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};


/** Support Dashboard Endpoints */
export type SupportDashboardTypeFormAnswerGroupsArgs = {
  user_id?: InputMaybe<Scalars['String']>;
};


/** Support Dashboard Endpoints */
export type SupportDashboardTypeHumanArgs = {
  email?: InputMaybe<Scalars['String']>;
  human_id?: InputMaybe<Scalars['ID']>;
  namespace?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};


/** Support Dashboard Endpoints */
export type SupportDashboardTypeLabOrderArgs = {
  order_id?: InputMaybe<Scalars['String']>;
};


/** Support Dashboard Endpoints */
export type SupportDashboardTypeOrganizationArgs = {
  provider_id?: InputMaybe<Scalars['ID']>;
};


/** Support Dashboard Endpoints */
export type SupportDashboardTypeRolesArgs = {
  user_id?: InputMaybe<Scalars['ID']>;
};


/** Support Dashboard Endpoints */
export type SupportDashboardTypeTotalPatientCountArgs = {
  offset?: InputMaybe<Scalars['Int']>;
};

/** A Symptom Option */
export type SymptomOption = {
  __typename?: 'SymptomOption';
  /** Custom Symptoms use numeric IDs. Standard symptoms just use the symptom name */
  id: Scalars['ID'];
  /** The symptom name */
  name: Scalars['String'];
  /** The symptom value */
  value: Scalars['Int'];
};

/** A custom tag that can be applied on a user */
export type Tag = {
  __typename?: 'Tag';
  /** The number of active users who have the tag */
  active_users_count?: Maybe<Scalars['Int']>;
  /** The user who created the tag */
  added_by?: Maybe<Scalars['String']>;
  /** The number of archived users who have the tag */
  archived_users_count?: Maybe<Scalars['Int']>;
  /** The time when the tag was created */
  created_at: Scalars['String'];
  /** The unique identifier of the tag */
  id: Scalars['ID'];
  /** A human-readable name of the tag */
  name: Scalars['String'];
  /** The number of org members who have the tag */
  org_members_count?: Maybe<Scalars['Int']>;
  /** The array of tagged patients */
  tagged_users?: Maybe<Array<User>>;
  /** The last time the tag was updated */
  updated_at: Scalars['String'];
  /** The provider who created the tag */
  user?: Maybe<User>;
};


/** A custom tag that can be applied on a user */
export type TagTagged_UsersArgs = {
  offset?: InputMaybe<Scalars['Int']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};

/** Tag sorting enum */
export enum TagOrderKeys {
  /** Sort by amount of patients applied to this Tag ascending */
  ActiveUsersAsc = 'ACTIVE_USERS_ASC',
  /** Sort by amount of patients applied to this Tag descending */
  ActiveUsersDesc = 'ACTIVE_USERS_DESC',
  /** Sort by the first name of the user who added the Tag ascending */
  AddedByAsc = 'ADDED_BY_ASC',
  /** Sort by the first name of the user who added the Tag descending */
  AddedByDesc = 'ADDED_BY_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  /** Sort by amount of organization members applied to this Tag ascending */
  OrgMembersAsc = 'ORG_MEMBERS_ASC',
  /** Sort by amount of organization members applied to this Tag descending */
  OrgMembersDesc = 'ORG_MEMBERS_DESC'
}

/** Tasks for providers to create, complete, and optionally assign to client profiles */
export type Task = {
  __typename?: 'Task';
  /** The client tagged to this task */
  client?: Maybe<User>;
  /** The indentifier of the client tagged on this task */
  client_id?: Maybe<Scalars['ID']>;
  /** If true, user has marked task complete */
  complete?: Maybe<Scalars['Boolean']>;
  /** Date and time this task was completed */
  completed_at?: Maybe<Scalars['String']>;
  /** User ID of the user who completed this task */
  completed_by_id?: Maybe<Scalars['ID']>;
  /** Details describing this task */
  content?: Maybe<Scalars['String']>;
  /** Date and time this task was created */
  created_at: Scalars['String'];
  /** ID of an auto generator */
  created_by_generator_id?: Maybe<Scalars['String']>;
  /** User id of user who created this task */
  created_by_id?: Maybe<Scalars['ID']>;
  /** The user who created this task */
  creator?: Maybe<User>;
  /** Date and time this task was is due to be complete */
  due_date?: Maybe<Scalars['String']>;
  /** If true, hide completed task from top nav bar */
  hidden: Scalars['Boolean'];
  /** The unique identifier of the task */
  id: Scalars['ID'];
  /** Get associated chat message with a task */
  note?: Maybe<Note>;
  /** Get relative path to view the note */
  note_path?: Maybe<Scalars['String']>;
  /** Order in which tasks are displayed (ascending) */
  position?: Maybe<Scalars['Int']>;
  /** Level of urgency for this task(0 = standard priority, 1 = high priority) */
  priority: Scalars['Int'];
  /** ID of additional relation */
  ref_source?: Maybe<Scalars['String']>;
  /** Reminder object for a given goal */
  reminder?: Maybe<Reminder>;
  /** If truem, user has viewed this task in top navbar  */
  seen: Scalars['Boolean'];
  /** Indicates to smart task */
  smart: Scalars['Boolean'];
  /** Get category of smart task */
  smart_category?: Maybe<Scalars['String']>;
  /** The user assigned to complete this task */
  user?: Maybe<User>;
  /** User ID of the user assigned to this task */
  user_id?: Maybe<Scalars['ID']>;
};

/** Task sorting enum */
export enum TaskOrderKeys {
  AssigneeAsc = 'ASSIGNEE_ASC',
  AssigneeDesc = 'ASSIGNEE_DESC',
  /** Order by client first name and last name ascending */
  ClientNameAsc = 'CLIENT_NAME_ASC',
  /** Order by client first name and last name descending */
  ClientNameDesc = 'CLIENT_NAME_DESC',
  CompletedAtAsc = 'COMPLETED_AT_ASC',
  CompletedAtDesc = 'COMPLETED_AT_DESC',
  CreatedAsc = 'CREATED_ASC',
  CreatedDesc = 'CREATED_DESC',
  CreatorAsc = 'CREATOR_ASC',
  CreatorDesc = 'CREATOR_DESC',
  DueDateAsc = 'DUE_DATE_ASC',
  DueDateDesc = 'DUE_DATE_DESC',
  PriorityAsc = 'PRIORITY_ASC',
  PriorityDesc = 'PRIORITY_DESC',
  TaskAsc = 'TASK_ASC',
  TaskDesc = 'TASK_DESC'
}

/** Payload for a task reminder */
export type TaskReminderInput = {
  /** Id of the reminder. If no id is given, a reminder will be created */
  id?: InputMaybe<Scalars['ID']>;
  /** The type of interval. Options are daily, weekly, once */
  interval_type?: InputMaybe<Scalars['String']>;
  /** For a daily interval send nothing. For a weekly interval, send a comma separated day of week in the lower case (e.g wednesday, friday). To remind once, send the date (e.g 2020-11-28) */
  interval_value?: InputMaybe<Scalars['String']>;
  /** If not set to true, the reminder will not be sent */
  is_enabled?: InputMaybe<Scalars['Boolean']>;
  /** Time for reminder */
  reminder_time?: InputMaybe<Scalars['Int']>;
  /** Send in true to delete the reminder */
  remove_reminder?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated input type of Toggle2Fa */
export type Toggle2FaInput = {
  enable: Scalars['String'];
  id: Scalars['ID'];
};

/** Autogenerated return type of Toggle2Fa. */
export type Toggle2FaPayload = {
  __typename?: 'Toggle2FaPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ToggleAdvancedSettings */
export type ToggleAdvancedSettingsInput = {
  enable: Scalars['String'];
  role: Scalars['String'];
  user_id: Scalars['ID'];
};

/** Autogenerated return type of ToggleAdvancedSettings. */
export type ToggleAdvancedSettingsPayload = {
  __typename?: 'ToggleAdvancedSettingsPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ToggleAvailability */
export type ToggleAvailabilityInput = {
  enable: Scalars['String'];
  id: Scalars['ID'];
  setting: Scalars['String'];
};

/** Autogenerated return type of ToggleAvailability. */
export type ToggleAvailabilityPayload = {
  __typename?: 'ToggleAvailabilityPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ToggleBaa */
export type ToggleBaaInput = {
  enable: Scalars['String'];
  id: Scalars['ID'];
};

/** Autogenerated return type of ToggleBaa. */
export type ToggleBaaPayload = {
  __typename?: 'ToggleBaaPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of TogglePaywall */
export type TogglePaywallInput = {
  enable: Scalars['String'];
  id: Scalars['String'];
};

/** Autogenerated return type of TogglePaywall. */
export type TogglePaywallPayload = {
  __typename?: 'TogglePaywallPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of ToggleReasonForAppt */
export type ToggleReasonForApptInput = {
  /** Appointment Type ID */
  appointment_type_id: Scalars['ID'];
  /** Boolean.to_String() to Enable/Disable */
  enable: Scalars['String'];
};

/** Autogenerated return type of ToggleReasonForAppt. */
export type ToggleReasonForApptPayload = {
  __typename?: 'ToggleReasonForApptPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** A transaction */
export type TransactionType = {
  __typename?: 'TransactionType';
  /** The currency of the transaction */
  currency?: Maybe<Scalars['String']>;
  /** The amount for the transaction after fees */
  displayed_amount?: Maybe<Scalars['String']>;
  /** Charge ID associated to transaction. Can be matched with billing_item.stripe_charge_id */
  source_name?: Maybe<Scalars['String']>;
};

/** Transfer sorting enum */
export enum TransferOrderKeys {
  AmountAsc = 'AMOUNT_ASC',
  AmountDesc = 'AMOUNT_DESC',
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  ExpectedToHappenAsc = 'EXPECTED_TO_HAPPEN_ASC',
  ExpectedToHappenDesc = 'EXPECTED_TO_HAPPEN_DESC',
  StatusAsc = 'STATUS_ASC',
  StatusDesc = 'STATUS_DESC',
  TransactionsCountAsc = 'TRANSACTIONS_COUNT_ASC',
  TransactionsCountDesc = 'TRANSACTIONS_COUNT_DESC'
}

/** A transfer */
export type TransferType = {
  __typename?: 'TransferType';
  /** The amount for the transfer */
  amount?: Maybe<Scalars['String']>;
  /** The currency of the transfer */
  currency?: Maybe<Scalars['String']>;
  /** The amount to display (formatted and with currency symbol) */
  displayed_amount?: Maybe<Scalars['String']>;
  /** The expected to happen date to display */
  displayed_expected_to_happen?: Maybe<Scalars['String']>;
  /** The initiation date to display */
  displayed_initiated?: Maybe<Scalars['String']>;
  /** The date that the transfer is expected to complete */
  expected_to_happen?: Maybe<Scalars['String']>;
  /** Total of all fees deducted from all transactions */
  fees?: Maybe<Scalars['String']>;
  /** Stripe ID for this transfer */
  id: Scalars['String'];
  /** The initiation time of the transfer */
  initiated?: Maybe<Scalars['String']>;
  /** The status for the transfer */
  status?: Maybe<Scalars['String']>;
  /** Number of transactions */
  transactions_count?: Maybe<Scalars['Int']>;
  /** The type of transfer */
  type?: Maybe<Scalars['String']>;
};

/** UniqueDeviceIdentifier object */
export type UniqueDeviceIdentifier = {
  __typename?: 'UniqueDeviceIdentifier';
  /** The assigning authority for the device code */
  assigning_authority?: Maybe<Scalars['String']>;
  /** The device code */
  device_code?: Maybe<Scalars['String']>;
  /** The display name for the device code */
  display_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the identifier */
  id: Scalars['ID'];
  /** The scoping entity for the device code */
  scoping_entity?: Maybe<Scalars['String']>;
  /** The UDI code for the device */
  udi_code?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateCalorieLevel */
export type UpdateCalorieLevelInput = {
  device_token?: InputMaybe<Scalars['String']>;
  device_type?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  high_end_caloric_intake?: InputMaybe<Scalars['String']>;
  run_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of UpdateCalorieLevel. */
export type UpdateCalorieLevelPayload = {
  __typename?: 'UpdateCalorieLevelPayload';
  assessment?: Maybe<HealthAssessment>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of UpdateCurrency */
export type UpdateCurrencyInput = {
  currency: Scalars['String'];
  user_id: Scalars['ID'];
};

/** Autogenerated return type of UpdateCurrency. */
export type UpdateCurrencyPayload = {
  __typename?: 'UpdateCurrencyPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of UpdateMacronutrientSplit */
export type UpdateMacronutrientSplitInput = {
  carbs_percentage?: InputMaybe<Scalars['String']>;
  device_token?: InputMaybe<Scalars['String']>;
  device_type?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fat_percentage?: InputMaybe<Scalars['String']>;
  protein_percentage?: InputMaybe<Scalars['String']>;
  run_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of UpdateMacronutrientSplit. */
export type UpdateMacronutrientSplitPayload = {
  __typename?: 'UpdateMacronutrientSplitPayload';
  assessment?: Maybe<HealthAssessment>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of UpdateUserEmail */
export type UpdateUserEmailInput = {
  current_email: Scalars['String'];
  new_email: Scalars['String'];
  user_id: Scalars['ID'];
};

/** Autogenerated return type of UpdateUserEmail. */
export type UpdateUserEmailPayload = {
  __typename?: 'UpdateUserEmailPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** An user entry, returns basic user information */
export type User = {
  __typename?: 'User';
  /** Access Token (for iCal) */
  access_token?: Maybe<Scalars['String']>;
  /** The status of whether the user is active or not (if false, patient is archived) */
  active: Scalars['Boolean'];
  /** Active care plan for the user */
  active_care_plan?: Maybe<CarePlan>;
  /** Active group care plan for the user */
  active_group_care_plan?: Maybe<CarePlan>;
  /** All active patients associated with this user. */
  active_patients: Array<User>;
  /** A number of all active patients associated with this user. */
  active_patients_count?: Maybe<Scalars['Int']>;
  /** A collection of tags applied on the specific user */
  active_tags?: Maybe<Array<Tag>>;
  /** Additional tabs to display within the provider's view of the client profile */
  additional_client_profile_items: Array<CustomSidebarOverride>;
  /** Additional links to display within gear menu in patient's header */
  additional_header_dropdown_items: Array<CustomSidebarOverride>;
  /** additional phone number for user */
  additional_phone_number?: Maybe<Scalars['String']>;
  /** additional unique record identifier for user */
  additional_record_identifier?: Maybe<Scalars['String']>;
  /** Additional links to display on patient sidebar */
  additional_sidebar_items: Array<CustomSidebarOverride>;
  /** Appointment prices associated with this user */
  advance_appointment_prices?: Maybe<Array<AdvanceAppointmentPrice>>;
  /** The user's lead dyno affiliate info */
  affiliate?: Maybe<Affiliate>;
  /** The age of the user (in years) */
  age?: Maybe<Scalars['String']>;
  /** All Verification fields left for the provider to fill out */
  all_verification_fields?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Allergies, Sensitivities, Intolerances, and Preferences reported by client */
  allergy_sensitivities?: Maybe<Array<AllergySensitivity>>;
  /** Allow the user to send messages in community chat */
  allow_community_chat?: Maybe<Scalars['Boolean']>;
  /** Allow the user to send direct messages in chat */
  allow_direct_chat?: Maybe<Scalars['Boolean']>;
  /** All announcements associated with this user. For a dietitian it returns all announcements created including those created in organization if applicable. For a patient it returns announcements generated by his/her dietitian. */
  announcements: Array<Announcement>;
  /** If the user has incomplete onboarding steps */
  any_incomplete_onboarding_steps?: Maybe<Scalars['Boolean']>;
  /** If the user has courses shared with them */
  any_shared_courses?: Maybe<Scalars['Boolean']>;
  /** If the user has docs shared with them */
  any_shared_documents?: Maybe<Scalars['Boolean']>;
  /** If the user has courses shared with them */
  any_shared_incomplete_courses?: Maybe<Scalars['Boolean']>;
  /** Whether the user has docs shared with them that they have not viewed */
  any_unviewed_documents?: Maybe<Scalars['Boolean']>;
  /** AppleHealth for the user */
  apple_health?: Maybe<AppleHealth>;
  /** Appointment Locations for the user */
  appointment_locations?: Maybe<Array<AppointmentLocation>>;
  /** Appointment Settings for the user */
  appointment_setting?: Maybe<AppointmentSetting>;
  /** All Appointment Type Credits for this user */
  appointment_type_credits: Array<AppointmentTypeCredit>;
  /** All available appointment types for the provider. */
  appointment_types: Array<AppointmentType>;
  /** Appointments for the user */
  appointments?: Maybe<Array<Appointment>>;
  /** Datetime of archival. This field will only be populated with archived changes made after Aug 7, 2023 */
  archived_at?: Maybe<Scalars['String']>;
  /** If true, user has seen popup explaining how to assign providers and clients to tasks */
  assign_tasks_seen?: Maybe<Scalars['Boolean']>;
  /** Tasks assigned by the user to other users */
  assigned_tasks?: Maybe<Array<Task>>;
  /** When false, the user is opted out of the automatic charge feature. */
  auto_charge_enabled: Scalars['Boolean'];
  /** All available contact types for the provider. */
  available_contact_types?: Maybe<Scalars['String']>;
  /** The link to the avatar image (nil if no image has been uploaded) */
  avatar_url?: Maybe<Scalars['String']>;
  /** The status of the user's bank account */
  bank_account_verified_status?: Maybe<Scalars['String']>;
  /** If user still has verification steps for stripe, returns deadline timestamp */
  bank_verification_deadline?: Maybe<Scalars['String']>;
  /** All Billing Items for this user */
  billing_items: Array<BillingItem>;
  /** If a user has seen the message blast alert */
  blast_seen?: Maybe<Scalars['Boolean']>;
  /** Displays bmi percentile for growth charts */
  bmi_percentile?: Maybe<Scalars['String']>;
  /** Displays standard by which bmi percentile is calculated */
  bmi_percentile_standard?: Maybe<Scalars['String']>;
  /** The brand that the user made */
  brand?: Maybe<Brand>;
  /** The URL of the brand's alternative logo */
  brand_alt_logo_url?: Maybe<Scalars['String']>;
  /** The URL of the brand logo */
  brand_logo_url?: Maybe<Scalars['String']>;
  /** The Brand Name Of the User */
  brand_name?: Maybe<Scalars['String']>;
  /** The name of the Brand */
  branded_name?: Maybe<Scalars['String']>;
  /** Broken synced calendar */
  broken_synced_cal?: Maybe<ExternalCalendar>;
  /** HTML String to display on top of the calendar */
  calendar_text?: Maybe<Scalars['String']>;
  /** Calendar timezone */
  calendar_timezone?: Maybe<Scalars['String']>;
  /** Call references made for a patient's insurances */
  call_references?: Maybe<Array<CallReference>>;
  /** If true, has Zus credential */
  can_access_zus?: Maybe<Scalars['Boolean']>;
  /** Allow the user to add clients */
  can_add_clients?: Maybe<Scalars['Boolean']>;
  /** If the provider can add members */
  can_add_members?: Maybe<Scalars['Boolean']>;
  /** If true this user to archive clients */
  can_archive_clients?: Maybe<Scalars['Boolean']>;
  /** Allow this user to charge clients */
  can_charge_clients?: Maybe<Scalars['Boolean']>;
  /** Allow the user to Check Eligibility */
  can_check_eligibility?: Maybe<Scalars['Boolean']>;
  /** If true, the user can delete charting notes */
  can_delete_charting_notes?: Maybe<Scalars['Boolean']>;
  /** If true this user to delete faxes */
  can_delete_faxes?: Maybe<Scalars['Boolean']>;
  /** If true,  the user to edit Appointment Types */
  can_edit_appointment_types?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit brand */
  can_edit_brand?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit client credit */
  can_edit_credit?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit org documents */
  can_edit_docs?: Maybe<Scalars['Boolean']>;
  /** If the provider can edit forms */
  can_edit_forms?: Maybe<Scalars['Boolean']>;
  /** If the provider can edit members */
  can_edit_members?: Maybe<Scalars['Boolean']>;
  /** If true, the user to edit org calendar */
  can_edit_org_calendar?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit packages */
  can_edit_packages?: Maybe<Scalars['Boolean']>;
  /** If true, the user can add, edit and delete products */
  can_edit_products?: Maybe<Scalars['Boolean']>;
  /** If true, the user can add or remove clients within programs */
  can_edit_program_clients?: Maybe<Scalars['Boolean']>;
  /** If true, the user can edit programs */
  can_edit_programs?: Maybe<Scalars['Boolean']>;
  /** Allow the user to edit account settings */
  can_edit_settings?: Maybe<Scalars['Boolean']>;
  /** If the provider organization can have suborgs */
  can_have_suborgs?: Maybe<Scalars['Boolean']>;
  /** If the user can add suborgs */
  can_insert_suborgs?: Maybe<Scalars['Boolean']>;
  /** If true, the user can lock other providers charting notes */
  can_lock_others_charting_notes?: Maybe<Scalars['Boolean']>;
  /** If true, the user can lock their own charting notes */
  can_lock_own_charting_notes?: Maybe<Scalars['Boolean']>;
  /** If the provider can mark tasks that are assigned to other org members as completed */
  can_mark_assigned_tasks_to_other_org_members_as_completed?: Maybe<Scalars['Boolean']>;
  /** If true, the user can merge clients */
  can_merge_clients?: Maybe<Scalars['Boolean']>;
  /** If true, can order new lab using labs widget */
  can_order_labs?: Maybe<Scalars['Boolean']>;
  /** Allow this user to schedule appointments (Linked accounts) */
  can_schedule_appointments?: Maybe<Scalars['Boolean']>;
  /** If true, user can see products tab in client profile and see fullscript box on homepage if not linked to fullscript */
  can_see_fullscript_tab?: Maybe<Scalars['Boolean']>;
  /** Show insurance info for a client */
  can_see_insurance_authorization?: Maybe<Scalars['Boolean']>;
  /** When true, the user should see option to use erx dosespot */
  can_see_option_to_use_erx_dosespot?: Maybe<Scalars['Boolean']>;
  /** If true, can view transfer tab in billing page */
  can_see_transfers?: Maybe<Scalars['Boolean']>;
  /** If true, the user can sign other providers charting notes */
  can_sign_others_charting_notes?: Maybe<Scalars['Boolean']>;
  /** If true, the user can sign their own charting notes */
  can_sign_own_charting_notes?: Maybe<Scalars['Boolean']>;
  /** If true, can access to labs widget */
  can_view_labs?: Maybe<Scalars['Boolean']>;
  /** If True, the user will be able to add addendums for an other org member locked form answer groups */
  can_write_org_addendums?: Maybe<Scalars['Boolean']>;
  /** If true, the user cannot access org settings */
  cannot_access_org_member_settings?: Maybe<Scalars['Boolean']>;
  /**
   * If True, the user will not be able to lock form answer groups
   * @deprecated Use can_lock_own_charting_notes instead
   */
  cannot_lock_form_answer_groups?: Maybe<Scalars['Boolean']>;
  /** Fetch paginated stripe customer accounts with associated errors or soon to expire credit cards */
  card_issues_count?: Maybe<Scalars['Int']>;
  /** Hash for Chameleon */
  chameleon_hash?: Maybe<Scalars['String']>;
  /** When true, user will be able to check insurance eligibility via Change Healthcare */
  change_healthcare_insurance_eligibility_connected?: Maybe<Scalars['Boolean']>;
  /** Clearstep Connection for the user. If the Shapa integration is enabled, then the Clearstep integration should automatically appear as enabled */
  clearstep_connection?: Maybe<ShapaConnection>;
  /** Info about how a user was acquired */
  client_source?: Maybe<ClientSource>;
  /** Completed Tasks assigned to the user */
  completed_tasks?: Maybe<Array<Task>>;
  /** Whether the user has accepted the lab order waiver */
  consented_to_labs?: Maybe<Scalars['Boolean']>;
  /** course membership scoped by specific course */
  course_membership_via_course?: Maybe<CourseMembership>;
  /** All course memberships for this user */
  course_memberships?: Maybe<Array<CourseMembership>>;
  /**
   * All course memberships for this user
   * @deprecated This field has a typo. use User.course_memberships instead
   */
  course_membrships: Array<CourseMembership>;
  /** The date this user created an account */
  created_at?: Maybe<Scalars['String']>;
  /** The credit balance of the user */
  credit_balance?: Maybe<Scalars['String']>;
  /** All custom custom emails associated with this user. */
  custom_custom_emails?: Maybe<Array<CustomEmail>>;
  /** Custom Metric of the user */
  custom_metrics: Array<CustomMetric>;
  /** The default currency for the user */
  default_currency?: Maybe<Scalars['String']>;
  /** Default external videochat URL for scheduling with this user */
  default_external_video_url?: Maybe<Scalars['String']>;
  /** The id of the users default onboarding flow */
  default_onboarding_flow?: Maybe<OnboardingFlow>;
  /** The id of the users default onboarding flow */
  default_onboarding_flow_id?: Maybe<Scalars['String']>;
  /** Patient's default pharmacy. Only applicable to dosespot users */
  default_pharmacy?: Maybe<Pharmacy>;
  /** Default stripe payment card */
  default_stripe_customer_detail_id?: Maybe<Scalars['ID']>;
  /** Check that user has no video or audio devices (or both) */
  devices_unavailability?: Maybe<Scalars['Boolean']>;
  /** Dexcom Connection for the user */
  dexcom_connection?: Maybe<DexcomConnection>;
  /** diagnoses for the user */
  diagnoses?: Maybe<Array<Diagnosis>>;
  /** Dietitian of this user */
  dietitian?: Maybe<User>;
  /** The Dietitian ID of the Client */
  dietitian_id?: Maybe<Scalars['String']>;
  /** Dismisses a small advertisement about the ability to sync calendars */
  dimissed_calendar_prompt?: Maybe<Scalars['Boolean']>;
  /** Dismisses a notice warn about charting note addendum */
  dismissed_charting_note_addendum_warning?: Maybe<Scalars['Boolean']>;
  /** If true, do not show fullscript box in provider homepage */
  dismissed_fullscript?: Maybe<Scalars['Boolean']>;
  /** Dismisses the warning while locking a charting note should not be shown */
  dismissed_lock_charting_note_warning?: Maybe<Scalars['Boolean']>;
  /** If true, do not show fullscript box in provider homepage */
  dismissed_products_tab?: Maybe<Scalars['Boolean']>;
  /** The Brand that controls the look of the website for the user */
  displayed_brand?: Maybe<Brand>;
  /** date of birth of user */
  dob?: Maybe<Scalars['String']>;
  /** An ID used for document, course, and conversation sharing */
  doc_share_id?: Maybe<Scalars['String']>;
  /** Number of notifications from Dosespot (e-prescriptions) */
  dosespot_notification_count?: Maybe<Scalars['Int']>;
  /** The email of this user */
  email?: Maybe<Scalars['String']>;
  /** The erx dosespot role */
  erx_dosespot_role?: Maybe<Scalars['String']>;
  /** Amount of money waiting to be paid out, as a float */
  estimated_future_payouts?: Maybe<Scalars['Float']>;
  /** Patient cards that have expired (requires can_see_billing for org level patients) */
  expired_client_cards_count?: Maybe<Scalars['Int']>;
  /** Patient cards that will expire by next recurring payment (requires can_see_billing for org level patients) */
  expiring_client_cards_count?: Maybe<Scalars['Int']>;
  /** Family history conditions for user */
  family_history_conditions?: Maybe<Array<FamilyHistoryCondition>>;
  /** Fax line request data */
  fax_line_request?: Maybe<FaxLineRequest>;
  /** Fax number belonging to the user */
  fax_number?: Maybe<Scalars['String']>;
  /** Feature Toggle of the user */
  feature_toggle?: Maybe<FeatureToggle>;
  /** Date of the first client entry */
  first_client_entry_date?: Maybe<Scalars['String']>;
  /** The first name of this user */
  first_name?: Maybe<Scalars['String']>;
  /** The first name and last initial of the user */
  first_name_last_initial?: Maybe<Scalars['String']>;
  /** Fitbit for the user */
  fitbit?: Maybe<Fitbit>;
  /** The number of food entries the user has */
  food_entries_count?: Maybe<Scalars['String']>;
  /** All filled out forms for this user */
  form_answer_groups?: Maybe<Array<FormAnswerGroup>>;
  /** Formatted string of money waiting to be paid out, including currency symbol */
  formatted_estimated_future_payouts?: Maybe<Scalars['String']>;
  /** The full legal name of this user */
  full_legal_name?: Maybe<Scalars['String']>;
  /**
   * The full legal name of this user with preferred name in parentheticals i.e(Jonathan (Wizkid) Jones)
   *
   */
  full_legal_name_with_preferred?: Maybe<Scalars['String']>;
  /** The full name of the user */
  full_name?: Maybe<Scalars['String']>;
  /** Fullscript for the user */
  fullscript?: Maybe<Fullscript>;
  /** Practitioner id for the user's Fullscript account */
  fullscript_practitioner_id?: Maybe<Scalars['String']>;
  /** gender of user */
  gender?: Maybe<Scalars['String']>;
  /** Gender identity of user (typically nil unless gender field is 'Other') */
  gender_identity?: Maybe<Scalars['String']>;
  /** User gender identity code */
  gender_identity_code?: Maybe<Scalars['String']>;
  /** id of generated reports folder */
  generated_reports_folder_id?: Maybe<Scalars['String']>;
  /** The Number of goals the user has */
  goals_count?: Maybe<Scalars['String']>;
  /** The Google Calendar Account for this user */
  google_calendar?: Maybe<ExternalCalendar>;
  /** Google Fit for the user */
  google_fit?: Maybe<GoogleFit>;
  /** The name of the patients user group */
  group_name?: Maybe<Scalars['String']>;
  /** When true, the user can see client portal setting in notification contact form */
  has_access_to_client_portal_setting_in_notification_contact?: Maybe<Scalars['Boolean']>;
  /** When true, the user can see insurance billing automation features */
  has_access_to_insurance_billing_automation?: Maybe<Scalars['Boolean']>;
  /** When true, the user can see the connect button to sign up on dosespot on the settings integrations section */
  has_access_to_sign_up_on_dosespot?: Maybe<Scalars['Boolean']>;
  /**
   * When true, the user can see the zus megazap component
   * @deprecated Megazap is now enabled by default, so this is always true
   */
  has_access_to_zus_megazap_component?: Maybe<Scalars['Boolean']>;
  /** If true, the user's account can take ACH payments */
  has_ach?: Maybe<Scalars['Boolean']>;
  /** If true, user has at least one entry type to track */
  has_any_entry_types?: Maybe<Scalars['Boolean']>;
  /** If the user's organization has API access */
  has_api_access?: Maybe<Scalars['Boolean']>;
  /** If true, the user has access to download the mobile app */
  has_available_mobile_app?: Maybe<Scalars['Boolean']>;
  /** If true, the user has bookable appts */
  has_bookable_appts?: Maybe<Scalars['Boolean']>;
  /** If true, the user has bookable packages */
  has_bookable_packages?: Maybe<Scalars['Boolean']>;
  /** True if the user has change health connection */
  has_change_health?: Maybe<Scalars['Boolean']>;
  /** If true, the user has complted their intake forms */
  has_completed_intake_forms?: Maybe<Scalars['Boolean']>;
  /** If courses exist for an organization or provider */
  has_courses?: Maybe<Scalars['Boolean']>;
  /** If true, the user has created a password */
  has_created_password?: Maybe<Scalars['Boolean']>;
  /** Allow the user to change the color of their calendar */
  has_custom_color_schemes?: Maybe<Scalars['Boolean']>;
  /** Check if user has any custom food item */
  has_custom_food?: Maybe<Scalars['Boolean']>;
  /** Check if user has any created meals */
  has_custom_meals?: Maybe<Scalars['Boolean']>;
  /** When true, the user can set scheduling priority levels for providers */
  has_custom_scheduling_prioritization?: Maybe<Scalars['Boolean']>;
  /** When true, the user can have custom text for SMS reminders for specific appointment types */
  has_custom_text_reminders?: Maybe<Scalars['Boolean']>;
  /** If the user is marked as a developer and can modify webhooks and api keys. */
  has_developer_access?: Maybe<Scalars['Boolean']>;
  /** If true, user is a provider with a dosespot account linked */
  has_dosespot?: Maybe<Scalars['Boolean']>;
  /** If True, the user has enterprise plan */
  has_enterprise_plan?: Maybe<Scalars['Boolean']>;
  /** True if the user can add external videochat URLs */
  has_external_videochat_urls?: Maybe<Scalars['Boolean']>;
  /** If true, the user has connected their Fullscript account to Healthie */
  has_fullscript?: Maybe<Scalars['Boolean']>;
  /** If true, the user have available appointment slots in future */
  has_future_availabilities?: Maybe<Scalars['Boolean']>;
  /** True if the user has access to goal title links */
  has_goal_title_links?: Maybe<Scalars['Boolean']>;
  /** Can the user receive inbound faxes? */
  has_inbound_faxing?: Maybe<Scalars['Boolean']>;
  /** Allow this user to access increased branding */
  has_increased_branding?: Maybe<Scalars['Boolean']>;
  /** Insurance Pay checks to see if there IS an insurance policy for the client */
  has_insurance_pay?: Maybe<Scalars['Boolean']>;
  /** If true, patient's most recent demographic information(phone, dob, location, gender, name) could not be updated in dosespot because information is invalid */
  has_invalid_dosespot_info?: Maybe<Scalars['Boolean']>;
  /** True if the user has any lab orders */
  has_lab_orders?: Maybe<Scalars['Boolean']>;
  /** Whether users has a lab order from lab_testing_api */
  has_lab_testing_api_orders?: Maybe<Scalars['Boolean']>;
  /** If true, user is a provider with a living plate linked */
  has_living_plate?: Maybe<Scalars['Boolean']>;
  /** When true, the user can have a custom email sent out when an appointment is marked as no-show */
  has_marked_as_no_show_email?: Maybe<Scalars['Boolean']>;
  /** When true, the user can have a custom email sent out when an appointment is marked as rescheduled */
  has_marked_as_rescheduled_email?: Maybe<Scalars['Boolean']>;
  /** True if user is able to see conversations of all organization members */
  has_org_chat_access?: Maybe<Scalars['Boolean']>;
  /** Check to see if the user has any other active org members */
  has_other_org_members?: Maybe<Scalars['Boolean']>;
  /** When true, the user has their own appointment setting */
  has_own_appointment_setting?: Maybe<Scalars['Boolean']>;
  /** When true, the user has their own custom emails */
  has_own_custom_emails?: Maybe<Scalars['Boolean']>;
  /** When true, the provider can control settings around allow rescheduling past appointments. */
  has_past_rescheduling_settings?: Maybe<Scalars['Boolean']>;
  /** True if the user has PP features */
  has_practice_plus?: Maybe<Scalars['Boolean']>;
  /** Has had payment in the last 30 days */
  has_recent_payments?: Maybe<Scalars['Boolean']>;
  /** True if the user has rupa connection */
  has_rupa_health?: Maybe<Scalars['Boolean']>;
  /** Self Pay checks to see if there is NOT an insurance policy for the client */
  has_self_pay?: Maybe<Scalars['Boolean']>;
  /** If true, user has shared appointment settings with at least one memember in org */
  has_shared_appt_setting_with_org?: Maybe<Scalars['Boolean']>;
  /** If the provider controls settings around enforcing state licensing restrictions for appointments */
  has_state_licensing_restrictions?: Maybe<Scalars['Boolean']>;
  /** If true, suborganization owner has stripe account from the parent organization owner */
  has_stripe_id_from_parent_org?: Maybe<Scalars['Boolean']>;
  /** Whether the user has a synced calendar */
  has_synced_cal?: Maybe<Scalars['Boolean']>;
  /** When true, the user can set appointment settings for specific appointment types */
  has_type_specific_appointment_settings?: Maybe<Scalars['Boolean']>;
  /** Check to see if the user has any user groups */
  has_user_groups?: Maybe<Scalars['Boolean']>;
  /** Check to see if the user can switch to another user */
  has_user_switch_options?: Maybe<Scalars['Boolean']>;
  /** True if the user is allowed to use Zoom */
  has_zoom_access?: Maybe<Scalars['Boolean']>;
  /** Heads Up Health SSO link for user; always returns nil if Heads Up Health add-on is not enabled */
  heads_up_health_sso_link?: Maybe<Scalars['String']>;
  /** height of user */
  height?: Maybe<Scalars['Float']>;
  /** Displays height percentile for growth charts */
  height_percentile?: Maybe<Scalars['String']>;
  /** Displays standard by which height percentile is calculated */
  height_percentile_standard?: Maybe<Scalars['String']>;
  /** String of height including units */
  height_str?: Maybe<Scalars['String']>;
  /** Hash for Help Scout */
  helpscout_hash?: Maybe<Scalars['String']>;
  /** ID of the human */
  human_id?: Maybe<Scalars['ID']>;
  /** The unique identifier of the user */
  id: Scalars['ID'];
  /** A collection of immunizations for this client */
  immunizations?: Maybe<Array<Immunization>>;
  /** Implantable device users for the user */
  implantable_devices_users?: Maybe<Array<ImplantableDeviceUser>>;
  /** True if User organization with multiple providers */
  in_multiple_providers_org?: Maybe<Scalars['Boolean']>;
  /** If a user is in an org */
  in_org?: Maybe<Scalars['Boolean']>;
  /** Incomplete Tasks assigned to the user */
  incomplete_tasks?: Maybe<Array<Task>>;
  /** Insurance Authorization for this user */
  insurance_authorization?: Maybe<InsuranceAuthorizationType>;
  /** Hash for intercom */
  intercom_hash?: Maybe<Scalars['String']>;
  /** The invite code for the provider */
  invite_code?: Maybe<Scalars['String']>;
  /** Get filter string for user invoices */
  invoices_filter?: Maybe<Scalars['String']>;
  /** Check if the user is an active provider in an organization */
  is_active_provider?: Maybe<Scalars['Boolean']>;
  /** True if chat autoresponding is active */
  is_chat_autoresponding?: Maybe<Scalars['Boolean']>;
  /** boolean for if the user has ever logged in to Healthie as a provider */
  is_first_time_provider?: Maybe<Scalars['Boolean']>;
  /** If true, the user is in an organization */
  is_org?: Maybe<Scalars['Boolean']>;
  /** True if the user an organization admin */
  is_org_admin?: Maybe<Scalars['Boolean']>;
  /** If true, the user is in an organization with more than one user */
  is_org_with_multiple_users?: Maybe<Scalars['Boolean']>;
  /** the status of whether the user is the owner of their org or not */
  is_owner?: Maybe<Scalars['Boolean']>;
  /** the status of whether the user is a patient or not */
  is_patient?: Maybe<Scalars['Boolean']>;
  /** Whether a user is a super admin */
  is_super_admin?: Maybe<Scalars['Boolean']>;
  /** Whether the user is trialing */
  is_trialing?: Maybe<Scalars['String']>;
  /** If the user aware they switched providers on specific login (can only do for current user) */
  knows_about_provider?: Maybe<Scalars['Boolean']>;
  /** The client-side Kustomer API Key. (Only applies to specific custom whitelabels) */
  kustomer_api_key?: Maybe<Scalars['String']>;
  /** last date user was active through web or mobile */
  last_active?: Maybe<Scalars['String']>;
  /** last date the user was active */
  last_activity?: Maybe<Scalars['String']>;
  /** String of the last date the user was active */
  last_activity_string?: Maybe<Scalars['String']>;
  /** The User's last active appointment object */
  last_app?: Maybe<Appointment>;
  /** the last payment made by client */
  last_billing_item?: Maybe<BillingItem>;
  /** id of last conversation */
  last_conversation_id?: Maybe<Scalars['String']>;
  /** The last name of this user */
  last_name?: Maybe<Scalars['String']>;
  /** last date the user signed in */
  last_sign_in_at?: Maybe<Scalars['String']>;
  /** Last time allergy/sensitivity was updated */
  last_updated_allergy?: Maybe<AllergySensitivity>;
  /** The last weighing date of the user */
  last_weighing_date?: Maybe<Scalars['String']>;
  /** Link to most recent roadmap article on helpscout */
  latest_article_link?: Maybe<Scalars['String']>;
  /** Last product roadmap article number */
  latest_article_number?: Maybe<Scalars['Int']>;
  /** The legal first name of this user */
  legal_name?: Maybe<Scalars['String']>;
  /** license number of user */
  license_num?: Maybe<Scalars['String']>;
  /** Graphs to show in line graph form */
  line_graph_metric_categories?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A collections of users who are in relationship with this client */
  linked_relatives?: Maybe<Array<NotificationContact>>;
  /** Link automatically signs user into Living plate dashboard without entering login credentials */
  living_plate_magic_link?: Maybe<Scalars['String']>;
  /** The address of this user */
  location?: Maybe<Location>;
  /** All available locations for the client. */
  locations?: Maybe<Array<Location>>;
  /** Fetch count of medications for a given patient */
  medications_count?: Maybe<Scalars['Int']>;
  /** A serialized JSON string of metadata. Maximum character limit of 1024. */
  metadata?: Maybe<Scalars['String']>;
  /** The number of metric entries the user has */
  metric_entries_count?: Maybe<Scalars['String']>;
  /** The number of mirror entries the user has */
  mirror_entries_count?: Maybe<Scalars['String']>;
  /** The amount of money the user owes */
  money_owed?: Maybe<Scalars['String']>;
  /** The full name of the user */
  name?: Maybe<Scalars['String']>;
  /** The User's next upcoming active appointment object */
  next_app?: Maybe<Appointment>;
  /**
   * The User's next upcoming active appointment date (method)
   * @deprecated use next_appt_date instead
   */
  next_appointment?: Maybe<Scalars['String']>;
  /** The Users next upcoming active appointment date (field) */
  next_appt_date?: Maybe<Scalars['String']>;
  /** The next onboarding item that the user has to fill */
  next_onboarding_step?: Maybe<OnboardingItem>;
  /** Recurring payment with next upcoming payment date */
  next_recurring_payment?: Maybe<RecurringPayment>;
  /** The next step preventing the user from moving forward. nil if user has completed all steps */
  next_required_step?: Maybe<Scalars['String']>;
  /** If True, the user has non paid plan */
  non_paid?: Maybe<Scalars['Boolean']>;
  /** notification contacts for the user */
  notification_contacts?: Maybe<Array<NotificationContact>>;
  /** Notification Settings for the user */
  notification_setting?: Maybe<NotificationSetting>;
  /** NPI of the user */
  npi?: Maybe<Scalars['String']>;
  /** Number of entries for the client */
  num_entries?: Maybe<Scalars['String']>;
  /** All offering_coupons associated with this provider. */
  offering_coupons?: Maybe<Array<OfferingCoupon>>;
  /** All available offerings for the provider. */
  offerings: Array<Offering>;
  /** User onc gender identity */
  onc_gender_identity?: Maybe<Scalars['String']>;
  /** The number open payments for the user */
  open_payments_count?: Maybe<Scalars['Int']>;
  /** Returns name of the org if exists, otherwise returns full name */
  org_name_or_self_name?: Maybe<Scalars['String']>;
  /** The user of the organization token */
  organization?: Maybe<Organization>;
  /** The organization membership of the user */
  organization_membership?: Maybe<OrganizationMembership>;
  /** Single Other ID number for the user */
  other_id_number?: Maybe<OtherIdNumber>;
  /** All other id numbers for this user */
  other_id_numbers?: Maybe<Array<OtherIdNumber>>;
  /** Other organization members. */
  other_org_members: Array<User>;
  /** Other organization members for sharing */
  other_org_members_for_sharing: Array<User>;
  /** The IDs of other care team members for the client */
  other_provider_ids?: Maybe<Array<Maybe<Scalars['ID']>>>;
  /** The Outlook Calendar Account for this user */
  outlook?: Maybe<ExternalCalendar>;
  /** Status paid for fax */
  paid_for_fax_status?: Maybe<Scalars['String']>;
  /** boolean for If a user is a part of the journify organization */
  part_of_journify?: Maybe<Scalars['Boolean']>;
  /** All patients associated with this user. */
  patients: Array<User>;
  /** The number of patients belonging to the user */
  patients_count?: Maybe<Scalars['Int']>;
  /** the number of notifications belonging to a patient */
  patients_notification_count?: Maybe<Scalars['Int']>;
  /** All patients with a credit card on file associated with this user. */
  patients_with_cc: Array<User>;
  /** When true, the user will never be prompted to change their timezone */
  permanently_disable_tz_prompt?: Maybe<Scalars['Boolean']>;
  /** The phone number of the user */
  phone_number?: Maybe<Scalars['String']>;
  /** Place of service for this user */
  place_of_service?: Maybe<PlaceOfService>;
  /** All policies associated with this user */
  policies?: Maybe<Array<Policy>>;
  /** All policies associated with this user */
  policiesOrderAscending?: Maybe<Array<Policy>>;
  /** Preferred language based on language code */
  preferred_language?: Maybe<Scalars['String']>;
  /** User preferred language code */
  preferred_language_code?: Maybe<Scalars['String']>;
  /** Fetch count of prescriptions for a given patient pulled from Dosespot */
  prescriptions_count?: Maybe<Scalars['Int']>;
  /** Displays administrator account as other user account */
  pretend_to_be?: Maybe<Scalars['String']>;
  /** The primary ethnicity value based on ethnicity code */
  primary_ethnicity?: Maybe<Scalars['String']>;
  /** User primary ethnicity code */
  primary_ethnicity_code?: Maybe<Scalars['String']>;
  /** User primary race */
  primary_race?: Maybe<Scalars['String']>;
  /** User primary race code */
  primary_race_code?: Maybe<Scalars['String']>;
  /** Professions of the user */
  professions?: Maybe<Array<Profession>>;
  /** Pronouns that the client identifies with */
  pronouns?: Maybe<Scalars['String']>;
  /** Provider appointment locations */
  provider_appointment_locations?: Maybe<Array<ProviderAppointmentLocation>>;
  /** All providers associated with the client */
  providers?: Maybe<Array<User>>;
  /** Meal Plans from Living Plate */
  purchased_meal_plans?: Maybe<Array<MealPlan>>;
  /** qualifications of the user */
  qualifications?: Maybe<Scalars['String']>;
  /** quicks notes for a given user */
  quick_notes?: Maybe<Scalars['String']>;
  /** All reactivation custom emails associated with this user. */
  reactivation_emails?: Maybe<Array<CustomEmail>>;
  /** unique record identifier for user */
  record_identifier?: Maybe<Scalars['String']>;
  /** referrals for the user */
  referrals?: Maybe<Array<Referral>>;
  /** An array of referring physicians associated to all referrals associated with a client */
  referring_physicians?: Maybe<Array<ReferringPhysician>>;
  /** NPI of the referring provider */
  referring_provider_id?: Maybe<Scalars['String']>;
  /** Name of the referring provider */
  referring_provider_name?: Maybe<Scalars['String']>;
  /** NPI of the referring provider */
  referring_provider_npi?: Maybe<Scalars['String']>;
  /** The date range filter selections for each report */
  reports_date_filter_selection?: Maybe<ReportsDateFilterSelection>;
  /** The number of forms that have been requested for the user */
  requested_form_count?: Maybe<Scalars['Int']>;
  /** If true, the user is a patient with required fields to create dosespot patient. If false, then either the provider doesn't have a linked dosespot account, or the patient has all required fields. */
  required_dosespot_fields?: Maybe<Scalars['String']>;
  /** User subscription has been inactive and needs to be reactivated before allowing acccess */
  requires_reactivation?: Maybe<Scalars['Boolean']>;
  /** User subscription has been inactive for 91+ days and should receive 7 day trial upon reactivation */
  requires_shortened_trial?: Maybe<Scalars['Boolean']>;
  /** Patient ID on the rupa health */
  rupa_patient_id?: Maybe<Scalars['String']>;
  /** Providers with higher priority will be chosen first when availability is generated for self-scheduling. Defaults to 0 */
  scheduling_priority?: Maybe<Scalars['String']>;
  /** The secondary ethnicity value based on ethnicity code */
  secondary_ethnicity?: Maybe<Scalars['String']>;
  /** User secondary ethnicity code */
  secondary_ethnicity_code?: Maybe<Scalars['String']>;
  /** User secondary race */
  secondary_race?: Maybe<Scalars['String']>;
  /** User secondary race code */
  secondary_race_code?: Maybe<Scalars['String']>;
  /** True if user is up to date with all product roadmap articles */
  seen_last_article?: Maybe<Scalars['Boolean']>;
  /** A link that takes a user to set their password. This will return null if the user has set a password, or the authenticated user is not an admin */
  set_password_link?: Maybe<Scalars['String']>;
  /** Sex of the user (Stated on ID card for insurance purposes) */
  sex?: Maybe<Scalars['String']>;
  /** Sexual orientation of the user */
  sexual_orientation?: Maybe<Scalars['String']>;
  /** The sexual orientation code of the user, corresponds to sexual orientation */
  sexual_orientation_code?: Maybe<Scalars['String']>;
  /** The sexual orientation value if other */
  sexual_orientation_other?: Maybe<Scalars['String']>;
  /** Shapa Connection for the user */
  shapa_connection?: Maybe<ShapaConnection>;
  /** An ID that includes the shard the user is on. Matches ID unless user is on a custom shard */
  shard_aware_id: Scalars['ID'];
  /** Show appointments tab on the sidebar */
  show_appointments_tab?: Maybe<Scalars['Boolean']>;
  /** Show "Billing Dropdown" on patient sidebar */
  show_billing_dropdown_item?: Maybe<Scalars['Boolean']>;
  /** Show billing tab on the sidebar */
  show_billing_tab?: Maybe<Scalars['Boolean']>;
  /** Show brand link in the header */
  show_brand_tab?: Maybe<Scalars['Boolean']>;
  /** Allow this user to view care plan (Linked accounts) */
  show_care_plan_area?: Maybe<Scalars['Boolean']>;
  /** Show chat tab on the sidebar */
  show_chat_tab?: Maybe<Scalars['Boolean']>;
  /** If to show the client credits in the UI */
  show_client_appointment_credits?: Maybe<Scalars['Boolean']>;
  /** Show Cms1500s tab on the sidebar */
  show_cms1500s_tab?: Maybe<Scalars['Boolean']>;
  /** Show the option to view the dashboard */
  show_dashboard?: Maybe<Scalars['Boolean']>;
  /** Show documents tab on the sidebar */
  show_documents_tab?: Maybe<Scalars['Boolean']>;
  /** Show education tab on the sidebar */
  show_education_tab?: Maybe<Scalars['Boolean']>;
  /** Display DOB next to the name of the client */
  show_expanded_label?: Maybe<Scalars['Boolean']>;
  /** Show forms tab on the sidebar */
  show_forms_tab?: Maybe<Scalars['Boolean']>;
  /** Allow this user to view goals (Linked accounts) */
  show_goals_area?: Maybe<Scalars['Boolean']>;
  /** If true, user will be able to view Grow settings page */
  show_grow?: Maybe<Scalars['Boolean']>;
  /** Show "Integrations" option in gear menu */
  show_integrations_dropdown_item?: Maybe<Scalars['Boolean']>;
  /** Allow this user to view journal entries (Linked accounts) */
  show_journal_entries_area?: Maybe<Scalars['Boolean']>;
  /** Show the organization tab on sidebar */
  show_org_tab?: Maybe<Scalars['Boolean']>;
  /** Show packages tab on the sidebar */
  show_packages_tab?: Maybe<Scalars['Boolean']>;
  /** Show "Update Payment Methods" option in gear menu */
  show_payment_methods_dropdown_item?: Maybe<Scalars['Boolean']>;
  /** Show payments tab on the sidebar */
  show_payments_tab?: Maybe<Scalars['Boolean']>;
  /** Show received fax tab on the sidebar */
  show_received_fax_tab?: Maybe<Scalars['Boolean']>;
  /** Show scheduled tab on the chat page */
  show_scheduled_chat_tab?: Maybe<Scalars['Boolean']>;
  /** Show sent fax tab on the sidebar */
  show_sent_fax_tab?: Maybe<Scalars['Boolean']>;
  /** Show subscription link in the settings dropdown */
  show_subscription_link?: Maybe<Scalars['Boolean']>;
  /** If a user has seen the message blast alert */
  show_superbill_org_select?: Maybe<Scalars['Boolean']>;
  /** Show Superbill tab on the sidebar */
  show_superbills_tab?: Maybe<Scalars['Boolean']>;
  /** The total number of sidebar notifications to be displayed for the user */
  sidebar_notification_count?: Maybe<Scalars['Int']>;
  /** True if the user skipped adding a bank account */
  skipped_bank_account?: Maybe<Scalars['Boolean']>;
  /** The status of whether the user has a real email or not */
  skipped_email?: Maybe<Scalars['Boolean']>;
  /** Specialties of the user */
  specialties?: Maybe<Array<Specialty>>;
  /** The SSN of the user */
  ssn?: Maybe<Scalars['String']>;
  /** Returns a user state licenses */
  state_licenses?: Maybe<Array<StateLicense>>;
  /** Stripe Info of the client */
  stripe_customer_detail?: Maybe<StripeCustomerDetail>;
  /** Stripe credit cards of the client */
  stripe_customer_details?: Maybe<Array<StripeCustomerDetail>>;
  /** The stripe id of the user (Used to look up bank account details for provider) */
  stripe_id?: Maybe<Scalars['String']>;
  /** ID of account representative in Stripe */
  stripe_person_id?: Maybe<Scalars['String']>;
  /** Returns the subscription for this user */
  subscription?: Maybe<SubscriptionInstance>;
  /** Address to use on super bills */
  super_bill_address?: Maybe<Scalars['String']>;
  /** Providers location to use on super bills */
  super_bill_location?: Maybe<Location>;
  /** Patient location to use on super bills */
  super_bill_patient_location?: Maybe<Location>;
  /** Provider's phone number to use on super bills */
  super_bill_phone_number?: Maybe<Scalars['String']>;
  /** Other users this account can switch to */
  switchable_users?: Maybe<Array<User>>;
  /** Number of other users this account can switch to */
  switchable_users_count?: Maybe<Scalars['Int']>;
  /** Number of tasks */
  tasks_count?: Maybe<Scalars['Int']>;
  /** tax id of user */
  tax_id?: Maybe<Scalars['String']>;
  /** The user's timezone */
  timezone?: Maybe<Scalars['String']>;
  /** Access token */
  token?: Maybe<Scalars['String']>;
  /** Total active packages credits */
  total_active_packages_with_credits?: Maybe<Scalars['Int']>;
  /** Total clients with appointment credits greater than 0 */
  total_clients_with_appt_type_credits?: Maybe<Scalars['Int']>;
  /** Total count of the user lab orders objects */
  total_lab_orders?: Maybe<Scalars['Int']>;
  /** The authenticated human if an account is masked */
  true_human_id?: Maybe<Scalars['String']>;
  /** The number unconfirmed appointments for the user */
  unconfirmed_appointment_count?: Maybe<Scalars['Int']>;
  /** The number of unseen conversations for the user */
  unread_convo_count?: Maybe<Scalars['Int']>;
  /** The number of unscheduled lab orders */
  unscheduled_lab_orders_count?: Maybe<Scalars['Int']>;
  /** The number of unseen appointment notfications */
  unseen_appt_notification_count?: Maybe<Scalars['Int']>;
  /** The number of unseen comment notfications */
  unseen_comment_notification_count?: Maybe<Scalars['Int']>;
  /** The number of unseen document notfications */
  unseen_document_notification_count?: Maybe<Scalars['Int']>;
  /** The number of unseen entry notfications */
  unseen_entry_notification_count?: Maybe<Scalars['Int']>;
  /** The number of unseen goal notfications */
  unseen_goal_notification_count?: Maybe<Scalars['Int']>;
  /** The number of unseen note notfications */
  unseen_note_notification_count?: Maybe<Scalars['Int']>;
  /**
   * The number of unseen notifications for the user (mobile only)
   * @deprecated use unseen_notifications_count_mobile
   */
  unseen_notification_count?: Maybe<Scalars['Int']>;
  /** The number of unseen notifications for the user (web only) */
  unseen_notifications_count?: Maybe<Scalars['Int']>;
  /** The number of unseen notifications for the user (this field only used by mobile) [identical to :unseen_notification_count] */
  unseen_notifications_count_mobile?: Maybe<Scalars['Int']>;
  /** The number of unseen payment notfications */
  unseen_payment_notification_count?: Maybe<Scalars['Int']>;
  /** Number of unseen bounced notification records */
  unseen_sent_notification_records_count?: Maybe<Scalars['Int']>;
  /** All active upcoming appointments of the user */
  upcoming_appointments?: Maybe<Array<Appointment>>;
  /** All active upcoming payments of the user */
  upcoming_payments?: Maybe<Array<RecurringPayment>>;
  /** Date user was last updated */
  updated_at?: Maybe<Scalars['String']>;
  /** File name of uploaded avatar image */
  uploaded_avatar_file_name?: Maybe<Scalars['String']>;
  /** User Group of this user */
  user_group?: Maybe<UserGroup>;
  /** The ID of the patient's user group */
  user_group_id?: Maybe<Scalars['String']>;
  /** All user groups associated with this provider. */
  user_groups: Array<UserGroup>;
  /** A number of user groups associated with this provider. */
  user_groups_count: Scalars['Int'];
  /** User of who sent this member an invite */
  user_who_invited_member?: Maybe<User>;
  /** Verification fields left for the provider to fill out */
  verification_fields?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The last weight of the user */
  weight?: Maybe<Scalars['String']>;
  /** Displays weight percentile for growth charts */
  weight_percentile?: Maybe<Scalars['String']>;
  /** Displays standard by which weight percentile is calculated */
  weight_percentile_standard?: Maybe<Scalars['String']>;
  /** Withings Connection for the user */
  withings_connection?: Maybe<WithingsConnection>;
  /** The number of workout entries the user has */
  workout_entries_count?: Maybe<Scalars['String']>;
  /** If user has Zus, returns Zus proxy token */
  zus_proxy_token?: Maybe<Scalars['String']>;
};


/** An user entry, returns basic user information */
export type UserActive_PatientsArgs = {
  course_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserActive_Patients_CountArgs = {
  course_id?: InputMaybe<Scalars['ID']>;
};


/** An user entry, returns basic user information */
export type UserAllergy_SensitivitiesArgs = {
  category?: InputMaybe<Scalars['String']>;
  is_current?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserAllow_Community_ChatArgs = {
  all_patients?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserAllow_Direct_ChatArgs = {
  all_patients?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserAnnouncementsArgs = {
  exclude_dismissed?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserAppointment_Type_CreditsArgs = {
  appointment_type_id?: InputMaybe<Scalars['ID']>;
};


/** An user entry, returns basic user information */
export type UserAppointment_TypesArgs = {
  appointment_type_ids?: InputMaybe<Scalars['String']>;
  require_client_bookable?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserAssigned_TasksArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  show_hidden?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserBrandArgs = {
  is_for_editing?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserCompleted_TasksArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  show_hidden?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserHas_Future_AvailabilitiesArgs = {
  offering_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};


/** An user entry, returns basic user information */
export type UserIn_OrgArgs = {
  known_to_be_in_org?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserIncomplete_TasksArgs = {
  limit?: InputMaybe<Scalars['Int']>;
  show_hidden?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserIs_PatientArgs = {
  already_known_value?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserLast_Updated_AllergyArgs = {
  category?: InputMaybe<Scalars['String']>;
};


/** An user entry, returns basic user information */
export type UserMedications_CountArgs = {
  active?: InputMaybe<Scalars['Boolean']>;
  patient_id?: InputMaybe<Scalars['ID']>;
};


/** An user entry, returns basic user information */
export type UserOther_Id_NumberArgs = {
  cms1500_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
  is_last_cms1500?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserOther_Org_MembersArgs = {
  only_active?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserPatientsArgs = {
  client_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  only_active?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserPatients_Notification_CountArgs = {
  excluded_types?: InputMaybe<Scalars['String']>;
};


/** An user entry, returns basic user information */
export type UserPrescriptions_CountArgs = {
  patient_id?: InputMaybe<Scalars['ID']>;
  status?: InputMaybe<Scalars['String']>;
};


/** An user entry, returns basic user information */
export type UserProvidersArgs = {
  can_be_scheduled_with?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserTasks_CountArgs = {
  only_created_by_others?: InputMaybe<Scalars['Boolean']>;
  show_hidden?: InputMaybe<Scalars['Boolean']>;
  type?: InputMaybe<Scalars['String']>;
};


/** An user entry, returns basic user information */
export type UserUnconfirmed_Appointment_CountArgs = {
  unconfirmed_by_clients?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserUser_GroupsArgs = {
  check_group_level_actions?: InputMaybe<Scalars['Boolean']>;
  course_id?: InputMaybe<Scalars['ID']>;
  keywords?: InputMaybe<Scalars['String']>;
  offset?: InputMaybe<Scalars['Int']>;
  should_paginate?: InputMaybe<Scalars['Boolean']>;
};


/** An user entry, returns basic user information */
export type UserUser_Groups_CountArgs = {
  check_group_level_actions?: InputMaybe<Scalars['Boolean']>;
  course_id?: InputMaybe<Scalars['ID']>;
};

/** A user group, returns basic info about the user group */
export type UserGroup = {
  __typename?: 'UserGroup';
  /** The date the user group was created */
  created_at: Scalars['String'];
  /** An ID used for document, course, and conversation sharing */
  doc_share_id?: Maybe<Scalars['String']>;
  /** The unique identifier of the user group */
  id: Scalars['ID'];
  /** The invite code */
  invite_code?: Maybe<Scalars['String']>;
  /** The name of the user group */
  name?: Maybe<Scalars['String']>;
  /** Onboarding Flow of this user group */
  onboarding_flow?: Maybe<OnboardingFlow>;
  /** The id of the associated onboarding flow */
  onboarding_flow_id?: Maybe<Scalars['String']>;
  /** Recurring Form Names for this user group */
  recurring_forms?: Maybe<Array<RecurringForm>>;
  /** Recurring Forms Count for this user group */
  recurring_forms_count?: Maybe<Scalars['Int']>;
  /** Owner of this user group */
  user?: Maybe<User>;
  /** ids of user in group */
  user_ids?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** All patients associated with this user group. */
  users: Array<User>;
  /** The number of users in the group */
  users_count?: Maybe<Scalars['Int']>;
  /** Users in user group with course membership */
  users_with_membership?: Maybe<Array<User>>;
};


/** A user group, returns basic info about the user group */
export type UserGroupUsersArgs = {
  active_status?: InputMaybe<Scalars['String']>;
  convo_id?: InputMaybe<Scalars['ID']>;
  should_sort?: InputMaybe<Scalars['Boolean']>;
};

/** UserGroup sorting enum */
export enum UserGroupOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  InviteCodeAsc = 'INVITE_CODE_ASC',
  InviteCodeDesc = 'INVITE_CODE_DESC',
  NameAsc = 'NAME_ASC',
  NameDesc = 'NAME_DESC',
  UsersCountAsc = 'USERS_COUNT_ASC',
  UsersCountDesc = 'USERS_COUNT_DESC'
}

/** Counts of different types of notifications for a user */
export type UserNotificationsCount = {
  __typename?: 'UserNotificationsCount';
  /** The number of unread conversation notifications */
  conversation_notification_count?: Maybe<Scalars['Int']>;
  /** The unique identifier of the counter */
  id?: Maybe<Scalars['ID']>;
  /** The number of unscheduled lab orders */
  unscheduled_lab_orders_count?: Maybe<Scalars['Int']>;
};

/** User sorting enum */
export enum UserOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  EmailAsc = 'EMAIL_ASC',
  EmailDesc = 'EMAIL_DESC',
  FirstNameAsc = 'FIRST_NAME_ASC',
  FirstNameDesc = 'FIRST_NAME_DESC',
  GroupNameAsc = 'GROUP_NAME_ASC',
  GroupNameDesc = 'GROUP_NAME_DESC',
  LastNameAsc = 'LAST_NAME_ASC',
  LastNameDesc = 'LAST_NAME_DESC',
  NextApptDateAsc = 'NEXT_APPT_DATE_ASC',
  NextApptDateDesc = 'NEXT_APPT_DATE_DESC',
  ProviderNameAsc = 'PROVIDER_NAME_ASC',
  ProviderNameDesc = 'PROVIDER_NAME_DESC',
  UpdatedAtAsc = 'UPDATED_AT_ASC',
  UpdatedAtDesc = 'UPDATED_AT_DESC'
}

/** A user package selection */
export type UserPackageSelection = {
  __typename?: 'UserPackageSelection';
  /** The related billing item */
  billing_item?: Maybe<BillingItem>;
  /** The id of the related billing item */
  billing_item_id?: Maybe<Scalars['ID']>;
  /** The time when the user package selection was created */
  created_at: Scalars['String'];
  /** Pagination cursor */
  cursor: Scalars['Cursor'];
  /** The unique identifier of the user package selection */
  id: Scalars['ID'];
  /** The amount of the first payment for a package, including promo discounts */
  initial_price_with_offering_coupon?: Maybe<Scalars['String']>;
  /** The related offering */
  offering?: Maybe<Offering>;
  /** The id of the related offering coupon */
  offering_coupon_id?: Maybe<Scalars['ID']>;
  /** The related recurring payment */
  recurring_payment?: Maybe<RecurringPayment>;
  /** The related requested payment */
  requested_payment?: Maybe<RequestedPayment>;
  /** The id of the related requested payment */
  requested_payment_id?: Maybe<Scalars['ID']>;
  /** The related user */
  user?: Maybe<User>;
};

/** Payload for a user policy */
export type UserPolicyInput = {
  /** If true, the policy will be deleted */
  _destroy?: InputMaybe<Scalars['Boolean']>;
  /** The group number */
  group_num?: InputMaybe<Scalars['String']>;
  /** The date of birth of the policy holder */
  holder_dob?: InputMaybe<Scalars['String']>;
  /** The first name of the policy holder */
  holder_first?: InputMaybe<Scalars['String']>;
  /** The gender of the policy holder */
  holder_gender?: InputMaybe<Scalars['String']>;
  /** The last name of the policy holder */
  holder_last?: InputMaybe<Scalars['String']>;
  /** The location of the policy holder */
  holder_location?: InputMaybe<ClientLocationInput>;
  /** The middle initial of the policy holder */
  holder_mi?: InputMaybe<Scalars['String']>;
  /** The phone number of the policy holder */
  holder_phone?: InputMaybe<Scalars['String']>;
  /** The relationship of the policy holder to the client */
  holder_relationship?: InputMaybe<Scalars['String']>;
  /** The ID of the policy */
  id?: InputMaybe<Scalars['ID']>;
  /** The back of the insurance card */
  insurance_card_back?: InputMaybe<Scalars['Upload']>;
  /** The ID of the back of the insurance card */
  insurance_card_back_id?: InputMaybe<Scalars['String']>;
  /** The front of the insurance card */
  insurance_card_front?: InputMaybe<Scalars['Upload']>;
  /** The ID of the front of the insurance card */
  insurance_card_front_id?: InputMaybe<Scalars['String']>;
  /** The insurance plan */
  insurance_plan?: InputMaybe<ClientInsurancePlanInput>;
  /** The ID of the insurance plan */
  insurance_plan_id?: InputMaybe<Scalars['String']>;
  /** The name of the policy */
  name?: InputMaybe<Scalars['String']>;
  /** The policy number */
  num?: InputMaybe<Scalars['String']>;
  /** Either ID of related intake flow item which this policy was created for. Usually it is Insurance Form. Email notification will be triggered if this field is passed */
  onboarding_item_id?: InputMaybe<Scalars['ID']>;
  /** The location of the payer */
  payer_location?: InputMaybe<ClientLocationInput>;
  /** The policy-related phone number */
  policy_phone_number?: InputMaybe<Scalars['String']>;
  /** The priority type of the policy */
  priority_type?: InputMaybe<Scalars['String']>;
  /** Whether the policy holder has the same address as the client */
  same_address_as_client?: InputMaybe<Scalars['Boolean']>;
  /** The type of the policy */
  type_string?: InputMaybe<Scalars['String']>;
  /** The ID of the user */
  user_id?: InputMaybe<Scalars['String']>;
};

/** Information based on if an offering coupon is valid */
export type ValidateOfferingCoupon = {
  __typename?: 'ValidateOfferingCoupon';
  /** The reason why the promo code was not successfully applied */
  fail_reason?: Maybe<Scalars['String']>;
  /** Discount amount for first payment */
  first_amount?: Maybe<Scalars['String']>;
  /** The size of the discount with the promo code applied to the first payment (in case offering has a different first payment amount) */
  new_first_price?: Maybe<Scalars['String']>;
  /** The new price with a promo code applied */
  new_price?: Maybe<Scalars['String']>;
  /** Indicates number of discount periods */
  repeat_times?: Maybe<Scalars['String']>;
  /** Indicates necessary of displaying CC form */
  still_ask_for_cc?: Maybe<Scalars['Boolean']>;
};

/** Video chat info for subscriptions */
export type VideoChat = {
  __typename?: 'VideoChat';
  /** The type of contact for the video chat */
  contact_type?: Maybe<Scalars['String']>;
  /** The date of the video chat */
  date?: Maybe<Scalars['ISO8601DateTime']>;
  /** The ID of the video chat */
  id: Scalars['ID'];
  /** Whether the video chat is a group chat */
  is_group?: Maybe<Scalars['Boolean']>;
  /** The name of the video chat provider */
  provider_name?: Maybe<Scalars['String']>;
  /** The user who created the video chat */
  user?: Maybe<User>;
};

/** Autogenerated return type of VideoChatsSubscription. */
export type VideoChatsSubscriptionPayload = {
  __typename?: 'VideoChatsSubscriptionPayload';
  /** Updates of the current chat */
  current_video_chat?: Maybe<VideoChat>;
  /** Information about an ended chat */
  ended_video_chat?: Maybe<VideoChat>;
  /** Information about an upcoming chat */
  upcoming_video_chat?: Maybe<VideoChat>;
};

/** A default video URL */
export type VideoUrlDefault = {
  __typename?: 'VideoUrlDefault';
  /** The default URL to use for anyone with the connected appointment setting */
  default_url: Scalars['String'];
  /** The unique identifier of the url */
  id: Scalars['ID'];
  /** The ID of the connected user */
  user_id: Scalars['ID'];
  /** The options for the connected video URL */
  video_url_options?: Maybe<Array<VideoUrlOption>>;
};

/** Payload for a new VideoUrlDefault */
export type VideoUrlDefaultInput = {
  /** The default url for the video url default */
  default_url?: InputMaybe<Scalars['String']>;
  /** The ID of the video url default */
  id?: InputMaybe<Scalars['ID']>;
  /** The ID of the user who owns the video url default */
  user_id?: InputMaybe<Scalars['ID']>;
  /** The video url options */
  video_url_options?: InputMaybe<Array<InputMaybe<VideoUrlOptionInput>>>;
};

/** A video URL option */
export type VideoUrlOption = {
  __typename?: 'VideoUrlOption';
  /** The unique identifier of the option */
  id: Scalars['ID'];
  /** The default URL to use for the connected provider */
  url?: Maybe<Scalars['String']>;
  /** The ID of the connected provider */
  url_by_item_id?: Maybe<Scalars['String']>;
};

/** Payload for a video url */
export type VideoUrlOptionInput = {
  /** The ID of the video url */
  id?: InputMaybe<Scalars['ID']>;
  /** The url of the video */
  url?: InputMaybe<Scalars['String']>;
  /** The url of the video by item id */
  url_by_item_id?: InputMaybe<Scalars['String']>;
};

/** Info about a visitor to the site */
export type Visitor = {
  __typename?: 'Visitor';
  /** Message from visitor */
  about_me?: Maybe<Scalars['String']>;
  /** Email of the visitor */
  email?: Maybe<Scalars['String']>;
  /** First name of visitor */
  first_name?: Maybe<Scalars['String']>;
  /** The unique identifier of the visitor */
  id: Scalars['ID'];
  /** Last name of visitor */
  last_name?: Maybe<Scalars['String']>;
  /** Phone number of visitor */
  phone_number?: Maybe<Scalars['String']>;
};

/** A configured webhook */
export type Webhook = {
  __typename?: 'Webhook';
  /** The type of webhook */
  event_type?: Maybe<Scalars['String']>;
  /** The unique identifier of the webhook */
  id: Scalars['ID'];
  /** Whether the webhook is enabled or not */
  is_enabled: Scalars['Boolean'];
  /** The URL that the webhook will be sent to */
  url?: Maybe<Scalars['String']>;
};

/** Webhook sorting enum */
export enum WebhookOrderKeys {
  CreatedAtAsc = 'CREATED_AT_ASC',
  CreatedAtDesc = 'CREATED_AT_DESC',
  EventTypeAsc = 'EVENT_TYPE_ASC',
  EventTypeDesc = 'EVENT_TYPE_DESC',
  UrlAsc = 'URL_ASC',
  UrlDesc = 'URL_DESC'
}

/** Info for Whitelabeling */
export type WhitelabelSetting = {
  __typename?: 'WhitelabelSetting';
  /** Amplitude API Key */
  amplitude_api_key?: Maybe<Scalars['String']>;
  /** URL of whitelabeled Android app */
  android_app_link?: Maybe<Scalars['String']>;
  /** The branded URL of the backend (used in certain whitelabel setups) */
  branded_backend_url?: Maybe<Scalars['String']>;
  /** Branded email of whitelabel */
  branded_email?: Maybe<Scalars['String']>;
  /** Branded favicon url of whitelabel */
  branded_favicon_url?: Maybe<Scalars['String']>;
  /** Branded logo url of whitelabel */
  branded_logo_url?: Maybe<Scalars['String']>;
  /** Branded name of whitelabel */
  branded_name?: Maybe<Scalars['String']>;
  /** URL of whitelabel site */
  branded_url?: Maybe<Scalars['String']>;
  /** URL of whitelabeled Food icon */
  food_icon_url?: Maybe<Scalars['String']>;
  /** The unique identifier of the setting */
  id: Scalars['ID'];
  /** The number of minutes of allowable inactivity */
  inactivity_minutes_timeout?: Maybe<Scalars['String']>;
  /** URL of whitelabeled iOS app */
  ios_app_link?: Maybe<Scalars['String']>;
  /** URL of whitelabeled Metric icon */
  metric_icon_url?: Maybe<Scalars['String']>;
  /** Mixpanel Project Token */
  mixpanel_project_token?: Maybe<Scalars['String']>;
  /** The namespace that the whitelabel setting is in. */
  namespace?: Maybe<Scalars['String']>;
  /** The whitelabel's patient SSO connection */
  patient_sso_connection?: Maybe<SsoConnection>;
  /** The whitelabel's patient SSO connections */
  patient_sso_connections?: Maybe<Array<SsoConnection>>;
  /** JSON hash of whitelabel replacement words */
  replacement_words_json?: Maybe<Scalars['String']>;
  /** URL of whitelabeled Selfie icon */
  selfie_icon_url?: Maybe<Scalars['String']>;
  /** The whitelabel's staff SSO connection */
  staff_sso_connection?: Maybe<SsoConnection>;
  /** The whitelabel's staff SSO connections */
  staff_sso_connections?: Maybe<Array<SsoConnection>>;
  /** URL of whitelabeled Workout icon */
  workout_icon_url?: Maybe<Scalars['String']>;
};


/** Info for Whitelabeling */
export type WhitelabelSettingAmplitude_Api_KeyArgs = {
  branded_url?: InputMaybe<Scalars['String']>;
};


/** Info for Whitelabeling */
export type WhitelabelSettingMixpanel_Project_TokenArgs = {
  branded_url?: InputMaybe<Scalars['String']>;
};

/** A Withings Connection */
export type WithingsConnection = {
  __typename?: 'WithingsConnection';
  /** The unique identifier of the connections */
  id: Scalars['ID'];
  /** The last time Withings was synced */
  last_sync_date?: Maybe<Scalars['String']>;
};

/** Zoom meeting retrieved from Zoom API */
export type ZoomAppointment = {
  __typename?: 'ZoomAppointment';
  /** The total number of minutes attended by the meeting's host and participants */
  duration?: Maybe<Scalars['Int']>;
  /** End time of meeting */
  end_time?: Maybe<Scalars['String']>;
  /** The unique identifier of the zoom appointment */
  id?: Maybe<Scalars['ID']>;
  /** The number of meeting participants */
  participants_count?: Maybe<Scalars['Int']>;
  /** Start time of meeting */
  start_time?: Maybe<Scalars['String']>;
  /** The meeting's duration, in minutes */
  total_minutes?: Maybe<Scalars['Int']>;
};

/** Autogenerated input type of addLivingPlate */
export type AddLivingPlateInput = {
  api_key: Scalars['String'];
  user_id: Scalars['ID'];
};

/** Autogenerated return type of addLivingPlate. */
export type AddLivingPlatePayload = {
  __typename?: 'addLivingPlatePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of bulkApplyCarePlanTemplate */
export type BulkApplyCarePlanTemplateInput = {
  force_activation?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  user_group_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  user_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

/** Autogenerated return type of bulkApplyCarePlanTemplate. */
export type BulkApplyCarePlanTemplatePayload = {
  __typename?: 'bulkApplyCarePlanTemplatePayload';
  carePlans?: Maybe<Array<Maybe<CarePlan>>>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of bulkApply */
export type BulkApplyInput = {
  ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** The ID of the user to apply a tag on */
  taggable_user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of bulkApply. */
export type BulkApplyPayload = {
  __typename?: 'bulkApplyPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  tags?: Maybe<Array<Maybe<Tag>>>;
};

/** Autogenerated input type of bulkCreateAvailability */
export type BulkCreateAvailabilityInput = {
  appointment_location_id?: InputMaybe<Scalars['String']>;
  appointment_type_id?: InputMaybe<Scalars['String']>;
  availabilities?: InputMaybe<Array<InputMaybe<AvailabilityInput>>>;
  contact_type_id?: InputMaybe<Scalars['String']>;
  end_on?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of bulkCreateAvailability. */
export type BulkCreateAvailabilityPayload = {
  __typename?: 'bulkCreateAvailabilityPayload';
  availabilities?: Maybe<Array<Maybe<Availability>>>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of bulkCreateEntries */
export type BulkCreateEntriesInput = {
  entries?: InputMaybe<Array<InputMaybe<BulkEntryInput>>>;
};

/** Autogenerated return type of bulkCreateEntries. */
export type BulkCreateEntriesPayload = {
  __typename?: 'bulkCreateEntriesPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  entries?: Maybe<Array<Maybe<Entry>>>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of bulkDeleteTasks */
export type BulkDeleteTasksInput = {
  ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

/** Autogenerated return type of bulkDeleteTasks. */
export type BulkDeleteTasksPayload = {
  __typename?: 'bulkDeleteTasksPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  tasks?: Maybe<Array<Maybe<Task>>>;
};

/** Autogenerated input type of bulkUpdateCardIssues */
export type BulkUpdateCardIssuesInput = {
  mark_all_as_seen?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of bulkUpdateCardIssues. */
export type BulkUpdateCardIssuesPayload = {
  __typename?: 'bulkUpdateCardIssuesPayload';
  card_issues?: Maybe<Array<Maybe<StripeCustomerDetail>>>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of bulkUpdateCarePlanUsers */
export type BulkUpdateCarePlanUsersInput = {
  activate?: InputMaybe<Scalars['Boolean']>;
  ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  notify?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of bulkUpdateCarePlanUsers. */
export type BulkUpdateCarePlanUsersPayload = {
  __typename?: 'bulkUpdateCarePlanUsersPayload';
  carePlans?: Maybe<Array<Maybe<CarePlan>>>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of bulkUpdateClients */
export type BulkUpdateClientsInput = {
  active_status?: InputMaybe<Scalars['Boolean']>;
  ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  other_provider_ids?: InputMaybe<Scalars['String']>;
  select_all_excluded_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  select_all_status?: InputMaybe<Scalars['String']>;
  user_group_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of bulkUpdateClients. */
export type BulkUpdateClientsPayload = {
  __typename?: 'bulkUpdateClientsPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  users?: Maybe<Array<Maybe<User>>>;
};

/** Autogenerated input type of bulkUpdateNotificationRecords */
export type BulkUpdateNotificationRecordsInput = {
  user_id?: InputMaybe<Scalars['ID']>;
  viewed_bounced_records?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of bulkUpdateNotificationRecords. */
export type BulkUpdateNotificationRecordsPayload = {
  __typename?: 'bulkUpdateNotificationRecordsPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of bulkUpdateNotifications */
export type BulkUpdateNotificationsInput = {
  /** Deprecated. Use updateAllNotifications instead */
  fromAllNotifications?: InputMaybe<Scalars['Boolean']>;
  /** If this is left out, updateAllNotifications must be sent as true */
  notification_ids?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Deprecated. Use 'seen' instead */
  read?: InputMaybe<Scalars['Boolean']>;
  seen?: InputMaybe<Scalars['Boolean']>;
  /** When true, recent (last 500) notifications will be updated */
  updateAllNotifications?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of bulkUpdateNotifications. */
export type BulkUpdateNotificationsPayload = {
  __typename?: 'bulkUpdateNotificationsPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  current_user?: Maybe<User>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  notifications?: Maybe<Array<Maybe<Notification>>>;
};

/** Autogenerated input type of bulkUpdateTasks */
export type BulkUpdateTasksInput = {
  complete?: InputMaybe<Scalars['Boolean']>;
  seen?: InputMaybe<Scalars['Boolean']>;
  task_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  update_all_tasks?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of bulkUpdateTasks. */
export type BulkUpdateTasksPayload = {
  __typename?: 'bulkUpdateTasksPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  tasks?: Maybe<Array<Maybe<Task>>>;
};

/** Autogenerated input type of completeCheckout */
export type CompleteCheckoutInput = {
  appointment_id?: InputMaybe<Scalars['String']>;
  /** An array of group appointment IDs. When passed in, the user will be registered for all at the same time. */
  appointment_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  appointment_location_id?: InputMaybe<Scalars['String']>;
  appointment_type_id?: InputMaybe<Scalars['String']>;
  contact_type?: InputMaybe<Scalars['String']>;
  coupon_code?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  form_answer_group?: InputMaybe<CheckoutFormAnswerGroupInput>;
  gift?: InputMaybe<GiftInput>;
  intake_flow_uuid?: InputMaybe<Scalars['String']>;
  is_gift?: InputMaybe<Scalars['Boolean']>;
  is_joining_waitlist?: InputMaybe<Scalars['Boolean']>;
  last_name?: InputMaybe<Scalars['String']>;
  /** Optional: The user's legal first name */
  legal_name?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<Scalars['String']>;
  offering_id?: InputMaybe<Scalars['String']>;
  /** Currently just used for Klarna. The ID of the completed payment intent that should be used to completed the checkout. */
  payment_intent_id?: InputMaybe<Scalars['ID']>;
  phone_number?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['String']>;
  reason?: InputMaybe<Scalars['String']>;
  requested_payment_id?: InputMaybe<Scalars['String']>;
  stripe_idempotency_key?: InputMaybe<Scalars['String']>;
  timezone?: InputMaybe<Scalars['String']>;
  /** Token for credit card, created by Stripe.JS */
  token?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of completeCheckout. */
export type CompleteCheckoutPayload = {
  __typename?: 'completeCheckoutPayload';
  appointment?: Maybe<Appointment>;
  /** An array of all group appointments that were registered for. Used in conjunction with appointment_ids argument. */
  appointments?: Maybe<Array<Maybe<Appointment>>>;
  billingItem?: Maybe<BillingItem>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  formAnswerGroupSaved?: Maybe<Scalars['Boolean']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  patientEmail?: Maybe<Scalars['String']>;
  userPackageSelection?: Maybe<UserPackageSelection>;
  widgetCompletedSubheaderHtml?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of completeCourseDocument */
export type CompleteCourseDocumentInput = {
  /** The ID of related course_item */
  course_item_id: Scalars['ID'];
  /** The ID of user */
  user_id: Scalars['ID'];
};

/** Autogenerated return type of completeCourseDocument. */
export type CompleteCourseDocumentPayload = {
  __typename?: 'completeCourseDocumentPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** New CompletedCourseItem */
  completedCourseItem?: Maybe<CompletedCourseItem>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of copyCourse */
export type CopyCourseInput = {
  id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of copyCourse. */
export type CopyCoursePayload = {
  __typename?: 'copyCoursePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  course?: Maybe<Course>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of copyCustomModuleForm */
export type CopyCustomModuleFormInput = {
  id?: InputMaybe<Scalars['ID']>;
  id_list?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of copyCustomModuleForm. */
export type CopyCustomModuleFormPayload = {
  __typename?: 'copyCustomModuleFormPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customModuleForm?: Maybe<CustomModuleForm>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of copyCustomModule */
export type CopyCustomModuleInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of copyCustomModule. */
export type CopyCustomModulePayload = {
  __typename?: 'copyCustomModulePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customModule?: Maybe<CustomModule>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of copyOffering */
export type CopyOfferingInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of copyOffering. */
export type CopyOfferingPayload = {
  __typename?: 'copyOfferingPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  offering?: Maybe<Offering>;
};

/** Autogenerated input type of createAcceptedInsurancePlan */
export type CreateAcceptedInsurancePlanInput = {
  insurance_plan_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

/** Autogenerated return type of createAcceptedInsurancePlan. */
export type CreateAcceptedInsurancePlanPayload = {
  __typename?: 'createAcceptedInsurancePlanPayload';
  accepted_insurance_plans?: Maybe<Array<Maybe<AcceptedInsurancePlan>>>;
  appointment_setting?: Maybe<AppointmentSetting>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createAddendum */
export type CreateAddendumInput = {
  content?: InputMaybe<Scalars['String']>;
  form_answer_group_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createAddendum. */
export type CreateAddendumPayload = {
  __typename?: 'createAddendumPayload';
  addendum?: Maybe<ChartingNoteAddendumType>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createAllergySensitivity */
export type CreateAllergySensitivityInput = {
  category?: InputMaybe<Scalars['String']>;
  category_type?: InputMaybe<Scalars['String']>;
  custom_name?: InputMaybe<Scalars['String']>;
  custom_reaction?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** DEPRECATED. Use status instead */
  is_current?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  /** The date of onset */
  onset_date?: InputMaybe<Scalars['String']>;
  reaction?: InputMaybe<Scalars['String']>;
  /** The type of reaction. Options are [allergy, adverse_reaction] */
  reaction_type?: InputMaybe<Scalars['String']>;
  severity?: InputMaybe<Scalars['String']>;
  /** Options are [active, inactive, resolved]. Defaults to active */
  status?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createAllergySensitivity. */
export type CreateAllergySensitivityPayload = {
  __typename?: 'createAllergySensitivityPayload';
  allergy_sensitivity?: Maybe<AllergySensitivity>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  duplicate_allergy?: Maybe<AllergySensitivity>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createAnnouncement */
export type CreateAnnouncementInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  announcement_image?: InputMaybe<AnnouncementImageUpload>;
  description?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  user_group_ids?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createAnnouncement. */
export type CreateAnnouncementPayload = {
  __typename?: 'createAnnouncementPayload';
  announcement?: Maybe<Announcement>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createApiKey */
export type CreateApiKeyInput = {
  /** A used-defined name for the API key. Optional */
  name?: InputMaybe<Scalars['String']>;
  /** The ID of the user to create an API key for. Required */
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createApiKey. */
export type CreateApiKeyPayload = {
  __typename?: 'createApiKeyPayload';
  api_key?: Maybe<Scalars['String']>;
  api_key_object?: Maybe<ApiKey>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createAppleHealth */
export type CreateAppleHealthInput = {
  is_enabled?: InputMaybe<Scalars['Boolean']>;
  last_sync_date?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createAppleHealth. */
export type CreateAppleHealthPayload = {
  __typename?: 'createAppleHealthPayload';
  apple_health?: Maybe<AppleHealth>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createAppointment */
export type CreateAppointmentInput = {
  appointment_location_id?: InputMaybe<Scalars['String']>;
  appointment_type_id?: InputMaybe<Scalars['String']>;
  attendee_ids?: InputMaybe<Scalars['String']>;
  contact_type?: InputMaybe<Scalars['String']>;
  /** Cpt code associated with this appointment */
  cpt_code_id?: InputMaybe<Scalars['ID']>;
  date?: InputMaybe<Scalars['String']>;
  /** Timestamp in YYYY-MM-DD HH:MM:SS or ISO8601 format, supercedes date, time params. */
  datetime?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['String']>;
  end_time?: InputMaybe<Scalars['String']>;
  exclude_no_credits?: InputMaybe<Scalars['Boolean']>;
  /** When passed in, this video chat URL will be used instead of built-in Video Chat or Zoom */
  external_videochat_url?: InputMaybe<Scalars['String']>;
  is_blocker?: InputMaybe<Scalars['Boolean']>;
  is_zoom_chat?: InputMaybe<Scalars['Boolean']>;
  /** deprecated, use recurring_appointment instead */
  join_all?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<Scalars['String']>;
  max_attendees?: InputMaybe<Scalars['String']>;
  /** a serialized JSON string of metadata */
  metadata?: InputMaybe<Scalars['JSON']>;
  notes?: InputMaybe<Scalars['String']>;
  other_party_id?: InputMaybe<Scalars['String']>;
  /** The price associated with this appointment */
  price?: InputMaybe<Scalars['String']>;
  providers?: InputMaybe<Scalars['String']>;
  recurring_appointment?: InputMaybe<RecurringAppointmentInput>;
  /** deprecated, use recurring_appointment instead */
  repeat?: InputMaybe<Scalars['Boolean']>;
  /** deprecated, use recurring_appointment instead */
  repeat_interval?: InputMaybe<Scalars['String']>;
  /** deprecated, use recurring_appointment instead */
  repeat_times?: InputMaybe<Scalars['String']>;
  room_id?: InputMaybe<Scalars['String']>;
  start_immediately?: InputMaybe<Scalars['Boolean']>;
  time?: InputMaybe<Scalars['String']>;
  /** Timezone to use for date and time fields. Overrides the timezone of the current user */
  timezone?: InputMaybe<Scalars['String']>;
  /** Units to use as a multiplier for appointment price */
  units?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createAppointment. */
export type CreateAppointmentPayload = {
  __typename?: 'createAppointmentPayload';
  appointment?: Maybe<Appointment>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createAppointmentSetting */
export type CreateAppointmentSettingInput = {
  allow_appointment_type_pricing?: InputMaybe<Scalars['Boolean']>;
  allow_clients_to_cancel_appt?: InputMaybe<Scalars['Boolean']>;
  allow_external_videochat_urls?: InputMaybe<Scalars['Boolean']>;
  always_send_confirm_notification?: InputMaybe<Scalars['Boolean']>;
  appointment_locations?: InputMaybe<Array<InputMaybe<AppointmentLocationInput>>>;
  appt_type_confirmed_email?: InputMaybe<Scalars['Boolean']>;
  appt_type_reminder_email?: InputMaybe<Scalars['Boolean']>;
  appt_type_website_booking_email?: InputMaybe<Scalars['Boolean']>;
  ask_clients_to_confirm?: InputMaybe<Scalars['Boolean']>;
  ask_to_confirm_via_text?: InputMaybe<Scalars['Boolean']>;
  auto_create_cms1500?: InputMaybe<Scalars['Boolean']>;
  auto_invoicing?: InputMaybe<Scalars['Boolean']>;
  auto_submit_cms1500?: InputMaybe<Scalars['Boolean']>;
  booking_interval_restriction?: InputMaybe<Scalars['Int']>;
  buffer?: InputMaybe<Scalars['String']>;
  calendar_color_schemes?: InputMaybe<Array<InputMaybe<CalendarColorSchemeInput>>>;
  charge_for_occured_appts?: InputMaybe<Scalars['Boolean']>;
  client_should_call_provider?: InputMaybe<Scalars['Boolean']>;
  clients_have_billing?: InputMaybe<Scalars['Boolean']>;
  confirm_by_default?: InputMaybe<Scalars['Boolean']>;
  contact_type_overrides?: InputMaybe<Array<InputMaybe<ContactTypeOverrideInput>>>;
  default_appt_form_to_group?: InputMaybe<Scalars['Boolean']>;
  default_charting_template_id?: InputMaybe<Scalars['String']>;
  default_group_charting_template_id?: InputMaybe<Scalars['ID']>;
  default_to_zoom?: InputMaybe<Scalars['Boolean']>;
  default_video_service?: InputMaybe<Scalars['String']>;
  disable_requested_form_notifications?: InputMaybe<Scalars['Boolean']>;
  end_time?: InputMaybe<Scalars['String']>;
  /** Deprecated */
  give_notes_name?: InputMaybe<Scalars['Boolean']>;
  hide_link?: InputMaybe<Scalars['Boolean']>;
  insurance_eligibility_integration?: InputMaybe<Scalars['Boolean']>;
  invoice_clients_without_payment_method?: InputMaybe<Scalars['Boolean']>;
  max_days_in_future?: InputMaybe<Scalars['String']>;
  /** Prevents the patient from canceling too close the appointment time. In minutes */
  minimum_advance_cancel_time?: InputMaybe<Scalars['Int']>;
  /** Prevents the patient from rescheduling too close the appointment time. In minutes */
  minimum_advance_reschedule_time?: InputMaybe<Scalars['Int']>;
  /** Prevents the patient from scheduling too close to the desired appointment time. In minutes */
  minimum_advance_schedule_time?: InputMaybe<Scalars['Int']>;
  /** Deprecated. Use minimum_advance_schedule_time instead */
  minimum_days_in_advance?: InputMaybe<Scalars['String']>;
  /** Deprecated. Use booking_interval_restriction instead */
  only_book_even?: InputMaybe<Scalars['Boolean']>;
  /** Deprecated. Use booking_interval_restriction instead */
  only_book_hour?: InputMaybe<Scalars['Boolean']>;
  prevent_client_booking?: InputMaybe<Scalars['Boolean']>;
  prevent_no_credit_booking?: InputMaybe<Scalars['Boolean']>;
  reply_to_provider?: InputMaybe<Scalars['Boolean']>;
  restore_credit_on_cancel?: InputMaybe<Scalars['Boolean']>;
  same_day_appointments?: InputMaybe<Scalars['Boolean']>;
  send_appointment_cancellation_email?: InputMaybe<Scalars['Boolean']>;
  send_appointment_update_email?: InputMaybe<Scalars['Boolean']>;
  send_booking_notice?: InputMaybe<Scalars['Boolean']>;
  send_email_before_appointment?: InputMaybe<Scalars['Boolean']>;
  send_intake_forms_reminder?: InputMaybe<Scalars['Boolean']>;
  send_push_before_appointment?: InputMaybe<Scalars['Boolean']>;
  send_reminder_four_days_before?: InputMaybe<Scalars['Boolean']>;
  send_reminder_one_day_before?: InputMaybe<Scalars['Boolean']>;
  send_reminder_one_hour_before?: InputMaybe<Scalars['Boolean']>;
  send_reminder_three_days_before?: InputMaybe<Scalars['Boolean']>;
  send_reminder_two_days_before?: InputMaybe<Scalars['Boolean']>;
  send_reminder_two_hours_before?: InputMaybe<Scalars['Boolean']>;
  send_text_reminder_four_days_before?: InputMaybe<Scalars['Boolean']>;
  send_text_reminder_one_day_before?: InputMaybe<Scalars['Boolean']>;
  send_text_reminder_one_hour_before?: InputMaybe<Scalars['Boolean']>;
  send_text_reminder_three_days_before?: InputMaybe<Scalars['Boolean']>;
  send_text_reminder_two_days_before?: InputMaybe<Scalars['Boolean']>;
  send_text_reminder_two_hours_before?: InputMaybe<Scalars['Boolean']>;
  set_default_videochat_url?: InputMaybe<Scalars['Boolean']>;
  show_care_plans?: InputMaybe<Scalars['Boolean']>;
  show_faxes?: InputMaybe<Scalars['Boolean']>;
  show_insurance_authorization?: InputMaybe<Scalars['Boolean']>;
  start_time?: InputMaybe<Scalars['String']>;
  /** Allows times to be grouped by appointment type. NOTE: changing this value will clear all prior availability */
  times_by_appointment_type?: InputMaybe<Scalars['Boolean']>;
  /** Allows times to be grouped by contact type. NOTE: changing this value will clear all prior availability */
  times_by_contact_type?: InputMaybe<Scalars['Boolean']>;
  /** Allows times to be grouped by location. NOTE: changing this value will clear all prior availability */
  times_by_location?: InputMaybe<Scalars['Boolean']>;
  use_client_credit_system?: InputMaybe<Scalars['Boolean']>;
  use_client_sources?: InputMaybe<Scalars['Boolean']>;
  use_zoom_waiting_room?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['String']>;
  video_url_default?: InputMaybe<VideoUrlDefaultInput>;
};

/** Autogenerated return type of createAppointmentSetting. */
export type CreateAppointmentSettingPayload = {
  __typename?: 'createAppointmentSettingPayload';
  appointmentSetting?: Maybe<AppointmentSetting>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createAppointmentTypeCptCode */
export type CreateAppointmentTypeCptCodeInput = {
  appointment_type_id?: InputMaybe<Scalars['ID']>;
  cpt_code_id?: InputMaybe<Scalars['ID']>;
  units?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createAppointmentTypeCptCode. */
export type CreateAppointmentTypeCptCodePayload = {
  __typename?: 'createAppointmentTypeCptCodePayload';
  appointment_type_cpt_code?: Maybe<AppointmentTypeCptCodeType>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createAppointmentType */
export type CreateAppointmentTypeInput = {
  appointment_setting?: InputMaybe<AppointmentTypeAppointmentSettingInput>;
  appointment_type_cpt_code?: InputMaybe<AppointmentTypeCptCode>;
  bookable_by_groups?: InputMaybe<Scalars['Boolean']>;
  bookable_group_ids?: InputMaybe<Scalars['String']>;
  bookable_without_group?: InputMaybe<Scalars['Boolean']>;
  /** When false, clients will not have the ability to self-book this appointment */
  clients_can_book?: InputMaybe<Scalars['Boolean']>;
  contact_type_overrides?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** When true, the client will not be asked to add a reason when booking an appointment of this type */
  dont_ask_for_reason?: InputMaybe<Scalars['Boolean']>;
  form_requests_after_appointment?: InputMaybe<Array<InputMaybe<AppointmentTypeFormConnectionInput>>>;
  form_requests_after_appointment_booking?: InputMaybe<Array<InputMaybe<AppointmentTypeFormConnectionInput>>>;
  form_requests_before_appointment?: InputMaybe<Array<InputMaybe<AppointmentTypeFormConnectionInput>>>;
  /** When true, indicates that this appointment type is used for group appointments */
  is_group?: InputMaybe<Scalars['Boolean']>;
  is_waitlist_enabled?: InputMaybe<Scalars['Boolean']>;
  /** The length of the appointment type in minutes */
  length?: InputMaybe<Scalars['Int']>;
  /** The name of the appointment type */
  name?: InputMaybe<Scalars['String']>;
  pricing?: InputMaybe<Scalars['String']>;
  /** Available options are CUSTOM and CPT_CODE */
  pricing_option?: InputMaybe<Scalars['String']>;
  provider_ids_for_appt_type_connections?: InputMaybe<Scalars['String']>;
  require_in_state_clients?: InputMaybe<Scalars['Boolean']>;
  require_specific_providers?: InputMaybe<Scalars['Boolean']>;
  specific_groups?: InputMaybe<Scalars['Boolean']>;
  user_group_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createAppointmentType. */
export type CreateAppointmentTypePayload = {
  __typename?: 'createAppointmentTypePayload';
  appointmentType?: Maybe<AppointmentType>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createAutoTaskGenerator */
export type CreateAutoTaskGeneratorInput = {
  category?: InputMaybe<Scalars['String']>;
  days_due_from_created_at?: InputMaybe<Scalars['Int']>;
  is_enabled?: InputMaybe<Scalars['Boolean']>;
  number_description?: InputMaybe<Scalars['String']>;
  number_to_check?: InputMaybe<Scalars['String']>;
  task_description?: InputMaybe<Scalars['String']>;
  user_id_for_task?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createAutoTaskGenerator. */
export type CreateAutoTaskGeneratorPayload = {
  __typename?: 'createAutoTaskGeneratorPayload';
  auto_task_generator?: Maybe<AutoTaskGenerator>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createAvailability */
export type CreateAvailabilityInput = {
  appointment_location_id?: InputMaybe<Scalars['String']>;
  appointment_type_id?: InputMaybe<Scalars['String']>;
  contact_type_id?: InputMaybe<Scalars['String']>;
  day_of_week?: InputMaybe<Scalars['Int']>;
  end_datetime?: InputMaybe<Scalars['String']>;
  end_on?: InputMaybe<Scalars['String']>;
  /** Required time format: `HH MM``, e.g., `07 30`` or `19 00` */
  end_time?: InputMaybe<Scalars['String']>;
  is_repeating?: InputMaybe<Scalars['Boolean']>;
  range_end?: InputMaybe<Scalars['String']>;
  /** Required date format: `month_name DD, YYYY``, e.g., `August 16, 2022` */
  range_start?: InputMaybe<Scalars['String']>;
  start_datetime?: InputMaybe<Scalars['String']>;
  /** Required time format: `HH MM``, e.g., `07 30`` or `19 00` */
  time?: InputMaybe<Scalars['String']>;
  timezone?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createAvailability. */
export type CreateAvailabilityPayload = {
  __typename?: 'createAvailabilityPayload';
  availability?: Maybe<Availability>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createBillingItem */
export type CreateBillingItemInput = {
  amount_paid?: InputMaybe<Scalars['String']>;
  created_at?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
  offering_coupon_id?: InputMaybe<Scalars['ID']>;
  offering_id?: InputMaybe<Scalars['ID']>;
  payment_due_date?: InputMaybe<Scalars['String']>;
  payment_medium?: InputMaybe<Scalars['String']>;
  recipient_id?: InputMaybe<Scalars['ID']>;
  requested_payer_id?: InputMaybe<Scalars['ID']>;
  requested_payment_id?: InputMaybe<Scalars['ID']>;
  sender_id?: InputMaybe<Scalars['ID']>;
  should_charge?: InputMaybe<Scalars['Boolean']>;
  /** When passed in, the patient will be charged on the given payment source. Patient will be charged on their default source if left blank. Comes from the relevant StripeCustomerDetail object. */
  stripe_customer_detail_id?: InputMaybe<Scalars['ID']>;
  stripe_idempotency_key?: InputMaybe<Scalars['String']>;
  user_package_selection_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createBillingItem. */
export type CreateBillingItemPayload = {
  __typename?: 'createBillingItemPayload';
  billingItem?: Maybe<BillingItem>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  stripeError?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of createBrand */
export type CreateBrandInput = {
  about_description?: InputMaybe<Scalars['String']>;
  bg_color?: InputMaybe<Scalars['String']>;
  brand_email?: InputMaybe<Scalars['String']>;
  brand_name?: InputMaybe<Scalars['String']>;
  brand_phone?: InputMaybe<Scalars['String']>;
  contact_description?: InputMaybe<Scalars['String']>;
  custom_sign_in_path?: InputMaybe<Scalars['String']>;
  display_name?: InputMaybe<Scalars['String']>;
  email_background_color?: InputMaybe<Scalars['String']>;
  facebook?: InputMaybe<Scalars['String']>;
  font_color?: InputMaybe<Scalars['String']>;
  instagram?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<Scalars['Upload']>;
  selected_color?: InputMaybe<Scalars['String']>;
  slogan?: InputMaybe<Scalars['String']>;
  tab_accent_color?: InputMaybe<Scalars['String']>;
  titles?: InputMaybe<Scalars['String']>;
  twitter?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createBrand. */
export type CreateBrandPayload = {
  __typename?: 'createBrandPayload';
  brand?: Maybe<Brand>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createCampaign */
export type CreateCampaignInput = {
  /** Text displayed in button below email body */
  button_text?: InputMaybe<Scalars['String']>;
  /** URL in email button below email body */
  button_url?: InputMaybe<Scalars['String']>;
  /** Text displayed in email body */
  email_body?: InputMaybe<Scalars['String']>;
  /** Text displayed before client name (example: 'Hello <client_name>', 'Greetings <client_name>', ....) */
  email_greeting?: InputMaybe<Scalars['String']>;
  email_subject?: InputMaybe<Scalars['String']>;
  /** Image shown above email body */
  image?: InputMaybe<Scalars['Upload']>;
  include_archived_clients?: InputMaybe<Scalars['Boolean']>;
  is_draft?: InputMaybe<Scalars['Boolean']>;
  is_email?: InputMaybe<Scalars['Boolean']>;
  is_sms?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  /** comma-separated example: "user-12, group-23, tag-34" */
  recipient_ids?: InputMaybe<Scalars['String']>;
  /** SMS text content */
  sms_body?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createCampaign. */
export type CreateCampaignPayload = {
  __typename?: 'createCampaignPayload';
  campaign?: Maybe<Campaign>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createCarePlan */
export type CreateCarePlanInput = {
  is_hidden?: InputMaybe<Scalars['Boolean']>;
  is_managing_templates?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  patient_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createCarePlan. */
export type CreateCarePlanPayload = {
  __typename?: 'createCarePlanPayload';
  carePlan?: Maybe<CarePlan>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createChangeHealth */
export type CreateChangeHealthInput = {
  /** App User ID */
  app_user_id?: InputMaybe<Scalars['String']>;
  /** Change Health User ID */
  change_health_user_id: Scalars['String'];
  /** Facility ID */
  facility_id: Scalars['String'];
  /** Change Health Password */
  password: Scalars['String'];
  /** ID of the User */
  user_id: Scalars['ID'];
};

/** Autogenerated return type of createChangeHealth. */
export type CreateChangeHealthPayload = {
  __typename?: 'createChangeHealthPayload';
  /** The additional info */
  additional_info?: Maybe<Scalars['String']>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  /** The success string */
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of createChatSetting */
export type CreateChatSettingInput = {
  auto_welcome_text?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['String']>;
  is_active?: InputMaybe<Scalars['Boolean']>;
  is_recurring_active?: InputMaybe<Scalars['Boolean']>;
  no_end_date?: InputMaybe<Scalars['Boolean']>;
  receive_notifications?: InputMaybe<Scalars['Boolean']>;
  receive_notifications_recurring?: InputMaybe<Scalars['Boolean']>;
  recurring_content?: InputMaybe<Scalars['String']>;
  recurring_days_data?: InputMaybe<RecurringDaysInputObjectType>;
  recurring_turned_on?: InputMaybe<Scalars['Boolean']>;
  scheduled_turned_on?: InputMaybe<Scalars['Boolean']>;
  send_auto_welcome?: InputMaybe<Scalars['Boolean']>;
  start_date?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createChatSetting. */
export type CreateChatSettingPayload = {
  __typename?: 'createChatSettingPayload';
  chatSetting?: Maybe<ChatSetting>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createClient */
export type CreateClientInput = {
  additional_record_identifier?: InputMaybe<Scalars['String']>;
  /** Also known as the provider ID */
  dietitian_id?: InputMaybe<Scalars['String']>;
  /** format: YYYY-MM-DD */
  dob?: InputMaybe<Scalars['String']>;
  /** if true, welcome email is not sent */
  dont_send_welcome?: InputMaybe<Scalars['Boolean']>;
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  /** Ex. Male */
  gender?: InputMaybe<Scalars['String']>;
  last_name?: InputMaybe<Scalars['String']>;
  legal_name?: InputMaybe<Scalars['String']>;
  /** a serialized JSON string of metadata */
  metadata?: InputMaybe<Scalars['String']>;
  other_provider_ids?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  phone_number?: InputMaybe<Scalars['String']>;
  record_identifier?: InputMaybe<Scalars['String']>;
  /** When true, the client will not be placed into a set password state (where links sent to the client will first take them to set a password) */
  skip_set_password_state?: InputMaybe<Scalars['Boolean']>;
  skipped_email?: InputMaybe<Scalars['Boolean']>;
  /** Timezone of the client. IANA DB name format. */
  timezone?: InputMaybe<Scalars['String']>;
  user_group_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createClient. */
export type CreateClientPayload = {
  __typename?: 'createClientPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  user?: Maybe<User>;
};

/** Autogenerated input type of createCms1500 */
export type CreateCms1500Input = {
  accept_assignment?: InputMaybe<Scalars['Boolean']>;
  amount_paid?: InputMaybe<Scalars['String']>;
  client_sig_on_file?: InputMaybe<Scalars['Boolean']>;
  cms1500_policies?: InputMaybe<Array<InputMaybe<Cms1500PolicyInput>>>;
  cpt_codes_cms1500s?: InputMaybe<Array<InputMaybe<CptCodesCms1500Input>>>;
  dietitian?: InputMaybe<DietitianInput>;
  dietitian_id?: InputMaybe<Scalars['String']>;
  form_answer_group_id?: InputMaybe<Scalars['ID']>;
  icd_codes_cms1500s?: InputMaybe<Array<InputMaybe<IcdCodesCms1500Input>>>;
  include_referrer_information?: InputMaybe<Scalars['Boolean']>;
  insured_sig_on_file?: InputMaybe<Scalars['Boolean']>;
  nineteen_reserved?: InputMaybe<Scalars['String']>;
  organization_info?: InputMaybe<OrganizationInfoInput>;
  organization_info_id?: InputMaybe<Scalars['String']>;
  orig_ref_number?: InputMaybe<Scalars['String']>;
  patient?: InputMaybe<PatientInput>;
  patient_account_num?: InputMaybe<Scalars['String']>;
  /** DEPRECATED. Use patient input object instead */
  patient_id?: InputMaybe<Scalars['String']>;
  referral_info?: InputMaybe<ReferralInfoInput>;
  rendering_provider_other_id?: InputMaybe<Scalars['String']>;
  rendering_provider_other_id_number?: InputMaybe<OtherIdNumberInput>;
  resubmission_code?: InputMaybe<Scalars['String']>;
  /** (Deprecated)Service location is updated in form - just pass in service_location_id */
  service_location?: InputMaybe<LocationInput>;
  service_location_id?: InputMaybe<Scalars['String']>;
  tend_reserved?: InputMaybe<Scalars['String']>;
  use_indiv_npi?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of createCms1500. */
export type CreateCms1500Payload = {
  __typename?: 'createCms1500Payload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  cms1500?: Maybe<Cms1500>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createCognitiveStatus */
export type CreateCognitiveStatusInput = {
  cognitive_status?: InputMaybe<Scalars['String']>;
  start_date?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createCognitiveStatus. */
export type CreateCognitiveStatusPayload = {
  __typename?: 'createCognitiveStatusPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  cognitive_status?: Maybe<CognitiveStatus>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createComment */
export type CreateCommentInput = {
  content?: InputMaybe<Scalars['String']>;
  entry_id?: InputMaybe<Scalars['ID']>;
  is_reaction?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createComment. */
export type CreateCommentPayload = {
  __typename?: 'createCommentPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  comment?: Maybe<Comment>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createCompletedCourseItem */
export type CreateCompletedCourseItemInput = {
  completed_item_id?: InputMaybe<Scalars['String']>;
  completed_item_type?: InputMaybe<Scalars['String']>;
  course_item_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createCompletedCourseItem. */
export type CreateCompletedCourseItemPayload = {
  __typename?: 'createCompletedCourseItemPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  completedCourseItem?: Maybe<CompletedCourseItem>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  redirect_url?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of createCompletedOnboardingItem */
export type CreateCompletedOnboardingItemInput = {
  onboarding_item_id?: InputMaybe<Scalars['ID']>;
  skipped?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createCompletedOnboardingItem. */
export type CreateCompletedOnboardingItemPayload = {
  __typename?: 'createCompletedOnboardingItemPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  completed_onboarding_item?: Maybe<CompletedOnboardingItem>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createContact */
export type CreateContactInput = {
  about_me?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  first_url?: InputMaybe<Scalars['String']>;
  last_name?: InputMaybe<Scalars['String']>;
  phone_number?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createContact. */
export type CreateContactPayload = {
  __typename?: 'createContactPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  visitor?: Maybe<Visitor>;
};

/** Autogenerated input type of createConversation */
export type CreateConversationInput = {
  added_users?: InputMaybe<Array<InputMaybe<AddedUsersInput>>>;
  appointment_id?: InputMaybe<Scalars['String']>;
  /** Deprecated. Use owner_id instead if you want the provider to be the owner */
  dietitian_id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<NoteInput>;
  /** The ID of the owner of the conversation. Defaults to current_user when not sent in */
  owner_id?: InputMaybe<Scalars['ID']>;
  /** Deprecated. Just send in the patient via added_users */
  patient_id?: InputMaybe<Scalars['String']>;
  /** The value of the select all toggle. This overrides simple_added_users and allows you to easily add all of a category to the conversation. Requires simple_added_users to be sent in as well */
  select_all_status?: InputMaybe<Scalars['String']>;
  simple_added_users?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createConversation. */
export type CreateConversationPayload = {
  __typename?: 'createConversationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  conversation?: Maybe<Conversation>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createCourseBenefit */
export type CreateCourseBenefitInput = {
  benefit?: InputMaybe<Scalars['String']>;
  course_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createCourseBenefit. */
export type CreateCourseBenefitPayload = {
  __typename?: 'createCourseBenefitPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  courseBenefit?: Maybe<CourseBenefit>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createCourse */
export type CreateCourseInput = {
  course_type?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  external_preview_image_url?: InputMaybe<Scalars['String']>;
  formatted_benefits?: InputMaybe<Scalars['String']>;
  late_enroll?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  preview_image?: InputMaybe<Scalars['Upload']>;
  preview_video_content?: InputMaybe<Scalars['String']>;
  start_date?: InputMaybe<Scalars['String']>;
};

/** Autogenerated input type of createCourseItem */
export type CreateCourseItemInput = {
  completion_required_for_next_module?: InputMaybe<Scalars['Boolean']>;
  course_id?: InputMaybe<Scalars['String']>;
  item_id?: InputMaybe<Scalars['String']>;
  item_type?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  new_item_type_name?: InputMaybe<Scalars['String']>;
  scheduled_release?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
  video_url?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createCourseItem. */
export type CreateCourseItemPayload = {
  __typename?: 'createCourseItemPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  courseItem?: Maybe<CourseItem>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  redirect_url?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of createCourse. */
export type CreateCoursePayload = {
  __typename?: 'createCoursePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  course?: Maybe<Course>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createCustomEmail */
export type CreateCustomEmailInput = {
  email_type?: InputMaybe<Scalars['String']>;
  greeting?: InputMaybe<Scalars['String']>;
  message_body?: InputMaybe<Scalars['String']>;
  reactivation_wait_days?: InputMaybe<Scalars['String']>;
  subject?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createCustomEmail. */
export type CreateCustomEmailPayload = {
  __typename?: 'createCustomEmailPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customEmail?: Maybe<CustomEmail>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createCustomFood */
export type CreateCustomFoodInput = {
  name?: InputMaybe<Scalars['String']>;
  nutrients?: InputMaybe<NutrientsInput>;
  serving_size?: InputMaybe<ServingSizeInput>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createCustomFood. */
export type CreateCustomFoodPayload = {
  __typename?: 'createCustomFoodPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customFood?: Maybe<Food>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createCustomModuleForm */
export type CreateCustomModuleFormInput = {
  external_id?: InputMaybe<Scalars['String']>;
  external_id_type?: InputMaybe<Scalars['String']>;
  is_video?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  on_completion_ifs_tag_id?: InputMaybe<Scalars['String']>;
  prefill?: InputMaybe<Scalars['Boolean']>;
  use_for_charting?: InputMaybe<Scalars['Boolean']>;
  use_for_program?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of createCustomModuleForm. */
export type CreateCustomModuleFormPayload = {
  __typename?: 'createCustomModuleFormPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customModuleForm?: Maybe<CustomModuleForm>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createCustomModule */
export type CreateCustomModuleInput = {
  custom_module_form_id?: InputMaybe<Scalars['String']>;
  external_id?: InputMaybe<Scalars['String']>;
  external_id_type?: InputMaybe<Scalars['String']>;
  index?: InputMaybe<Scalars['Int']>;
  is_custom?: InputMaybe<Scalars['Boolean']>;
  label?: InputMaybe<Scalars['String']>;
  mod_type?: InputMaybe<Scalars['String']>;
  options?: InputMaybe<Scalars['String']>;
  parent_custom_module_id?: InputMaybe<Scalars['String']>;
  required?: InputMaybe<Scalars['Boolean']>;
  sublabel?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createCustomModule. */
export type CreateCustomModulePayload = {
  __typename?: 'createCustomModulePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customModule?: Maybe<CustomModule>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createDocument */
export type CreateDocumentInput = {
  care_plan_id?: InputMaybe<Scalars['ID']>;
  clients_ids?: InputMaybe<Scalars['String']>;
  course_id?: InputMaybe<Scalars['String']>;
  /** Requires additional permissions to edit */
  created_at?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  display_name?: InputMaybe<Scalars['String']>;
  file?: InputMaybe<Scalars['Upload']>;
  file_string?: InputMaybe<Scalars['String']>;
  folder_id?: InputMaybe<Scalars['String']>;
  from_date?: InputMaybe<Scalars['String']>;
  from_program_create?: InputMaybe<Scalars['Boolean']>;
  include_in_charting?: InputMaybe<Scalars['Boolean']>;
  is_photo_id?: InputMaybe<Scalars['Boolean']>;
  /** Optional. This is passed in when a document is uploaded via a Form Upload question module. Should be the User ID. Otherwise, nil. */
  on_form_for_user_id?: InputMaybe<Scalars['ID']>;
  org_level?: InputMaybe<Scalars['Boolean']>;
  payout_id?: InputMaybe<Scalars['ID']>;
  provider_ids?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  rcf_id?: InputMaybe<Scalars['ID']>;
  rel_user_id?: InputMaybe<Scalars['String']>;
  /** If using the report_type parameter, value must be one of the following options: "Short Client List", "Long Client List", "Client Activity List", "Client Metrics", "Appointments", "Courses", "Program Forms", "Clients Credits", "Payments", "Transfers", "Transactions", "CMS1500s", "Superbills", "Referring Physicians", "Insurance Authorization", "Client Blood Sugar", "Requested Payments" */
  report_type?: InputMaybe<Scalars['String']>;
  /** A comma-separated list of doc_share_ids */
  share_users?: InputMaybe<Scalars['String']>;
  share_with_rel?: InputMaybe<Scalars['Boolean']>;
  to_date?: InputMaybe<Scalars['String']>;
  /** Requires additional permissions to edit */
  updated_at?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createDocument. */
export type CreateDocumentPayload = {
  __typename?: 'createDocumentPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  currentUser?: Maybe<User>;
  document?: Maybe<Document>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createDosespotClinician */
export type CreateDosespotClinicianInput = {
  /** Required */
  business_address?: InputMaybe<Scalars['String']>;
  /** Required */
  city?: InputMaybe<Scalars['String']>;
  /** Required */
  date_of_birth?: InputMaybe<Scalars['String']>;
  /** Required when role is prescribing provider and prescribe_controlled_substances checked */
  dea_number?: InputMaybe<Scalars['String']>;
  /** Required for prescribing provider */
  eligible_prescribe_medications?: InputMaybe<Scalars['Boolean']>;
  /** Required */
  fax_number?: InputMaybe<Scalars['String']>;
  /** Required */
  full_name?: InputMaybe<Scalars['String']>;
  /** Required for prescribing provider */
  npi_number?: InputMaybe<Scalars['String']>;
  prescribe_controlled_substances?: InputMaybe<Scalars['Boolean']>;
  /** Required. Dosespot user role (Prescribing Provider: 1, Proxy: 6) */
  role?: InputMaybe<Scalars['Int']>;
  /** Required */
  state?: InputMaybe<Scalars['String']>;
  /** Required */
  work_phone_number?: InputMaybe<Scalars['String']>;
  /** Required */
  zip?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createDosespotClinician. */
export type CreateDosespotClinicianPayload = {
  __typename?: 'createDosespotClinicianPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  dosespot_user?: Maybe<DoseSpot>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createDosespot */
export type CreateDosespotInput = {
  /** The ID of the clinic */
  clinic_id?: InputMaybe<Scalars['String']>;
  /** The key of the clinic */
  clinic_key?: InputMaybe<Scalars['String']>;
  /** The ID of the Dosespot user */
  dosespot_user_id?: InputMaybe<Scalars['String']>;
  /** The ID of the user */
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createDosespot. */
export type CreateDosespotPayload = {
  __typename?: 'createDosespotPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  /** The success string */
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of createDraft */
export type CreateDraftInput = {
  content?: InputMaybe<Scalars['String']>;
  conversation_membership_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createDraft. */
export type CreateDraftPayload = {
  __typename?: 'createDraftPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  draft?: Maybe<Draft>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createEbook */
export type CreateEbookInput = {
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  first_url?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createEbook. */
export type CreateEbookPayload = {
  __typename?: 'createEbookPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  visitor?: Maybe<Visitor>;
};

/** Autogenerated input type of createEntry */
export type CreateEntryInput = {
  category?: InputMaybe<Scalars['String']>;
  /** Deprecated. (Used in bulkCreate mutation instead) Check for duplicates, currently only supported if third_party_source is apple_health */
  check_duplicates?: InputMaybe<Scalars['Boolean']>;
  created_at?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  ed_posthunger?: InputMaybe<Scalars['String']>;
  ed_prehunger?: InputMaybe<Scalars['String']>;
  emotions?: InputMaybe<Scalars['String']>;
  food_items?: InputMaybe<Scalars['String']>;
  image?: InputMaybe<Scalars['Upload']>;
  image_string?: InputMaybe<Scalars['String']>;
  meal_ids?: InputMaybe<Scalars['String']>;
  meal_name?: InputMaybe<Scalars['String']>;
  metric_stat?: InputMaybe<Scalars['String']>;
  other_symptom?: InputMaybe<Scalars['String']>;
  percieved_hungriness?: InputMaybe<Scalars['String']>;
  reflection?: InputMaybe<Scalars['String']>;
  subentries?: InputMaybe<Array<InputMaybe<SubentryInput>>>;
  symptoms?: InputMaybe<Scalars['String']>;
  /** Options are apple_health, google_fit, or fitbit */
  third_party_source?: InputMaybe<Scalars['String']>;
  /** One of MetricEntry, FoodEntry, WorkoutEntry, MirrorEntry, SleepEntry, NoteEntry, WaterIntakeEntry, PoopEntry, SymptomEntry */
  type?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createEntry. */
export type CreateEntryPayload = {
  __typename?: 'createEntryPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  entry?: Maybe<Entry>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createExternalCalendar */
export type CreateExternalCalendarInput = {
  access_token?: InputMaybe<Scalars['String']>;
  /** When true, appointments will automatically be pushed to the external calendar */
  add_to_calendar?: InputMaybe<Scalars['Boolean']>;
  /** The email of the Google or Outlook account that is being synced */
  email?: InputMaybe<Scalars['String']>;
  /** The date and time the token will expire. In ISO8601 format. */
  expiry_date?: InputMaybe<Scalars['String']>;
  /** The type of External Calendar. Can either be Google or Outlook */
  external_type?: InputMaybe<Scalars['String']>;
  /** When true, appointments will automatically be pulled from the external calendar */
  pull_from_calendar?: InputMaybe<Scalars['Boolean']>;
  /** (Only for Google). The calendars to pull in from. Defaults to the primary calendar */
  pulled_in_calendars?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** The refresh token that can be used to generate new access tokens for the sync. This requires whitelabeled calendar sync to be enabled for your account */
  refresh_token?: InputMaybe<Scalars['String']>;
  /** Optional. The resource name (sync partner assigned ID) for the sync */
  resource_name?: InputMaybe<Scalars['String']>;
  token_type?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createExternalCalendar. */
export type CreateExternalCalendarPayload = {
  __typename?: 'createExternalCalendarPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  external_calendar?: Maybe<ExternalCalendar>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createFamilyHistory */
export type CreateFamilyHistoryInput = {
  concept_id?: InputMaybe<Scalars['String']>;
  relationships?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createFamilyHistory. */
export type CreateFamilyHistoryPayload = {
  __typename?: 'createFamilyHistoryPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  duplicate_family_history_condition?: Maybe<FamilyHistoryCondition>;
  family_history_condition?: Maybe<FamilyHistoryCondition>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createFaxAcctInfo */
export type CreateFaxAcctInfoInput = {
  aes_key?: InputMaybe<Scalars['String']>;
  api_key?: InputMaybe<Scalars['String']>;
  fax_number?: InputMaybe<Scalars['String']>;
  notify_provider?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['ID']>;
  username?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createFaxAcctInfo. */
export type CreateFaxAcctInfoPayload = {
  __typename?: 'createFaxAcctInfoPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of createFaxLineRequest */
export type CreateFaxLineRequestInput = {
  area_code?: InputMaybe<Scalars['String']>;
  bill?: InputMaybe<Scalars['Upload']>;
  city?: InputMaybe<Scalars['String']>;
  loa?: InputMaybe<Scalars['Upload']>;
  request_type?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createFaxLineRequest. */
export type CreateFaxLineRequestPayload = {
  __typename?: 'createFaxLineRequestPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  faxLineRequest?: Maybe<FaxLineRequest>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createFeatureToggle */
export type CreateFeatureToggleInput = {
  allow_apple_health_sync?: InputMaybe<Scalars['Boolean']>;
  allow_clearstep_sync?: InputMaybe<Scalars['Boolean']>;
  allow_community_chat?: InputMaybe<Scalars['Boolean']>;
  allow_direct_chat?: InputMaybe<Scalars['Boolean']>;
  allow_fitbit_sync?: InputMaybe<Scalars['Boolean']>;
  allow_google_fit_sync?: InputMaybe<Scalars['Boolean']>;
  allow_shapa_sync?: InputMaybe<Scalars['Boolean']>;
  allow_withings_sync?: InputMaybe<Scalars['Boolean']>;
  apply_eating_disorder_default?: InputMaybe<Scalars['Boolean']>;
  can_schedule_appointments?: InputMaybe<Scalars['Boolean']>;
  can_track_poop?: InputMaybe<Scalars['Boolean']>;
  can_track_symptoms?: InputMaybe<Scalars['Boolean']>;
  can_track_water_intake?: InputMaybe<Scalars['Boolean']>;
  can_view_care_plan?: InputMaybe<Scalars['Boolean']>;
  can_view_documents?: InputMaybe<Scalars['Boolean']>;
  can_view_forms?: InputMaybe<Scalars['Boolean']>;
  can_view_goals?: InputMaybe<Scalars['Boolean']>;
  can_view_journal_entries?: InputMaybe<Scalars['Boolean']>;
  can_view_packages?: InputMaybe<Scalars['Boolean']>;
  can_view_payments?: InputMaybe<Scalars['Boolean']>;
  can_view_programs?: InputMaybe<Scalars['Boolean']>;
  care_plan_id?: InputMaybe<Scalars['ID']>;
  custom_metric_overrides?: InputMaybe<Array<InputMaybe<CustomMetricOverridesInput>>>;
  custom_metrics?: InputMaybe<Array<InputMaybe<CustomMetricInput>>>;
  default_water_intake?: InputMaybe<Scalars['String']>;
  do_not_auto_submit_cms1500?: InputMaybe<Scalars['Boolean']>;
  email_notification_frequency?: InputMaybe<Scalars['String']>;
  push_notification_frequency?: InputMaybe<Scalars['String']>;
  send_unpaid_invoice_reminder?: InputMaybe<Scalars['Boolean']>;
  seperate_provider_metric_from_client?: InputMaybe<Scalars['Boolean']>;
  show_a1c_metric?: InputMaybe<Scalars['Boolean']>;
  show_bf_percent_metric?: InputMaybe<Scalars['Boolean']>;
  show_blood_pressure_metric?: InputMaybe<Scalars['Boolean']>;
  show_blood_sugar_metric?: InputMaybe<Scalars['Boolean']>;
  show_bmi_graph?: InputMaybe<Scalars['Boolean']>;
  show_bmi_growth_chart?: InputMaybe<Scalars['Boolean']>;
  show_bmr_metric?: InputMaybe<Scalars['Boolean']>;
  show_body_temperature_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_a1c_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_bf_percent_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_blood_pressure_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_blood_sugar_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_bmi_graph?: InputMaybe<Scalars['Boolean']>;
  show_client_bmi_growth_chart?: InputMaybe<Scalars['Boolean']>;
  show_client_bmr_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_body_temperature_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_harris_benedict?: InputMaybe<Scalars['Boolean']>;
  show_client_height_growth_chart?: InputMaybe<Scalars['Boolean']>;
  show_client_ox_sat_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_waist_circumference_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_weight_growth_chart?: InputMaybe<Scalars['Boolean']>;
  show_client_weight_metric?: InputMaybe<Scalars['Boolean']>;
  show_ed_posthunger?: InputMaybe<Scalars['Boolean']>;
  show_ed_prehunger?: InputMaybe<Scalars['Boolean']>;
  show_food?: InputMaybe<Scalars['Boolean']>;
  show_food_category?: InputMaybe<Scalars['Boolean']>;
  show_food_emotion?: InputMaybe<Scalars['Boolean']>;
  show_food_reflection?: InputMaybe<Scalars['Boolean']>;
  show_harris_benedict?: InputMaybe<Scalars['Boolean']>;
  show_healthiness?: InputMaybe<Scalars['Boolean']>;
  show_height_graph?: InputMaybe<Scalars['Boolean']>;
  show_height_growth_chart?: InputMaybe<Scalars['Boolean']>;
  show_metric?: InputMaybe<Scalars['Boolean']>;
  show_mirror?: InputMaybe<Scalars['Boolean']>;
  show_normal_hunger?: InputMaybe<Scalars['Boolean']>;
  show_note?: InputMaybe<Scalars['Boolean']>;
  show_note_emotion?: InputMaybe<Scalars['Boolean']>;
  show_nutrients_tracking?: InputMaybe<Scalars['Boolean']>;
  show_ox_sat_metric?: InputMaybe<Scalars['Boolean']>;
  show_waist_circumference_metric?: InputMaybe<Scalars['Boolean']>;
  show_weight_growth_chart?: InputMaybe<Scalars['Boolean']>;
  show_weight_metric?: InputMaybe<Scalars['Boolean']>;
  show_workout?: InputMaybe<Scalars['Boolean']>;
  use_metric_system?: InputMaybe<Scalars['Boolean']>;
  user_group_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
  view_not_track?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of createFeatureToggle. */
export type CreateFeatureTogglePayload = {
  __typename?: 'createFeatureTogglePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  feature_toggle?: Maybe<FeatureToggle>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createFitbit */
export type CreateFitbitInput = {
  access_token?: InputMaybe<Scalars['String']>;
  expires_at?: InputMaybe<Scalars['String']>;
  last_sync_date?: InputMaybe<Scalars['String']>;
  refresh_token?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createFitbit. */
export type CreateFitbitPayload = {
  __typename?: 'createFitbitPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  fitbit?: Maybe<Fitbit>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createFolder */
export type CreateFolderInput = {
  folder_id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  rel_user_id?: InputMaybe<Scalars['String']>;
  share_users?: InputMaybe<Scalars['String']>;
  share_with_rel?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of createFolder. */
export type CreateFolderPayload = {
  __typename?: 'createFolderPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  folder?: Maybe<Folder>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createFormAnswerGroup */
export type CreateFormAnswerGroupInput = {
  appointment_id?: InputMaybe<Scalars['ID']>;
  course_id?: InputMaybe<Scalars['String']>;
  course_item_id?: InputMaybe<Scalars['ID']>;
  created_at?: InputMaybe<Scalars['String']>;
  custom_module_form_id?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  dismissed_lock_charting_note_warning?: InputMaybe<Scalars['Boolean']>;
  external_id?: InputMaybe<Scalars['String']>;
  finished?: InputMaybe<Scalars['Boolean']>;
  form_answers?: InputMaybe<Array<InputMaybe<FormAnswerInput>>>;
  formatted_date?: InputMaybe<Scalars['String']>;
  marked_complete?: InputMaybe<Scalars['Boolean']>;
  marked_locked?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  requested_form_completion_id?: InputMaybe<Scalars['ID']>;
  set_initial_answers?: InputMaybe<Scalars['Boolean']>;
  time?: InputMaybe<Scalars['String']>;
  /** Requires additional permissions to edit */
  updated_at?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createFormAnswerGroup. */
export type CreateFormAnswerGroupPayload = {
  __typename?: 'createFormAnswerGroupPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  form_answer_group?: Maybe<FormAnswerGroup>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createFormAnswerGroupSigning */
export type CreateFormAnswerGroupSigningInput = {
  form_answer_group_id?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createFormAnswerGroupSigning. */
export type CreateFormAnswerGroupSigningPayload = {
  __typename?: 'createFormAnswerGroupSigningPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  formAnswerGroupSigning?: Maybe<FormAnswerGroupSigning>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createFullscriptPractitioner */
export type CreateFullscriptPractitionerInput = {
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  last_name?: InputMaybe<Scalars['String']>;
  practitioner_type_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createFullscriptPractitioner. */
export type CreateFullscriptPractitionerPayload = {
  __typename?: 'createFullscriptPractitionerPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  fullscript_practitioner?: Maybe<FullscriptPractitionerType>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createFunctionalStatus */
export type CreateFunctionalStatusInput = {
  functional_condition?: InputMaybe<Scalars['String']>;
  start_date?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createFunctionalStatus. */
export type CreateFunctionalStatusPayload = {
  __typename?: 'createFunctionalStatusPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  functional_status?: Maybe<FunctionalStatus>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createGoalHistory */
export type CreateGoalHistoryInput = {
  /** The day the goal should be marked complete for. Should be of the form: 'yyyy-mm-dd' */
  completed_on?: InputMaybe<Scalars['String']>;
  goal_id?: InputMaybe<Scalars['String']>;
  /** If true, will mark parent goal completed (must be a subgoal) */
  mark_parent_complete?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createGoalHistory. */
export type CreateGoalHistoryPayload = {
  __typename?: 'createGoalHistoryPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  goalHistory?: Maybe<GoalHistory>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createGoal */
export type CreateGoalInput = {
  /** The id of associated care plan */
  care_plan_id?: InputMaybe<Scalars['ID']>;
  description?: InputMaybe<Scalars['String']>;
  /** The date the goal should end - format should be: yyyy-mm-dd */
  due_date?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  parent_id?: InputMaybe<Scalars['String']>;
  /** If true, create goal for program */
  program_goal?: InputMaybe<Scalars['Boolean']>;
  reminder?: InputMaybe<ReminderInput>;
  /** The frequency of this goal. Possible values are: 'Daily','Weekly', 'Once' */
  repeat?: InputMaybe<Scalars['String']>;
  /** The id of goal template used to create this goal */
  source_template_id?: InputMaybe<Scalars['String']>;
  /** The date the goal should start - format should be: yyyy-mm-dd */
  start_on?: InputMaybe<Scalars['String']>;
  subgoals?: InputMaybe<Array<InputMaybe<SubgoalInput>>>;
  /** Title hyperlink. Opens when the name is clicked on. */
  title_link?: InputMaybe<Scalars['String']>;
  /** If true, use this goal as a template(favorite) */
  use_as_template?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createGoal. */
export type CreateGoalPayload = {
  __typename?: 'createGoalPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  goal?: Maybe<Goal>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createGoogleFit */
export type CreateGoogleFitInput = {
  access_token?: InputMaybe<Scalars['String']>;
  expiry_date?: InputMaybe<Scalars['String']>;
  is_enabled?: InputMaybe<Scalars['Boolean']>;
  last_sync_date?: InputMaybe<Scalars['String']>;
  refresh_token?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createGoogleFit. */
export type CreateGoogleFitPayload = {
  __typename?: 'createGoogleFitPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  google_fit?: Maybe<GoogleFit>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createGroup */
export type CreateGroupInput = {
  name?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createGroup. */
export type CreateGroupPayload = {
  __typename?: 'createGroupPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  user_group?: Maybe<UserGroup>;
};

/** Autogenerated input type of createHealthConcern */
export type CreateHealthConcernInput = {
  code?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  display_name?: InputMaybe<Scalars['String']>;
  effective_time?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createHealthConcern. */
export type CreateHealthConcernPayload = {
  __typename?: 'createHealthConcernPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  health_concern?: Maybe<HealthConcern>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createImmunization */
export type CreateImmunizationInput = {
  additional_notes?: InputMaybe<Scalars['String']>;
  cvx_code?: InputMaybe<Scalars['Int']>;
  received_at?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
  vaccine_name?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createImmunization. */
export type CreateImmunizationPayload = {
  __typename?: 'createImmunizationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  immunization?: Maybe<Immunization>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createImplantableDeviceUser */
export type CreateImplantableDeviceUserInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  udi?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createImplantableDeviceUser. */
export type CreateImplantableDeviceUserPayload = {
  __typename?: 'createImplantableDeviceUserPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  implantable_device_user?: Maybe<ImplantableDeviceUser>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createImportDataRequest */
export type CreateImportDataRequestInput = {
  clients_template?: InputMaybe<Scalars['Upload']>;
  display_name?: InputMaybe<Scalars['String']>;
  extension?: InputMaybe<Scalars['String']>;
  optional_comment?: InputMaybe<Scalars['String']>;
  request_type?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createImportDataRequest. */
export type CreateImportDataRequestPayload = {
  __typename?: 'createImportDataRequestPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  importDataRequest?: Maybe<ImportDataRequest>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createInsuranceAuthorization */
export type CreateInsuranceAuthorizationInput = {
  authorization_number?: InputMaybe<Scalars['String']>;
  end_on?: InputMaybe<Scalars['String']>;
  policy_id?: InputMaybe<Scalars['String']>;
  start_on?: InputMaybe<Scalars['String']>;
  unit_type?: InputMaybe<Scalars['String']>;
  units_authorized?: InputMaybe<Scalars['String']>;
  units_used?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
  visits_authorized?: InputMaybe<Scalars['String']>;
  visits_used?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createInsuranceAuthorization. */
export type CreateInsuranceAuthorizationPayload = {
  __typename?: 'createInsuranceAuthorizationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  insuranceAuthorization?: Maybe<InsuranceAuthorizationType>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createInsurancePlan */
export type CreateInsurancePlanInput = {
  add_as_accepted_insurance_plan?: InputMaybe<Scalars['Boolean']>;
  payer_id?: InputMaybe<Scalars['String']>;
  payer_name?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createInsurancePlan. */
export type CreateInsurancePlanPayload = {
  __typename?: 'createInsurancePlanPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  insurance_plan?: Maybe<InsurancePlan>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createLabOrder */
export type CreateLabOrderInput = {
  /** Required. The ID of the PDF or HL7 document containing the lab results. Needs to be pre-created and have a rel_user_id matching the patient ID */
  document_id?: InputMaybe<Scalars['ID']>;
  /** Required. The lab panel that was ordered */
  lab?: InputMaybe<Scalars['String']>;
  /** Required. The lab company who processed the order */
  lab_company?: InputMaybe<Scalars['String']>;
  /** A list of the discrete data points that will be collected in the lab panel */
  lab_observation_requests?: InputMaybe<Array<InputMaybe<LabObservationRequestInput>>>;
  /** Required. The ID of the user in Healthie who ordered the lab */
  orderer_id?: InputMaybe<Scalars['ID']>;
  /** Required. The ID of the patient */
  patient_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createLabOrder. */
export type CreateLabOrderPayload = {
  __typename?: 'createLabOrderPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  currentUserNotificationsCount?: Maybe<UserNotificationsCount>;
  lab_order?: Maybe<LabOrder>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createLocation */
export type CreateLocationInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  npi?: InputMaybe<Scalars['String']>;
  other_id?: InputMaybe<Scalars['String']>;
  other_id_qual?: InputMaybe<Scalars['String']>;
  place_of_service_id?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createLocation. */
export type CreateLocationPayload = {
  __typename?: 'createLocationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  location?: Maybe<Location>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createMeal */
export type CreateMealInput = {
  food_items?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createMeal. */
export type CreateMealPayload = {
  __typename?: 'createMealPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  meal?: Maybe<Meal>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createMedication */
export type CreateMedicationInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  code?: InputMaybe<Scalars['String']>;
  comment?: InputMaybe<Scalars['String']>;
  /** Requires additional permissions to edit */
  created_at?: InputMaybe<Scalars['String']>;
  custom_name?: InputMaybe<Scalars['String']>;
  directions?: InputMaybe<Scalars['String']>;
  dosage?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['String']>;
  frequency?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  route?: InputMaybe<Scalars['String']>;
  start_date?: InputMaybe<Scalars['String']>;
  /** Requires additional permissions to edit */
  updated_at?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createMedication. */
export type CreateMedicationPayload = {
  __typename?: 'createMedicationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  medication?: Maybe<MedicationType>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createMessageBlast */
export type CreateMessageBlastInput = {
  dietitian_id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<NoteInput>;
  patient_id?: InputMaybe<Scalars['String']>;
  scheduled_at?: InputMaybe<Scalars['String']>;
  /** The value of the select all toggle. This overrides simple_added_users and allows you to easily add all of a category to the conversation. Requires simple_added_users to be sent in as well */
  select_all_status?: InputMaybe<Scalars['String']>;
  simple_added_users?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createMessageBlast. */
export type CreateMessageBlastPayload = {
  __typename?: 'createMessageBlastPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createNote */
export type CreateNoteInput = {
  attached_audio?: InputMaybe<Scalars['Upload']>;
  attached_document?: InputMaybe<Scalars['Upload']>;
  attached_image?: InputMaybe<Scalars['Upload']>;
  attached_image_string?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['String']>;
  conversation_id?: InputMaybe<Scalars['String']>;
  created_at?: InputMaybe<Scalars['String']>;
  hide_org_chat_confirmation?: InputMaybe<Scalars['Boolean']>;
  /** True, if a note create action called in the organization chat context */
  org_chat?: InputMaybe<Scalars['Boolean']>;
  scheduled_at?: InputMaybe<Scalars['String']>;
  updated_at?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createNote. */
export type CreateNotePayload = {
  __typename?: 'createNotePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  note?: Maybe<Note>;
};

/** Autogenerated input type of createNotificationContact */
export type CreateNotificationContactInput = {
  client_portal_access?: InputMaybe<Scalars['Boolean']>;
  client_portal_setting?: InputMaybe<ClientPortalSettingInput>;
  contact_form?: InputMaybe<Scalars['String']>;
  /** Valid values: adult, minor */
  contact_type?: InputMaybe<Scalars['String']>;
  copy_notifications?: InputMaybe<Scalars['Boolean']>;
  dietitian_id?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  emergency?: InputMaybe<Scalars['Boolean']>;
  first_name?: InputMaybe<Scalars['String']>;
  last_name?: InputMaybe<Scalars['String']>;
  linked_client_id?: InputMaybe<Scalars['String']>;
  phone_number?: InputMaybe<Scalars['String']>;
  /** Valid values: caregiver, child, dependent, family_member, legal_guardian, is_parent, spouse, other */
  relationship?: InputMaybe<Scalars['String']>;
  send_invitation?: InputMaybe<Scalars['Boolean']>;
  user_group_id?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createNotificationContact. */
export type CreateNotificationContactPayload = {
  __typename?: 'createNotificationContactPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  notificationContact?: Maybe<NotificationContact>;
};

/** Autogenerated input type of createOfferingCoupon */
export type CreateOfferingCouponInput = {
  amount_off?: InputMaybe<Scalars['String']>;
  code?: InputMaybe<Scalars['String']>;
  expires_at?: InputMaybe<Scalars['String']>;
  flat_amount_off?: InputMaybe<Scalars['String']>;
  offering_ids?: InputMaybe<Scalars['String']>;
  promo_type?: InputMaybe<Scalars['String']>;
  repeat_times?: InputMaybe<Scalars['String']>;
  usage_limit?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createOfferingCoupon. */
export type CreateOfferingCouponPayload = {
  __typename?: 'createOfferingCouponPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  offeringCoupon?: Maybe<OfferingCoupon>;
};

/** Autogenerated input type of createOffering */
export type CreateOfferingInput = {
  billing_frequency?: InputMaybe<Scalars['String']>;
  can_be_gifted?: InputMaybe<Scalars['Boolean']>;
  charge_immediately?: InputMaybe<Scalars['Boolean']>;
  course_id?: InputMaybe<Scalars['ID']>;
  course_ids?: InputMaybe<Scalars['String']>;
  default_selection_image_url?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  first_time_payment?: InputMaybe<Scalars['String']>;
  lab_option_ids?: InputMaybe<Scalars['String']>;
  living_plate_meal_plan_id?: InputMaybe<Scalars['String']>;
  max_purchases?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  offering_image?: InputMaybe<OfferingImageUpload>;
  offering_includes?: InputMaybe<Array<InputMaybe<OfferingIncludesFields>>>;
  offering_products?: InputMaybe<Array<InputMaybe<OfferingProductInput>>>;
  override_group_on_purchase?: InputMaybe<Scalars['Boolean']>;
  price?: InputMaybe<Scalars['String']>;
  repeat_times?: InputMaybe<Scalars['String']>;
  require_booking_purchase?: InputMaybe<Scalars['Boolean']>;
  selected_image_id?: InputMaybe<Scalars['ID']>;
  show_free_text?: InputMaybe<Scalars['Boolean']>;
  show_offering?: InputMaybe<Scalars['Boolean']>;
  user_group_id?: InputMaybe<Scalars['ID']>;
  user_group_ids?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
  video_url?: InputMaybe<Scalars['String']>;
  visibility_status?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createOffering. */
export type CreateOfferingPayload = {
  __typename?: 'createOfferingPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  offering?: Maybe<Offering>;
};

/** Autogenerated input type of createOfficeallySftpAccount */
export type CreateOfficeallySftpAccountInput = {
  ftp_url?: InputMaybe<Scalars['String']>;
  password?: InputMaybe<Scalars['String']>;
  username?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createOfficeallySftpAccount. */
export type CreateOfficeallySftpAccountPayload = {
  __typename?: 'createOfficeallySftpAccountPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  officeally_sftp_account?: Maybe<OfficeallySftpAccount>;
};

/** Autogenerated input type of createOnboardingFlow */
export type CreateOnboardingFlowInput = {
  groups_to_use_onboarding_flow?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createOnboardingFlow. */
export type CreateOnboardingFlowPayload = {
  __typename?: 'createOnboardingFlowPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  onboardingFlow?: Maybe<OnboardingFlow>;
};

/** Autogenerated input type of createOnboardingItem */
export type CreateOnboardingItemInput = {
  billing_disclaimer?: InputMaybe<Scalars['String']>;
  is_skippable?: InputMaybe<Scalars['Boolean']>;
  item_id?: InputMaybe<Scalars['String']>;
  item_type?: InputMaybe<Scalars['String']>;
  new_form_name?: InputMaybe<Scalars['String']>;
  onboarding_flow_id?: InputMaybe<Scalars['String']>;
  policy_disclaimer?: InputMaybe<Scalars['String']>;
  welcome_text?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createOnboardingItem. */
export type CreateOnboardingItemPayload = {
  __typename?: 'createOnboardingItemPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  onboardingItem?: Maybe<OnboardingItem>;
};

/** Autogenerated input type of createOrAddToWaterIntakeEntry */
export type CreateOrAddToWaterIntakeEntryInput = {
  created_at?: InputMaybe<Scalars['String']>;
  metric_stat?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createOrAddToWaterIntakeEntry. */
export type CreateOrAddToWaterIntakeEntryPayload = {
  __typename?: 'createOrAddToWaterIntakeEntryPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  entry?: Maybe<Entry>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createOrganizationCptCode */
export type CreateOrganizationCptCodeInput = {
  cpt_code_id?: InputMaybe<Scalars['ID']>;
  organization_id?: InputMaybe<Scalars['ID']>;
  price_per_unit?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createOrganizationCptCode. */
export type CreateOrganizationCptCodePayload = {
  __typename?: 'createOrganizationCptCodePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  organization_cpt_code?: Maybe<OrganizationCptCodeType>;
};

/** Autogenerated input type of createOrganization */
export type CreateOrganizationInput = {
  /** When true, the new organization will be created as a sub-organization of the current users. Healthie support needs to enable this ability on your account. Must be passed along with user details */
  create_as_suborganization?: InputMaybe<Scalars['Boolean']>;
  email?: InputMaybe<Scalars['String']>;
  /** Must be provided with create_as_suborganization, last_name, and email. When passed will create a new user that will be the owner of the suborg */
  first_name?: InputMaybe<Scalars['String']>;
  last_name?: InputMaybe<Scalars['String']>;
  organization_info?: InputMaybe<PrimaryOrganizationInfoInput>;
  /** Can optionally be passed in along with last_name, first_name, and email. When passed in, the newly created user will have this password */
  password?: InputMaybe<Scalars['String']>;
  /** When email is passed in, this determines whether to send an invite email to the newly created organization user */
  send_invite_email?: InputMaybe<Scalars['Boolean']>;
  sub_org_settings?: InputMaybe<SubOrganizationInfoInput>;
};

/** Autogenerated input type of createOrganizationMembership */
export type CreateOrganizationMembershipInput = {
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  last_name?: InputMaybe<Scalars['String']>;
  /** Options are ["Standard", "Support"] */
  org_role?: InputMaybe<Scalars['String']>;
  /** Required: The ID of the organization */
  organization_id?: InputMaybe<Scalars['ID']>;
  /** Can optionally be passed in along with last_name, first_name, and email. When passed in, the newly created user will have this password */
  password?: InputMaybe<Scalars['String']>;
  /** Selected permission template */
  permission_template_id?: InputMaybe<Scalars['ID']>;
  professions?: InputMaybe<Array<InputMaybe<ProfessionsInput>>>;
  /** When true, an invite email will be sent to the newly created organization member */
  send_invite_email?: InputMaybe<Scalars['Boolean']>;
  specialties?: InputMaybe<Array<InputMaybe<SpecialtiesInput>>>;
  /** Organization’s member timezone */
  timezone?: InputMaybe<Scalars['String']>;
  /** Lets you add extra metadata about the organization membership. Not used in Healthie UI */
  title?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createOrganizationMembership. */
export type CreateOrganizationMembershipPayload = {
  __typename?: 'createOrganizationMembershipPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  organizationMembership?: Maybe<OrganizationMembership>;
};

/** Autogenerated return type of createOrganization. */
export type CreateOrganizationPayload = {
  __typename?: 'createOrganizationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  organization?: Maybe<Organization>;
};

/** Autogenerated input type of createPartner */
export type CreatePartnerInput = {
  about_me?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  first_url?: InputMaybe<Scalars['String']>;
  last_name?: InputMaybe<Scalars['String']>;
  phone_number?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createPartner. */
export type CreatePartnerPayload = {
  __typename?: 'createPartnerPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  visitor?: Maybe<Visitor>;
};

/** Autogenerated input type of createPaymentIntent */
export type CreatePaymentIntentInput = {
  /** The amount to charge in decimal format. e.g 10.99 */
  amount_to_pay?: InputMaybe<Scalars['String']>;
  coupon_code?: InputMaybe<Scalars['String']>;
  /** The currency the payment will be made in. e.g 'usd' */
  currency?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  last_name?: InputMaybe<Scalars['String']>;
  /** Optional. Defaults to first_name if left blank. */
  legal_name?: InputMaybe<Scalars['String']>;
  offering_id?: InputMaybe<Scalars['ID']>;
  /** An array of possible payment method  Required. Only current option is 'klarna' */
  payment_method_types?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Optional */
  phone_number?: InputMaybe<Scalars['String']>;
  /** The ID of the provider who will receive the payment. */
  recipient_id?: InputMaybe<Scalars['ID']>;
  /** Optional, but recommended. Used to prevent duplicate PaymentIntents from being created. */
  stripe_idempotency_key?: InputMaybe<Scalars['String']>;
  /** Optional */
  timezone?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createPaymentIntent. */
export type CreatePaymentIntentPayload = {
  __typename?: 'createPaymentIntentPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  intentClientSecret?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createPermissionTemplate */
export type CreatePermissionTemplateInput = {
  allow_group_level_actions?: InputMaybe<Scalars['Boolean']>;
  allow_self_scheduling_in_care_team?: InputMaybe<Scalars['Boolean']>;
  auto_create_convo_for_care_team?: InputMaybe<Scalars['Boolean']>;
  can_access_to_members_chat?: InputMaybe<Scalars['Boolean']>;
  can_add_clients?: InputMaybe<Scalars['Boolean']>;
  can_add_members?: InputMaybe<Scalars['Boolean']>;
  can_add_members_to_chat?: InputMaybe<Scalars['Boolean']>;
  can_assign_tasks_to_all_org_members?: InputMaybe<Scalars['Boolean']>;
  can_be_care_team_member?: InputMaybe<Scalars['Boolean']>;
  can_charge_clients?: InputMaybe<Scalars['Boolean']>;
  can_delete_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_delete_faxes?: InputMaybe<Scalars['Boolean']>;
  can_edit_appointment_types?: InputMaybe<Scalars['Boolean']>;
  can_edit_calendar?: InputMaybe<Scalars['Boolean']>;
  can_edit_credit?: InputMaybe<Scalars['Boolean']>;
  can_edit_docs?: InputMaybe<Scalars['Boolean']>;
  can_edit_education?: InputMaybe<Scalars['Boolean']>;
  can_edit_forms?: InputMaybe<Scalars['Boolean']>;
  can_edit_members?: InputMaybe<Scalars['Boolean']>;
  can_edit_packages?: InputMaybe<Scalars['Boolean']>;
  can_edit_products?: InputMaybe<Scalars['Boolean']>;
  can_edit_settings?: InputMaybe<Scalars['Boolean']>;
  can_enroll_clients_to_programs?: InputMaybe<Scalars['Boolean']>;
  can_lock_others_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_lock_own_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_mark_assigned_tasks_to_other_org_members_as_completed?: InputMaybe<Scalars['Boolean']>;
  can_merge_clients?: InputMaybe<Scalars['Boolean']>;
  can_order_labs?: InputMaybe<Scalars['Boolean']>;
  can_remove_client?: InputMaybe<Scalars['Boolean']>;
  can_rename_and_delete_tags?: InputMaybe<Scalars['Boolean']>;
  can_see_billing?: InputMaybe<Scalars['Boolean']>;
  can_see_calendar?: InputMaybe<Scalars['Boolean']>;
  can_see_clients?: InputMaybe<Scalars['Boolean']>;
  can_see_docs?: InputMaybe<Scalars['Boolean']>;
  can_see_faxes?: InputMaybe<Scalars['Boolean']>;
  can_see_fullscript_tab?: InputMaybe<Scalars['Boolean']>;
  can_see_sent_faxes?: InputMaybe<Scalars['Boolean']>;
  can_see_transfers?: InputMaybe<Scalars['Boolean']>;
  can_set_client_password?: InputMaybe<Scalars['Boolean']>;
  can_share_documents_and_folders_with_org_members?: InputMaybe<Scalars['Boolean']>;
  can_sign_others_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_sign_own_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_submit_cms_1500s_to_office_ally?: InputMaybe<Scalars['Boolean']>;
  can_view_all_org_members_tasks?: InputMaybe<Scalars['Boolean']>;
  can_view_cms1500s?: InputMaybe<Scalars['Boolean']>;
  can_view_goal_templates?: InputMaybe<Scalars['Boolean']>;
  can_view_labs?: InputMaybe<Scalars['Boolean']>;
  can_view_org_dashboard?: InputMaybe<Scalars['Boolean']>;
  can_view_reports?: InputMaybe<Scalars['Boolean']>;
  can_view_super_bills?: InputMaybe<Scalars['Boolean']>;
  can_write_org_addendums?: InputMaybe<Scalars['Boolean']>;
  gets_failed_fax_notif?: InputMaybe<Scalars['Boolean']>;
  gets_fax_notif?: InputMaybe<Scalars['Boolean']>;
  has_own_branding?: InputMaybe<Scalars['Boolean']>;
  is_admin?: InputMaybe<Scalars['Boolean']>;
  is_provider?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  notify_any_client_activity?: InputMaybe<Scalars['Boolean']>;
  notify_on_book?: InputMaybe<Scalars['Boolean']>;
  notify_on_cancel?: InputMaybe<Scalars['Boolean']>;
  notify_on_payment_failure?: InputMaybe<Scalars['Boolean']>;
  org_role?: InputMaybe<Scalars['String']>;
  organization_id?: InputMaybe<Scalars['ID']>;
  request_eligibility_checks?: InputMaybe<Scalars['Boolean']>;
  sees_all_billing?: InputMaybe<Scalars['Boolean']>;
  sees_all_clients?: InputMaybe<Scalars['Boolean']>;
  send_email_on_intake_flow_complete?: InputMaybe<Scalars['Boolean']>;
  send_email_on_intake_flow_start?: InputMaybe<Scalars['Boolean']>;
  share_appointment_types?: InputMaybe<Scalars['Boolean']>;
  share_custom_metrics?: InputMaybe<Scalars['Boolean']>;
  share_fullscript?: InputMaybe<Scalars['Boolean']>;
  share_goal_templates?: InputMaybe<Scalars['Boolean']>;
  share_packages?: InputMaybe<Scalars['Boolean']>;
  share_smart_phrases?: InputMaybe<Scalars['Boolean']>;
  share_user_groups?: InputMaybe<Scalars['Boolean']>;
  show_availability_first?: InputMaybe<Scalars['Boolean']>;
  show_org_tab?: InputMaybe<Scalars['Boolean']>;
  start_conversation_with?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of createPermissionTemplate. */
export type CreatePermissionTemplatePayload = {
  __typename?: 'createPermissionTemplatePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  newPermissionTemplate?: Maybe<PermissionTemplateType>;
};

/** Autogenerated input type of createPersonalizationQuestionnaire */
export type CreatePersonalizationQuestionnaireInput = {
  clients_in_a_month?: InputMaybe<Scalars['String']>;
  plans_to_add_more_users?: InputMaybe<Scalars['String']>;
  professions?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

/** Autogenerated return type of createPersonalizationQuestionnaire. */
export type CreatePersonalizationQuestionnairePayload = {
  __typename?: 'createPersonalizationQuestionnairePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  was_saved?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of createPreferredMedicalCode */
export type CreatePreferredMedicalCodeInput = {
  code_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  code_type?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createPreferredMedicalCode. */
export type CreatePreferredMedicalCodePayload = {
  __typename?: 'createPreferredMedicalCodePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  preferred_medical_codes?: Maybe<Array<Maybe<PreferredMedicalCode>>>;
};

/** Autogenerated input type of createProcedure */
export type CreateProcedureInput = {
  code?: InputMaybe<Scalars['String']>;
  code_system_name?: InputMaybe<Scalars['String']>;
  cpt_code_id?: InputMaybe<Scalars['ID']>;
  display_name?: InputMaybe<Scalars['String']>;
  procedure_end_datetime?: InputMaybe<Scalars['String']>;
  procedure_start_datetime?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  target_site?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createProcedure. */
export type CreateProcedurePayload = {
  __typename?: 'createProcedurePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  procedure?: Maybe<Procedure>;
};

/** Autogenerated input type of createProduct */
export type CreateProductInput = {
  name?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['String']>;
  remaining_quantity?: InputMaybe<Scalars['String']>;
  tax_description?: InputMaybe<Scalars['String']>;
  tax_rate?: InputMaybe<Scalars['String']>;
  unlimited_quantity?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of createProduct. */
export type CreateProductPayload = {
  __typename?: 'createProductPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  product?: Maybe<Product>;
};

/** Autogenerated input type of createProviderCptCodes */
export type CreateProviderCptCodesInput = {
  provider_cpt_codes?: InputMaybe<Array<InputMaybe<ProviderCptCodeInput>>>;
  provider_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createProviderCptCodes. */
export type CreateProviderCptCodesPayload = {
  __typename?: 'createProviderCptCodesPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of createRecommendation */
export type CreateRecommendationInput = {
  care_plan_id?: InputMaybe<Scalars['ID']>;
  form_answer_id?: InputMaybe<Scalars['ID']>;
  recommendation_body?: InputMaybe<Scalars['String']>;
  recommendation_type?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createRecommendation. */
export type CreateRecommendationPayload = {
  __typename?: 'createRecommendationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  recommendation?: Maybe<Recommendation>;
};

/** Autogenerated input type of createReferral */
export type CreateReferralInput = {
  referral_reason?: InputMaybe<Scalars['String']>;
  referring_physician_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createReferral. */
export type CreateReferralPayload = {
  __typename?: 'createReferralPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  referral?: Maybe<Referral>;
};

/** Autogenerated input type of createReferringPhysician */
export type CreateReferringPhysicianInput = {
  accepts_insurance?: InputMaybe<Scalars['Boolean']>;
  business_name?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fax_number?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  last_name?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<PhysicianLocationInput>;
  notes?: InputMaybe<Scalars['String']>;
  npi?: InputMaybe<Scalars['String']>;
  other_id?: InputMaybe<Scalars['String']>;
  other_id_qualifier?: InputMaybe<Scalars['String']>;
  phone_number?: InputMaybe<Scalars['String']>;
  referrals?: InputMaybe<Array<InputMaybe<PhysicianReferralInput>>>;
  speciality?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createReferringPhysician. */
export type CreateReferringPhysicianPayload = {
  __typename?: 'createReferringPhysicianPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  duplicated_physician?: Maybe<ReferringPhysician>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  referring_physician?: Maybe<ReferringPhysician>;
};

/** Autogenerated input type of createRequestedForm */
export type CreateRequestedFormInput = {
  custom_module_form_id?: InputMaybe<Scalars['ID']>;
  ends_on?: InputMaybe<Scalars['String']>;
  form?: InputMaybe<Scalars['String']>;
  frequency?: InputMaybe<Scalars['String']>;
  hour?: InputMaybe<Scalars['String']>;
  is_recurring?: InputMaybe<Scalars['Boolean']>;
  item_type?: InputMaybe<Scalars['String']>;
  minute?: InputMaybe<Scalars['String']>;
  monthday?: InputMaybe<Scalars['String']>;
  period?: InputMaybe<Scalars['String']>;
  recipient_id?: InputMaybe<Scalars['ID']>;
  /** A comma-separated list of user IDs and/or user group IDs. If passing user group IDs, they should take the following format: 'group_1,group_2,group_3' You can pass both user IDs and user group IDs. Example: '1,2,3,group_1,group_2' If you pass a user group ID, all users in that group will be sent the form. */
  recipient_ids?: InputMaybe<Scalars['String']>;
  recurrence_ends?: InputMaybe<Scalars['Boolean']>;
  weekday?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createRequestedForm. */
export type CreateRequestedFormPayload = {
  __typename?: 'createRequestedFormPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  requestedFormCompletion?: Maybe<RequestedFormCompletion>;
  requestedFormCompletionStatus?: Maybe<RequestedFormStatusType>;
};

/** Autogenerated input type of createRequestedPayment */
export type CreateRequestedPaymentInput = {
  appointment_id?: InputMaybe<Scalars['ID']>;
  cms1500_id?: InputMaybe<Scalars['ID']>;
  invoice_type?: InputMaybe<Scalars['String']>;
  is_preview?: InputMaybe<Scalars['Boolean']>;
  notes?: InputMaybe<Scalars['String']>;
  offering_id?: InputMaybe<Scalars['ID']>;
  price?: InputMaybe<Scalars['String']>;
  recipient_id?: InputMaybe<Scalars['ID']>;
  requested_payer?: InputMaybe<RequestedPayerInput>;
  requested_payment_template?: InputMaybe<RequestedPaymentTemplateInput>;
  sender_id?: InputMaybe<Scalars['ID']>;
  service_date?: InputMaybe<Scalars['String']>;
  services_provided?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  user_package_selection_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createRequestedPayment. */
export type CreateRequestedPaymentPayload = {
  __typename?: 'createRequestedPaymentPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  requestedPayment?: Maybe<RequestedPayment>;
};

/** Autogenerated input type of createRupaOrder */
export type CreateRupaOrderInput = {
  client_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createRupaOrder. */
export type CreateRupaOrderPayload = {
  __typename?: 'createRupaOrderPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  rupa_order_url?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of createSentDirectMessage */
export type CreateSentDirectMessageInput = {
  binary_attachment_document_id?: InputMaybe<Scalars['ID']>;
  message_body?: InputMaybe<Scalars['String']>;
  outbound_recipient?: InputMaybe<Scalars['String']>;
  patient_id?: InputMaybe<Scalars['ID']>;
  subject?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createSentDirectMessage. */
export type CreateSentDirectMessagePayload = {
  __typename?: 'createSentDirectMessagePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  sent_direct_message?: Maybe<SentDirectMessage>;
};

/** Autogenerated input type of createSentFax */
export type CreateSentFaxInput = {
  answer_ids?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['String']>;
  destination_number?: InputMaybe<Scalars['String']>;
  /** AKA the provider. Required */
  dietitian?: InputMaybe<FaxDietitianInput>;
  document_id?: InputMaybe<Scalars['String']>;
  document_ids?: InputMaybe<Scalars['String']>;
  form_answer_group_ids?: InputMaybe<Scalars['String']>;
  include_header_on_every_page?: InputMaybe<Scalars['Boolean']>;
  include_hipaa_disclaimer?: InputMaybe<Scalars['Boolean']>;
  patient_id?: InputMaybe<Scalars['String']>;
  recipient_company?: InputMaybe<Scalars['String']>;
  recipient_name?: InputMaybe<Scalars['String']>;
  remarks?: InputMaybe<Scalars['String']>;
  skip_cover_page?: InputMaybe<Scalars['Boolean']>;
  subject?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createSentFax. */
export type CreateSentFaxPayload = {
  __typename?: 'createSentFaxPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  sent_fax?: Maybe<SentFax>;
};

/** Autogenerated input type of createSmartPhrase */
export type CreateSmartPhraseInput = {
  name?: InputMaybe<Scalars['String']>;
  phrase?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createSmartPhrase. */
export type CreateSmartPhrasePayload = {
  __typename?: 'createSmartPhrasePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  smartPhrase?: Maybe<SmartPhrase>;
};

/** Autogenerated input type of createSmokingStatus */
export type CreateSmokingStatusInput = {
  smoking_status_code?: InputMaybe<Scalars['String']>;
  status_end_datetime?: InputMaybe<Scalars['String']>;
  status_start_datetime?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createSmokingStatus. */
export type CreateSmokingStatusPayload = {
  __typename?: 'createSmokingStatusPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  smokingStatus?: Maybe<SmokingStatus>;
};

/** Autogenerated input type of createStripeCustomerDetail */
export type CreateStripeCustomerDetailInput = {
  /** Options are 'hsa', 'fsa', and 'personal'. Defaults to personal */
  card_type_label?: InputMaybe<Scalars['String']>;
  is_default?: InputMaybe<Scalars['Boolean']>;
  token?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createStripeCustomerDetail. */
export type CreateStripeCustomerDetailPayload = {
  __typename?: 'createStripeCustomerDetailPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  stripeError?: Maybe<Scalars['String']>;
  stripe_customer_detail?: Maybe<StripeCustomerDetail>;
};

/** Autogenerated input type of createSubscription */
export type CreateSubscriptionInput = {
  billing_address?: InputMaybe<BillingAddressInput>;
  plan_id?: InputMaybe<Scalars['String']>;
  /** Can be passed in instead of plan_id to select which plan the subscription should be on. Normally preferrable to use plan_id */
  plan_name?: InputMaybe<Scalars['String']>;
  token?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createSubscription. */
export type CreateSubscriptionPayload = {
  __typename?: 'createSubscriptionPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  subscription?: Maybe<SubscriptionInstance>;
};

/** Autogenerated input type of createSuperBill */
export type CreateSuperBillInput = {
  address?: InputMaybe<Scalars['String']>;
  amount_paid?: InputMaybe<Scalars['String']>;
  cpt_codes_super_bills?: InputMaybe<Array<InputMaybe<CptCodesSuperBillInput>>>;
  dietitian_id?: InputMaybe<Scalars['ID']>;
  icd_codes_super_bills?: InputMaybe<Array<InputMaybe<IcdCodesSuperBillInput>>>;
  license_num?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationInputs>;
  location_id?: InputMaybe<Scalars['ID']>;
  npi?: InputMaybe<Scalars['String']>;
  patient_dob?: InputMaybe<Scalars['String']>;
  patient_id?: InputMaybe<Scalars['ID']>;
  patient_location?: InputMaybe<PatientLocationInputs>;
  patient_name?: InputMaybe<Scalars['String']>;
  patient_phone?: InputMaybe<Scalars['String']>;
  place_of_service_id?: InputMaybe<Scalars['ID']>;
  prov_city?: InputMaybe<Scalars['String']>;
  prov_email?: InputMaybe<Scalars['String']>;
  prov_line1?: InputMaybe<Scalars['String']>;
  prov_line2?: InputMaybe<Scalars['String']>;
  prov_phone?: InputMaybe<Scalars['String']>;
  prov_state?: InputMaybe<Scalars['String']>;
  prov_zip?: InputMaybe<Scalars['String']>;
  provider_name?: InputMaybe<Scalars['String']>;
  receipt_line_items?: InputMaybe<Array<InputMaybe<ReceiptLineItemInput>>>;
  referrer_name?: InputMaybe<Scalars['String']>;
  referrer_npi?: InputMaybe<Scalars['String']>;
  service_date?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  tax_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createSuperBill. */
export type CreateSuperBillPayload = {
  __typename?: 'createSuperBillPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  superBill?: Maybe<SuperBill>;
};

/** Autogenerated input type of createTag */
export type CreateTagInput = {
  name?: InputMaybe<Scalars['String']>;
  /** The ID of the user to apply a tag on */
  taggable_user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createTag. */
export type CreateTagPayload = {
  __typename?: 'createTagPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  tag?: Maybe<Tag>;
};

/** Autogenerated input type of createTask */
export type CreateTaskInput = {
  client_id?: InputMaybe<Scalars['String']>;
  complete?: InputMaybe<Scalars['Boolean']>;
  completed_by_id?: InputMaybe<Scalars['ID']>;
  content?: InputMaybe<Scalars['String']>;
  created_by_id?: InputMaybe<Scalars['String']>;
  due_date?: InputMaybe<Scalars['String']>;
  note_id?: InputMaybe<Scalars['ID']>;
  priority?: InputMaybe<Scalars['Int']>;
  reminder?: InputMaybe<TaskReminderInput>;
  seen?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createTask. */
export type CreateTaskPayload = {
  __typename?: 'createTaskPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  task?: Maybe<Task>;
};

/** Autogenerated input type of createUniqueDeviceIdentifier */
export type CreateUniqueDeviceIdentifierInput = {
  assigning_authority?: InputMaybe<Scalars['String']>;
  device_code?: InputMaybe<Scalars['String']>;
  display_name?: InputMaybe<Scalars['String']>;
  scoping_entity?: InputMaybe<Scalars['String']>;
  udi_code?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of createUniqueDeviceIdentifier. */
export type CreateUniqueDeviceIdentifierPayload = {
  __typename?: 'createUniqueDeviceIdentifierPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  unique_device_identifier?: Maybe<UniqueDeviceIdentifier>;
};

/** Autogenerated input type of createVisitor */
export type CreateVisitorInput = {
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  first_url?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createVisitor. */
export type CreateVisitorPayload = {
  __typename?: 'createVisitorPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  visitor?: Maybe<Visitor>;
};

/** Autogenerated input type of createWebhook */
export type CreateWebhookInput = {
  event_type?: InputMaybe<Scalars['String']>;
  is_enabled?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of createWebhook. */
export type CreateWebhookPayload = {
  __typename?: 'createWebhookPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  webhook?: Maybe<Webhook>;
};

/** Autogenerated input type of deleteAcceptedInsurancePlan */
export type DeleteAcceptedInsurancePlanInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteAcceptedInsurancePlan. */
export type DeleteAcceptedInsurancePlanPayload = {
  __typename?: 'deleteAcceptedInsurancePlanPayload';
  accepted_insurance_plan?: Maybe<AcceptedInsurancePlan>;
  appointment_setting?: Maybe<AppointmentSetting>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteAllergySensitivity */
export type DeleteAllergySensitivityInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteAllergySensitivity. */
export type DeleteAllergySensitivityPayload = {
  __typename?: 'deleteAllergySensitivityPayload';
  allergy_sensitivity?: Maybe<AllergySensitivity>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteApiKey */
export type DeleteApiKeyInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteApiKey. */
export type DeleteApiKeyPayload = {
  __typename?: 'deleteApiKeyPayload';
  api_key?: Maybe<ApiKey>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteAppleHealth */
export type DeleteAppleHealthInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteAppleHealth. */
export type DeleteAppleHealthPayload = {
  __typename?: 'deleteAppleHealthPayload';
  apple_health?: Maybe<AppleHealth>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteAppointment */
export type DeleteAppointmentInput = {
  appointment_inclusion_uuid?: InputMaybe<Scalars['ID']>;
  deleteRecurring?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteAppointment. */
export type DeleteAppointmentPayload = {
  __typename?: 'deleteAppointmentPayload';
  appointment?: Maybe<Appointment>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteAppointmentTypeCptCode */
export type DeleteAppointmentTypeCptCodeInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteAppointmentTypeCptCode. */
export type DeleteAppointmentTypeCptCodePayload = {
  __typename?: 'deleteAppointmentTypeCptCodePayload';
  appointment_type_cpt_code?: Maybe<AppointmentTypeCptCodeType>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteAppointmentType */
export type DeleteAppointmentTypeInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteAppointmentType. */
export type DeleteAppointmentTypePayload = {
  __typename?: 'deleteAppointmentTypePayload';
  appointmentType?: Maybe<AppointmentType>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteAutoTaskGenerator */
export type DeleteAutoTaskGeneratorInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteAutoTaskGenerator. */
export type DeleteAutoTaskGeneratorPayload = {
  __typename?: 'deleteAutoTaskGeneratorPayload';
  auto_task_generator?: Maybe<AutoTaskGenerator>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteAvailability */
export type DeleteAvailabilityInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteAvailability. */
export type DeleteAvailabilityPayload = {
  __typename?: 'deleteAvailabilityPayload';
  availability?: Maybe<Availability>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteBillingItem */
export type DeleteBillingItemInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteBillingItem. */
export type DeleteBillingItemPayload = {
  __typename?: 'deleteBillingItemPayload';
  billingItem?: Maybe<BillingItem>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteCarePlanConnection */
export type DeleteCarePlanConnectionInput = {
  care_plan_id?: InputMaybe<Scalars['ID']>;
  connectable_id?: InputMaybe<Scalars['ID']>;
  connectable_type?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of deleteCarePlanConnection. */
export type DeleteCarePlanConnectionPayload = {
  __typename?: 'deleteCarePlanConnectionPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  connection?: Maybe<CarePlanConnection>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteCarePlan */
export type DeleteCarePlanInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteCarePlan. */
export type DeleteCarePlanPayload = {
  __typename?: 'deleteCarePlanPayload';
  carePlan?: Maybe<CarePlan>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteCms1500 */
export type DeleteCms1500Input = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteCms1500. */
export type DeleteCms1500Payload = {
  __typename?: 'deleteCms1500Payload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  cms1500?: Maybe<Cms1500>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteCognitiveStatus */
export type DeleteCognitiveStatusInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteCognitiveStatus. */
export type DeleteCognitiveStatusPayload = {
  __typename?: 'deleteCognitiveStatusPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  cognitive_status?: Maybe<CognitiveStatus>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteComment */
export type DeleteCommentInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteComment. */
export type DeleteCommentPayload = {
  __typename?: 'deleteCommentPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  comment?: Maybe<Comment>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteConversationMembership */
export type DeleteConversationMembershipInput = {
  conversation_id?: InputMaybe<Scalars['ID']>;
  group_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteConversationMembership. */
export type DeleteConversationMembershipPayload = {
  __typename?: 'deleteConversationMembershipPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  conversationMembership?: Maybe<ConversationMembership>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteCourseBenefit */
export type DeleteCourseBenefitInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteCourseBenefit. */
export type DeleteCourseBenefitPayload = {
  __typename?: 'deleteCourseBenefitPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  courseBenefit?: Maybe<CourseBenefit>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteCourseGroup */
export type DeleteCourseGroupInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteCourseGroup. */
export type DeleteCourseGroupPayload = {
  __typename?: 'deleteCourseGroupPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  courseGroup?: Maybe<CourseGroup>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteCourse */
export type DeleteCourseInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated input type of deleteCourseItem */
export type DeleteCourseItemInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteCourseItem. */
export type DeleteCourseItemPayload = {
  __typename?: 'deleteCourseItemPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  courseItem?: Maybe<CourseItem>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteCourseMembership */
export type DeleteCourseMembershipInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteCourseMembership. */
export type DeleteCourseMembershipPayload = {
  __typename?: 'deleteCourseMembershipPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  courseMembership?: Maybe<CourseMembership>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated return type of deleteCourse. */
export type DeleteCoursePayload = {
  __typename?: 'deleteCoursePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  course?: Maybe<Course>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteCustomEmail */
export type DeleteCustomEmailInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteCustomEmail. */
export type DeleteCustomEmailPayload = {
  __typename?: 'deleteCustomEmailPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customEmail?: Maybe<CustomEmail>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteCustomFood */
export type DeleteCustomFoodInput = {
  id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of deleteCustomFood. */
export type DeleteCustomFoodPayload = {
  __typename?: 'deleteCustomFoodPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customFood?: Maybe<Food>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteCustomModuleForm */
export type DeleteCustomModuleFormInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteCustomModuleForm. */
export type DeleteCustomModuleFormPayload = {
  __typename?: 'deleteCustomModuleFormPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customModuleForm?: Maybe<CustomModuleForm>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteCustomModule */
export type DeleteCustomModuleInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteCustomModule. */
export type DeleteCustomModulePayload = {
  __typename?: 'deleteCustomModulePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customModule?: Maybe<CustomModule>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteDexcomConnection */
export type DeleteDexcomConnectionInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteDexcomConnection. */
export type DeleteDexcomConnectionPayload = {
  __typename?: 'deleteDexcomConnectionPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  dexcom_connection?: Maybe<DexcomConnection>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteDocument */
export type DeleteDocumentInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteDocument. */
export type DeleteDocumentPayload = {
  __typename?: 'deleteDocumentPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  document?: Maybe<Document>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteDosespot */
export type DeleteDosespotInput = {
  /** The ID of the dosespot object to delete */
  dosespot_object_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteDosespot. */
export type DeleteDosespotPayload = {
  __typename?: 'deleteDosespotPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  /** The success string */
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of deleteEntry */
export type DeleteEntryInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteEntry. */
export type DeleteEntryPayload = {
  __typename?: 'deleteEntryPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  entry?: Maybe<Entry>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteExternalCalendar */
export type DeleteExternalCalendarInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteExternalCalendar. */
export type DeleteExternalCalendarPayload = {
  __typename?: 'deleteExternalCalendarPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  external_calendar?: Maybe<ExternalCalendar>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteFamilyHistory */
export type DeleteFamilyHistoryInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteFamilyHistory. */
export type DeleteFamilyHistoryPayload = {
  __typename?: 'deleteFamilyHistoryPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  family_history_condition?: Maybe<FamilyHistoryCondition>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteFitbit */
export type DeleteFitbitInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteFitbit. */
export type DeleteFitbitPayload = {
  __typename?: 'deleteFitbitPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  fitbit?: Maybe<Fitbit>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteFolder */
export type DeleteFolderInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteFolder. */
export type DeleteFolderPayload = {
  __typename?: 'deleteFolderPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  folder?: Maybe<Folder>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteFormAnswerGroup */
export type DeleteFormAnswerGroupInput = {
  id?: InputMaybe<Scalars['ID']>;
  /** If passed, the connection between a form_answer_group and a group appointment for the given user will be removed */
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteFormAnswerGroup. */
export type DeleteFormAnswerGroupPayload = {
  __typename?: 'deleteFormAnswerGroupPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  form_answer_group?: Maybe<FormAnswerGroup>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteFunctionalStatus */
export type DeleteFunctionalStatusInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteFunctionalStatus. */
export type DeleteFunctionalStatusPayload = {
  __typename?: 'deleteFunctionalStatusPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  functional_status?: Maybe<FunctionalStatus>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteGoalHistory */
export type DeleteGoalHistoryInput = {
  completed_on?: InputMaybe<Scalars['String']>;
  /** ID of the goal to remove a goal history for */
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteGoalHistory. */
export type DeleteGoalHistoryPayload = {
  __typename?: 'deleteGoalHistoryPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  goal_history?: Maybe<GoalHistory>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteGoal */
export type DeleteGoalInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteGoal. */
export type DeleteGoalPayload = {
  __typename?: 'deleteGoalPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  goal?: Maybe<Goal>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteGoogleFit */
export type DeleteGoogleFitInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteGoogleFit. */
export type DeleteGoogleFitPayload = {
  __typename?: 'deleteGoogleFitPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  google_fit?: Maybe<GoogleFit>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteHealthConcern */
export type DeleteHealthConcernInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteHealthConcern. */
export type DeleteHealthConcernPayload = {
  __typename?: 'deleteHealthConcernPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  health_concern?: Maybe<HealthConcern>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteImplantableDeviceUser */
export type DeleteImplantableDeviceUserInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteImplantableDeviceUser. */
export type DeleteImplantableDeviceUserPayload = {
  __typename?: 'deleteImplantableDeviceUserPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  implantable_device_user?: Maybe<ImplantableDeviceUser>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteInsuranceAuthorization */
export type DeleteInsuranceAuthorizationInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteInsuranceAuthorization. */
export type DeleteInsuranceAuthorizationPayload = {
  __typename?: 'deleteInsuranceAuthorizationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  insuranceAuthorization?: Maybe<InsuranceAuthorizationType>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteInsurancePlan */
export type DeleteInsurancePlanInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteInsurancePlan. */
export type DeleteInsurancePlanPayload = {
  __typename?: 'deleteInsurancePlanPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  insurance_plan?: Maybe<InsurancePlan>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteLocation */
export type DeleteLocationInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteLocation. */
export type DeleteLocationPayload = {
  __typename?: 'deleteLocationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  location?: Maybe<Location>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteMeal */
export type DeleteMealInput = {
  id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of deleteMeal. */
export type DeleteMealPayload = {
  __typename?: 'deleteMealPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  meal?: Maybe<Meal>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of deleteNote */
export type DeleteNoteInput = {
  deleted_by_user?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteNote. */
export type DeleteNotePayload = {
  __typename?: 'deleteNotePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  note?: Maybe<Note>;
};

/** Autogenerated input type of deleteNotificationContact */
export type DeleteNotificationContactInput = {
  id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteNotificationContact. */
export type DeleteNotificationContactPayload = {
  __typename?: 'deleteNotificationContactPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  notificationContact?: Maybe<NotificationContact>;
};

/** Autogenerated input type of deleteOfferingCoupon */
export type DeleteOfferingCouponInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteOfferingCoupon. */
export type DeleteOfferingCouponPayload = {
  __typename?: 'deleteOfferingCouponPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  offeringCoupon?: Maybe<OfferingCoupon>;
};

/** Autogenerated input type of deleteOffering */
export type DeleteOfferingInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteOffering. */
export type DeleteOfferingPayload = {
  __typename?: 'deleteOfferingPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  offering?: Maybe<Offering>;
};

/** Autogenerated input type of deleteOnboardingFlow */
export type DeleteOnboardingFlowInput = {
  flow_to_receive_groups?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteOnboardingFlow. */
export type DeleteOnboardingFlowPayload = {
  __typename?: 'deleteOnboardingFlowPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  onboardingFlow?: Maybe<OnboardingFlow>;
};

/** Autogenerated input type of deleteOnboardingItem */
export type DeleteOnboardingItemInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteOnboardingItem. */
export type DeleteOnboardingItemPayload = {
  __typename?: 'deleteOnboardingItemPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  onboardingItem?: Maybe<OnboardingItem>;
};

/** Autogenerated input type of deleteOrganizationCptCode */
export type DeleteOrganizationCptCodeInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteOrganizationCptCode. */
export type DeleteOrganizationCptCodePayload = {
  __typename?: 'deleteOrganizationCptCodePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  organization_cpt_code?: Maybe<OrganizationCptCodeType>;
};

/** Autogenerated input type of deleteOrganizationInfo */
export type DeleteOrganizationInfoInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteOrganizationInfo. */
export type DeleteOrganizationInfoPayload = {
  __typename?: 'deleteOrganizationInfoPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  organizationInfo?: Maybe<OrganizationInfo>;
};

/** Autogenerated input type of deleteOrganizationMembership */
export type DeleteOrganizationMembershipInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteOrganizationMembership. */
export type DeleteOrganizationMembershipPayload = {
  __typename?: 'deleteOrganizationMembershipPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  organizationMembership?: Maybe<OrganizationMembership>;
};

/** Autogenerated input type of deletePermissionTemplate */
export type DeletePermissionTemplateInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deletePermissionTemplate. */
export type DeletePermissionTemplatePayload = {
  __typename?: 'deletePermissionTemplatePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  permission_template?: Maybe<PermissionTemplateType>;
};

/** Autogenerated input type of deletePreferredMedicalCode */
export type DeletePreferredMedicalCodeInput = {
  code_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  code_type?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of deletePreferredMedicalCode. */
export type DeletePreferredMedicalCodePayload = {
  __typename?: 'deletePreferredMedicalCodePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  preferred_medical_codes?: Maybe<Array<Maybe<PreferredMedicalCode>>>;
};

/** Autogenerated input type of deleteProcedure */
export type DeleteProcedureInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteProcedure. */
export type DeleteProcedurePayload = {
  __typename?: 'deleteProcedurePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  procedure?: Maybe<Procedure>;
};

/** Autogenerated input type of deleteProduct */
export type DeleteProductInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteProduct. */
export type DeleteProductPayload = {
  __typename?: 'deleteProductPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  product?: Maybe<Product>;
};

/** Autogenerated input type of deleteProviderCptCode */
export type DeleteProviderCptCodeInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteProviderCptCode. */
export type DeleteProviderCptCodePayload = {
  __typename?: 'deleteProviderCptCodePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  provider_cpt_code?: Maybe<ProviderCptCodeType>;
};

/** Autogenerated input type of deleteReceivedFax */
export type DeleteReceivedFaxInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteReceivedFax. */
export type DeleteReceivedFaxPayload = {
  __typename?: 'deleteReceivedFaxPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  receivedFax?: Maybe<ReceivedFax>;
};

/** Autogenerated input type of deleteRecommendation */
export type DeleteRecommendationInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteRecommendation. */
export type DeleteRecommendationPayload = {
  __typename?: 'deleteRecommendationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  recommendation?: Maybe<Recommendation>;
};

/** Autogenerated input type of deleteReferral */
export type DeleteReferralInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteReferral. */
export type DeleteReferralPayload = {
  __typename?: 'deleteReferralPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  referral?: Maybe<Referral>;
};

/** Autogenerated input type of deleteReferringPhysician */
export type DeleteReferringPhysicianInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteReferringPhysician. */
export type DeleteReferringPhysicianPayload = {
  __typename?: 'deleteReferringPhysicianPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  referringPhysician?: Maybe<ReferringPhysician>;
};

/** Autogenerated input type of deleteRequestedForm */
export type DeleteRequestedFormInput = {
  id?: InputMaybe<Scalars['ID']>;
  recurringFormId?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteRequestedForm. */
export type DeleteRequestedFormPayload = {
  __typename?: 'deleteRequestedFormPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  requestedFormCompletion?: Maybe<RequestedFormCompletion>;
};

/** Autogenerated input type of deleteRequestedPayment */
export type DeleteRequestedPaymentInput = {
  id: Scalars['ID'];
};

/** Autogenerated return type of deleteRequestedPayment. */
export type DeleteRequestedPaymentPayload = {
  __typename?: 'deleteRequestedPaymentPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  requested_payment?: Maybe<RequestedPayment>;
};

/** Autogenerated input type of deleteShapaConnection */
export type DeleteShapaConnectionInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteShapaConnection. */
export type DeleteShapaConnectionPayload = {
  __typename?: 'deleteShapaConnectionPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  shapa_connection?: Maybe<ShapaConnection>;
};

/** Autogenerated input type of deleteSmartPhrase */
export type DeleteSmartPhraseInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteSmartPhrase. */
export type DeleteSmartPhrasePayload = {
  __typename?: 'deleteSmartPhrasePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  smartPhrase?: Maybe<SmartPhrase>;
};

/** Autogenerated input type of deleteSmokingStatus */
export type DeleteSmokingStatusInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteSmokingStatus. */
export type DeleteSmokingStatusPayload = {
  __typename?: 'deleteSmokingStatusPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  smokingStatus?: Maybe<SmokingStatus>;
};

/** Autogenerated input type of deleteStripeCustomerDetail */
export type DeleteStripeCustomerDetailInput = {
  card_id?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of deleteStripeCustomerDetail. */
export type DeleteStripeCustomerDetailPayload = {
  __typename?: 'deleteStripeCustomerDetailPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  stripe_customer_detail?: Maybe<StripeCustomerDetail>;
};

/** Autogenerated input type of deleteSuperBill */
export type DeleteSuperBillInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteSuperBill. */
export type DeleteSuperBillPayload = {
  __typename?: 'deleteSuperBillPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  superBill?: Maybe<SuperBill>;
};

/** Autogenerated input type of deleteTag */
export type DeleteTagInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteTag. */
export type DeleteTagPayload = {
  __typename?: 'deleteTagPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  tag?: Maybe<Tag>;
};

/** Autogenerated input type of deleteTask */
export type DeleteTaskInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteTask. */
export type DeleteTaskPayload = {
  __typename?: 'deleteTaskPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  task?: Maybe<Task>;
};

/** Autogenerated input type of deleteUniqueDeviceIdentifier */
export type DeleteUniqueDeviceIdentifierInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteUniqueDeviceIdentifier. */
export type DeleteUniqueDeviceIdentifierPayload = {
  __typename?: 'deleteUniqueDeviceIdentifierPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  unique_device_identifier?: Maybe<UniqueDeviceIdentifier>;
};

/** Autogenerated input type of deleteUserGroup */
export type DeleteUserGroupInput = {
  group_to_receive_clients?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteUserGroup. */
export type DeleteUserGroupPayload = {
  __typename?: 'deleteUserGroupPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  user_group?: Maybe<UserGroup>;
};

/** Autogenerated input type of deleteWebhook */
export type DeleteWebhookInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteWebhook. */
export type DeleteWebhookPayload = {
  __typename?: 'deleteWebhookPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  webhook?: Maybe<Webhook>;
};

/** Autogenerated input type of deleteWithingsConnection */
export type DeleteWithingsConnectionInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of deleteWithingsConnection. */
export type DeleteWithingsConnectionPayload = {
  __typename?: 'deleteWithingsConnectionPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  withings_connection?: Maybe<WithingsConnection>;
};

/** Autogenerated input type of destroyAnnouncement */
export type DestroyAnnouncementInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of destroyAnnouncement. */
export type DestroyAnnouncementPayload = {
  __typename?: 'destroyAnnouncementPayload';
  announcement?: Maybe<Announcement>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of destroyFaxAcctInfo */
export type DestroyFaxAcctInfoInput = {
  aes_key?: InputMaybe<Scalars['String']>;
  api_key?: InputMaybe<Scalars['String']>;
  fax_number?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
  username?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of destroyFaxAcctInfo. */
export type DestroyFaxAcctInfoPayload = {
  __typename?: 'destroyFaxAcctInfoPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of destroyMedication */
export type DestroyMedicationInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of destroyMedication. */
export type DestroyMedicationPayload = {
  __typename?: 'destroyMedicationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  medication?: Maybe<MedicationType>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of destroyRecurringForm */
export type DestroyRecurringFormInput = {
  connectable_id?: InputMaybe<Scalars['ID']>;
  connectable_type?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of destroyRecurringForm. */
export type DestroyRecurringFormPayload = {
  __typename?: 'destroyRecurringFormPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  recurringForm?: Maybe<RecurringForm>;
};

/** Autogenerated input type of dismissAllAnnouncements */
export type DismissAllAnnouncementsInput = {
  patient_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of dismissAllAnnouncements. */
export type DismissAllAnnouncementsPayload = {
  __typename?: 'dismissAllAnnouncementsPayload';
  announcements?: Maybe<Array<Maybe<Announcement>>>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of dismissAnnouncement */
export type DismissAnnouncementInput = {
  id?: InputMaybe<Scalars['ID']>;
  patient_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of dismissAnnouncement. */
export type DismissAnnouncementPayload = {
  __typename?: 'dismissAnnouncementPayload';
  announcement?: Maybe<Announcement>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of dosespotSSO */
export type DosespotSsoInput = {
  /** The patient ID */
  patient_id: Scalars['ID'];
  /** The user ID of the provider */
  user_id: Scalars['ID'];
};

/** Autogenerated return type of dosespotSSO. */
export type DosespotSsoPayload = {
  __typename?: 'dosespotSSOPayload';
  /** The additional info */
  additional_info?: Maybe<Scalars['String']>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  /** The success string */
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of dummyUser */
export type DummyUserInput = {
  /** The ID of the clinic */
  user_id: Scalars['ID'];
};

/** Autogenerated return type of dummyUser. */
export type DummyUserPayload = {
  __typename?: 'dummyUserPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  /** The success string */
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of editAvailability */
export type EditAvailabilityInput = {
  appointment_location_id?: InputMaybe<Scalars['String']>;
  appointment_type_id?: InputMaybe<Scalars['String']>;
  contact_type_id?: InputMaybe<Scalars['String']>;
  day_of_week?: InputMaybe<Scalars['Int']>;
  end_on?: InputMaybe<Scalars['String']>;
  end_time?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  is_repeating?: InputMaybe<Scalars['Boolean']>;
  range_end?: InputMaybe<Scalars['String']>;
  range_start?: InputMaybe<Scalars['String']>;
  time?: InputMaybe<Scalars['String']>;
  timezone?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of editAvailability. */
export type EditAvailabilityPayload = {
  __typename?: 'editAvailabilityPayload';
  availability?: Maybe<Availability>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of enableSelfSignup */
export type EnableSelfSignupInput = {
  /** To enable or disable */
  enable: Scalars['String'];
  /** The user ID of the provider */
  user_id: Scalars['ID'];
};

/** Autogenerated return type of enableSelfSignup. */
export type EnableSelfSignupPayload = {
  __typename?: 'enableSelfSignupPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  /** The success string */
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of exportClientEhi */
export type ExportClientEhiInput = {
  /** The ID of the client to export EHI data for. */
  client_id?: InputMaybe<Scalars['ID']>;
  /** Whether or not we should export the client EHI data in a job. */
  should_run_in_job?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of exportClientEhi. */
export type ExportClientEhiPayload = {
  __typename?: 'exportClientEhiPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  /** The banner message shown when successful. */
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of exportToTemplate */
export type ExportToTemplateInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of exportToTemplate. */
export type ExportToTemplatePayload = {
  __typename?: 'exportToTemplatePayload';
  carePlan?: Maybe<CarePlan>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** A fullscript Sync */
export type Fullscript = {
  __typename?: 'fullscript';
  /** The unique identifier of the fullscript */
  id: Scalars['ID'];
};

/** Autogenerated input type of generateChartingPdf */
export type GenerateChartingPdfInput = {
  form_answer_group_array?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  include_header_on_every_page?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of generateChartingPdf. */
export type GenerateChartingPdfPayload = {
  __typename?: 'generateChartingPdfPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  user?: Maybe<User>;
};

/** Autogenerated input type of mergeClients */
export type MergeClientsInput = {
  /** the two user IDs to merge */
  ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** Optional: the email to update the remaining user to */
  target_email?: InputMaybe<Scalars['String']>;
  /** the user that will remain */
  target_user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of mergeClients. */
export type MergeClientsPayload = {
  __typename?: 'mergeClientsPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  user?: Maybe<User>;
};

/** Autogenerated input type of removeAppliedTag */
export type RemoveAppliedTagInput = {
  id?: InputMaybe<Scalars['ID']>;
  /** The ID of the user to remove a tag from */
  taggable_user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of removeAppliedTag. */
export type RemoveAppliedTagPayload = {
  __typename?: 'removeAppliedTagPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  tag?: Maybe<Tag>;
};

/** Autogenerated input type of removeDraft */
export type RemoveDraftInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of removeDraft. */
export type RemoveDraftPayload = {
  __typename?: 'removeDraftPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  draft?: Maybe<Draft>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of removeUserFromGroupCarePlan */
export type RemoveUserFromGroupCarePlanInput = {
  care_plan_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of removeUserFromGroupCarePlan. */
export type RemoveUserFromGroupCarePlanPayload = {
  __typename?: 'removeUserFromGroupCarePlanPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  groupCarePlanUserConnection?: Maybe<GroupCarePlanUserConnection>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of resendSentFax */
export type ResendSentFaxInput = {
  sent_fax_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of resendSentFax. */
export type ResendSentFaxPayload = {
  __typename?: 'resendSentFaxPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  sent_fax?: Maybe<SentFax>;
};

/** Autogenerated input type of resetPassword */
export type ResetPasswordInput = {
  email?: InputMaybe<Scalars['String']>;
  /** The authentication namespace to check reset passwords for. */
  namespace?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of resetPassword. */
export type ResetPasswordPayload = {
  __typename?: 'resetPasswordPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of restoreVersions */
export type RestoreVersionsInput = {
  /** The PaperTrail::HealthieVersion ID */
  version_id: Scalars['ID'];
};

/** Autogenerated return type of restoreVersions. */
export type RestoreVersionsPayload = {
  __typename?: 'restoreVersionsPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  /** The success string */
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of resyncRupaLabOrders */
export type ResyncRupaLabOrdersInput = {
  /** DO NOT USE */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of resyncRupaLabOrders. */
export type ResyncRupaLabOrdersPayload = {
  __typename?: 'resyncRupaLabOrdersPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of revokeToken */
export type RevokeTokenInput = {
  /** DO NOT USE */
  clientMutationId?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of revokeToken. */
export type RevokeTokenPayload = {
  __typename?: 'revokeTokenPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of runEligibilityCheckMutation */
export type RunEligibilityCheckMutationInput = {
  /** The ID of the policy to check */
  id?: InputMaybe<Scalars['ID']>;
  /** An array of service type codes to check benefits for. */
  service_codes?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

/** Autogenerated return type of runEligibilityCheckMutation. */
export type RunEligibilityCheckMutationPayload = {
  __typename?: 'runEligibilityCheckMutationPayload';
  /** The result of the check */
  claim_eligibility_check?: Maybe<ClaimEligibilityCheck>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of sendCarePlanEmail */
export type SendCarePlanEmailInput = {
  id?: InputMaybe<Scalars['ID']>;
  patient_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of sendCarePlanEmail. */
export type SendCarePlanEmailPayload = {
  __typename?: 'sendCarePlanEmailPayload';
  carePlan?: Maybe<CarePlan>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of shareAnswersAsDocument */
export type ShareAnswersAsDocumentInput = {
  answers?: InputMaybe<Scalars['String']>;
  email_notification?: InputMaybe<Scalars['Boolean']>;
  form_answer_group_id?: InputMaybe<Scalars['ID']>;
  letterhead?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of shareAnswersAsDocument. */
export type ShareAnswersAsDocumentPayload = {
  __typename?: 'shareAnswersAsDocumentPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  document?: Maybe<Document>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of shareCourse */
export type ShareCourseInput = {
  course_share_recipient?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of shareCourse. */
export type ShareCoursePayload = {
  __typename?: 'shareCoursePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  course?: Maybe<Course>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of shareCustomModuleForm */
export type ShareCustomModuleFormInput = {
  form_share_recipient?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** If this arg is true, this checks user's can_edit_forms permission before sharing */
  validate_permissions?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of shareCustomModuleForm. */
export type ShareCustomModuleFormPayload = {
  __typename?: 'shareCustomModuleFormPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customModuleForm?: Maybe<CustomModuleForm>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of signIn */
export type SignInInput = {
  /** When true, an additional API key will be generated (versus replacing the old one) */
  allow_multiple_api_keys?: InputMaybe<Scalars['Boolean']>;
  /** User email */
  email?: InputMaybe<Scalars['String']>;
  /** When true, an API key will be returned, versus a session token. This replaces an existing key. */
  generate_api_token?: InputMaybe<Scalars['Boolean']>;
  /** The authentication namespace to sign into. Whitelabels can have their own separated auth namespace. */
  namespace?: InputMaybe<Scalars['String']>;
  /** Password */
  password?: InputMaybe<Scalars['String']>;
  /** Reset Token */
  reset_token?: InputMaybe<Scalars['String']>;
  /** Timezone of user */
  timezone?: InputMaybe<Scalars['String']>;
  /** API Token */
  token?: InputMaybe<Scalars['String']>;
  /** Username */
  username?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of signIn. */
export type SignInPayload = {
  __typename?: 'signInPayload';
  /** API Key created */
  api_key?: Maybe<Scalars['String']>;
  /** Blocked by 2fa status */
  blocked_by_2fa?: Maybe<Scalars['Boolean']>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  /** Token returned for authorization */
  token?: Maybe<Scalars['String']>;
  /** User info */
  user?: Maybe<User>;
};

/** Autogenerated input type of signUp */
export type SignUpInput = {
  /** The ID of the provider to create a patient for. Required if signing up as a patient and invite_code is not present */
  dietitian_id?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  exploring_healthie_reason?: InputMaybe<Scalars['String']>;
  exploring_healthie_reason_other?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  first_url?: InputMaybe<Scalars['String']>;
  /** Required if signing up as a patient and dietitian_id is not present */
  invite_code?: InputMaybe<Scalars['String']>;
  last_name?: InputMaybe<Scalars['String']>;
  legal_name?: InputMaybe<Scalars['String']>;
  password?: InputMaybe<Scalars['String']>;
  phone_number?: InputMaybe<Scalars['String']>;
  provider_type?: InputMaybe<Scalars['String']>;
  /** 'patient' to create a patient, 'dietitian' to create a staff member or provider */
  role?: InputMaybe<Scalars['String']>;
  /** timezone from TZ database names in IANA Timezone list */
  timezone?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of signUp. */
export type SignUpPayload = {
  __typename?: 'signUpPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  initialMessage?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  nextRequiredStep?: Maybe<Scalars['String']>;
  token?: Maybe<Scalars['String']>;
  user?: Maybe<User>;
  whitelabelSetting?: Maybe<WhitelabelSetting>;
};

/** Autogenerated input type of toggleCarePlanStatusForSpecificUser */
export type ToggleCarePlanStatusForSpecificUserInput = {
  activate: Scalars['Boolean'];
  id?: InputMaybe<Scalars['ID']>;
  patient_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of toggleCarePlanStatusForSpecificUser. */
export type ToggleCarePlanStatusForSpecificUserPayload = {
  __typename?: 'toggleCarePlanStatusForSpecificUserPayload';
  carePlan?: Maybe<CarePlan>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of unlockChartingNote */
export type UnlockChartingNoteInput = {
  /** The ID of the FormAnswerGroup to be unlocked */
  fang_id: Scalars['ID'];
};

/** Autogenerated return type of unlockChartingNote. */
export type UnlockChartingNotePayload = {
  __typename?: 'unlockChartingNotePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  /** The success string */
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of unsubscribeFromNotification */
export type UnsubscribeFromNotificationInput = {
  notification_setting_uuid?: InputMaybe<Scalars['String']>;
  type_of_notification?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of unsubscribeFromNotification. */
export type UnsubscribeFromNotificationPayload = {
  __typename?: 'unsubscribeFromNotificationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  notificationSettingUpdated?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated input type of updateAddendum */
export type UpdateAddendumInput = {
  content?: InputMaybe<Scalars['String']>;
  form_answer_group_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateAddendum. */
export type UpdateAddendumPayload = {
  __typename?: 'updateAddendumPayload';
  addendum?: Maybe<ChartingNoteAddendumType>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateAllergySensitivity */
export type UpdateAllergySensitivityInput = {
  category?: InputMaybe<Scalars['String']>;
  category_type?: InputMaybe<Scalars['String']>;
  custom_name?: InputMaybe<Scalars['String']>;
  custom_reaction?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  /** DEPRECATED. Use status instead */
  is_current?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  /** The date of onset_date */
  onset_date?: InputMaybe<Scalars['String']>;
  reaction?: InputMaybe<Scalars['String']>;
  /** The type of reaction. Options are [allergy, adverse_reaction] */
  reaction_type?: InputMaybe<Scalars['String']>;
  severity?: InputMaybe<Scalars['String']>;
  /** Options are [active, inactive, resolved]. Defaults to active */
  status?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateAllergySensitivity. */
export type UpdateAllergySensitivityPayload = {
  __typename?: 'updateAllergySensitivityPayload';
  allergy_sensitivity?: Maybe<AllergySensitivity>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  duplicate_allergy?: Maybe<AllergySensitivity>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateAnnouncement */
export type UpdateAnnouncementInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  announcement_image?: InputMaybe<AnnouncementImageUpload>;
  delete_image?: InputMaybe<Scalars['Boolean']>;
  description?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  user_group_ids?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateAnnouncement. */
export type UpdateAnnouncementPayload = {
  __typename?: 'updateAnnouncementPayload';
  announcement?: Maybe<Announcement>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateAppleHealth */
export type UpdateAppleHealthInput = {
  is_enabled?: InputMaybe<Scalars['Boolean']>;
  last_sync_date?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateAppleHealth. */
export type UpdateAppleHealthPayload = {
  __typename?: 'updateAppleHealthPayload';
  apple_health?: Maybe<AppleHealth>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateAppointmentInclusion */
export type UpdateAppointmentInclusionInput = {
  /** Indicate whether a group appointment attendee have taken part in the appointment */
  attended?: InputMaybe<Scalars['Boolean']>;
  /** Indicate if a group appointment attendee cancelled the appointment */
  cancelled?: InputMaybe<Scalars['Boolean']>;
  /** Indicate if a group appointment attendee has confirmed. For 1:1 appointments, use client_confirmed on Appointment object */
  confirmed?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateAppointmentInclusion. */
export type UpdateAppointmentInclusionPayload = {
  __typename?: 'updateAppointmentInclusionPayload';
  appointment_inclusion?: Maybe<AppointmentInclusionType>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateAppointment */
export type UpdateAppointmentInput = {
  actual_duration?: InputMaybe<Scalars['String']>;
  appointment_inclusion_uuid?: InputMaybe<Scalars['ID']>;
  appointment_location_id?: InputMaybe<Scalars['String']>;
  appointment_type_id?: InputMaybe<Scalars['String']>;
  attended_clients?: InputMaybe<Array<InputMaybe<AttendedClientsInput>>>;
  attendee_ids?: InputMaybe<Scalars['String']>;
  client_confirmed?: InputMaybe<Scalars['Boolean']>;
  client_updating?: InputMaybe<Scalars['Boolean']>;
  confirmed?: InputMaybe<Scalars['Boolean']>;
  contact_type?: InputMaybe<Scalars['String']>;
  /** Cpt code associated with this appointment */
  cpt_code_id?: InputMaybe<Scalars['ID']>;
  date?: InputMaybe<Scalars['String']>;
  /** Timestamp in YYYY-MM-DD HH:MM:SS or ISO8601 format, supercedes date, time params. */
  datetime?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['String']>;
  end_time?: InputMaybe<Scalars['String']>;
  /** When passed in, this video chat URL will be used instead of built-in Video Chat or Zoom */
  external_videochat_url?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  is_blocker?: InputMaybe<Scalars['Boolean']>;
  is_zoom_chat?: InputMaybe<Scalars['Boolean']>;
  join_all?: InputMaybe<Scalars['Boolean']>;
  location?: InputMaybe<Scalars['String']>;
  max_attendees?: InputMaybe<Scalars['String']>;
  /** a serialized JSON string of metadata */
  metadata?: InputMaybe<Scalars['JSON']>;
  notes?: InputMaybe<Scalars['String']>;
  other_party_id?: InputMaybe<Scalars['String']>;
  pm_status?: InputMaybe<Scalars['String']>;
  /** The price associated with this appointment */
  price?: InputMaybe<Scalars['String']>;
  providers?: InputMaybe<Scalars['String']>;
  recurring_appointment?: InputMaybe<RecurringAppointmentInput>;
  repeat?: InputMaybe<Scalars['Boolean']>;
  repeat_interval?: InputMaybe<Scalars['String']>;
  repeat_times?: InputMaybe<Scalars['String']>;
  room_id?: InputMaybe<Scalars['String']>;
  time?: InputMaybe<Scalars['String']>;
  /** Timezone to use for date and time fields. Overrides the timezone of the current user */
  timezone?: InputMaybe<Scalars['String']>;
  /** Units to use as a multiplier for appointment price */
  units?: InputMaybe<Scalars['String']>;
  updateRecurring?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateAppointment. */
export type UpdateAppointmentPayload = {
  __typename?: 'updateAppointmentPayload';
  appointment?: Maybe<Appointment>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateAppointmentSetting */
export type UpdateAppointmentSettingInput = {
  advance_pricing_options?: InputMaybe<Scalars['String']>;
  allow_appointment_type_pricing?: InputMaybe<Scalars['Boolean']>;
  allow_clients_to_cancel_appt?: InputMaybe<Scalars['Boolean']>;
  allow_clients_to_reschedule_appt?: InputMaybe<Scalars['Boolean']>;
  allow_external_videochat_urls?: InputMaybe<Scalars['Boolean']>;
  always_send_confirm_notification?: InputMaybe<Scalars['Boolean']>;
  appointment_locations?: InputMaybe<Array<InputMaybe<AppointmentLocationInput>>>;
  appt_type_confirmed_email?: InputMaybe<Scalars['Boolean']>;
  appt_type_reminder_email?: InputMaybe<Scalars['Boolean']>;
  appt_type_website_booking_email?: InputMaybe<Scalars['Boolean']>;
  ask_clients_to_confirm?: InputMaybe<Scalars['Boolean']>;
  ask_to_confirm_via_text?: InputMaybe<Scalars['Boolean']>;
  auto_create_cms1500?: InputMaybe<Scalars['Boolean']>;
  auto_invoicing?: InputMaybe<Scalars['Boolean']>;
  auto_submit_cms1500?: InputMaybe<Scalars['Boolean']>;
  booking_interval_restriction?: InputMaybe<Scalars['Int']>;
  buffer?: InputMaybe<Scalars['String']>;
  calendar_color_schemes?: InputMaybe<Array<InputMaybe<CalendarColorSchemeInput>>>;
  calendar_interval?: InputMaybe<Scalars['String']>;
  charge_for_occured_appts?: InputMaybe<Scalars['Boolean']>;
  client_should_call_provider?: InputMaybe<Scalars['Boolean']>;
  clients_have_billing?: InputMaybe<Scalars['Boolean']>;
  confirm_by_default?: InputMaybe<Scalars['Boolean']>;
  contact_type_overrides?: InputMaybe<Array<InputMaybe<ContactTypeOverrideInput>>>;
  default_appt_form_to_group?: InputMaybe<Scalars['Boolean']>;
  default_charting_template_id?: InputMaybe<Scalars['String']>;
  default_group_charting_template_id?: InputMaybe<Scalars['ID']>;
  default_to_zoom?: InputMaybe<Scalars['Boolean']>;
  default_video_service?: InputMaybe<Scalars['String']>;
  disable_requested_form_notifications?: InputMaybe<Scalars['Boolean']>;
  end_time?: InputMaybe<Scalars['String']>;
  /** Deprecated */
  give_notes_name?: InputMaybe<Scalars['Boolean']>;
  hide_insurance_getting_started_info?: InputMaybe<Scalars['Boolean']>;
  hide_link?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  insurance_eligibility_integration?: InputMaybe<Scalars['Boolean']>;
  invoice_clients_without_payment_method?: InputMaybe<Scalars['Boolean']>;
  max_days_in_future?: InputMaybe<Scalars['String']>;
  /** Prevents the patient from canceling too close the appointment time. In minutes */
  minimum_advance_cancel_time?: InputMaybe<Scalars['Int']>;
  /** Prevents the patient from rescheduling too close the appointment time. In minutes */
  minimum_advance_reschedule_time?: InputMaybe<Scalars['Int']>;
  /** Prevents the patient from scheduling too close to the desired appointment time. In minutes */
  minimum_advance_schedule_time?: InputMaybe<Scalars['Int']>;
  /** Deprecated. Use minimum_advance_schedule_time instead */
  minimum_days_in_advance?: InputMaybe<Scalars['String']>;
  /** Deprecated. Use booking_interval_restriction instead */
  only_book_even?: InputMaybe<Scalars['Boolean']>;
  /** Deprecated. Use booking_interval_restriction instead */
  only_book_hour?: InputMaybe<Scalars['Boolean']>;
  prevent_client_booking?: InputMaybe<Scalars['Boolean']>;
  prevent_no_credit_booking?: InputMaybe<Scalars['Boolean']>;
  reply_to_provider?: InputMaybe<Scalars['Boolean']>;
  restore_credit_on_cancel?: InputMaybe<Scalars['Boolean']>;
  same_day_appointments?: InputMaybe<Scalars['Boolean']>;
  send_appointment_cancellation_email?: InputMaybe<Scalars['Boolean']>;
  send_appointment_update_email?: InputMaybe<Scalars['Boolean']>;
  send_booking_notice?: InputMaybe<Scalars['Boolean']>;
  send_email_before_appointment?: InputMaybe<Scalars['Boolean']>;
  send_intake_forms_reminder?: InputMaybe<Scalars['Boolean']>;
  send_push_before_appointment?: InputMaybe<Scalars['Boolean']>;
  send_reminder_four_days_before?: InputMaybe<Scalars['Boolean']>;
  send_reminder_one_day_before?: InputMaybe<Scalars['Boolean']>;
  send_reminder_one_hour_before?: InputMaybe<Scalars['Boolean']>;
  send_reminder_three_days_before?: InputMaybe<Scalars['Boolean']>;
  send_reminder_two_days_before?: InputMaybe<Scalars['Boolean']>;
  send_reminder_two_hours_before?: InputMaybe<Scalars['Boolean']>;
  send_text_reminder_four_days_before?: InputMaybe<Scalars['Boolean']>;
  send_text_reminder_one_day_before?: InputMaybe<Scalars['Boolean']>;
  send_text_reminder_one_hour_before?: InputMaybe<Scalars['Boolean']>;
  send_text_reminder_three_days_before?: InputMaybe<Scalars['Boolean']>;
  send_text_reminder_two_days_before?: InputMaybe<Scalars['Boolean']>;
  send_text_reminder_two_hours_before?: InputMaybe<Scalars['Boolean']>;
  set_default_videochat_url?: InputMaybe<Scalars['Boolean']>;
  show_care_plans?: InputMaybe<Scalars['Boolean']>;
  show_cms1500s?: InputMaybe<Scalars['Boolean']>;
  show_faxes?: InputMaybe<Scalars['Boolean']>;
  show_insurance_authorization?: InputMaybe<Scalars['Boolean']>;
  show_office_ally?: InputMaybe<Scalars['Boolean']>;
  show_superbills?: InputMaybe<Scalars['Boolean']>;
  start_time?: InputMaybe<Scalars['String']>;
  /** Allows times to be grouped by appointment type. */
  times_by_appointment_type?: InputMaybe<Scalars['Boolean']>;
  /** Allows times to be grouped by contact type. */
  times_by_contact_type?: InputMaybe<Scalars['Boolean']>;
  /** Allows times to be grouped by location. */
  times_by_location?: InputMaybe<Scalars['Boolean']>;
  use_client_credit_system?: InputMaybe<Scalars['Boolean']>;
  use_client_sources?: InputMaybe<Scalars['Boolean']>;
  use_zoom_waiting_room?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['String']>;
  video_url_default?: InputMaybe<VideoUrlDefaultInput>;
};

/** Autogenerated return type of updateAppointmentSetting. */
export type UpdateAppointmentSettingPayload = {
  __typename?: 'updateAppointmentSettingPayload';
  appointmentSetting?: Maybe<AppointmentSetting>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateAppointmentTypeCptCode */
export type UpdateAppointmentTypeCptCodeInput = {
  appointment_type_id?: InputMaybe<Scalars['ID']>;
  cpt_code_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
  units?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateAppointmentTypeCptCode. */
export type UpdateAppointmentTypeCptCodePayload = {
  __typename?: 'updateAppointmentTypeCptCodePayload';
  appointment_type_cpt_code?: Maybe<AppointmentTypeCptCodeType>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateAppointmentType */
export type UpdateAppointmentTypeInput = {
  appointment_setting?: InputMaybe<AppointmentTypeAppointmentSettingInput>;
  appointment_type_cpt_code?: InputMaybe<AppointmentTypeCptCode>;
  auto_increase_charge_for_actual_duration?: InputMaybe<Scalars['Boolean']>;
  bookable_by_groups?: InputMaybe<Scalars['Boolean']>;
  bookable_group_ids?: InputMaybe<Scalars['String']>;
  bookable_without_group?: InputMaybe<Scalars['Boolean']>;
  /** When false, clients will not have the ability to self-book this appointment */
  clients_can_book?: InputMaybe<Scalars['Boolean']>;
  contact_type_override_in_person?: InputMaybe<ContactTypeOverride>;
  contact_type_override_phone_call?: InputMaybe<ContactTypeOverride>;
  contact_type_override_video_chat?: InputMaybe<ContactTypeOverride>;
  /** If the provider's organization has this feature, setting this will customize the content of SMS reminder's Healthie sends. */
  custom_text_reminder_body?: InputMaybe<Scalars['String']>;
  /** When true, the client will not be asked to add a reason when booking an appointment of this type */
  dont_ask_for_reason?: InputMaybe<Scalars['Boolean']>;
  embed_question_form_id?: InputMaybe<Scalars['String']>;
  form_requests_after_appointment?: InputMaybe<Array<InputMaybe<AppointmentTypeFormConnectionInput>>>;
  form_requests_after_appointment_booking?: InputMaybe<Array<InputMaybe<AppointmentTypeFormConnectionInput>>>;
  form_requests_before_appointment?: InputMaybe<Array<InputMaybe<AppointmentTypeFormConnectionInput>>>;
  has_specific_appointment_settings?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  /** When true, indicates that this appointment type is used for group appointments */
  is_group?: InputMaybe<Scalars['Boolean']>;
  is_waitlist_enabled?: InputMaybe<Scalars['Boolean']>;
  /** The length of the appointment type in minutes */
  length?: InputMaybe<Scalars['Int']>;
  /** The name of the appointment type */
  name?: InputMaybe<Scalars['String']>;
  pricing?: InputMaybe<Scalars['String']>;
  /** Available options are CUSTOM and CPT_CODE */
  pricing_option?: InputMaybe<Scalars['String']>;
  provider_ids_for_appt_type_connections?: InputMaybe<Scalars['String']>;
  require_in_state_clients?: InputMaybe<Scalars['Boolean']>;
  require_specific_providers?: InputMaybe<Scalars['Boolean']>;
  row_order?: InputMaybe<Scalars['Int']>;
  specific_groups?: InputMaybe<Scalars['Boolean']>;
  user_group_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateAppointmentType. */
export type UpdateAppointmentTypePayload = {
  __typename?: 'updateAppointmentTypePayload';
  appointmentType?: Maybe<AppointmentType>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateAutoTaskGenerator */
export type UpdateAutoTaskGeneratorInput = {
  category?: InputMaybe<Scalars['String']>;
  days_due_from_created_at?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['ID']>;
  is_enabled?: InputMaybe<Scalars['Boolean']>;
  number_description?: InputMaybe<Scalars['String']>;
  number_to_check?: InputMaybe<Scalars['String']>;
  task_description?: InputMaybe<Scalars['String']>;
  user_id_for_task?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateAutoTaskGenerator. */
export type UpdateAutoTaskGeneratorPayload = {
  __typename?: 'updateAutoTaskGeneratorPayload';
  auto_task_generator?: Maybe<AutoTaskGenerator>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateBillingItem */
export type UpdateBillingItemInput = {
  amount_paid?: InputMaybe<Scalars['String']>;
  chosen_refund_amount?: InputMaybe<Scalars['String']>;
  created_at?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  is_canceled?: InputMaybe<Scalars['Boolean']>;
  is_paused?: InputMaybe<Scalars['Boolean']>;
  new_payment_date?: InputMaybe<Scalars['String']>;
  note?: InputMaybe<Scalars['String']>;
  payment_medium?: InputMaybe<Scalars['String']>;
  recipient_id?: InputMaybe<Scalars['ID']>;
  resend_payment?: InputMaybe<Scalars['Boolean']>;
  resend_receipt?: InputMaybe<Scalars['Boolean']>;
  sender_id?: InputMaybe<Scalars['ID']>;
  stripe_idempotency_key?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateBillingItem. */
export type UpdateBillingItemPayload = {
  __typename?: 'updateBillingItemPayload';
  billingItem?: Maybe<BillingItem>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateBrand */
export type UpdateBrandInput = {
  about_description?: InputMaybe<Scalars['String']>;
  bg_color?: InputMaybe<Scalars['String']>;
  brand_email?: InputMaybe<Scalars['String']>;
  brand_name?: InputMaybe<Scalars['String']>;
  brand_phone?: InputMaybe<Scalars['String']>;
  contact_description?: InputMaybe<Scalars['String']>;
  custom_sign_in_path?: InputMaybe<Scalars['String']>;
  display_embed_title?: InputMaybe<Scalars['Boolean']>;
  display_name?: InputMaybe<Scalars['String']>;
  display_package_image?: InputMaybe<Scalars['Boolean']>;
  email_background_color?: InputMaybe<Scalars['String']>;
  embed_primary_color?: InputMaybe<Scalars['String']>;
  facebook?: InputMaybe<Scalars['String']>;
  font_color?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  instagram?: InputMaybe<Scalars['String']>;
  logo?: InputMaybe<Scalars['Upload']>;
  selected_color?: InputMaybe<Scalars['String']>;
  slogan?: InputMaybe<Scalars['String']>;
  tab_accent_color?: InputMaybe<Scalars['String']>;
  titles?: InputMaybe<Scalars['String']>;
  twitter?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateBrand. */
export type UpdateBrandPayload = {
  __typename?: 'updateBrandPayload';
  brand?: Maybe<Brand>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateByTemplate */
export type UpdateByTemplateInput = {
  care_plan_id?: InputMaybe<Scalars['ID']>;
  care_plan_template_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateByTemplate. */
export type UpdateByTemplatePayload = {
  __typename?: 'updateByTemplatePayload';
  care_plan?: Maybe<CarePlanConnection>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateCalendarViewSetting */
export type UpdateCalendarViewSettingInput = {
  appointment_status_filter?: InputMaybe<Scalars['String']>;
  appointment_type_filter?: InputMaybe<Scalars['ID']>;
  availability_contact_type_filter?: InputMaybe<Scalars['String']>;
  availability_location_filter?: InputMaybe<Scalars['ID']>;
  availability_provider_filter?: InputMaybe<Scalars['ID']>;
  availablilty_appt_type_filter?: InputMaybe<Scalars['ID']>;
  calendar_color_scheme_filter?: InputMaybe<Scalars['ID']>;
  calendar_view_filter?: InputMaybe<Scalars['String']>;
  client_confirmation_status?: InputMaybe<Scalars['String']>;
  document_area_sorting?: InputMaybe<Scalars['String']>;
  expand_color_schemes?: InputMaybe<Scalars['Boolean']>;
  expand_filter_appointments?: InputMaybe<Scalars['Boolean']>;
  expand_filter_availabilities?: InputMaybe<Scalars['Boolean']>;
  expand_filter_by_providers?: InputMaybe<Scalars['Boolean']>;
  expand_filter_providers?: InputMaybe<Scalars['Boolean']>;
  expand_show_availabilities?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  location_filter?: InputMaybe<Scalars['ID']>;
  one_time_availabilities?: InputMaybe<Scalars['Boolean']>;
  org_calendar_view_filter?: InputMaybe<Scalars['String']>;
  provider_confirmation_status?: InputMaybe<Scalars['String']>;
  selected_availability_provider_filter?: InputMaybe<Scalars['ID']>;
  selected_availability_providers_filter?: InputMaybe<Scalars['String']>;
  selected_provider_filter?: InputMaybe<Scalars['ID']>;
  selected_providers_filter?: InputMaybe<Scalars['String']>;
  show_appointments?: InputMaybe<Scalars['Boolean']>;
  show_availabilities?: InputMaybe<Scalars['Boolean']>;
  show_synced_appointments?: InputMaybe<Scalars['Boolean']>;
  timezone?: InputMaybe<Scalars['String']>;
  weekly_availabilities?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateCalendarViewSetting. */
export type UpdateCalendarViewSettingPayload = {
  __typename?: 'updateCalendarViewSettingPayload';
  calendar_view_setting?: Maybe<CalendarViewSetting>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateCampaign */
export type UpdateCampaignInput = {
  /** Text displayed in button below email body */
  button_text?: InputMaybe<Scalars['String']>;
  /** URL in email button below email body */
  button_url?: InputMaybe<Scalars['String']>;
  /** Text displayed in email body */
  email_body?: InputMaybe<Scalars['String']>;
  /** Text displayed before client name (example: 'Hello <client_name>', 'Greetings <client_name>', ....) */
  email_greeting?: InputMaybe<Scalars['String']>;
  email_subject?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** Image shown above email body */
  image?: InputMaybe<Scalars['Upload']>;
  include_archived_clients?: InputMaybe<Scalars['Boolean']>;
  is_draft?: InputMaybe<Scalars['Boolean']>;
  is_email?: InputMaybe<Scalars['Boolean']>;
  is_sms?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  /** comma-separated example: "user-12, group-23, tag-34" */
  recipient_ids?: InputMaybe<Scalars['String']>;
  /** If true, campaign emails and sms will be sent after mutation */
  send_campaign?: InputMaybe<Scalars['Boolean']>;
  /** SMS text content */
  sms_body?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateCampaign. */
export type UpdateCampaignPayload = {
  __typename?: 'updateCampaignPayload';
  campaign?: Maybe<Campaign>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateCarePlan */
export type UpdateCarePlanInput = {
  description?: InputMaybe<Scalars['String']>;
  doc_id?: InputMaybe<Scalars['ID']>;
  from_template?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  is_creating?: InputMaybe<Scalars['Boolean']>;
  is_hidden?: InputMaybe<Scalars['Boolean']>;
  is_managing_templates?: InputMaybe<Scalars['Boolean']>;
  is_template?: InputMaybe<Scalars['Boolean']>;
  is_updating?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  new_patient_id?: InputMaybe<Scalars['ID']>;
  /** DEPRECATED. Use BulkUpdateCarePlanUsers mutation for bulk notifications(group care plan) or Notify mutation if you want to trigger email for specific user */
  notify_client_by_email?: InputMaybe<Scalars['Boolean']>;
  user_group_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateCarePlan. */
export type UpdateCarePlanPayload = {
  __typename?: 'updateCarePlanPayload';
  carePlan?: Maybe<CarePlan>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateChangeHealthAccount */
export type UpdateChangeHealthAccountInput = {
  /** Update the stored password for the ChangeHealthAccount  in Healthie. Note this does not affect the password of the account with Change */
  password?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateChangeHealthAccount. */
export type UpdateChangeHealthAccountPayload = {
  __typename?: 'updateChangeHealthAccountPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of updateChargeBack */
export type UpdateChargeBackInput = {
  charge_back_evidence?: InputMaybe<ChargeBackEvidenceInput>;
  /** When true, the evidence will be submitted immediately. Evidence can only be submitted once */
  final_submission?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateChargeBack. */
export type UpdateChargeBackPayload = {
  __typename?: 'updateChargeBackPayload';
  charge_back?: Maybe<ChargeBack>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateChatSetting */
export type UpdateChatSettingInput = {
  auto_welcome_text?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  is_active?: InputMaybe<Scalars['Boolean']>;
  is_recurring_active?: InputMaybe<Scalars['Boolean']>;
  no_end_date?: InputMaybe<Scalars['Boolean']>;
  receive_notifications?: InputMaybe<Scalars['Boolean']>;
  receive_notifications_recurring?: InputMaybe<Scalars['Boolean']>;
  recurring_content?: InputMaybe<Scalars['String']>;
  recurring_days_data?: InputMaybe<RecurringDaysInputObjectType>;
  recurring_turned_on?: InputMaybe<Scalars['Boolean']>;
  scheduled_turned_on?: InputMaybe<Scalars['Boolean']>;
  send_auto_welcome?: InputMaybe<Scalars['Boolean']>;
  start_date?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateChatSetting. */
export type UpdateChatSettingPayload = {
  __typename?: 'updateChatSettingPayload';
  chatSetting?: Maybe<ChatSetting>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateClient */
export type UpdateClientInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  activity_level?: InputMaybe<Scalars['String']>;
  additional_phone_number?: InputMaybe<Scalars['String']>;
  additional_record_identifier?: InputMaybe<Scalars['String']>;
  advance_appointment_prices?: InputMaybe<Array<InputMaybe<AdvanceAppointmentPriceInput>>>;
  appointment_type_credits_attributes?: InputMaybe<Array<InputMaybe<AppointmentTypeCreditInput>>>;
  auto_charge_enabled?: InputMaybe<Scalars['Boolean']>;
  client_source?: InputMaybe<ClientSourceInput>;
  current_email?: InputMaybe<Scalars['String']>;
  diagnoses?: InputMaybe<Array<InputMaybe<DiagnosesInput>>>;
  dietitian_id?: InputMaybe<Scalars['String']>;
  dob?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  for_changing_groups?: InputMaybe<Scalars['Boolean']>;
  gender?: InputMaybe<Scalars['String']>;
  gender_identity?: InputMaybe<Scalars['String']>;
  gender_identity_code?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  is_intake_item?: InputMaybe<Scalars['Boolean']>;
  last_name?: InputMaybe<Scalars['String']>;
  legal_name?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<ClientLocationInput>;
  locations?: InputMaybe<Array<InputMaybe<ClientLocationInput>>>;
  /** a serialized JSON string of metadata */
  metadata?: InputMaybe<Scalars['String']>;
  notification_contacts?: InputMaybe<Array<InputMaybe<NotificationContactInput>>>;
  other_provider_ids?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  password?: InputMaybe<Scalars['String']>;
  phone_number?: InputMaybe<Scalars['String']>;
  policies?: InputMaybe<Array<InputMaybe<ClientPolicyInput>>>;
  preferred_language_code?: InputMaybe<Scalars['String']>;
  primary_ethnicity_code?: InputMaybe<Scalars['String']>;
  primary_race_code?: InputMaybe<Scalars['String']>;
  pronouns?: InputMaybe<Scalars['String']>;
  quick_notes?: InputMaybe<Scalars['String']>;
  record_identifier?: InputMaybe<Scalars['String']>;
  referrals?: InputMaybe<Array<InputMaybe<ReferralInput>>>;
  remove_card_on_file?: InputMaybe<Scalars['Boolean']>;
  requested_form_completion_id?: InputMaybe<Scalars['String']>;
  resend_welcome?: InputMaybe<Scalars['Boolean']>;
  secondary_ethnicity_code?: InputMaybe<Scalars['String']>;
  secondary_race_code?: InputMaybe<Scalars['String']>;
  send_form_request_reminder?: InputMaybe<Scalars['Boolean']>;
  sex?: InputMaybe<Scalars['String']>;
  sexual_orientation_code?: InputMaybe<Scalars['String']>;
  sexual_orientation_other?: InputMaybe<Scalars['String']>;
  skipped_email?: InputMaybe<Scalars['Boolean']>;
  timezone?: InputMaybe<Scalars['String']>;
  /** Token for credit card, created by Stripe.JS */
  token?: InputMaybe<Scalars['String']>;
  user_group_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateClient. */
export type UpdateClientPayload = {
  __typename?: 'updateClientPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  user?: Maybe<User>;
};

/** Autogenerated input type of updateCms1500 */
export type UpdateCms1500Input = {
  accept_assignment?: InputMaybe<Scalars['Boolean']>;
  additional_text?: InputMaybe<Scalars['String']>;
  adjustment?: InputMaybe<Scalars['String']>;
  amount_paid?: InputMaybe<Scalars['String']>;
  amount_reimbursed?: InputMaybe<Scalars['String']>;
  client_responsibility_removed?: InputMaybe<Scalars['Boolean']>;
  client_sig_on_file?: InputMaybe<Scalars['Boolean']>;
  cms1500_policies?: InputMaybe<Array<InputMaybe<Cms1500PolicyInput>>>;
  copay?: InputMaybe<Scalars['String']>;
  copay_still_owed?: InputMaybe<Scalars['String']>;
  cpt_codes_cms1500s?: InputMaybe<Array<InputMaybe<CptCodesCms1500Input>>>;
  dietitian?: InputMaybe<DietitianInput>;
  dietitian_id?: InputMaybe<Scalars['String']>;
  icd_codes_cms1500s?: InputMaybe<Array<InputMaybe<IcdCodesCms1500Input>>>;
  id?: InputMaybe<Scalars['ID']>;
  include_referrer_information?: InputMaybe<Scalars['Boolean']>;
  insured_sig_on_file?: InputMaybe<Scalars['Boolean']>;
  nineteen_reserved?: InputMaybe<Scalars['String']>;
  organization_info?: InputMaybe<OrganizationInfoInput>;
  organization_info_id?: InputMaybe<Scalars['String']>;
  orig_ref_number?: InputMaybe<Scalars['String']>;
  patient?: InputMaybe<PatientInput>;
  patient_account_num?: InputMaybe<Scalars['String']>;
  /** DEPRECATED. Use patient input object instead */
  patient_id?: InputMaybe<Scalars['String']>;
  referral_info?: InputMaybe<ReferralInfoInput>;
  reimbursed_at?: InputMaybe<Scalars['String']>;
  rendering_provider_other_id?: InputMaybe<Scalars['String']>;
  rendering_provider_other_id_number?: InputMaybe<OtherIdNumberInput>;
  resubmission_code?: InputMaybe<Scalars['String']>;
  /** (Deprecated)Service location is updated in form - just pass in service_location_id */
  service_location?: InputMaybe<LocationInput>;
  service_location_id?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  tend_reserved?: InputMaybe<Scalars['String']>;
  use_indiv_npi?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateCms1500. */
export type UpdateCms1500Payload = {
  __typename?: 'updateCms1500Payload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  cms1500?: Maybe<Cms1500>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateCognitiveStatus */
export type UpdateCognitiveStatusInput = {
  cognitive_status?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  start_date?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateCognitiveStatus. */
export type UpdateCognitiveStatusPayload = {
  __typename?: 'updateCognitiveStatusPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  cognitive_status?: Maybe<CognitiveStatus>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateConversation */
export type UpdateConversationInput = {
  /** The ID of a user closing the conversation */
  closed_by_id?: InputMaybe<Scalars['ID']>;
  /** If TRUE, next time a PRovider closes a conversation will not see the warning pop-up about closing the conversation */
  hide_close_confirmation?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  /** The value of the select all toggle. This overrides simple_added_users and allows you to easily add all of a category to the conversation. Requires simple_added_users to be sent in as well */
  select_all_status?: InputMaybe<Scalars['String']>;
  simple_added_users?: InputMaybe<Scalars['String']>;
};

/** Autogenerated input type of updateConversationMembership */
export type UpdateConversationMembershipInput = {
  archived?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  viewed?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateConversationMembership. */
export type UpdateConversationMembershipPayload = {
  __typename?: 'updateConversationMembershipPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  conversation_membership?: Maybe<ConversationMembership>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated return type of updateConversation. */
export type UpdateConversationPayload = {
  __typename?: 'updateConversationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  conversation?: Maybe<Conversation>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateCourseGroup */
export type UpdateCourseGroupInput = {
  id?: InputMaybe<Scalars['ID']>;
  start_at?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateCourseGroup. */
export type UpdateCourseGroupPayload = {
  __typename?: 'updateCourseGroupPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  courseGroup?: Maybe<CourseGroup>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateCourse */
export type UpdateCourseInput = {
  course_members?: InputMaybe<Array<InputMaybe<CourseMembersInput>>>;
  course_type?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  external_preview_image_url?: InputMaybe<Scalars['String']>;
  formatted_benefits?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  late_enroll?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  preview_image?: InputMaybe<Scalars['Upload']>;
  preview_video_content?: InputMaybe<Scalars['String']>;
  start_at?: InputMaybe<Scalars['String']>;
  start_date?: InputMaybe<Scalars['String']>;
  start_on_group_assignment?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated input type of updateCourseItem */
export type UpdateCourseItemInput = {
  completion_required_for_next_module?: InputMaybe<Scalars['Boolean']>;
  course_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  item_id?: InputMaybe<Scalars['String']>;
  item_type?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  position?: InputMaybe<Scalars['Int']>;
  scheduled_release?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
  video_url?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateCourseItem. */
export type UpdateCourseItemPayload = {
  __typename?: 'updateCourseItemPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  courseItem?: Maybe<CourseItem>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateCourseMembership */
export type UpdateCourseMembershipInput = {
  id?: InputMaybe<Scalars['ID']>;
  /** Defaults to false. When passed in as true, other updates (like updating start_at) are ignored. */
  send_nudge?: InputMaybe<Scalars['Boolean']>;
  start_at?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateCourseMembership. */
export type UpdateCourseMembershipPayload = {
  __typename?: 'updateCourseMembershipPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  courseMembership?: Maybe<CourseMembership>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated return type of updateCourse. */
export type UpdateCoursePayload = {
  __typename?: 'updateCoursePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  course?: Maybe<Course>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateCustomEmail */
export type UpdateCustomEmailInput = {
  email_type?: InputMaybe<Scalars['String']>;
  greeting?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  message_body?: InputMaybe<Scalars['String']>;
  reactivation_wait_days?: InputMaybe<Scalars['String']>;
  subject?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateCustomEmail. */
export type UpdateCustomEmailPayload = {
  __typename?: 'updateCustomEmailPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customEmail?: Maybe<CustomEmail>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateCustomFood */
export type UpdateCustomFoodInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  nutrients?: InputMaybe<NutrientsInput>;
  serving_size?: InputMaybe<ServingSizeInput>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateCustomFood. */
export type UpdateCustomFoodPayload = {
  __typename?: 'updateCustomFoodPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customFood?: Maybe<Food>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateCustomModuleForm */
export type UpdateCustomModuleFormInput = {
  external_id?: InputMaybe<Scalars['String']>;
  external_id_type?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  is_archived?: InputMaybe<Scalars['Boolean']>;
  is_video?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  on_completion_ifs_tag_id?: InputMaybe<Scalars['String']>;
  prefill?: InputMaybe<Scalars['Boolean']>;
  use_for_charting?: InputMaybe<Scalars['Boolean']>;
  use_for_program?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateCustomModuleForm. */
export type UpdateCustomModuleFormPayload = {
  __typename?: 'updateCustomModuleFormPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customModuleForm?: Maybe<CustomModuleForm>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateCustomModule */
export type UpdateCustomModuleInput = {
  custom_module_condition?: InputMaybe<CustomModuleConditionInput>;
  external_id?: InputMaybe<Scalars['String']>;
  external_id_type?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  index?: InputMaybe<Scalars['Int']>;
  is_custom?: InputMaybe<Scalars['Boolean']>;
  label?: InputMaybe<Scalars['String']>;
  mod_type?: InputMaybe<Scalars['String']>;
  options?: InputMaybe<Scalars['String']>;
  options_array?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  parent_custom_module_id?: InputMaybe<Scalars['Int']>;
  required?: InputMaybe<Scalars['Boolean']>;
  sublabel?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateCustomModule. */
export type UpdateCustomModulePayload = {
  __typename?: 'updateCustomModulePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  customModule?: Maybe<CustomModule>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateDocument */
export type UpdateDocumentInput = {
  care_plan_id?: InputMaybe<Scalars['ID']>;
  description?: InputMaybe<Scalars['String']>;
  display_name?: InputMaybe<Scalars['String']>;
  email_on_welcome?: InputMaybe<Scalars['Boolean']>;
  folder_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  include_in_charting?: InputMaybe<Scalars['Boolean']>;
  internal_notes?: InputMaybe<Scalars['String']>;
  rel_user_id?: InputMaybe<Scalars['ID']>;
  /** A comma-separated list of doc_share_ids */
  share_users?: InputMaybe<Scalars['String']>;
  share_with_rel?: InputMaybe<Scalars['Boolean']>;
  shared_on_welcome?: InputMaybe<Scalars['Boolean']>;
  shared_with_dietitians?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateDocument. */
export type UpdateDocumentPayload = {
  __typename?: 'updateDocumentPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  document?: Maybe<Document>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateEntry */
export type UpdateEntryInput = {
  category?: InputMaybe<Scalars['String']>;
  created_at?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  ed_posthunger?: InputMaybe<Scalars['String']>;
  ed_prehunger?: InputMaybe<Scalars['String']>;
  emotions?: InputMaybe<Scalars['String']>;
  food_items?: InputMaybe<Scalars['String']>;
  hide_from_main_feed?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  image?: InputMaybe<Scalars['Upload']>;
  image_string?: InputMaybe<Scalars['String']>;
  meal_ids?: InputMaybe<Scalars['String']>;
  meal_name?: InputMaybe<Scalars['String']>;
  metric_stat?: InputMaybe<Scalars['String']>;
  other_symptom?: InputMaybe<Scalars['String']>;
  percieved_hungriness?: InputMaybe<Scalars['String']>;
  reflection?: InputMaybe<Scalars['String']>;
  subentries?: InputMaybe<Array<InputMaybe<SubentryInput>>>;
  symptoms?: InputMaybe<Scalars['String']>;
  /** Options are apple_health, google_fit, or fitbit */
  third_party_source?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
  viewed?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateEntry. */
export type UpdateEntryPayload = {
  __typename?: 'updateEntryPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  entry?: Maybe<Entry>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateExternalCalendar */
export type UpdateExternalCalendarInput = {
  add_to_calendar?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  pull_from_calendar?: InputMaybe<Scalars['Boolean']>;
  pull_in_event_details?: InputMaybe<Scalars['Boolean']>;
  pulled_in_calendars?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

/** Autogenerated return type of updateExternalCalendar. */
export type UpdateExternalCalendarPayload = {
  __typename?: 'updateExternalCalendarPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  external_calendar?: Maybe<ExternalCalendar>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateFamilyHistory */
export type UpdateFamilyHistoryInput = {
  concept_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  relationships?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateFamilyHistory. */
export type UpdateFamilyHistoryPayload = {
  __typename?: 'updateFamilyHistoryPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  duplicate_family_history_condition?: Maybe<FamilyHistoryCondition>;
  family_history_condition?: Maybe<FamilyHistoryCondition>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateFaxAcctInfo */
export type UpdateFaxAcctInfoInput = {
  aes_key?: InputMaybe<Scalars['String']>;
  api_key?: InputMaybe<Scalars['String']>;
  fax_number?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
  username?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateFaxAcctInfo. */
export type UpdateFaxAcctInfoPayload = {
  __typename?: 'updateFaxAcctInfoPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of updateFeatureToggle */
export type UpdateFeatureToggleInput = {
  allow_apple_health_sync?: InputMaybe<Scalars['Boolean']>;
  allow_clearstep_sync?: InputMaybe<Scalars['Boolean']>;
  allow_community_chat?: InputMaybe<Scalars['Boolean']>;
  allow_direct_chat?: InputMaybe<Scalars['Boolean']>;
  allow_fitbit_sync?: InputMaybe<Scalars['Boolean']>;
  allow_google_fit_sync?: InputMaybe<Scalars['Boolean']>;
  allow_shapa_sync?: InputMaybe<Scalars['Boolean']>;
  allow_withings_sync?: InputMaybe<Scalars['Boolean']>;
  apply_eating_disorder_default?: InputMaybe<Scalars['Boolean']>;
  can_schedule_appointments?: InputMaybe<Scalars['Boolean']>;
  can_track_poop?: InputMaybe<Scalars['Boolean']>;
  can_track_symptoms?: InputMaybe<Scalars['Boolean']>;
  can_track_water_intake?: InputMaybe<Scalars['Boolean']>;
  can_view_care_plan?: InputMaybe<Scalars['Boolean']>;
  can_view_documents?: InputMaybe<Scalars['Boolean']>;
  can_view_forms?: InputMaybe<Scalars['Boolean']>;
  can_view_goals?: InputMaybe<Scalars['Boolean']>;
  can_view_journal_entries?: InputMaybe<Scalars['Boolean']>;
  can_view_packages?: InputMaybe<Scalars['Boolean']>;
  can_view_payments?: InputMaybe<Scalars['Boolean']>;
  can_view_programs?: InputMaybe<Scalars['Boolean']>;
  custom_metric_overrides?: InputMaybe<Array<InputMaybe<CustomMetricOverridesInput>>>;
  custom_metrics?: InputMaybe<Array<InputMaybe<CustomMetricInput>>>;
  date_range_preference?: InputMaybe<Scalars['String']>;
  default_water_intake?: InputMaybe<Scalars['String']>;
  do_not_auto_submit_cms1500?: InputMaybe<Scalars['Boolean']>;
  email_notification_frequency?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  last_journal_from_date?: InputMaybe<Scalars['String']>;
  last_journal_to_date?: InputMaybe<Scalars['String']>;
  push_notification_frequency?: InputMaybe<Scalars['String']>;
  send_unpaid_invoice_reminder?: InputMaybe<Scalars['Boolean']>;
  seperate_provider_metric_from_client?: InputMaybe<Scalars['Boolean']>;
  show_a1c_metric?: InputMaybe<Scalars['Boolean']>;
  show_bf_percent_metric?: InputMaybe<Scalars['Boolean']>;
  show_blood_pressure_metric?: InputMaybe<Scalars['Boolean']>;
  show_blood_sugar_metric?: InputMaybe<Scalars['Boolean']>;
  show_bmi_graph?: InputMaybe<Scalars['Boolean']>;
  show_bmi_growth_chart?: InputMaybe<Scalars['Boolean']>;
  show_bmr_metric?: InputMaybe<Scalars['Boolean']>;
  show_body_temperature_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_a1c_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_bf_percent_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_blood_pressure_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_blood_sugar_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_bmi_graph?: InputMaybe<Scalars['Boolean']>;
  show_client_bmi_growth_chart?: InputMaybe<Scalars['Boolean']>;
  show_client_bmr_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_body_temperature_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_harris_benedict?: InputMaybe<Scalars['Boolean']>;
  show_client_height_growth_chart?: InputMaybe<Scalars['Boolean']>;
  show_client_ox_sat_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_waist_circumference_metric?: InputMaybe<Scalars['Boolean']>;
  show_client_weight_growth_chart?: InputMaybe<Scalars['Boolean']>;
  show_client_weight_metric?: InputMaybe<Scalars['Boolean']>;
  show_ed_posthunger?: InputMaybe<Scalars['Boolean']>;
  show_ed_prehunger?: InputMaybe<Scalars['Boolean']>;
  show_food?: InputMaybe<Scalars['Boolean']>;
  show_food_category?: InputMaybe<Scalars['Boolean']>;
  show_food_emotion?: InputMaybe<Scalars['Boolean']>;
  show_food_reflection?: InputMaybe<Scalars['Boolean']>;
  show_harris_benedict?: InputMaybe<Scalars['Boolean']>;
  show_healthiness?: InputMaybe<Scalars['Boolean']>;
  show_height_graph?: InputMaybe<Scalars['Boolean']>;
  show_height_growth_chart?: InputMaybe<Scalars['Boolean']>;
  show_metric?: InputMaybe<Scalars['Boolean']>;
  show_mirror?: InputMaybe<Scalars['Boolean']>;
  show_normal_hunger?: InputMaybe<Scalars['Boolean']>;
  show_note?: InputMaybe<Scalars['Boolean']>;
  show_note_emotion?: InputMaybe<Scalars['Boolean']>;
  show_nutrients_tracking?: InputMaybe<Scalars['Boolean']>;
  show_ox_sat_metric?: InputMaybe<Scalars['Boolean']>;
  show_waist_circumference_metric?: InputMaybe<Scalars['Boolean']>;
  show_weight_growth_chart?: InputMaybe<Scalars['Boolean']>;
  show_weight_metric?: InputMaybe<Scalars['Boolean']>;
  show_workout?: InputMaybe<Scalars['Boolean']>;
  use_metric_system?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['ID']>;
  view_not_track?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateFeatureToggle. */
export type UpdateFeatureTogglePayload = {
  __typename?: 'updateFeatureTogglePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  feature_toggle?: Maybe<FeatureToggle>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateFitbit */
export type UpdateFitbitInput = {
  access_token?: InputMaybe<Scalars['String']>;
  expires_at?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  last_sync_date?: InputMaybe<Scalars['String']>;
  refresh_token?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateFitbit. */
export type UpdateFitbitPayload = {
  __typename?: 'updateFitbitPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  fitbit?: Maybe<Fitbit>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateFolder */
export type UpdateFolderInput = {
  email_on_welcome?: InputMaybe<Scalars['Boolean']>;
  folder_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  share_users?: InputMaybe<Scalars['String']>;
  share_with_rel?: InputMaybe<Scalars['Boolean']>;
  shared_on_welcome?: InputMaybe<Scalars['Boolean']>;
  shared_with_dietitians?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateFolder. */
export type UpdateFolderPayload = {
  __typename?: 'updateFolderPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  folder?: Maybe<Folder>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateFormAnswerGroup */
export type UpdateFormAnswerGroupInput = {
  /** The associated appointment (if any) */
  appointment_id?: InputMaybe<Scalars['ID']>;
  course_item_id?: InputMaybe<Scalars['ID']>;
  date?: InputMaybe<Scalars['String']>;
  dismissed_lock_charting_note_warning?: InputMaybe<Scalars['Boolean']>;
  external_id?: InputMaybe<Scalars['String']>;
  finished?: InputMaybe<Scalars['Boolean']>;
  form_answers?: InputMaybe<Array<InputMaybe<FormAnswerInput>>>;
  formatted_date?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  individual_client_notes?: InputMaybe<Array<InputMaybe<IndividualClientNoteInput>>>;
  marked_complete?: InputMaybe<Scalars['Boolean']>;
  marked_locked?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  /** Format ex.: "11 30" */
  time?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateFormAnswerGroup. */
export type UpdateFormAnswerGroupPayload = {
  __typename?: 'updateFormAnswerGroupPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  form_answer_group?: Maybe<FormAnswerGroup>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateFunctionalStatus */
export type UpdateFunctionalStatusInput = {
  functional_condition?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  start_date?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateFunctionalStatus. */
export type UpdateFunctionalStatusPayload = {
  __typename?: 'updateFunctionalStatusPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  functional_status?: Maybe<FunctionalStatus>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateGoal */
export type UpdateGoalInput = {
  created_user_id?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  /** The date the goal should end - format should be: yyyy-mm-dd */
  due_date?: InputMaybe<Scalars['String']>;
  /** If true, goal was submitted via the update form */
  from_update_form?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  /** If true, update goal for program */
  program_goal?: InputMaybe<Scalars['Boolean']>;
  reminder?: InputMaybe<ReminderInput>;
  repeat?: InputMaybe<Scalars['String']>;
  /** The id of goal template used to create this goal */
  source_template_id?: InputMaybe<Scalars['String']>;
  /** The date the goal should start - format should be: yyyy-mm-dd */
  start_on?: InputMaybe<Scalars['String']>;
  subgoals?: InputMaybe<Array<InputMaybe<SubgoalInput>>>;
  /** Title hyperlink. Opens when the name is clicked on. */
  title_link?: InputMaybe<Scalars['String']>;
  /** If true, use this goal as a template(favorite) */
  use_as_template?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateGoal. */
export type UpdateGoalPayload = {
  __typename?: 'updateGoalPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  goal?: Maybe<Goal>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateGoogleFit */
export type UpdateGoogleFitInput = {
  access_token?: InputMaybe<Scalars['String']>;
  expiry_date?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  is_enabled?: InputMaybe<Scalars['Boolean']>;
  last_sync_date?: InputMaybe<Scalars['String']>;
  refresh_token?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateGoogleFit. */
export type UpdateGoogleFitPayload = {
  __typename?: 'updateGoogleFitPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  google_fit?: Maybe<GoogleFit>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateGroupCarePlan */
export type UpdateGroupCarePlanInput = {
  id?: InputMaybe<Scalars['ID']>;
  is_active?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateGroupCarePlan. */
export type UpdateGroupCarePlanPayload = {
  __typename?: 'updateGroupCarePlanPayload';
  carePlan?: Maybe<CarePlan>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateHealthConcern */
export type UpdateHealthConcernInput = {
  code?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  display_name?: InputMaybe<Scalars['String']>;
  effective_time?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateHealthConcern. */
export type UpdateHealthConcernPayload = {
  __typename?: 'updateHealthConcernPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  health_concern?: Maybe<HealthConcern>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateHuman */
export type UpdateHumanInput = {
  current_user_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateHuman. */
export type UpdateHumanPayload = {
  __typename?: 'updateHumanPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  human?: Maybe<Human>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateImmunization */
export type UpdateImmunizationInput = {
  additional_notes?: InputMaybe<Scalars['String']>;
  cvx_code?: InputMaybe<Scalars['Int']>;
  id?: InputMaybe<Scalars['ID']>;
  received_at?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
  vaccine_name?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateImmunization. */
export type UpdateImmunizationPayload = {
  __typename?: 'updateImmunizationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  immunization?: Maybe<Immunization>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateImplantableDeviceUser */
export type UpdateImplantableDeviceUserInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  udi?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateImplantableDeviceUser. */
export type UpdateImplantableDeviceUserPayload = {
  __typename?: 'updateImplantableDeviceUserPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  implantable_device_user?: Maybe<ImplantableDeviceUser>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateInsuranceAuthorization */
export type UpdateInsuranceAuthorizationInput = {
  authorization_number?: InputMaybe<Scalars['String']>;
  end_on?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  policy_id?: InputMaybe<Scalars['String']>;
  start_on?: InputMaybe<Scalars['String']>;
  unit_type?: InputMaybe<Scalars['String']>;
  units_authorized?: InputMaybe<Scalars['String']>;
  units_used?: InputMaybe<Scalars['String']>;
  visits_authorized?: InputMaybe<Scalars['String']>;
  visits_used?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateInsuranceAuthorization. */
export type UpdateInsuranceAuthorizationPayload = {
  __typename?: 'updateInsuranceAuthorizationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  insuranceAuthorization?: Maybe<InsuranceAuthorizationType>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateInsurancePlan */
export type UpdateInsurancePlanInput = {
  add_as_accepted_insurance_plan?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  payer_id?: InputMaybe<Scalars['String']>;
  payer_name?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateInsurancePlan. */
export type UpdateInsurancePlanPayload = {
  __typename?: 'updateInsurancePlanPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  insurance_plan?: Maybe<InsurancePlan>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateLabOrder */
export type UpdateLabOrderInput = {
  appt_confirmation_code?: InputMaybe<Scalars['String']>;
  force_appointment_reload?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  patient_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateLabOrder. */
export type UpdateLabOrderPayload = {
  __typename?: 'updateLabOrderPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  currentUserNotificationsCount?: Maybe<UserNotificationsCount>;
  lab_order?: Maybe<LabOrder>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateLocation */
export type UpdateLocationInput = {
  city?: InputMaybe<Scalars['String']>;
  country?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  line1?: InputMaybe<Scalars['String']>;
  line2?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  npi?: InputMaybe<Scalars['String']>;
  other_id?: InputMaybe<Scalars['String']>;
  other_id_qual?: InputMaybe<Scalars['String']>;
  place_of_service_id?: InputMaybe<Scalars['String']>;
  state?: InputMaybe<Scalars['String']>;
  zip?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateLocation. */
export type UpdateLocationPayload = {
  __typename?: 'updateLocationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  location?: Maybe<Location>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateMeal */
export type UpdateMealInput = {
  food_items?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateMeal. */
export type UpdateMealPayload = {
  __typename?: 'updateMealPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  meal?: Maybe<Meal>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateMedication */
export type UpdateMedicationInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  code?: InputMaybe<Scalars['String']>;
  comment?: InputMaybe<Scalars['String']>;
  custom_name?: InputMaybe<Scalars['String']>;
  directions?: InputMaybe<Scalars['String']>;
  dosage?: InputMaybe<Scalars['String']>;
  end_date?: InputMaybe<Scalars['String']>;
  frequency?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  route?: InputMaybe<Scalars['String']>;
  start_date?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateMedication. */
export type UpdateMedicationPayload = {
  __typename?: 'updateMedicationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  medication?: Maybe<MedicationType>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateNote */
export type UpdateNoteInput = {
  attached_audio?: InputMaybe<Scalars['Upload']>;
  attached_document?: InputMaybe<Scalars['Upload']>;
  attached_image?: InputMaybe<Scalars['Upload']>;
  attached_image_string?: InputMaybe<Scalars['String']>;
  content?: InputMaybe<Scalars['String']>;
  conversation_id?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  scheduled_at?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateNote. */
export type UpdateNotePayload = {
  __typename?: 'updateNotePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  note?: Maybe<Note>;
};

/** Autogenerated input type of updateNoteScheduler */
export type UpdateNoteSchedulerInput = {
  id?: InputMaybe<Scalars['ID']>;
  participant_ids?: InputMaybe<Scalars['String']>;
  /** The value of the select all toggle. This overrides participant_ids and allows you to easily add all of a category to the conversation. Requires participant_ids to be sent in as well */
  select_all_status?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateNoteScheduler. */
export type UpdateNoteSchedulerPayload = {
  __typename?: 'updateNoteSchedulerPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  noteScheduler?: Maybe<NoteScheduler>;
};

/** Autogenerated input type of updateNotificationContact */
export type UpdateNotificationContactInput = {
  client_portal_access?: InputMaybe<Scalars['Boolean']>;
  client_portal_setting?: InputMaybe<ClientPortalSettingInput>;
  /** Valid values: adult, minor */
  contact_type?: InputMaybe<Scalars['String']>;
  copy_notifications?: InputMaybe<Scalars['Boolean']>;
  email?: InputMaybe<Scalars['String']>;
  emergency?: InputMaybe<Scalars['Boolean']>;
  first_name?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  last_name?: InputMaybe<Scalars['String']>;
  phone_number?: InputMaybe<Scalars['String']>;
  /** Valid values: caregiver, child, dependent, family_member, legal_guardian, is_parent, spouse, other */
  relationship?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateNotificationContact. */
export type UpdateNotificationContactPayload = {
  __typename?: 'updateNotificationContactPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  notificationContact?: Maybe<NotificationContact>;
};

/** Autogenerated input type of updateNotification */
export type UpdateNotificationInput = {
  id?: InputMaybe<Scalars['ID']>;
  read?: InputMaybe<Scalars['Boolean']>;
  seen?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateNotification. */
export type UpdateNotificationPayload = {
  __typename?: 'updateNotificationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  currentUser?: Maybe<User>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  notification?: Maybe<Notification>;
};

/** Autogenerated input type of updateNotificationSetting */
export type UpdateNotificationSettingInput = {
  id?: InputMaybe<Scalars['ID']>;
  /** An option of receiving pdates and special offers [email/sms] */
  marketing_communcation_preference?: InputMaybe<Scalars['String']>;
  /** Send an email when a course module is completed */
  notification_on_module_completion?: InputMaybe<Scalars['Boolean']>;
  /** Receive updates and special offers */
  receive_updates_and_offers?: InputMaybe<Scalars['Boolean']>;
  send_comment_emails?: InputMaybe<Scalars['Boolean']>;
  /** Get a push notification when there is a new comment */
  send_comment_push?: InputMaybe<Scalars['Boolean']>;
  /** Send an email when a client completes a program */
  send_course_complete_email?: InputMaybe<Scalars['Boolean']>;
  send_email_before_appointment?: InputMaybe<Scalars['Boolean']>;
  send_email_on_appointment_book?: InputMaybe<Scalars['Boolean']>;
  send_email_on_appointment_cancel?: InputMaybe<Scalars['Boolean']>;
  /** Send an email to provider when client has been assigned */
  send_email_on_client_has_been_assigned_to_you?: InputMaybe<Scalars['Boolean']>;
  send_email_on_fax_delivery_failure?: InputMaybe<Scalars['Boolean']>;
  send_email_on_fax_received?: InputMaybe<Scalars['Boolean']>;
  send_email_on_intake_flow_complete?: InputMaybe<Scalars['Boolean']>;
  send_email_on_intake_flow_item_complete?: InputMaybe<Scalars['Boolean']>;
  send_email_on_intake_flow_start?: InputMaybe<Scalars['Boolean']>;
  send_email_on_new_document?: InputMaybe<Scalars['Boolean']>;
  send_email_on_new_folder?: InputMaybe<Scalars['Boolean']>;
  /** Send an email when a client purchases a package */
  send_email_on_package_purchase?: InputMaybe<Scalars['Boolean']>;
  /** Get an email when a scheduled payment fails */
  send_email_on_scheduled_payment_failed?: InputMaybe<Scalars['Boolean']>;
  /** Send an email to primary account holder when subscription payment is made */
  send_email_receipt_for_subscription_payment?: InputMaybe<Scalars['Boolean']>;
  /** Get an email when provider adds an emoji to a journal entry */
  send_emoji_email?: InputMaybe<Scalars['Boolean']>;
  /** Get a push notification when provider adds an emoji to a journal entry */
  send_emoji_push?: InputMaybe<Scalars['Boolean']>;
  send_entry_emails?: InputMaybe<Scalars['Boolean']>;
  /** Send an email to client when reminder to complete goal checked */
  send_goal_reminder_email?: InputMaybe<Scalars['Boolean']>;
  /** Send a push notification to client when reminder to complete goal checked */
  send_goal_reminder_push?: InputMaybe<Scalars['Boolean']>;
  /** Get an email notification when there is a new message in a group chat */
  send_group_message_emails?: InputMaybe<Scalars['Boolean']>;
  /** Get a push notification when there is a new message in a group chat */
  send_group_message_push?: InputMaybe<Scalars['Boolean']>;
  /** When true, it will send an expiration notification to the provider when their client insurance is about to expire */
  send_insurance_expiry_notifications?: InputMaybe<Scalars['Boolean']>;
  send_message_emails?: InputMaybe<Scalars['Boolean']>;
  /** Get a push notification when there is a new message */
  send_message_push?: InputMaybe<Scalars['Boolean']>;
  send_new_clients_emails?: InputMaybe<Scalars['Boolean']>;
  /** When true and client updated insurance via client form, the assigned provider will be notified */
  send_new_insurance_added_notifications?: InputMaybe<Scalars['Boolean']>;
  /** Send an email to client when new program module is available */
  send_new_module_email?: InputMaybe<Scalars['Boolean']>;
  /** Send a push notification to client when new program module is available */
  send_new_module_push?: InputMaybe<Scalars['Boolean']>;
  /** Get a push notification 5 minutes before the appointment */
  send_push_before_appointment?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateNotificationSetting. */
export type UpdateNotificationSettingPayload = {
  __typename?: 'updateNotificationSettingPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  notificationSetting?: Maybe<NotificationSetting>;
};

/** Autogenerated input type of updateOffering */
export type UpdateOfferingInput = {
  archived?: InputMaybe<Scalars['Boolean']>;
  billing_frequency?: InputMaybe<Scalars['String']>;
  can_be_gifted?: InputMaybe<Scalars['Boolean']>;
  charge_immediately?: InputMaybe<Scalars['Boolean']>;
  course_id?: InputMaybe<Scalars['ID']>;
  course_ids?: InputMaybe<Scalars['String']>;
  default_selection_image_url?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  embed_question_form_id?: InputMaybe<Scalars['String']>;
  first_time_payment?: InputMaybe<Scalars['String']>;
  has_first_payment?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  lab_option_ids?: InputMaybe<Scalars['String']>;
  living_plate_meal_plan_id?: InputMaybe<Scalars['String']>;
  max_purchases?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  offering_image?: InputMaybe<OfferingImageUpload>;
  offering_includes?: InputMaybe<Array<InputMaybe<OfferingIncludesFields>>>;
  offering_products?: InputMaybe<Array<InputMaybe<OfferingProductInput>>>;
  override_group_on_purchase?: InputMaybe<Scalars['Boolean']>;
  price?: InputMaybe<Scalars['String']>;
  repeat_times?: InputMaybe<Scalars['String']>;
  require_booking_purchase?: InputMaybe<Scalars['Boolean']>;
  row_order?: InputMaybe<Scalars['Int']>;
  selected_image_id?: InputMaybe<Scalars['ID']>;
  show_free_text?: InputMaybe<Scalars['Boolean']>;
  show_offering?: InputMaybe<Scalars['Boolean']>;
  user_group_id?: InputMaybe<Scalars['ID']>;
  user_group_ids?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
  video_url?: InputMaybe<Scalars['String']>;
  visibility_status?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateOffering. */
export type UpdateOfferingPayload = {
  __typename?: 'updateOfferingPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  offering?: Maybe<Offering>;
};

/** Autogenerated input type of updateOfficeallySftpAccount */
export type UpdateOfficeallySftpAccountInput = {
  ftp_url?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  is_enabled?: InputMaybe<Scalars['Boolean']>;
  password?: InputMaybe<Scalars['String']>;
  username?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateOfficeallySftpAccount. */
export type UpdateOfficeallySftpAccountPayload = {
  __typename?: 'updateOfficeallySftpAccountPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  officeally_sftp_account?: Maybe<OfficeallySftpAccount>;
};

/** Autogenerated input type of updateOnboardingFlow */
export type UpdateOnboardingFlowInput = {
  groups_to_use_onboarding_flow?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateOnboardingFlow. */
export type UpdateOnboardingFlowPayload = {
  __typename?: 'updateOnboardingFlowPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  onboardingFlow?: Maybe<OnboardingFlow>;
};

/** Autogenerated input type of updateOnboardingItem */
export type UpdateOnboardingItemInput = {
  billing_disclaimer?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  is_skippable?: InputMaybe<Scalars['Boolean']>;
  item_id?: InputMaybe<Scalars['String']>;
  item_type?: InputMaybe<Scalars['String']>;
  onboarding_flow_id?: InputMaybe<Scalars['String']>;
  photo_id_disclaimer?: InputMaybe<Scalars['String']>;
  policy_disclaimer?: InputMaybe<Scalars['String']>;
  row_order?: InputMaybe<Scalars['Int']>;
  welcome_text?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateOnboardingItem. */
export type UpdateOnboardingItemPayload = {
  __typename?: 'updateOnboardingItemPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  onboardingItem?: Maybe<OnboardingItem>;
};

/** Autogenerated input type of updateOrgOwner */
export type UpdateOrgOwnerInput = {
  /** The ID of the Org Member to Become Owner */
  org_member_id: Scalars['ID'];
};

/** Autogenerated return type of updateOrgOwner. */
export type UpdateOrgOwnerPayload = {
  __typename?: 'updateOrgOwnerPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  /** The success string */
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of updateOrganizationCptCode */
export type UpdateOrganizationCptCodeInput = {
  cpt_code_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
  organization_id?: InputMaybe<Scalars['ID']>;
  price_per_unit?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateOrganizationCptCode. */
export type UpdateOrganizationCptCodePayload = {
  __typename?: 'updateOrganizationCptCodePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  organization_cpt_code?: Maybe<OrganizationCptCodeType>;
};

/** Autogenerated input type of updateOrganization */
export type UpdateOrganizationInput = {
  id?: InputMaybe<Scalars['ID']>;
  organization_info?: InputMaybe<PrimaryOrganizationInfoInput>;
};

/** Autogenerated input type of updateOrganizationMember */
export type UpdateOrganizationMemberInput = {
  additional_record_identifier?: InputMaybe<Scalars['String']>;
  avatar?: InputMaybe<Scalars['Upload']>;
  /** image in Base64 format */
  avatar_string?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  last_name?: InputMaybe<Scalars['String']>;
  /** a serialized JSON string of metadata */
  metadata?: InputMaybe<Scalars['String']>;
  npi?: InputMaybe<Scalars['String']>;
  phone_number?: InputMaybe<Scalars['String']>;
  provider_appointment_locations?: InputMaybe<Array<InputMaybe<ProviderAppointmentLocationsInput>>>;
  qualifications?: InputMaybe<Scalars['String']>;
  record_identifier?: InputMaybe<Scalars['String']>;
  scheduling_priority?: InputMaybe<Scalars['String']>;
  state_licenses?: InputMaybe<Array<InputMaybe<StateLicensesInput>>>;
  timezone?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateOrganizationMember. */
export type UpdateOrganizationMemberPayload = {
  __typename?: 'updateOrganizationMemberPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  user?: Maybe<User>;
};

/** Autogenerated input type of updateOrganizationMembership */
export type UpdateOrganizationMembershipInput = {
  action_for_appointments?: InputMaybe<Scalars['String']>;
  active?: InputMaybe<Scalars['Boolean']>;
  allow_group_level_actions?: InputMaybe<Scalars['Boolean']>;
  allow_self_scheduling_in_care_team?: InputMaybe<Scalars['Boolean']>;
  auto_create_convo_for_care_team?: InputMaybe<Scalars['Boolean']>;
  can_access_to_members_chat?: InputMaybe<Scalars['Boolean']>;
  can_add_clients?: InputMaybe<Scalars['Boolean']>;
  can_add_members?: InputMaybe<Scalars['Boolean']>;
  can_add_members_to_chat?: InputMaybe<Scalars['Boolean']>;
  can_assign_tasks_to_all_org_members?: InputMaybe<Scalars['Boolean']>;
  can_be_care_team_member?: InputMaybe<Scalars['Boolean']>;
  can_charge_clients?: InputMaybe<Scalars['Boolean']>;
  can_delete_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_delete_faxes?: InputMaybe<Scalars['Boolean']>;
  can_edit_appointment_types?: InputMaybe<Scalars['Boolean']>;
  can_edit_calendar?: InputMaybe<Scalars['Boolean']>;
  can_edit_credit?: InputMaybe<Scalars['Boolean']>;
  can_edit_docs?: InputMaybe<Scalars['Boolean']>;
  can_edit_education?: InputMaybe<Scalars['Boolean']>;
  can_edit_forms?: InputMaybe<Scalars['Boolean']>;
  can_edit_members?: InputMaybe<Scalars['Boolean']>;
  can_edit_packages?: InputMaybe<Scalars['Boolean']>;
  can_edit_products?: InputMaybe<Scalars['Boolean']>;
  can_edit_settings?: InputMaybe<Scalars['Boolean']>;
  can_enroll_clients_to_programs?: InputMaybe<Scalars['Boolean']>;
  can_lock_form_answer_groups?: InputMaybe<Scalars['Boolean']>;
  can_lock_others_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_lock_own_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_mark_assigned_tasks_to_other_org_members_as_completed?: InputMaybe<Scalars['Boolean']>;
  can_merge_clients?: InputMaybe<Scalars['Boolean']>;
  can_order_labs?: InputMaybe<Scalars['Boolean']>;
  can_remove_client?: InputMaybe<Scalars['Boolean']>;
  can_rename_and_delete_tags?: InputMaybe<Scalars['Boolean']>;
  can_see_billing?: InputMaybe<Scalars['Boolean']>;
  can_see_calendar?: InputMaybe<Scalars['Boolean']>;
  can_see_clients?: InputMaybe<Scalars['Boolean']>;
  can_see_docs?: InputMaybe<Scalars['Boolean']>;
  can_see_faxes?: InputMaybe<Scalars['Boolean']>;
  can_see_fullscript_tab?: InputMaybe<Scalars['Boolean']>;
  can_see_option_to_use_erx_dosespot?: InputMaybe<Scalars['Boolean']>;
  can_see_sent_faxes?: InputMaybe<Scalars['Boolean']>;
  can_see_transfers?: InputMaybe<Scalars['Boolean']>;
  can_set_client_password?: InputMaybe<Scalars['Boolean']>;
  can_share_documents_and_folders_with_org_members?: InputMaybe<Scalars['Boolean']>;
  can_sign_others_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_sign_own_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_submit_cms_1500s_to_change_health?: InputMaybe<Scalars['Boolean']>;
  can_submit_cms_1500s_to_office_ally?: InputMaybe<Scalars['Boolean']>;
  can_view_all_org_members_tasks?: InputMaybe<Scalars['Boolean']>;
  can_view_cms1500s?: InputMaybe<Scalars['Boolean']>;
  can_view_goal_templates?: InputMaybe<Scalars['Boolean']>;
  can_view_labs?: InputMaybe<Scalars['Boolean']>;
  can_view_org_dashboard?: InputMaybe<Scalars['Boolean']>;
  can_view_reports?: InputMaybe<Scalars['Boolean']>;
  can_view_super_bills?: InputMaybe<Scalars['Boolean']>;
  can_write_org_addendums?: InputMaybe<Scalars['Boolean']>;
  email?: InputMaybe<Scalars['String']>;
  erx_dosespot_role?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  fullscript_practitioner_id?: InputMaybe<Scalars['String']>;
  gets_failed_fax_notif?: InputMaybe<Scalars['Boolean']>;
  gets_fax_notif?: InputMaybe<Scalars['Boolean']>;
  has_own_branding?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  is_admin?: InputMaybe<Scalars['Boolean']>;
  is_developer?: InputMaybe<Scalars['Boolean']>;
  is_provider?: InputMaybe<Scalars['Boolean']>;
  last_name?: InputMaybe<Scalars['String']>;
  notify_any_client_activity?: InputMaybe<Scalars['Boolean']>;
  notify_on_book?: InputMaybe<Scalars['Boolean']>;
  notify_on_cancel?: InputMaybe<Scalars['Boolean']>;
  notify_on_payment_failure?: InputMaybe<Scalars['Boolean']>;
  /** Options are ["Standard", "Support"] */
  org_role?: InputMaybe<Scalars['String']>;
  /** Selected permission template */
  permission_template_id?: InputMaybe<Scalars['ID']>;
  phone_number?: InputMaybe<Scalars['String']>;
  position?: InputMaybe<Scalars['Int']>;
  professions?: InputMaybe<Array<InputMaybe<ProfessionsInput>>>;
  provider_to_receive_clients?: InputMaybe<Scalars['ID']>;
  /** Updates the qualifications of the org member (optional) */
  qualifications?: InputMaybe<Scalars['String']>;
  request_eligibility_checks?: InputMaybe<Scalars['Boolean']>;
  scheduling_priority?: InputMaybe<Scalars['String']>;
  sees_all_billing?: InputMaybe<Scalars['Boolean']>;
  sees_all_clients?: InputMaybe<Scalars['Boolean']>;
  selected_licensed_in_filter?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  selected_locations_filter?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  selected_statuses_filter?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  selected_tags_filter?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  send_email_on_intake_flow_complete?: InputMaybe<Scalars['Boolean']>;
  send_email_on_intake_flow_start?: InputMaybe<Scalars['Boolean']>;
  share_appointment_types?: InputMaybe<Scalars['Boolean']>;
  share_custom_metrics?: InputMaybe<Scalars['Boolean']>;
  share_fullscript?: InputMaybe<Scalars['Boolean']>;
  share_goal_templates?: InputMaybe<Scalars['Boolean']>;
  share_packages?: InputMaybe<Scalars['Boolean']>;
  share_smart_phrases?: InputMaybe<Scalars['Boolean']>;
  share_user_groups?: InputMaybe<Scalars['Boolean']>;
  show_availability_first?: InputMaybe<Scalars['Boolean']>;
  show_org_tab?: InputMaybe<Scalars['Boolean']>;
  specialties?: InputMaybe<Array<InputMaybe<SpecialtiesInput>>>;
  start_conversation_with?: InputMaybe<Scalars['Boolean']>;
  /** Updates the timezone of the org member (optional) */
  timezone?: InputMaybe<Scalars['String']>;
  /** Lets you add extra metadata about the organization membership. Not used in Healthie UI */
  title?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateOrganizationMembership. */
export type UpdateOrganizationMembershipPayload = {
  __typename?: 'updateOrganizationMembershipPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  organizationMembership?: Maybe<OrganizationMembership>;
};

/** Autogenerated return type of updateOrganization. */
export type UpdateOrganizationPayload = {
  __typename?: 'updateOrganizationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  organization?: Maybe<Organization>;
  updated_organization_info?: Maybe<OrganizationInfo>;
};

/** Autogenerated input type of updatePermissionTemplate */
export type UpdatePermissionTemplateInput = {
  allow_group_level_actions?: InputMaybe<Scalars['Boolean']>;
  allow_self_scheduling_in_care_team?: InputMaybe<Scalars['Boolean']>;
  auto_create_convo_for_care_team?: InputMaybe<Scalars['Boolean']>;
  can_access_to_members_chat?: InputMaybe<Scalars['Boolean']>;
  can_add_clients?: InputMaybe<Scalars['Boolean']>;
  can_add_members?: InputMaybe<Scalars['Boolean']>;
  can_add_members_to_chat?: InputMaybe<Scalars['Boolean']>;
  can_assign_tasks_to_all_org_members?: InputMaybe<Scalars['Boolean']>;
  can_be_care_team_member?: InputMaybe<Scalars['Boolean']>;
  can_charge_clients?: InputMaybe<Scalars['Boolean']>;
  can_delete_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_delete_faxes?: InputMaybe<Scalars['Boolean']>;
  can_edit_appointment_types?: InputMaybe<Scalars['Boolean']>;
  can_edit_calendar?: InputMaybe<Scalars['Boolean']>;
  can_edit_credit?: InputMaybe<Scalars['Boolean']>;
  can_edit_docs?: InputMaybe<Scalars['Boolean']>;
  can_edit_education?: InputMaybe<Scalars['Boolean']>;
  can_edit_forms?: InputMaybe<Scalars['Boolean']>;
  can_edit_members?: InputMaybe<Scalars['Boolean']>;
  can_edit_packages?: InputMaybe<Scalars['Boolean']>;
  can_edit_products?: InputMaybe<Scalars['Boolean']>;
  can_edit_settings?: InputMaybe<Scalars['Boolean']>;
  can_enroll_clients_to_programs?: InputMaybe<Scalars['Boolean']>;
  can_lock_others_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_lock_own_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_mark_assigned_tasks_to_other_org_members_as_completed?: InputMaybe<Scalars['Boolean']>;
  can_merge_clients?: InputMaybe<Scalars['Boolean']>;
  can_order_labs?: InputMaybe<Scalars['Boolean']>;
  can_remove_client?: InputMaybe<Scalars['Boolean']>;
  can_rename_and_delete_tags?: InputMaybe<Scalars['Boolean']>;
  can_see_billing?: InputMaybe<Scalars['Boolean']>;
  can_see_calendar?: InputMaybe<Scalars['Boolean']>;
  can_see_clients?: InputMaybe<Scalars['Boolean']>;
  can_see_docs?: InputMaybe<Scalars['Boolean']>;
  can_see_faxes?: InputMaybe<Scalars['Boolean']>;
  can_see_fullscript_tab?: InputMaybe<Scalars['Boolean']>;
  can_see_sent_faxes?: InputMaybe<Scalars['Boolean']>;
  can_see_transfers?: InputMaybe<Scalars['Boolean']>;
  can_set_client_password?: InputMaybe<Scalars['Boolean']>;
  can_share_documents_and_folders_with_org_members?: InputMaybe<Scalars['Boolean']>;
  can_sign_others_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_sign_own_charting_notes?: InputMaybe<Scalars['Boolean']>;
  can_submit_cms_1500s_to_change_health?: InputMaybe<Scalars['Boolean']>;
  can_submit_cms_1500s_to_office_ally?: InputMaybe<Scalars['Boolean']>;
  can_view_all_org_members_tasks?: InputMaybe<Scalars['Boolean']>;
  can_view_cms1500s?: InputMaybe<Scalars['Boolean']>;
  can_view_goal_templates?: InputMaybe<Scalars['Boolean']>;
  can_view_labs?: InputMaybe<Scalars['Boolean']>;
  can_view_org_dashboard?: InputMaybe<Scalars['Boolean']>;
  can_view_reports?: InputMaybe<Scalars['Boolean']>;
  can_view_super_bills?: InputMaybe<Scalars['Boolean']>;
  can_write_org_addendums?: InputMaybe<Scalars['Boolean']>;
  gets_failed_fax_notif?: InputMaybe<Scalars['Boolean']>;
  gets_fax_notif?: InputMaybe<Scalars['Boolean']>;
  has_own_branding?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['ID']>;
  is_admin?: InputMaybe<Scalars['Boolean']>;
  is_provider?: InputMaybe<Scalars['Boolean']>;
  name?: InputMaybe<Scalars['String']>;
  notify_any_client_activity?: InputMaybe<Scalars['Boolean']>;
  notify_on_book?: InputMaybe<Scalars['Boolean']>;
  notify_on_cancel?: InputMaybe<Scalars['Boolean']>;
  notify_on_payment_failure?: InputMaybe<Scalars['Boolean']>;
  org_role?: InputMaybe<Scalars['String']>;
  organization_id?: InputMaybe<Scalars['ID']>;
  request_eligibility_checks?: InputMaybe<Scalars['Boolean']>;
  sees_all_billing?: InputMaybe<Scalars['Boolean']>;
  sees_all_clients?: InputMaybe<Scalars['Boolean']>;
  send_email_on_intake_flow_complete?: InputMaybe<Scalars['Boolean']>;
  send_email_on_intake_flow_start?: InputMaybe<Scalars['Boolean']>;
  share_appointment_types?: InputMaybe<Scalars['Boolean']>;
  share_custom_metrics?: InputMaybe<Scalars['Boolean']>;
  share_fullscript?: InputMaybe<Scalars['Boolean']>;
  share_goal_templates?: InputMaybe<Scalars['Boolean']>;
  share_packages?: InputMaybe<Scalars['Boolean']>;
  share_smart_phrases?: InputMaybe<Scalars['Boolean']>;
  show_availability_first?: InputMaybe<Scalars['Boolean']>;
  show_org_tab?: InputMaybe<Scalars['Boolean']>;
  start_conversation_with?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updatePermissionTemplate. */
export type UpdatePermissionTemplatePayload = {
  __typename?: 'updatePermissionTemplatePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  permissionTemplate?: Maybe<PermissionTemplateType>;
};

/** Autogenerated input type of updatePolicyMutation */
export type UpdatePolicyMutationInput = {
  benefits?: InputMaybe<Array<InputMaybe<BenefitInput>>>;
  call_reference?: InputMaybe<CallReferenceInput>;
  cpt_codes_policies?: InputMaybe<Array<InputMaybe<CptCodesPolicyInput>>>;
  effective_end?: InputMaybe<Scalars['String']>;
  effective_start?: InputMaybe<Scalars['String']>;
  holder_dob?: InputMaybe<Scalars['String']>;
  holder_first?: InputMaybe<Scalars['String']>;
  holder_gender?: InputMaybe<Scalars['String']>;
  holder_last?: InputMaybe<Scalars['String']>;
  holder_mi?: InputMaybe<Scalars['String']>;
  holder_phone?: InputMaybe<Scalars['String']>;
  icd_codes_policies?: InputMaybe<Array<InputMaybe<IcdCodesPolicyInput>>>;
  id?: InputMaybe<Scalars['ID']>;
  insurance_authorization?: InputMaybe<InsuranceAuthorizationInput>;
  insurance_authorization_required?: InputMaybe<Scalars['Boolean']>;
  insurance_card_back_id?: InputMaybe<Scalars['String']>;
  insurance_card_front_id?: InputMaybe<Scalars['String']>;
  notes?: InputMaybe<Scalars['String']>;
  policy_phone_number?: InputMaybe<Scalars['String']>;
  priority_type?: InputMaybe<Scalars['String']>;
  referral_required?: InputMaybe<Scalars['Boolean']>;
  referring_physician_id?: InputMaybe<Scalars['String']>;
  same_address_as_client?: InputMaybe<Scalars['Boolean']>;
  type_string?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updatePolicyMutation. */
export type UpdatePolicyMutationPayload = {
  __typename?: 'updatePolicyMutationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  policy?: Maybe<Policy>;
};

/** Autogenerated input type of updateProcedure */
export type UpdateProcedureInput = {
  code?: InputMaybe<Scalars['String']>;
  code_system_name?: InputMaybe<Scalars['String']>;
  cpt_code_id?: InputMaybe<Scalars['ID']>;
  display_name?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  procedure_end_datetime?: InputMaybe<Scalars['String']>;
  procedure_start_datetime?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  target_site?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateProcedure. */
export type UpdateProcedurePayload = {
  __typename?: 'updateProcedurePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  procedure?: Maybe<Procedure>;
};

/** Autogenerated input type of updateProduct */
export type UpdateProductInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  price?: InputMaybe<Scalars['String']>;
  remaining_quantity?: InputMaybe<Scalars['String']>;
  tax_description?: InputMaybe<Scalars['String']>;
  tax_rate?: InputMaybe<Scalars['String']>;
  unlimited_quantity?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateProduct. */
export type UpdateProductPayload = {
  __typename?: 'updateProductPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  product?: Maybe<Product>;
};

/** Autogenerated input type of updateProviderCptCodes */
export type UpdateProviderCptCodesInput = {
  provider_cpt_codes?: InputMaybe<Array<InputMaybe<ProviderCptCodeInput>>>;
  provider_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateProviderCptCodes. */
export type UpdateProviderCptCodesPayload = {
  __typename?: 'updateProviderCptCodesPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateReceivedFax */
export type UpdateReceivedFaxInput = {
  archived?: InputMaybe<Scalars['Boolean']>;
  comments?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateReceivedFax. */
export type UpdateReceivedFaxPayload = {
  __typename?: 'updateReceivedFaxPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  receivedFax?: Maybe<ReceivedFax>;
};

/** Autogenerated input type of updateRecommendation */
export type UpdateRecommendationInput = {
  id?: InputMaybe<Scalars['ID']>;
  recommendation_body?: InputMaybe<Scalars['String']>;
  recommendation_type?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateRecommendation. */
export type UpdateRecommendationPayload = {
  __typename?: 'updateRecommendationPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  recommendation?: Maybe<Recommendation>;
};

/** Autogenerated input type of updateRecurringForm */
export type UpdateRecurringFormInput = {
  ends_on?: InputMaybe<Scalars['String']>;
  frequency?: InputMaybe<Scalars['String']>;
  hour?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['String']>;
  is_active?: InputMaybe<Scalars['Boolean']>;
  is_recurring?: InputMaybe<Scalars['Boolean']>;
  minute?: InputMaybe<Scalars['String']>;
  monthday?: InputMaybe<Scalars['String']>;
  period?: InputMaybe<Scalars['String']>;
  recipient_ids?: InputMaybe<Scalars['String']>;
  recurrence_ends?: InputMaybe<Scalars['Boolean']>;
  weekday?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateRecurringForm. */
export type UpdateRecurringFormPayload = {
  __typename?: 'updateRecurringFormPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  recurringForm?: Maybe<RecurringForm>;
};

/** Autogenerated input type of updateReferral */
export type UpdateReferralInput = {
  id?: InputMaybe<Scalars['ID']>;
  referral_reason?: InputMaybe<Scalars['String']>;
  referring_physician_id?: InputMaybe<Scalars['ID']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateReferral. */
export type UpdateReferralPayload = {
  __typename?: 'updateReferralPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  referral?: Maybe<Referral>;
};

/** Autogenerated input type of updateReferringPhysician */
export type UpdateReferringPhysicianInput = {
  accepts_insurance?: InputMaybe<Scalars['Boolean']>;
  business_name?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  fax_number?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  last_name?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<PhysicianLocationInput>;
  notes?: InputMaybe<Scalars['String']>;
  npi?: InputMaybe<Scalars['String']>;
  other_id?: InputMaybe<Scalars['String']>;
  other_id_qualifier?: InputMaybe<Scalars['String']>;
  phone_number?: InputMaybe<Scalars['String']>;
  referrals?: InputMaybe<Array<InputMaybe<PhysicianReferralInput>>>;
  speciality?: InputMaybe<Scalars['String']>;
  website?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateReferringPhysician. */
export type UpdateReferringPhysicianPayload = {
  __typename?: 'updateReferringPhysicianPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  referring_physician?: Maybe<ReferringPhysician>;
};

/** Autogenerated input type of updateRequestedPayment */
export type UpdateRequestedPaymentInput = {
  appointment_id?: InputMaybe<Scalars['ID']>;
  cms1500_id?: InputMaybe<Scalars['ID']>;
  id: Scalars['ID'];
  invoice_type?: InputMaybe<Scalars['String']>;
  is_preview?: InputMaybe<Scalars['Boolean']>;
  notes?: InputMaybe<Scalars['String']>;
  offering_id?: InputMaybe<Scalars['ID']>;
  price?: InputMaybe<Scalars['String']>;
  recipient_id?: InputMaybe<Scalars['ID']>;
  requested_payer?: InputMaybe<RequestedPayerInput>;
  requested_payment_template?: InputMaybe<RequestedPaymentTemplateInput>;
  resend_receipt?: InputMaybe<Scalars['Boolean']>;
  send_request_email?: InputMaybe<Scalars['Boolean']>;
  sender_id?: InputMaybe<Scalars['ID']>;
  service_date?: InputMaybe<Scalars['String']>;
  services_provided?: InputMaybe<Scalars['String']>;
  status?: InputMaybe<Scalars['String']>;
  use_as_template?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateRequestedPayment. */
export type UpdateRequestedPaymentPayload = {
  __typename?: 'updateRequestedPaymentPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  requested_payment?: Maybe<RequestedPayment>;
};

/** Autogenerated input type of updateSmartPhrase */
export type UpdateSmartPhraseInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  phrase?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateSmartPhrase. */
export type UpdateSmartPhrasePayload = {
  __typename?: 'updateSmartPhrasePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  smartPhrase?: Maybe<SmartPhrase>;
};

/** Autogenerated input type of updateSmokingStatus */
export type UpdateSmokingStatusInput = {
  id?: InputMaybe<Scalars['ID']>;
  smoking_status_code?: InputMaybe<Scalars['String']>;
  status_end_datetime?: InputMaybe<Scalars['String']>;
  status_start_datetime?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateSmokingStatus. */
export type UpdateSmokingStatusPayload = {
  __typename?: 'updateSmokingStatusPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  smokingStatus?: Maybe<SmokingStatus>;
};

/** Autogenerated input type of updateState */
export type UpdateStateInput = {
  active?: InputMaybe<Scalars['Boolean']>;
  id: Scalars['ID'];
};

/** Autogenerated return type of updateState. */
export type UpdateStatePayload = {
  __typename?: 'updateStatePayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  course?: Maybe<Course>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateStripeCustomerDetail */
export type UpdateStripeCustomerDetailInput = {
  card_type_label?: InputMaybe<Scalars['String']>;
  first_microdeposit?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  is_default?: InputMaybe<Scalars['Boolean']>;
  second_microdeposit?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateStripeCustomerDetail. */
export type UpdateStripeCustomerDetailPayload = {
  __typename?: 'updateStripeCustomerDetailPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  stripe_customer_detail?: Maybe<StripeCustomerDetail>;
};

/** Autogenerated input type of updateStripeVerificationDetails */
export type UpdateStripeVerificationDetailsInput = {
  account_holder_name?: InputMaybe<Scalars['String']>;
  account_number?: InputMaybe<Scalars['String']>;
  additional_verification_document?: InputMaybe<Scalars['Upload']>;
  appointment_type_credits_attributes?: InputMaybe<Array<InputMaybe<AppointmentTypeCreditInput>>>;
  business_description?: InputMaybe<Scalars['String']>;
  business_name?: InputMaybe<Scalars['String']>;
  business_tax_id?: InputMaybe<Scalars['String']>;
  company_verification_document?: InputMaybe<Scalars['Upload']>;
  currency?: InputMaybe<Scalars['String']>;
  dob?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  entity_type?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  last_name?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<ClientLocationInput>;
  new_country?: InputMaybe<Scalars['String']>;
  personal_address?: InputMaybe<ClientLocationInput>;
  personal_phone?: InputMaybe<Scalars['String']>;
  phone?: InputMaybe<Scalars['String']>;
  routing_number?: InputMaybe<Scalars['String']>;
  skip_adding_bank_info?: InputMaybe<Scalars['Boolean']>;
  ssn?: InputMaybe<Scalars['String']>;
  ssn_last_4?: InputMaybe<Scalars['String']>;
  verification_document?: InputMaybe<Scalars['Upload']>;
};

/** Autogenerated return type of updateStripeVerificationDetails. */
export type UpdateStripeVerificationDetailsPayload = {
  __typename?: 'updateStripeVerificationDetailsPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  user?: Maybe<User>;
};

/** Autogenerated input type of updateSubscription */
export type UpdateSubscriptionInput = {
  activate_short_trial?: InputMaybe<Scalars['Boolean']>;
  details?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  /** The name of the new Stripe Plan to switch to. Currently, this just supports moving trialing members to starter. */
  new_plan_name?: InputMaybe<Scalars['String']>;
  reactivate_plan?: InputMaybe<Scalars['String']>;
  reason?: InputMaybe<Scalars['String']>;
  /** Value can either be monthly or annual. Allows users on Practice Plus or Small Pracitce to switch billing cycles. */
  switch_plan?: InputMaybe<Scalars['String']>;
  token?: InputMaybe<Scalars['String']>;
  wants_to_cancel?: InputMaybe<Scalars['Boolean']>;
};

/** Autogenerated return type of updateSubscription. */
export type UpdateSubscriptionPayload = {
  __typename?: 'updateSubscriptionPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  currentUser?: Maybe<User>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  subscription?: Maybe<SubscriptionInstance>;
};

/** Autogenerated input type of updateSuperBill */
export type UpdateSuperBillInput = {
  address?: InputMaybe<Scalars['String']>;
  amount_paid?: InputMaybe<Scalars['String']>;
  cpt_codes_super_bills?: InputMaybe<Array<InputMaybe<CptCodesSuperBillInput>>>;
  dietitian_id?: InputMaybe<Scalars['ID']>;
  icd_codes_super_bills?: InputMaybe<Array<InputMaybe<IcdCodesSuperBillInput>>>;
  id?: InputMaybe<Scalars['ID']>;
  license_num?: InputMaybe<Scalars['String']>;
  location?: InputMaybe<LocationInputs>;
  location_id?: InputMaybe<Scalars['ID']>;
  npi?: InputMaybe<Scalars['String']>;
  patient_dob?: InputMaybe<Scalars['String']>;
  patient_id?: InputMaybe<Scalars['ID']>;
  patient_location?: InputMaybe<PatientLocationInputs>;
  patient_name?: InputMaybe<Scalars['String']>;
  patient_phone?: InputMaybe<Scalars['String']>;
  place_of_service_id?: InputMaybe<Scalars['ID']>;
  prov_city?: InputMaybe<Scalars['String']>;
  prov_email?: InputMaybe<Scalars['String']>;
  prov_line1?: InputMaybe<Scalars['String']>;
  prov_line2?: InputMaybe<Scalars['String']>;
  prov_phone?: InputMaybe<Scalars['String']>;
  prov_state?: InputMaybe<Scalars['String']>;
  prov_zip?: InputMaybe<Scalars['String']>;
  provider_name?: InputMaybe<Scalars['String']>;
  receipt_line_items?: InputMaybe<Array<InputMaybe<ReceiptLineItemInput>>>;
  referrer_name?: InputMaybe<Scalars['String']>;
  referrer_npi?: InputMaybe<Scalars['String']>;
  service_date?: InputMaybe<Scalars['String']>;
  should_email_to_client?: InputMaybe<Scalars['Boolean']>;
  status?: InputMaybe<Scalars['String']>;
  tax_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateSuperBill. */
export type UpdateSuperBillPayload = {
  __typename?: 'updateSuperBillPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  superBill?: Maybe<SuperBill>;
};

/** Autogenerated input type of updateTag */
export type UpdateTagInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateTag. */
export type UpdateTagPayload = {
  __typename?: 'updateTagPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  tag?: Maybe<Tag>;
};

/** Autogenerated input type of updateTask */
export type UpdateTaskInput = {
  client_id?: InputMaybe<Scalars['String']>;
  complete?: InputMaybe<Scalars['Boolean']>;
  completed_by_id?: InputMaybe<Scalars['ID']>;
  content?: InputMaybe<Scalars['String']>;
  created_by_id?: InputMaybe<Scalars['String']>;
  due_date?: InputMaybe<Scalars['String']>;
  hidden?: InputMaybe<Scalars['Boolean']>;
  id?: InputMaybe<Scalars['String']>;
  position?: InputMaybe<Scalars['Int']>;
  priority?: InputMaybe<Scalars['Int']>;
  reminder?: InputMaybe<TaskReminderInput>;
  seen?: InputMaybe<Scalars['Boolean']>;
  user_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateTask. */
export type UpdateTaskPayload = {
  __typename?: 'updateTaskPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  task?: Maybe<Task>;
};

/** Autogenerated input type of updateUniqueDeviceIdentifier */
export type UpdateUniqueDeviceIdentifierInput = {
  assigning_authority?: InputMaybe<Scalars['String']>;
  device_code?: InputMaybe<Scalars['String']>;
  display_name?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  scoping_entity?: InputMaybe<Scalars['String']>;
  udi_code?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateUniqueDeviceIdentifier. */
export type UpdateUniqueDeviceIdentifierPayload = {
  __typename?: 'updateUniqueDeviceIdentifierPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  unique_device_identifier?: Maybe<UniqueDeviceIdentifier>;
};

/** Autogenerated input type of updateUserAppointmentPricing */
export type UpdateUserAppointmentPricingInput = {
  advance_appointment_prices?: InputMaybe<Array<InputMaybe<AdvanceAppointmentPricesInput>>>;
  user_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateUserAppointmentPricing. */
export type UpdateUserAppointmentPricingPayload = {
  __typename?: 'updateUserAppointmentPricingPayload';
  advance_appointment_prices?: Maybe<Array<Maybe<AdvanceAppointmentPrice>>>;
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
};

/** Autogenerated input type of updateUserGroup */
export type UpdateUserGroupInput = {
  id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
  onboarding_flow_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of updateUserGroup. */
export type UpdateUserGroupPayload = {
  __typename?: 'updateUserGroupPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  user_group?: Maybe<UserGroup>;
};

/** Autogenerated input type of updateUser */
export type UpdateUserInput = {
  active_care_plan_id?: InputMaybe<Scalars['ID']>;
  assign_tasks_seen?: InputMaybe<Scalars['Boolean']>;
  avatar?: InputMaybe<Scalars['Upload']>;
  /** image in Base64 format */
  avatar_string?: InputMaybe<Scalars['String']>;
  blast_seen?: InputMaybe<Scalars['Boolean']>;
  card_type_label?: InputMaybe<Scalars['String']>;
  consented_to_labs?: InputMaybe<Scalars['Boolean']>;
  current_email?: InputMaybe<Scalars['String']>;
  current_password?: InputMaybe<Scalars['String']>;
  default_onboarding_flow_id?: InputMaybe<Scalars['ID']>;
  dimissed_calendar_prompt?: InputMaybe<Scalars['Boolean']>;
  dismissed_charting_note_addendum_warning?: InputMaybe<Scalars['Boolean']>;
  dismissed_fullscript?: InputMaybe<Scalars['Boolean']>;
  dismissed_products_tab?: InputMaybe<Scalars['Boolean']>;
  dob?: InputMaybe<Scalars['String']>;
  email?: InputMaybe<Scalars['String']>;
  first_name?: InputMaybe<Scalars['String']>;
  gender?: InputMaybe<Scalars['String']>;
  gender_identity?: InputMaybe<Scalars['String']>;
  gender_identity_code?: InputMaybe<Scalars['String']>;
  human_id?: InputMaybe<Scalars['ID']>;
  id?: InputMaybe<Scalars['ID']>;
  last_name?: InputMaybe<Scalars['String']>;
  legal_name?: InputMaybe<Scalars['String']>;
  locations?: InputMaybe<Array<InputMaybe<ClientLocationInput>>>;
  /** This field does not do anything, and should not be used */
  name?: InputMaybe<Scalars['String']>;
  password?: InputMaybe<Scalars['String']>;
  password_confirmation?: InputMaybe<Scalars['String']>;
  phone_number?: InputMaybe<Scalars['String']>;
  policies?: InputMaybe<Array<InputMaybe<UserPolicyInput>>>;
  preferred_language_code?: InputMaybe<Scalars['String']>;
  pretend_to_be?: InputMaybe<Scalars['String']>;
  primary_ethnicity_code?: InputMaybe<Scalars['String']>;
  primary_race_code?: InputMaybe<Scalars['String']>;
  product_update_articles?: InputMaybe<Scalars['Int']>;
  pronouns?: InputMaybe<Scalars['String']>;
  qualifications?: InputMaybe<Scalars['String']>;
  resend_welcome_to_dietitian?: InputMaybe<Scalars['Boolean']>;
  secondary_ethnicity_code?: InputMaybe<Scalars['Int']>;
  secondary_race_code?: InputMaybe<Scalars['String']>;
  seen_onboarding_complete_page?: InputMaybe<Scalars['Boolean']>;
  seen_welcome?: InputMaybe<Scalars['Boolean']>;
  send_get_mobile_app_email?: InputMaybe<Scalars['Boolean']>;
  sex?: InputMaybe<Scalars['String']>;
  sexual_orientation_code?: InputMaybe<Scalars['String']>;
  sexual_orientation_other?: InputMaybe<Scalars['String']>;
  skipped_email?: InputMaybe<Scalars['Boolean']>;
  submit_labs_immediately?: InputMaybe<Scalars['Boolean']>;
  timezone?: InputMaybe<Scalars['String']>;
  /** Token for credit card, created by Stripe.JS */
  token?: InputMaybe<Scalars['String']>;
  uniq_push_id?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateUser. */
export type UpdateUserPayload = {
  __typename?: 'updateUserPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  user?: Maybe<User>;
};

/** Autogenerated input type of updateWebhook */
export type UpdateWebhookInput = {
  event_type?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  is_enabled?: InputMaybe<Scalars['Boolean']>;
  url?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of updateWebhook. */
export type UpdateWebhookPayload = {
  __typename?: 'updateWebhookPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  webhook?: Maybe<Webhook>;
};

/** Autogenerated input type of uploadBatchToCandidHealth */
export type UploadBatchToCandidHealthInput = {
  cms1500_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

/** Autogenerated return type of uploadBatchToCandidHealth. */
export type UploadBatchToCandidHealthPayload = {
  __typename?: 'uploadBatchToCandidHealthPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  cms1500s?: Maybe<Array<Maybe<Cms1500>>>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of uploadBatchToChangeHealth */
export type UploadBatchToChangeHealthInput = {
  cms1500_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

/** Autogenerated return type of uploadBatchToChangeHealth. */
export type UploadBatchToChangeHealthPayload = {
  __typename?: 'uploadBatchToChangeHealthPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  cms1500s?: Maybe<Array<Maybe<Cms1500>>>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of uploadBatchToOfficeally */
export type UploadBatchToOfficeallyInput = {
  cms1500_ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

/** Autogenerated return type of uploadBatchToOfficeally. */
export type UploadBatchToOfficeallyPayload = {
  __typename?: 'uploadBatchToOfficeallyPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  cms1500s?: Maybe<Array<Maybe<Cms1500>>>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_string?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of uploadToIntegrations */
export type UploadToIntegrationsInput = {
  cms1500_id?: InputMaybe<Scalars['ID']>;
};

/** Autogenerated return type of uploadToIntegrations. */
export type UploadToIntegrationsPayload = {
  __typename?: 'uploadToIntegrationsPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  success_message?: Maybe<Scalars['String']>;
};

/** Autogenerated input type of validateVerificationToken */
export type ValidateVerificationTokenInput = {
  verification_code?: InputMaybe<Scalars['String']>;
};

/** Autogenerated return type of validateVerificationToken. */
export type ValidateVerificationTokenPayload = {
  __typename?: 'validateVerificationTokenPayload';
  /**
   * DO NOT USE
   * @deprecated DO NOT USE
   */
  clientMutationId?: Maybe<Scalars['String']>;
  /** The list of errors occurred during the mutation */
  messages?: Maybe<Array<Maybe<FieldError>>>;
  user?: Maybe<User>;
};

export type ApplyTagsToUserMutationVariables = Exact<{
  ids?: InputMaybe<Array<InputMaybe<Scalars['ID']>> | InputMaybe<Scalars['ID']>>;
  taggable_user_id?: InputMaybe<Scalars['ID']>;
}>;


export type ApplyTagsToUserMutation = { __typename?: 'Mutation', bulkApply?: { __typename?: 'bulkApplyPayload', tags?: Array<{ __typename?: 'Tag', id: string, name: string } | null> | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type CreateAppointmentMutationVariables = Exact<{
  user_id?: InputMaybe<Scalars['String']>;
  appointment_type_id?: InputMaybe<Scalars['String']>;
  contact_type?: InputMaybe<Scalars['String']>;
  other_party_id?: InputMaybe<Scalars['String']>;
  datetime?: InputMaybe<Scalars['String']>;
}>;


export type CreateAppointmentMutation = { __typename?: 'Mutation', createAppointment?: { __typename?: 'createAppointmentPayload', appointment?: { __typename?: 'Appointment', id: string } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type CreateConversationMutationVariables = Exact<{
  simple_added_users?: InputMaybe<Scalars['String']>;
  owner_id?: InputMaybe<Scalars['ID']>;
  name?: InputMaybe<Scalars['String']>;
}>;


export type CreateConversationMutation = { __typename?: 'Mutation', createConversation?: { __typename?: 'createConversationPayload', conversation?: { __typename?: 'Conversation', id: string } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type CreateEntryMutationVariables = Exact<{
  metric_stat?: InputMaybe<Scalars['String']>;
  category?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
  created_at?: InputMaybe<Scalars['String']>;
}>;


export type CreateEntryMutation = { __typename?: 'Mutation', createEntry?: { __typename?: 'createEntryPayload', entry?: { __typename?: 'Entry', id: string } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type CreateFormAnswerGroupMutationVariables = Exact<{
  input: CreateFormAnswerGroupInput;
}>;


export type CreateFormAnswerGroupMutation = { __typename?: 'Mutation', createFormAnswerGroup?: { __typename?: 'createFormAnswerGroupPayload', form_answer_group?: { __typename?: 'FormAnswerGroup', id: string } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type CreateFormCompletionRequestMutationVariables = Exact<{
  input: CreateRequestedFormInput;
}>;


export type CreateFormCompletionRequestMutation = { __typename?: 'Mutation', createRequestedFormCompletion?: { __typename?: 'createRequestedFormPayload', requestedFormCompletion?: { __typename?: 'RequestedFormCompletion', id: string } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type CreateJournalEntryMutationVariables = Exact<{
  input: CreateEntryInput;
}>;


export type CreateJournalEntryMutation = { __typename?: 'Mutation', createEntry?: { __typename?: 'createEntryPayload', entry?: { __typename?: 'Entry', id: string } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type CreateLocationMutationVariables = Exact<{
  input: CreateLocationInput;
}>;


export type CreateLocationMutation = { __typename?: 'Mutation', createLocation?: { __typename?: 'createLocationPayload', location?: { __typename?: 'Location', id: string, name?: string | null, line1?: string | null, zip?: string | null } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type CreatePatientMutationVariables = Exact<{
  input: CreateClientInput;
}>;


export type CreatePatientMutation = { __typename?: 'Mutation', createClient?: { __typename?: 'createClientPayload', user?: { __typename?: 'User', id: string } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type CreateTaskMutationVariables = Exact<{
  content?: InputMaybe<Scalars['String']>;
  user_id?: InputMaybe<Scalars['String']>;
  priority?: InputMaybe<Scalars['Int']>;
  client_id?: InputMaybe<Scalars['String']>;
  due_date?: InputMaybe<Scalars['String']>;
  reminder?: InputMaybe<TaskReminderInput>;
}>;


export type CreateTaskMutation = { __typename?: 'Mutation', createTask?: { __typename?: 'createTaskPayload', task?: { __typename?: 'Task', id: string } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type DeleteAppointmentMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  deleteRecurring?: InputMaybe<Scalars['Boolean']>;
}>;


export type DeleteAppointmentMutation = { __typename?: 'Mutation', deleteAppointment?: { __typename?: 'deleteAppointmentPayload', appointment?: { __typename?: 'Appointment', id: string } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type DeleteTaskMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
}>;


export type DeleteTaskMutation = { __typename?: 'Mutation', deleteTask?: { __typename?: 'deleteTaskPayload', task?: { __typename?: 'Task', id: string } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type GetAppointmentQueryVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
}>;


export type GetAppointmentQuery = { __typename?: 'Query', appointment?: { __typename?: 'Appointment', id: string, date?: string | null, contact_type?: string | null, pm_status?: string | null, provider?: { __typename?: 'User', id: string, full_name?: string | null } | null, user?: { __typename?: 'User', id: string, full_name?: string | null } | null, appointment_type?: { __typename?: 'AppointmentType', id: string, name?: string | null } | null } | null };

export type GetConversationListQueryVariables = Exact<{
  offset?: InputMaybe<Scalars['Int']>;
  keywords?: InputMaybe<Scalars['String']>;
  active_status?: InputMaybe<Scalars['String']>;
  client_id?: InputMaybe<Scalars['String']>;
  read_status?: InputMaybe<Scalars['String']>;
  conversation_type?: InputMaybe<Scalars['String']>;
  provider_id?: InputMaybe<Scalars['ID']>;
}>;


export type GetConversationListQuery = { __typename?: 'Query', conversationMembershipsCount?: number | null, conversationMemberships?: Array<{ __typename?: 'ConversationMembership', id: string, display_name?: string | null, archived: boolean, viewed: boolean, convo?: { __typename?: 'Conversation', id: string, conversation_memberships_count?: number | null, owner?: { __typename?: 'User', id: string } | null } | null }> | null };

export type GetFormTemplateQueryVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
}>;


export type GetFormTemplateQuery = { __typename?: 'Query', customModuleForm?: { __typename?: 'CustomModuleForm', id: string, name?: string | null, use_for_charting: boolean, use_for_program: boolean, prefill?: boolean | null, has_matrix_field?: boolean | null, is_video?: boolean | null, has_non_readonly_modules?: boolean | null, custom_modules: Array<{ __typename?: 'CustomModule', id: string, mod_type?: string | null, label?: string | null }> } | null };

export type GetScheduledAppointmentsQueryVariables = Exact<{
  user_id?: InputMaybe<Scalars['ID']>;
  appointment_type_id?: InputMaybe<Scalars['ID']>;
}>;


export type GetScheduledAppointmentsQuery = { __typename?: 'Query', appointments?: Array<{ __typename?: 'Appointment', id: string }> | null };

export type GetUserQueryVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
}>;


export type GetUserQuery = { __typename?: 'Query', user?: { __typename?: 'User', id: string, first_name?: string | null, last_name?: string | null, dob?: string | null, gender?: string | null, email?: string | null, phone_number?: string | null, next_appt_date?: string | null, dietitian_id?: string | null, quick_notes?: string | null, user_group?: { __typename?: 'UserGroup', id: string, name?: string | null } | null, providers?: Array<{ __typename?: 'User', id: string, active: boolean, first_name?: string | null, last_name?: string | null, email?: string | null }> | null, active_tags?: Array<{ __typename?: 'Tag', id: string }> | null } | null };

export type EntriesQueryVariables = Exact<{
  category?: InputMaybe<Scalars['String']>;
  type?: InputMaybe<Scalars['String']>;
  client_id?: InputMaybe<Scalars['String']>;
}>;


export type EntriesQuery = { __typename?: 'Query', entries?: Array<{ __typename?: 'Entry', id: string, metric_stat?: number | null, created_at: string }> | null };

export type RemoveTagFromUserMutationVariables = Exact<{
  id?: InputMaybe<Scalars['ID']>;
  taggable_user_id?: InputMaybe<Scalars['ID']>;
}>;


export type RemoveTagFromUserMutation = { __typename?: 'Mutation', removeAppliedTag?: { __typename?: 'removeAppliedTagPayload', tag?: { __typename?: 'Tag', id: string, name: string } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type SendChatMessageMutationVariables = Exact<{
  input: CreateNoteInput;
}>;


export type SendChatMessageMutation = { __typename?: 'Mutation', createNote?: { __typename?: 'createNotePayload', messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null, note?: { __typename?: 'Note', id: string, user_id?: string | null, recipient_id?: string | null } | null } | null };

export type UpdateAppointmentMutationVariables = Exact<{
  input: UpdateAppointmentInput;
}>;


export type UpdateAppointmentMutation = { __typename?: 'Mutation', updateAppointment?: { __typename?: 'updateAppointmentPayload', appointment?: { __typename?: 'Appointment', id: string, date?: string | null } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type UpdateConversationMutationVariables = Exact<{
  input: UpdateConversationInput;
}>;


export type UpdateConversationMutation = { __typename?: 'Mutation', updateConversation?: { __typename?: 'updateConversationPayload', conversation?: { __typename?: 'Conversation', id: string } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type UpdatePatientMutationVariables = Exact<{
  input: UpdateClientInput;
}>;


export type UpdatePatientMutation = { __typename?: 'Mutation', updateClient?: { __typename?: 'updateClientPayload', user?: { __typename?: 'User', id: string, first_name?: string | null, last_name?: string | null, legal_name?: string | null, email?: string | null, quick_notes?: string | null } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };

export type UpdateTaskMutationVariables = Exact<{
  input: UpdateTaskInput;
}>;


export type UpdateTaskMutation = { __typename?: 'Mutation', updateTask?: { __typename?: 'updateTaskPayload', task?: { __typename?: 'Task', id: string } | null, messages?: Array<{ __typename?: 'FieldError', field?: string | null, message: string } | null> | null } | null };


export const ApplyTagsToUserDocument = gql`
    mutation applyTagsToUser($ids: [ID], $taggable_user_id: ID) {
  bulkApply(input: {ids: $ids, taggable_user_id: $taggable_user_id}) {
    tags {
      id
      name
    }
    messages {
      field
      message
    }
  }
}
    `;
export const CreateAppointmentDocument = gql`
    mutation createAppointment($user_id: String, $appointment_type_id: String, $contact_type: String, $other_party_id: String, $datetime: String) {
  createAppointment(
    input: {user_id: $user_id, appointment_type_id: $appointment_type_id, contact_type: $contact_type, other_party_id: $other_party_id, datetime: $datetime}
  ) {
    appointment {
      id
    }
    messages {
      field
      message
    }
  }
}
    `;
export const CreateConversationDocument = gql`
    mutation createConversation($simple_added_users: String, $owner_id: ID, $name: String) {
  createConversation(
    input: {simple_added_users: $simple_added_users, owner_id: $owner_id, name: $name}
  ) {
    conversation {
      id
    }
    messages {
      field
      message
    }
  }
}
    `;
export const CreateEntryDocument = gql`
    mutation createEntry($metric_stat: String, $category: String, $type: String, $user_id: String, $created_at: String) {
  createEntry(
    input: {category: $category, type: $type, metric_stat: $metric_stat, user_id: $user_id, created_at: $created_at}
  ) {
    entry {
      id
    }
    messages {
      field
      message
    }
  }
}
    `;
export const CreateFormAnswerGroupDocument = gql`
    mutation createFormAnswerGroup($input: createFormAnswerGroupInput!) {
  createFormAnswerGroup(input: $input) {
    form_answer_group {
      id
    }
    messages {
      field
      message
    }
  }
}
    `;
export const CreateFormCompletionRequestDocument = gql`
    mutation createFormCompletionRequest($input: createRequestedFormInput!) {
  createRequestedFormCompletion(input: $input) {
    requestedFormCompletion {
      id
    }
    messages {
      field
      message
    }
  }
}
    `;
export const CreateJournalEntryDocument = gql`
    mutation createJournalEntry($input: createEntryInput!) {
  createEntry(input: $input) {
    entry {
      id
    }
    messages {
      field
      message
    }
  }
}
    `;
export const CreateLocationDocument = gql`
    mutation createLocation($input: createLocationInput!) {
  createLocation(input: $input) {
    location {
      id
      name
      line1
      zip
    }
    messages {
      field
      message
    }
  }
}
    `;
export const CreatePatientDocument = gql`
    mutation createPatient($input: createClientInput!) {
  createClient(input: $input) {
    user {
      id
    }
    messages {
      field
      message
    }
  }
}
    `;
export const CreateTaskDocument = gql`
    mutation createTask($content: String, $user_id: String, $priority: Int, $client_id: String, $due_date: String, $reminder: TaskReminderInput) {
  createTask(
    input: {content: $content, user_id: $user_id, priority: $priority, client_id: $client_id, due_date: $due_date, reminder: $reminder}
  ) {
    task {
      id
    }
    messages {
      field
      message
    }
  }
}
    `;
export const DeleteAppointmentDocument = gql`
    mutation deleteAppointment($id: ID, $deleteRecurring: Boolean) {
  deleteAppointment(input: {id: $id, deleteRecurring: $deleteRecurring}) {
    appointment {
      id
    }
    messages {
      field
      message
    }
  }
}
    `;
export const DeleteTaskDocument = gql`
    mutation deleteTask($id: ID) {
  deleteTask(input: {id: $id}) {
    task {
      id
    }
    messages {
      field
      message
    }
  }
}
    `;
export const GetAppointmentDocument = gql`
    query getAppointment($id: ID) {
  appointment(id: $id) {
    id
    date
    contact_type
    pm_status
    provider {
      id
      full_name
    }
    user {
      id
      full_name
    }
    appointment_type {
      id
      name
    }
  }
}
    `;
export const GetConversationListDocument = gql`
    query getConversationList($offset: Int, $keywords: String, $active_status: String, $client_id: String, $read_status: String, $conversation_type: String, $provider_id: ID) {
  conversationMembershipsCount(
    keywords: $keywords
    active_status: $active_status
    client_id: $client_id
    read_status: $read_status
    conversation_type: $conversation_type
    provider_id: $provider_id
  )
  conversationMemberships(
    offset: $offset
    keywords: $keywords
    active_status: $active_status
    client_id: $client_id
    read_status: $read_status
    conversation_type: $conversation_type
    provider_id: $provider_id
  ) {
    id
    display_name
    archived
    viewed
    convo {
      id
      conversation_memberships_count
      owner {
        id
      }
    }
  }
}
    `;
export const GetFormTemplateDocument = gql`
    query getFormTemplate($id: ID) {
  customModuleForm(id: $id) {
    id
    name
    use_for_charting
    use_for_program
    prefill
    has_matrix_field
    is_video
    has_non_readonly_modules
    custom_modules {
      id
      mod_type
      label
    }
  }
}
    `;
export const GetScheduledAppointmentsDocument = gql`
    query getScheduledAppointments($user_id: ID, $appointment_type_id: ID) {
  appointments(
    user_id: $user_id
    filter_by_appointment_type_id: $appointment_type_id
    is_active: true
    should_paginate: false
    filter: "future"
  ) {
    id
  }
}
    `;
export const GetUserDocument = gql`
    query getUser($id: ID) {
  user(id: $id) {
    id
    first_name
    last_name
    dob
    gender
    email
    phone_number
    next_appt_date
    dietitian_id
    quick_notes
    user_group {
      id
      name
    }
    providers {
      id
      active
      first_name
      last_name
      email
    }
    active_tags {
      id
    }
  }
}
    `;
export const EntriesDocument = gql`
    query entries($category: String, $type: String, $client_id: String) {
  entries(category: $category, type: $type, client_id: $client_id) {
    id
    metric_stat
    created_at
  }
}
    `;
export const RemoveTagFromUserDocument = gql`
    mutation removeTagFromUser($id: ID, $taggable_user_id: ID) {
  removeAppliedTag(input: {id: $id, taggable_user_id: $taggable_user_id}) {
    tag {
      id
      name
    }
    messages {
      field
      message
    }
  }
}
    `;
export const SendChatMessageDocument = gql`
    mutation sendChatMessage($input: createNoteInput!) {
  createNote(input: $input) {
    messages {
      field
      message
    }
    note {
      id
      user_id
      recipient_id
    }
  }
}
    `;
export const UpdateAppointmentDocument = gql`
    mutation updateAppointment($input: updateAppointmentInput!) {
  updateAppointment(input: $input) {
    appointment {
      id
      date
    }
    messages {
      field
      message
    }
  }
}
    `;
export const UpdateConversationDocument = gql`
    mutation updateConversation($input: updateConversationInput!) {
  updateConversation(input: $input) {
    conversation {
      id
    }
    messages {
      field
      message
    }
  }
}
    `;
export const UpdatePatientDocument = gql`
    mutation updatePatient($input: updateClientInput!) {
  updateClient(input: $input) {
    user {
      id
      first_name
      last_name
      legal_name
      email
      quick_notes
    }
    messages {
      field
      message
    }
  }
}
    `;
export const UpdateTaskDocument = gql`
    mutation updateTask($input: updateTaskInput!) {
  updateTask(input: $input) {
    task {
      id
    }
    messages {
      field
      message
    }
  }
}
    `;

export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();
const ApplyTagsToUserDocumentString = print(ApplyTagsToUserDocument);
const CreateAppointmentDocumentString = print(CreateAppointmentDocument);
const CreateConversationDocumentString = print(CreateConversationDocument);
const CreateEntryDocumentString = print(CreateEntryDocument);
const CreateFormAnswerGroupDocumentString = print(CreateFormAnswerGroupDocument);
const CreateFormCompletionRequestDocumentString = print(CreateFormCompletionRequestDocument);
const CreateJournalEntryDocumentString = print(CreateJournalEntryDocument);
const CreateLocationDocumentString = print(CreateLocationDocument);
const CreatePatientDocumentString = print(CreatePatientDocument);
const CreateTaskDocumentString = print(CreateTaskDocument);
const DeleteAppointmentDocumentString = print(DeleteAppointmentDocument);
const DeleteTaskDocumentString = print(DeleteTaskDocument);
const GetAppointmentDocumentString = print(GetAppointmentDocument);
const GetConversationListDocumentString = print(GetConversationListDocument);
const GetFormTemplateDocumentString = print(GetFormTemplateDocument);
const GetScheduledAppointmentsDocumentString = print(GetScheduledAppointmentsDocument);
const GetUserDocumentString = print(GetUserDocument);
const EntriesDocumentString = print(EntriesDocument);
const RemoveTagFromUserDocumentString = print(RemoveTagFromUserDocument);
const SendChatMessageDocumentString = print(SendChatMessageDocument);
const UpdateAppointmentDocumentString = print(UpdateAppointmentDocument);
const UpdateConversationDocumentString = print(UpdateConversationDocument);
const UpdatePatientDocumentString = print(UpdatePatientDocument);
const UpdateTaskDocumentString = print(UpdateTaskDocument);
export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    applyTagsToUser(variables?: ApplyTagsToUserMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: ApplyTagsToUserMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<ApplyTagsToUserMutation>(ApplyTagsToUserDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'applyTagsToUser', 'mutation');
    },
    createAppointment(variables?: CreateAppointmentMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: CreateAppointmentMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<CreateAppointmentMutation>(CreateAppointmentDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'createAppointment', 'mutation');
    },
    createConversation(variables?: CreateConversationMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: CreateConversationMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<CreateConversationMutation>(CreateConversationDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'createConversation', 'mutation');
    },
    createEntry(variables?: CreateEntryMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: CreateEntryMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<CreateEntryMutation>(CreateEntryDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'createEntry', 'mutation');
    },
    createFormAnswerGroup(variables: CreateFormAnswerGroupMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: CreateFormAnswerGroupMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<CreateFormAnswerGroupMutation>(CreateFormAnswerGroupDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'createFormAnswerGroup', 'mutation');
    },
    createFormCompletionRequest(variables: CreateFormCompletionRequestMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: CreateFormCompletionRequestMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<CreateFormCompletionRequestMutation>(CreateFormCompletionRequestDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'createFormCompletionRequest', 'mutation');
    },
    createJournalEntry(variables: CreateJournalEntryMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: CreateJournalEntryMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<CreateJournalEntryMutation>(CreateJournalEntryDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'createJournalEntry', 'mutation');
    },
    createLocation(variables: CreateLocationMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: CreateLocationMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<CreateLocationMutation>(CreateLocationDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'createLocation', 'mutation');
    },
    createPatient(variables: CreatePatientMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: CreatePatientMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<CreatePatientMutation>(CreatePatientDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'createPatient', 'mutation');
    },
    createTask(variables?: CreateTaskMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: CreateTaskMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<CreateTaskMutation>(CreateTaskDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'createTask', 'mutation');
    },
    deleteAppointment(variables?: DeleteAppointmentMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: DeleteAppointmentMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<DeleteAppointmentMutation>(DeleteAppointmentDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'deleteAppointment', 'mutation');
    },
    deleteTask(variables?: DeleteTaskMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: DeleteTaskMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<DeleteTaskMutation>(DeleteTaskDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'deleteTask', 'mutation');
    },
    getAppointment(variables?: GetAppointmentQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: GetAppointmentQuery; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<GetAppointmentQuery>(GetAppointmentDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getAppointment', 'query');
    },
    getConversationList(variables?: GetConversationListQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: GetConversationListQuery; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<GetConversationListQuery>(GetConversationListDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getConversationList', 'query');
    },
    getFormTemplate(variables?: GetFormTemplateQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: GetFormTemplateQuery; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<GetFormTemplateQuery>(GetFormTemplateDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getFormTemplate', 'query');
    },
    getScheduledAppointments(variables?: GetScheduledAppointmentsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: GetScheduledAppointmentsQuery; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<GetScheduledAppointmentsQuery>(GetScheduledAppointmentsDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getScheduledAppointments', 'query');
    },
    getUser(variables?: GetUserQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: GetUserQuery; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<GetUserQuery>(GetUserDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'getUser', 'query');
    },
    entries(variables?: EntriesQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: EntriesQuery; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<EntriesQuery>(EntriesDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'entries', 'query');
    },
    removeTagFromUser(variables?: RemoveTagFromUserMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: RemoveTagFromUserMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<RemoveTagFromUserMutation>(RemoveTagFromUserDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'removeTagFromUser', 'mutation');
    },
    sendChatMessage(variables: SendChatMessageMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: SendChatMessageMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<SendChatMessageMutation>(SendChatMessageDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'sendChatMessage', 'mutation');
    },
    updateAppointment(variables: UpdateAppointmentMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: UpdateAppointmentMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<UpdateAppointmentMutation>(UpdateAppointmentDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'updateAppointment', 'mutation');
    },
    updateConversation(variables: UpdateConversationMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: UpdateConversationMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<UpdateConversationMutation>(UpdateConversationDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'updateConversation', 'mutation');
    },
    updatePatient(variables: UpdatePatientMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: UpdatePatientMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<UpdatePatientMutation>(UpdatePatientDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'updatePatient', 'mutation');
    },
    updateTask(variables: UpdateTaskMutationVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<{ data: UpdateTaskMutation; extensions?: any; headers: Dom.Headers; status: number; }> {
        return withWrapper((wrappedRequestHeaders) => client.rawRequest<UpdateTaskMutation>(UpdateTaskDocumentString, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'updateTask', 'mutation');
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;