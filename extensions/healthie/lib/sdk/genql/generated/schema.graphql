"""Accepted Insurance Plan"""
type AcceptedInsurancePlan {
  """Unique identifier of the plan"""
  id: ID!

  """Connected ICD Code Object"""
  insurance_plan: InsurancePlan
}

"""Enum for `FormAnswerGroupAuditEvent#action`"""
enum Action {
  LOCKED
  UNLOCKED
  SIGNED
  ADDENDUM_CREATED
}

"""Autogenerated input type of AddClaimSubmitter"""
input AddClaimSubmitterInput {
  """ID of the User"""
  user_id: ID!
}

"""Autogenerated return type of AddClaimSubmitter."""
type AddClaimSubmitterPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of AddCptCode"""
input AddCptCodeInput {
  cpt_code: String!
  cpt_description: String!
}

"""Autogenerated return type of AddCptCode."""
type AddCptCodePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of AddIcdCode"""
input AddIcdCodeInput {
  icd_category: String!
  icd_code: String!
  icd_description: String!
}

"""Autogenerated return type of AddIcdCode."""
type AddIcdCodePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of AddReplyToEmailAddresses"""
input AddReplyToEmailAddressesInput {
  """The list of email addresses to add to the user"""
  email_list: String!

  """The ID of the user to add the email addresses to"""
  user_id: ID!
}

"""Autogenerated return type of AddReplyToEmailAddresses."""
type AddReplyToEmailAddressesPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string if the mutation was successful"""
  success_string: String
}

"""Payload for added user as a label-value pair"""
input AddedUsersInput {
  """The label for the user"""
  label: String!

  """The labeled value"""
  value: ID!
}

"""Specific appointment price object for provider/client"""
type AdvanceAppointmentPrice {
  """Appointment type ID this appointment price is associated with."""
  appointment_type_id: ID

  """The unique identifier of the price"""
  id: ID!

  """The advance price for this appointment type"""
  price: String!

  """User ID this appointment price is associated with."""
  user_id: ID!
}

"""Payload for an advance appointment price"""
input AdvanceAppointmentPriceInput {
  """The ID of the appointment type"""
  appointment_type_id: ID

  """The ID of the price"""
  id: ID

  """The price of the appointment type"""
  price: String
}

"""Payload for overriding an advance appointment price"""
input AdvanceAppointmentPricesInput {
  """The ID of the appointment type"""
  appointment_type_id: ID

  """The ID of the price"""
  id: ID

  """The price of the appointment type"""
  price: String

  """The ID of the user"""
  user_id: ID
}

"""
(DEPRECATED - NO LONGER USED) Information on the provider's affiliate abilities
"""
type Affiliate {
  """The LeadDyno ID of the affiliate"""
  affiliate_id: String

  """The referral URL of the affiliate"""
  affiliate_url: String

  """The URL of the affiliate's dashboard"""
  dashboard_url: String

  """Unique identifier of the affiliate"""
  id: ID!
}

"""An allergy/sensitivity/preference for a client"""
type AllergySensitivity {
  """
  Enum field. Options: allergy, sensitivity, preference, intolerance, ccda
  """
  category: String!

  """
  Type of allergy or like/dislike for preference. Options: food, drug, environmental, pet, latex, like, dislike
  """
  category_type: String

  """Date/Time created"""
  created_at: String!

  """User who created this allergy"""
  created_by: User

  """The unique identifier of the allergy"""
  id: ID!

  """If the allergy is current."""
  is_current: Boolean @deprecated(reason: "Use status instead")

  """
  If the allergy is synchronized with an external system (e.g., an E-Rx system)
  """
  mirrored: Boolean!

  """The name of the allergy/sensitivity/preference"""
  name: String

  """The date of onset"""
  onset_date: String

  """Description of the reaction on the allergen"""
  reaction: String

  """The type of the reaction. Options are [allergy, adverse_reaction]"""
  reaction_type: String

  """When true, this object must be consolidated as part of a CCDA Ingest"""
  requires_consolidation: Boolean

  """The severity of the allergy. Options: mild, moderate, severe, unknown"""
  severity: String

  """The allergy's current status. Options are [active, inactive, resolved]"""
  status: String

  """Date/Time last updated"""
  updated_at: String
}

"""Announcements created by providers for client consumption"""
type Announcement {
  """If true, announcement is active"""
  active: Boolean!

  """file name of associated image"""
  announcement_image_name: String

  """URL of image associated with announcement"""
  announcement_image_url: String

  """Pagination cursor"""
  cursor: Cursor!

  """Announcement content(viewable by client)"""
  description: String

  """Unique identifier of the announcement"""
  id: ID!

  """Date and time announcement active status was changed"""
  last_toggled_at: String

  """User that updated active status of this announcement most recently"""
  last_toggled_by: User

  """Name of announcement(only viewable by provider)"""
  name: String

  """Title of announcement(viewable by client)"""
  title: String

  """User that created this announcement"""
  user: User

  """
  Comma separated list of user group ids associated with this announcement
  """
  user_group_ids: String

  """
  Comma separated list of user group names associated with this announcement
  """
  user_group_names: String
}

"""Announcement image upload"""
input AnnouncementImageUpload {
  """The announcement image"""
  image: Upload
}

"""A created API Key"""
type ApiKey {
  """The datetime the API Key was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """
  Upon the initial creation of the key, this field displays the actual key to be used to authenticate.
  """
  displayable_key: String

  """Unique identifier of the key"""
  id: ID!

  """A user-chosen name for the API key."""
  name: String
}

"""API Key sorting enum"""
enum ApiKeyOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
}

"""An Apple Health Sync"""
type AppleHealth {
  """The unique identifier of the apple health"""
  id: ID!

  """The last time the apple health was synced"""
  last_sync_date: String
}

"""A tag applied to a user"""
type AppliedTag {
  """The time the tag was applied"""
  created_at: String!

  """The unique identifier of the applied tag"""
  id: ID!

  """The tag applied"""
  tag: Tag

  """The unique identifier of the tag"""
  tag_id: String

  """The time the applied tag was last updated"""
  updated_at: String!

  """The tagged user"""
  user: User

  """The ID of the tagged user"""
  user_id: String
}

"""AppliedTag sorting enum"""
enum AppliedTagOrderKeys {
  """Sort by created at in ascending order"""
  CREATED_AT_ASC

  """Sort by created at in descending order"""
  CREATED_AT_DESC

  """Sort by updated at in ascending order"""
  UPDATED_AT_ASC

  """Sort by updated at in descending order"""
  UPDATED_AT_DESC

  """Do not sort records"""
  UNSORTED
}

"""
An appointment object containing information about the appointment, including the attendees, date, location, and more.
"""
type Appointment {
  """
  The actual length of the appointment (in minutes). Filled in by the provider after the appointment
  """
  actual_duration: String

  """Get link to add appointment to google calendar"""
  add_to_gcal_link: String

  """The category of the appointment"""
  appointment_category: String

  """
  The number of people (both providers and attendees) who are in the appointment
  """
  appointment_inclusions_count: Int

  """A label for the appointment"""
  appointment_label: String

  """the ID of the appointment location"""
  appointment_location_id: String

  """The type of the appointment"""
  appointment_type: AppointmentType

  """The ID of the type of appointment this is"""
  appointment_type_id: Int

  """List of assigned user groups to the group appointment"""
  assigned_groups: [UserGroup!]

  """
  Client inclusions which includes all attendees even if they didnt show up for the appointment
  """
  attended_clients: [AppointmentInclusionType!]

  """All attendees for the appointment."""
  attendees: [User!]!

  """Pending Appointment inclusions"""
  attendees_on_waitlist: [User!]

  """The backgroundColor color of the appointment"""
  backgroundColor(
    """The time the appointment setting was last updated"""
    appointment_setting_updated_at: String
  ): String

  """Returns true if the patient can reschedule the appointment"""
  can_be_rescheduled: Boolean

  """True if client able to cancel an appointment"""
  can_client_cancel: Boolean

  """True if client able to reschedule an appointment"""
  can_client_reschedule: Boolean

  """false if the client needs to confirm the appointment, and has not"""
  client_confirmed(
    """Whether or not the appointment requires client confirmation"""
    known_requires_client_confirmed: Boolean
  ): Boolean

  """Whether the appointment updating on client side or not"""
  client_updating: Boolean

  """
  The status of whether the provider has confirmed the appointment or not
  """
  confirmed: Boolean

  """True if appointment is locked"""
  connected_chart_note_locked: Boolean

  """The status of the connected chart note"""
  connected_chart_note_string: String

  """
  How the provider and attendees will connect (i.e In-Person or through the phone)
  """
  contact_type: String

  """
  The ID of conversation related to the current appointment(only for group appts 10/2020)
  """
  conversation_id: ID

  """The date and time that the appointment was created"""
  created_at: String!

  """True if a credit was used for this appointment"""
  credit_was_used: Boolean

  """The position of the appointment in the recurring series"""
  current_position_in_recurring_series: Int

  """Pagination cursor"""
  cursor: Cursor!

  """The date and time of the appointment"""
  date: String

  """default color of appointment based on confirmation/type"""
  default_color: String

  """
  The time the appointment was deleted. It is blank if the appointment is not deleted.
  """
  deleted_at: String

  """The end time of the appointment"""
  end: String

  """The type of connection to an external calendar"""
  external_id_type: String

  """A URL to an external video chat site for the session"""
  external_videochat_url: String

  """The custom answers filled out by the booker of the appointment"""
  filled_embed_form: FormAnswerGroup

  """The Form answer group first associated with the appointment"""
  form_answer_group: FormAnswerGroup

  """All Form answer groups associated with the appointment"""
  form_answer_groups: [FormAnswerGroup!]

  """open tok token"""
  generated_token: String

  """
  When true, additional group charting fields are visibile in the Healthie UI
  """
  has_expanded_vbc_charting_fields: Boolean

  """Returns true if the apointment has inprogress job"""
  has_in_progress_job: Boolean

  """The unique identifier of the appointment"""
  id: ID!

  """ID of user that created of appointment"""
  initiator_id: ID

  """When true, insurance billing will be enabled for this appointment"""
  insurance_billing_enabled: Boolean

  """
  The status of whether this appointment is specifically meant to block availability
  """
  is_blocker: Boolean

  """Indicates whether it's a group appointment"""
  is_group: Boolean

  """
  The status of whether the video chat uses Zoom or Healthie Default telehealth
  """
  is_zoom_chat: Boolean

  """id of last conversation between provider and client in appointment"""
  last_client_conversation_id: ID

  """
  The ID of the provider who last updated the appointment record, if available
  """
  last_updated_by_id: ID

  """The Late Cancellation Fee (in cents) for this appointment"""
  late_cancellation_fee: Int

  """The length of the appointment (in minutes)"""
  length: Int

  """
  The plaintext location of the appointment (only used for in-person appointments)
  """
  location: String

  """Location Resource"""
  locationResource: String

  """
  How many attendees can register for an appointment (only used for Group Appointments)
  """
  max_attendees: String

  """a serialized JSON string of metadata"""
  metadata: JSON

  """Minimum time before the appointment when client can still cancel it"""
  minimum_advance_cancel_time: Int

  """
  Minimum time (in minutes) before the appointment when client can still reschedule it
  """
  minimum_advance_reschedule_time: Int

  """The No Show Fee (in cents) for this appointment"""
  no_show_fee: Int

  """Quick notes on the appointment (only visisble to providers)"""
  notes: String

  """The id of the provider"""
  other_party_id: Int

  """The number of times a patient rescheduled an appointment"""
  patient_reschedule_count: Int

  """
  The status of the appointment. Can be one of “Occurred”, “No-Show”, “Re-Scheduled”, “Cancelled”, “Late Cancellation”
  """
  pm_status(
    """Check if client cancelled the appointment"""
    check_for_client_cancel: Boolean = false
  ): String

  """The date and time the status of the appointment was last updated"""
  pm_status_changed_at: String

  """
  The ID of the user who last changed the status of the appointment, if available
  """
  pm_status_last_changed_by_id: ID

  """Get the pricing info for this appointment"""
  pricing_info: AppointmentPricingInfoType

  """The provider for the appointment"""
  provider: User

  """Provider name"""
  provider_name: String

  """All providers for the appointment."""
  providers(
    """Return an empty array unless there is more than one provider"""
    empty_unless_multiple: Boolean = false
  ): [User!]!

  """The clients reason for scheduling the appointment"""
  reason: String

  """The related recurring appointment series"""
  recurring_appointment: RecurringAppointment

  """The ID of the recurring appointment"""
  recurring_appointment_id: String @deprecated(reason: "Use recurring_appointment instead")

  """The status of whether this is a repeating appointment or not"""
  repeat: Boolean @deprecated(reason: "Use recurring_appointment instead")

  """How often to repeat the appointment (e.g Daily or Monthly)"""
  repeat_interval: String @deprecated(reason: "Use recurring_appointment instead")

  """How many times does the appointment repeat"""
  repeat_times: Int @deprecated(reason: "Use recurring_appointment instead")

  """A requested payment for this appointment"""
  requested_payment: RequestedPayment

  """The ID of the user, used for the calendar"""
  resourceId: String

  """the ID of the room"""
  room_id: ID

  """A string containing info on how the appointment was scheduled"""
  scheduled_by: String

  """The OpenTok session ID for the appointment"""
  session_id: String

  """
  When true, a cms1500 should be created when the appointment status is set to occured
  """
  should_create_cms1500_for_occurred_appointments: Boolean

  """The start time of the appointment"""
  start: String

  """The font color of the appointment"""
  textColor: String

  """
  The status of whether the time of this appointment has been separated from the other recurring appointments in the series
  """
  time_recurring_override: Boolean

  """Timezone abbreviation of the date of the appointment"""
  timezone_abbr: String

  """The title of the appointment"""
  title: String

  """Unauthenticated link to download an ICS file for the appointment"""
  unauthenticated_ics_link: String

  """The last date and time that the appointment was updated"""
  updated_at: String

  """Whether the appointment is through Zoom or not"""
  use_zoom: Boolean

  """The client in a 1:1 appointment"""
  user: User

  """
  The id of the client (if a 1:1 appointment). If a group appointment, will be nil
  """
  user_id: Int

  """
  Zoom meeting info. Appointment should have a valid zoom link and the user should have the permission to access the meeting. Otherwise returns nil
  """
  zoom_appointment: ZoomAppointment

  """URLs for Zoom cloud recordings for this appointment"""
  zoom_cloud_recording_urls: [String]

  """
  The dial-in info provided by zoom if appoint has zoom links.(separated by newline characters)
  """
  zoom_dial_in_info: String

  """
  The dial-in info provided by zoom if appoint has zoom links.(separated by break tags)
  """
  zoom_dial_in_info_html: String

  """
  An array of JSON objects containing the different dial in numbers for the Zoom call
  """
  zoom_dial_in_numbers_json: [String]

  """The join link for other attendees of the Zoom call"""
  zoom_join_url: String

  """The Meeting ID for the Zoom call"""
  zoom_meeting_id: String

  """The host link to start the Zoom call"""
  zoom_start_url: String
}

"""Warnings to show provider before they book"""
type AppointmentBookingWarning {
  """Category of warning (e.g no credits)"""
  category: String

  """Array of IDs of objects causing booking issues for a given category"""
  potential_issue_ids: [String!]

  """Array of potential booking issues for a given category"""
  potential_issues: [String!]

  """Subtitle describing the category"""
  subtitle: String
}

"""An object containing appointment type credit change event"""
type AppointmentCreditChange {
  """The appointment related to credit change event"""
  appointment: Appointment

  """The time when credit change event was created"""
  created_at: String!

  """The event which caused credit change"""
  credit_change_event: String!

  """The specific action which caused credit change"""
  credit_change_event_type: String

  """The amount of credits after specific event"""
  credit_quantity: Int!

  """The unique identifier of the credit change"""
  id: ID!

  """The user who triggered credit change"""
  initiator: User

  """The offering related to credit change event"""
  offering: Offering
}

"""Appointment Data"""
type AppointmentDataType {
  """Appointment Frequency"""
  freq: AppointmentFrequencyDataType

  """Appointment Month"""
  month: String
}

"""Appointment Frequency Data"""
type AppointmentFrequencyDataType {
  """Frequency of cancelled appointments"""
  cancelled: Int

  """Frequency of late cancellation appointments"""
  late_cancellation: Int

  """Frequency of appointments with no status"""
  no_status: Int

  """Frequency of no-show appointments"""
  noshow: Int

  """Frequency of occurred appointments"""
  occurred: Int

  """Frequency of rescheduled appointments"""
  rescheduled: Int
}

"""Provider/Client to Appointment connection"""
type AppointmentInclusionType {
  """The appointment the inclusion is connected to."""
  appointment: Appointment

  """
  Indicate whether a group appointment attendee have taken part in the appointment
  """
  attended: Boolean

  """Indicate if a group appointment attendee cancelled the appointment"""
  cancelled: Boolean

  """
  If the client has confirmed the appointment, or don't need to (THIS IS FIELD IS CURRENTLY USED ONLY FOR GROUP APPT's)
  """
  confirmed: Boolean

  """
  The UUID of the appointment inclusion. Can be used in conjunction with appointment settings to allow unauthenticated users to modify an appointment.
  """
  external_uuid: ID

  """The unique identifier of the appointment inclusion"""
  id: ID!

  """The datetime that the attendee joined the appointment"""
  join_time: String

  """The datetime that the attendee left the appointment"""
  leave_time: String

  """Attendee"""
  user: User

  """Attendee ID"""
  user_id: ID @deprecated(reason: "Use `user` field")
}

"""A location where appointments are held"""
type AppointmentLocation {
  """Whether the client can select this location or not"""
  clients_can_book: Boolean!

  """Whether the location has any rooms"""
  has_rooms: Boolean

  """The unique identifier of the appointment"""
  id: ID!

  """The location (in plain text)"""
  location: String

  """The rooms at the location"""
  rooms: [Room!]
}

"""Payload for an appointment location"""
input AppointmentLocationInput {
  """If true, the location will be deleted"""
  _destroy: Boolean

  """If true, clients can book appointments at this location"""
  clients_can_book: Boolean

  """If true, this location has rooms"""
  has_rooms: Boolean

  """The ID of the location"""
  id: ID

  """The graphql_name of the location"""
  location: String

  """The rooms at this location"""
  rooms: [RoomInput]
}

"""Appointment sorting enum"""
enum AppointmentOrderKeys {
  DATE_ASC
  DATE_DESC
  CREATED_AT_DESC
  CREATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_AT_ASC
  UNSORTED
}

"""The appointment count for the specific day"""
type AppointmentPerDayData {
  """The object with the total count of appointments for each status"""
  count: AppointmentFrequencyDataType

  """The day we count appointments for"""
  date: String
}

"""Appointments for the specific type and day"""
type AppointmentPerTypePerDayData {
  """
  The array containing the appointment count for each appointment status for the specific day
  """
  appointments: [AppointmentPerDayData!]

  """The name of the specific appointment type"""
  name: String
}

"""
The data type for the appointment count for each appointment type per user
"""
type AppointmentPerTypePerUserData {
  """
  The array containing the appointment count for each appointment type for each appointment status for the specific day
  """
  appointment_types: [AppointmentPerTypePerDayData!]

  """The name of the specific user who we count appointments for"""
  name: String
}

"""Appointments for each status for the specific day"""
type AppointmentPerUserData {
  """
  The array containing the appointment count for each appointment status for the specific day
  """
  appointments: [AppointmentPerDayData!]

  """The name of the provider who we count appointments for"""
  name: String
}

"""Appointment pricing info"""
type AppointmentPricingInfoType {
  """CPT Code ID"""
  cpt_code_id: String

  """The price"""
  price: String

  """The units of the price"""
  units: String
}

"""Appointment Setting options that a provider can customize"""
type AppointmentSetting {
  """Insurance plans that are accepted by the provider"""
  accepted_insurance_plans: [AcceptedInsurancePlan!]

  """
  Whether or not providers will be able to set pricing per appointment type
  """
  allow_appointment_type_pricing: Boolean

  """If true, clients will be able to cancel an appointment"""
  allow_clients_to_cancel_appt: Boolean

  """If true, clients will be able to reschedule an appointment"""
  allow_clients_to_reschedule_appt: Boolean!

  """
  When true, providers can specify external url (e.g., Doxy, VSee) for Video Call appointments.
  """
  allow_external_videochat_urls: Boolean!

  """
  When true, a client can reschedule a past appointment (on the Web/API only)
  """
  allow_past_appointment_rescheduling: Boolean!

  """
  Whether or not clients will have specific pricing for appointment types
  """
  allow_specific_client_pricing: Boolean!

  """
  Whether or not providers will have specific pricing for appointment types
  """
  allow_specific_provider_pricing: Boolean!

  """Always notify the provider when the client books"""
  always_send_confirm_notification: Boolean

  """Appointment Locations for this Appointment Setting"""
  appointment_locations: [AppointmentLocation!]

  """
  Have different appointment confirmation emails for each appointment type
  """
  appointment_type_confirmed_email: Boolean

  """Have different appointment reminder emails for each appointment type"""
  appointment_type_reminder_email: Boolean

  """
  When true, and when the appointment setting is associated to a specific appointment type, the reminder settings will override the provider's normal ones
  """
  appointment_type_reminder_override: Boolean

  """Have different website booking emails for each appointment type"""
  appointment_type_website_booking_email: Boolean

  """Seperate confirmation emails for different appointment types"""
  appt_type_confirmed_email: Boolean

  """Seperate reminder emails for different appointment types"""
  appt_type_reminder_email: Boolean

  """Seperate website booking emails for different appointment types"""
  appt_type_website_booking_email: Boolean

  """Ask clients to confirm their appointment"""
  ask_clients_to_confirm: Boolean

  """If true, clients can confirm their appointment via text"""
  ask_to_confirm_via_text: Boolean

  """
  When true, after an appointment has been set as occurred, a CMS 1500 claim can be automatically created for the session
  """
  auto_create_cms1500: Boolean

  """Auto-generate a payment request when an appointment is scheduled"""
  auto_invoicing: Boolean

  """
  when true, a scheduled charge will be created when an appointment is marked as late cancellation or no show
  """
  auto_schedule_charges_for_late_cancellation_no_show: Boolean

  """
  When true, it will be automatically submitted to the clearinghouse on the following Friday at 11:59 PM
  """
  auto_submit_cms1500: Boolean

  """Allow clients to book appointments at none, 20, 30, 60 intervals"""
  booking_interval_restriction: Int

  """
  The amount of minutes to maintain between appointments (prevent back to back appointments)
  """
  buffer: String

  """The color schemes defined for this appointment setting"""
  calendar_color_schemes: [CalendarColorScheme!]

  """Calendar interval"""
  calendar_interval: String

  """Text to display above the client's calendar within Healthie"""
  calendar_text: String

  """Message to show clients when they are not allowed to cancel"""
  cant_cancel_message: String

  """Message to show clients when they are not allowed to cancel"""
  cant_reschedule_message: String

  """
  Whether or not client with valid payment method will be charged for occured appointments
  """
  charge_for_occured_appts: Boolean

  """If true, clients will be able to call to provider"""
  client_should_call_provider: Boolean

  """When false, the billing tab is hidden from clients"""
  clients_have_billing: Boolean

  """Confirm all client-created appointments by default"""
  confirm_by_default: Boolean

  """Contact type overrides for this appointment setting"""
  contact_type_overrides: [ContactType!]

  """Show the group appointment form first"""
  default_appt_form_to_group: Boolean

  """
  The template selected will automatically appear when a new chart note is started
  """
  default_charting_template_id: String

  """The template name selected"""
  default_charting_template_name: String

  """
  The form that should be pre-selected when creating a new group charting note
  """
  default_group_charting_template: CustomModuleForm

  """Use Zoom for all telehealth appointments"""
  default_to_zoom: Boolean

  """
  Video service to use for telehealth appointments ('internal', 'zoom', or 'external')
  """
  default_video_service: String

  """
  Prevent the client from rescheduling a past appointment with one of these statuses
  """
  disallowed_reschedulable_statuses: [String]

  """The end time to show when setting weekly availability"""
  end_time: String

  """
  Facebook pixel code that runs when the client completes the embdedded scheduler/purchaser
  """
  fb_pixel: String

  """Assign a name to chart notes"""
  give_notes_name: Boolean @deprecated(reason: "This now always returns true")

  """If true, hide insurance getting started info"""
  hide_insurance_getting_started_info: Boolean

  """Hide links to Healthie from appointment reminders"""
  hide_link: Boolean

  """The unique identifier of the setting"""
  id: ID!

  """
  When true, it will show the option to run an insurance eligibility check for a client
  """
  insurance_eligibility_integration: Boolean

  """
  Whether or not to send invoice to client without a valid payment card/method
  """
  invoice_clients_without_payment_method: Boolean

  """The fee (in cents) to use for appointments marked as late cancellation"""
  late_cancellation_fee: Int

  """The maximum number of days in advance a client can book"""
  max_days_in_future: String

  """
  DEPRECATED: Maximum time a client must wait before being able to reschedule a past appointment
  """
  maximum_past_reschedule_time: Int @deprecated

  """
  Minimum time before the appointment when client still can cancel it (in minutes)
  """
  minimum_advance_cancel_time: Int

  """
  Minimum time before the appointment when client still can reschedule it (in minutes)
  """
  minimum_advance_reschedule_time: Int

  """
  Minimum time before the despired appointment type where client still can schedule it (in minutes)
  """
  minimum_advance_schedule_time: Int

  """The minimum days in advance a client has to book"""
  minimum_days_in_advance: String

  """
  DEPRECATED: Minimum time a client must wait before being able to reschedule a past appointment
  """
  minimum_past_reschedule_time: Int @deprecated

  """The fee (in cents) to use for appointments marked as no show"""
  no_show_fee: Int

  """
  Either "even" or "hour" to restrict booking to even hours or half hours.
  """
  only_book: String @deprecated(reason: "Use booking_interval_restriction instead")

  """Whether or not to restrict booking to even hours or half hours."""
  only_book_even: Boolean @deprecated(reason: "Use booking_interval_restriction instead")

  """Whether or not to restrict booking to even hours or half hours."""
  only_book_hour: Boolean @deprecated(reason: "Use booking_interval_restriction instead")

  """Owner of this appointment_setting"""
  owner: User

  """The maximum number of times a patient can self reschedule"""
  patient_reschedule_count_cap: String

  """
  Appointment statuses that can be applied to an appointment. Includes default ones plus any custom
  """
  pm_statuses: [String]

  """Prevent clients from booking an appointment"""
  prevent_client_booking: Boolean

  """Prevent clients from booking if they do not have the needed credit"""
  prevent_no_credit_booking: Boolean

  """When true, replies to automatic notifications will go to the provider"""
  reply_to_provider: Boolean

  """
  When true, providers and staff will always be asked to select an appointment location when scheduling, even if its a video chat.
  """
  require_selected_location_for_all_contact_types: Boolean

  """
  DEPRECATED: The minimum number of days beyond the current appointment date that the patient can reschedule to
  """
  reschedule_max_days_before_date: String @deprecated

  """
  DEPRECATED: The maximum number of days beyond the current appointment date that the patient can reschedule to
  """
  reschedule_max_days_from_date: String @deprecated

  """Give clients their credit back when an appointment is cancelled"""
  restore_credit_on_cancel: Boolean

  """
  When true, clients are prevented from scheduling appointments the day of
  """
  same_day_appointments: Boolean

  """When false, no appointment cancel emails are sent to patients."""
  send_appointment_cancellation_email: Boolean

  """When false, no appointment update emails are sent to patients."""
  send_appointment_update_email: Boolean

  """Send clients an email when a provider schedules an appointment"""
  send_booking_notice: Boolean

  """Send an email 5 minutes before a video chat starts"""
  send_email_before_appointment: Boolean

  """Send email reminder to complete intake forms two days before"""
  send_intake_forms_reminder: Boolean

  """Send a push notification 5 minutes before a video chat starts"""
  send_push_before_appointment: Boolean

  """Send an email reminder four days before the appointment"""
  send_reminder_four_days_before: Boolean

  """Send an email reminder one day before the appointment"""
  send_reminder_one_day_before: Boolean

  """Send an email reminder one hour before the appointment"""
  send_reminder_one_hour_before: Boolean

  """Send an email reminder three days before the appointment"""
  send_reminder_three_days_before: Boolean

  """Send an email reminder two days before the appointment"""
  send_reminder_two_days_before: Boolean

  """Send an email reminder two hours before the appointment"""
  send_reminder_two_hours_before: Boolean

  """
  NOTE: Your organization MUST have its own Twilio account configured to have this feature, and have AppointmentSetting.send_email_before_appointment enabled
  """
  send_text_reminder_five_minutes_before: Boolean

  """Send a text reminder four days before the appointment"""
  send_text_reminder_four_days_before: Boolean

  """Send a text reminder one day before the appointment"""
  send_text_reminder_one_day_before: Boolean

  """Send a text reminder one hour before the appointment"""
  send_text_reminder_one_hour_before: Boolean

  """Send a text reminder three days before the appointment"""
  send_text_reminder_three_days_before: Boolean

  """Send a text reminder two days before the appointment"""
  send_text_reminder_two_days_before: Boolean

  """Send a text reminder two hours before the appointment"""
  send_text_reminder_two_hours_before: Boolean

  """
  When true, providers can set a default external link for video call sessions.
  """
  set_default_videochat_url: Boolean

  """If True, provider will see Care Plans option on a Client profile page"""
  show_care_plans: Boolean

  """If true, show cms1500s"""
  show_cms1500s: Boolean

  """
  When false, the faxing tab on the left hand side is hidden from providers
  """
  show_faxes: Boolean

  """
  If true, show the insurance authorization section on the clients profile
  """
  show_insurance_authorization: Boolean

  """If true, show office ally"""
  show_office_ally: Boolean

  """If true, show superbills"""
  show_superbills: Boolean

  """
  Facebook pixel code that runs when the client starts the embdedded scheduler/purchaser
  """
  start_fb_pixel: String

  """The start time to show when setting weekly availability"""
  start_time: String

  """Set different availability for each appointment type"""
  times_by_appointment_type: Boolean

  """Set different availability for each contact type"""
  times_by_contact_type: Boolean

  """Set different availability for each appointment location"""
  times_by_location: Boolean

  """The last date and time that the appointment setting was updated"""
  updated_at: String

  """If true, cpt units and fees can be associated with appointment types"""
  use_appointment_type_cpt_units_and_fees: Boolean

  """Whether or not to use the client credit system"""
  use_client_credit_system: Boolean

  """If true, you can see where each client came from"""
  use_client_sources: Boolean

  """
  If true, clients will be placed in a waiting room instead of joining the Zoom call directly
  """
  use_zoom_waiting_room: Boolean

  """The id of the user"""
  user_id: String

  """Default video url settings"""
  video_url_default: VideoUrlDefault
}

"""Appointment Setting Inputs"""
input AppointmentSettingInputs {
  """
  Specifies whether external appointment inclusion management is allowed.
  """
  allow_external_appt_inclusion_management: Boolean

  """Specifies whether past appointment rescheduling is allowed."""
  allow_past_appointment_rescheduling: Boolean

  """The ID of the appointment type."""
  appointment_type_id: Int

  """The base calendar interval for appointments."""
  base_calendar_interval: String

  """The text to display on the calendar."""
  calendar_text: String

  """Specifies whether charge receipts are disabled."""
  disable_charge_receipts: Boolean

  """Specifies whether requested form notifications are disabled."""
  disable_requested_form_notifications: Boolean

  """Some Pixel Setting (?)."""
  fb_pixel: String

  """Specifies whether updating signed chart notes is allowed."""
  freeze_signed_chart_note: Boolean

  """Hides links in all emails."""
  hide_link: Boolean

  """The message to display when there is no availability."""
  no_availability_message: String

  """Specifies whether appointment cancellation emails are sent."""
  send_appointment_cancellation_email: Boolean

  """Specifies whether appointment update emails are sent."""
  send_appointment_update_email: Boolean

  """Specifies whether embeddable appointment creator emails are sent."""
  send_embeddable_appt_creator_email: Boolean

  """
  Specifies whether text reminders are sent five minutes before the appointment.
  """
  send_text_reminder_five_minutes_before: Boolean

  """Specifies whether texts are sent to archived patients."""
  send_texts_to_archived_patients: Boolean

  """Specifies whether care plans are shown."""
  show_care_plans: Boolean

  """Specifies whether insurance authorization is shown."""
  show_insurance_authorization: Boolean
}

"""The data for the appointment summary"""
type AppointmentSummaryData {
  """
  The array containing the appointment count for each appointment status for the specific day
  """
  appointment_history: [AppointmentPerDayData!]

  """
  The array containing the appointment count for each appointment status for each provider for the specific day
  """
  appointment_history_per_provider: [AppointmentPerUserData!]

  """
  The array containing the appointment count for each appointment status for each provider for each appointment type for the specific day
  """
  appointment_history_per_provider_and_type: [AppointmentPerTypePerUserData!]

  """
  The array containing the appointment count for each appointment status for each appointment type for the specific day
  """
  appointment_history_per_type: [AppointmentPerTypePerDayData!]

  """The count of appointments for each appointment type"""
  appointments_per_type_count: [AppointmentTypeAppointmentCountData!]

  """The average amount of appointments per day"""
  avg_per_day: Int

  """
  The difference between the current average amount of appointments and the average count of appointments in prior period
  """
  avg_per_day_percent_diff: Int

  """The busiest week day in selected period"""
  busiest_days_of_week: [String]

  """
  When true, the data is in the process of being generated and stored in the cache.
  """
  cache_generation_in_progress: Boolean

  """The difference in contrast to previous period in percents"""
  percent_diff: Int

  """The total appointment count"""
  total_count: Int
}

"""An object containing information about the type of appointment"""
type AppointmentType {
  """The number of clients with advance pricing for this appointment type"""
  advance_pricing_for_clients_count: String

  """The number of providers with advance pricing for this appointment type"""
  advance_pricing_for_providers_count: String

  """
  The appointment setting associated with this appointment type. An associated appointment setting overrides the providers general one.
  """
  appointment_setting: AppointmentSetting

  """The cpt code and units for this appointment type"""
  appointment_type_cpt_code: AppointmentTypeCptCodeType

  """
  When true, the appointment pricing will be automatically increase based on actual duration
  """
  auto_increase_charge_for_actual_duration: Boolean

  """Is true if upcoming availability exists"""
  availability_exists_for(
    """The appointment location id"""
    appointment_location_id: String

    """The org level"""
    org_level: Boolean = false

    """The provider id"""
    provider_id: String

    """The list of provider ids"""
    provider_ids: [String]
  ): Boolean

  """List of available contact types for this appointment type"""
  available_contact_types: [String]

  """
  When true, this appointment type is bookable by user groups associated through appointment_type_user_groups and appointment type is NOT bookable by ALL users
  """
  bookable_by_groups: Boolean

  """
  user groups that can book this appointment type. Associated through appointment_type_user_groups
  """
  bookable_groups: [UserGroup!]

  """
  When true, this appointment type is bookable by users without a user group
  """
  bookable_without_group: Boolean!

  """Checks to see if the client call to provider"""
  client_call_provider: Boolean

  """
  A name to use in the client scheduling widget instead of the defalt name field. Falls back to name if not set.
  """
  client_display_name: String

  """
  The status of whether the client can self-book this type of appointment
  """
  clients_can_book: Boolean!

  """Checks to see if the client has enough credit to book"""
  clients_have_credit: Boolean

  """The date the Appointment Type was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """
  If the provider's organization has this feature, this will customize the content of SMS reminder's Healthie sends.
  """
  custom_text_reminder_body: String

  """Date time appointment type was deleted"""
  deleted_at: String

  """
  When true, the client will not be asked to add a reason when booking an appointment of this type
  """
  dont_ask_for_reason: Boolean

  """ID of the embedded custom module form"""
  embed_question_form_id: String

  """All form requests which should be created after appointment"""
  form_requests_after_appointment: [AppointmentTypeFormConnection!]

  """All form requests which should be created after appointment booking"""
  form_requests_after_appointment_booking: [AppointmentTypeFormConnection!]

  """All form requests which should be created before appointment"""
  form_requests_before_appointment: [AppointmentTypeFormConnection!]

  """Is true if group appointment available"""
  has_available_group_appts(
    """The appointment location id"""
    appointment_location_id: String

    """The provider id"""
    provider_id: String
  ): Boolean

  """
  When true, this appointment type has specific appointment settings that override the general ones
  """
  has_specific_appointment_settings: Boolean

  """The unique identifier of the appointment type"""
  id: ID!

  """
  Whether or not this appointment type will have insurance billing enabled
  """
  insurance_billing_enabled: Boolean

  """
  The status of whether appointments of this types are group appointments or not
  """
  is_group: Boolean!

  """The status of whether waitlist is enabled for an appointment or not"""
  is_waitlist_enabled: Boolean!

  """The length of the appointment type (in minutes)"""
  length: Int

  """
  A serialized JSON string of metadata. Maximum character limit of 128,000. Only accessible by staff and providers
  """
  metadata: String

  """the name of the appointment type"""
  name: String

  """
  A custom message to display if there are no available slots on a given day for an appointment type.
  """
  no_availability_message: String

  """
  The position of the appointment type when shown in a list of other appointment types
  """
  position: Int

  """The price and cpt_code_price"""
  price_and_cpt_price: PriceAndCptPriceType

  """The pricing for this appointment type"""
  pricing: String

  """Get the pricing info for this appointment type"""
  pricing_info: AppointmentPricingInfoType

  """Pricing option for this appointment type"""
  pricing_option: String

  """providers associated with appointment type"""
  provider_appt_type_connections: [ProviderApptTypeConnection!]

  """
  When this setting is turned on, provider state licensing requirements will be enforced when clients try to schedule appointments.
  """
  require_in_state_clients: Boolean

  """Whether or not appointment type should use specific providers"""
  require_specific_providers: Boolean!

  """Whether or not the appointment type is tied to specific rooms"""
  require_specific_rooms: Boolean!

  """rooms associated with appointment type"""
  room_appt_type_connections: [RoomApptTypeConnection!]

  """position of appointment type when displayed in packages list"""
  row_order: String

  """A label that includes the length of the appointment"""
  time_on_label: String

  """The date the Appointment Type was updated"""
  updated_at: String!

  """The user group associated with this appointment type."""
  user_group: UserGroup

  """The ID of the group clients are placed in after booking"""
  user_group_id: String

  """The creator of the appointment type"""
  user_id: Int

  """
  If provider state matches users or appointment type doesn't require state license restrictions.
  """
  valid_state_licensing_for(
    """The client state of residence"""
    client_state_of_residence: String

    """The org level"""
    org_level: Boolean = false

    """The provider id"""
    provider_id: String

    """The list of provider ids"""
    provider_ids: [String]
  ): Boolean
}

"""The count of appointments for each appointment type"""
type AppointmentTypeAppointmentCountData {
  """The unique identifier of the count"""
  appointment_count: Int

  """The name of the appointment type for which we count appointments for"""
  name: String
}

"""Payload for an appointment setting"""
input AppointmentTypeAppointmentSettingInput {
  """If true, the appointment setting will be deleted"""
  _destroy: Boolean

  """Whether the appointment setting allows appointment type pricing"""
  allow_appointment_type_pricing: Boolean

  """Whether the appointment setting allows clients to cancel appointments"""
  allow_clients_to_cancel_appt: Boolean

  """
  Whether the appointment setting allows clients to reschedule appointments
  """
  allow_clients_to_reschedule_appt: Boolean

  """Whether the appointment setting allows past appointment rescheduling"""
  allow_past_appointment_rescheduling: Boolean

  """Whether the appointment setting allows specific client pricing"""
  allow_specific_client_pricing: Boolean

  """Whether the appointment setting allows specific provider pricing"""
  allow_specific_provider_pricing: Boolean

  """
  Whether the appointment setting overrides the appointment type reminder
  """
  appointment_type_reminder_override: Boolean

  """The booking interval restriction for the appointment setting"""
  booking_interval_restriction: Int

  """The buffer time for the appointment setting"""
  buffer: String

  """Whether the appointment setting charges for occurred appointments"""
  charge_for_occured_appts: Boolean

  """The disallowed reschedulable statuses for the appointment setting"""
  disallowed_reschedulable_statuses: [String]

  """The ID of the appointment setting"""
  id: ID

  """
  Whether the appointment setting invoices clients without a payment method
  """
  invoice_clients_without_payment_method: Boolean

  """
  The maximum number of days in the future when appointments can be scheduled
  """
  max_days_in_future: String

  """
  Prevents the patient from canceling too close the appointment time. In minutes
  """
  minimum_advance_cancel_time: Int

  """
  Prevents the patient from rescheduling too close the appointment time. In minutes
  """
  minimum_advance_reschedule_time: Int

  """
  Prevents the patient from scheduling too close to the desired appointment time. In minutes
  """
  minimum_advance_schedule_time: Int

  """The maximum number of times a patient can reschedule an appointment"""
  patient_reschedule_count_cap: String

  """Whether the appointment setting prevents booking without credit"""
  prevent_no_credit_booking: Boolean

  """The pricing for the appointment setting"""
  pricing: String

  """Whether the appointment setting allows same day appointments"""
  same_day_appointments: Boolean

  """Whether the appointment setting sends a booking notice"""
  send_booking_notice: Boolean

  """
  Whether the appointment setting sends a reminder four days before the appointment
  """
  send_reminder_four_days_before: Boolean

  """
  Whether the appointment setting sends a reminder one day before the appointment
  """
  send_reminder_one_day_before: Boolean

  """
  Whether the appointment setting sends a reminder one hour before the appointment
  """
  send_reminder_one_hour_before: Boolean

  """
  Whether the appointment setting sends a reminder three days before the appointment
  """
  send_reminder_three_days_before: Boolean

  """
  Whether the appointment setting sends a reminder two days before the appointment
  """
  send_reminder_two_days_before: Boolean

  """
  Whether the appointment setting sends a reminder two hours before the appointment
  """
  send_reminder_two_hours_before: Boolean

  """
  Whether the appointment setting sends a text reminder four days before the appointment
  """
  send_text_reminder_four_days_before: Boolean

  """
  Whether the appointment setting sends a text reminder one day before the appointment
  """
  send_text_reminder_one_day_before: Boolean

  """
  Whether the appointment setting sends a text reminder one hour before the appointment
  """
  send_text_reminder_one_hour_before: Boolean

  """
  Whether the appointment setting sends a text reminder three days before the appointment
  """
  send_text_reminder_three_days_before: Boolean

  """
  Whether the appointment setting sends a text reminder two days before the appointment
  """
  send_text_reminder_two_days_before: Boolean

  """
  Whether the appointment setting sends a text reminder two hours before the appointment
  """
  send_text_reminder_two_hours_before: Boolean

  """Whether the appointment setting uses the client credit system"""
  use_client_credit_system: Boolean
}

"""Payload for a CPT code associated with an appointment type"""
input AppointmentTypeCptCode {
  """The ID of the CPT code"""
  cpt_code_id: String

  """Fee (in cents) per unit"""
  fee_per_unit: Int

  """The number of units for the CPT code"""
  units: String
}

"""AppointmentTypeCptCode object"""
type AppointmentTypeCptCodeType {
  """Appointment Type ID"""
  appointment_type_id: ID!

  """CPT Code ID"""
  cpt_code_id: ID!

  """Fee (in cents) per unit"""
  fee_per_unit: Int

  """The unique identifier of the object"""
  id: ID!

  """DEPRECATED. Use appointmentType's insurance_billing_enabled instead"""
  insurance_billing_enabled: Boolean @deprecated(reason: "Use appointmentType's insurance_billing_enabled instead")

  """Units"""
  units: String
}

"""
An object containing information the clients' remaining credit for a given appointment type
"""
type AppointmentTypeCredit {
  """The Appointment Type connected to the credit"""
  appointment_type: AppointmentType

  """the id of the appointment type"""
  appointment_type_id: String

  """An Alias of ID that makes creating the form easier"""
  form_id: String

  """The unique identifier of the credit"""
  id: ID

  """The quantity of the credit"""
  quantity: String

  """The id of the holder of the credit"""
  user_id: Int
}

"""Payload for appointment type credit"""
input AppointmentTypeCreditInput {
  """The appointment type ID of the credit"""
  appointment_type_id: String

  """The ID of the credit"""
  id: ID

  """The quantity of the credit"""
  quantity: String
}

"""
An object containing event which should be taken before or after appointment
"""
type AppointmentTypeFormConnection {
  """ID of the form for the form completion request"""
  custom_module_form: CustomModuleForm

  """The unique identifier of the form"""
  id: ID!

  """
  Form requests will be sent before or after given interval, depends on `send_trigger`
  """
  interval: ISO8601Duration

  """Determines when action should be taken(before or after appointment)"""
  send_trigger: String
}

"""Payload for connecting an appointment type to a custom module form"""
input AppointmentTypeFormConnectionInput {
  """If true, the appointment type form connection will be destroyed"""
  _destroy: Boolean

  """The ID of the custom module form"""
  custom_module_form_id: ID

  """The ID of the appointment type form connection"""
  id: ID

  """
  Form requests will be sent before or after given interval, depends on `send_trigger`
  """
  interval: ISO8601Duration
}

"""Appointment Type sorting enum"""
enum AppointmentTypeOrderKeys {
  """
  Sort ascending by the manual order set for Appointment Types on the list
  """
  POSITION_ASC

  """
  Sort descending by the manual order set for Appointment Types on the list
  """
  POSITION_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Payload for an AttendedClient"""
input AttendedClientsInput {
  """If the client attended the event"""
  attended: Boolean

  """If the client cancelled the event"""
  cancelled: Boolean

  """If the client confirmed the event"""
  confirmed: Boolean

  """The unique identifier of the object"""
  id: ID

  """The ID of the user"""
  user_id: ID
}

"""The auto task generators belonging to a specific user"""
type AutoTaskGenerator {
  """Category of task"""
  category: String!

  """The date and time that the task was created"""
  created_at: String!

  """The number of days the task is due from the date it was created"""
  days_due_from_created_at: Int

  """The unique identifier of the generator"""
  id: ID!

  """True if task is active"""
  is_enabled: Boolean!

  """Description of the number to check"""
  number_description: String

  """The number to check"""
  number_to_check: Float!

  """Description of the task"""
  task_description: String!

  """The last date and time that the task was updated"""
  updated_at: String!

  """The id of the user who creates the task"""
  user_id: String

  """The id of the user"""
  user_id_for_task: String
}

"""Automated Insurance Billing Setting Type"""
type AutomatedInsuranceBillingSetting {
  """When true, CMS1500s will be created automatically"""
  auto_create_cms1500s: Boolean

  """When true, CMS1500s will be submitted automatically"""
  auto_submit_cms1500s: Boolean

  """The unique identifier of the setting"""
  id: ID!

  """When true, CPT code and units will be linked to appointment types"""
  use_cpt_codes_units_and_fees_with_appointment_types: Boolean
}

"""The autoscored section for a filled form"""
type AutoscoredSectionType {
  """The key of the section"""
  section_key: String

  """The title of the section"""
  section_title: String

  """The value of the section"""
  value: Float
}

"""An object containing availability ranges for a provider"""
type Availability {
  """If not nil, the specific location the availability is for"""
  appointment_location_id: String

  """If not nil, the specific appointment type the availability is for"""
  appointment_type_id: Int

  """If not nil, the specific contact type the availability is for"""
  contact_type_id: Int

  """The 0-indexed day of the week the availability is on"""
  day_of_week: Int

  """
  Duration between range start and range end in hours and minutes. Example:(4h 20min)
  """
  duration_string: String

  """The end date of the availability"""
  end_on: String

  """The unique identifier of the availability"""
  id: ID!

  """The status of whether the availability repeats every week"""
  is_repeating: Boolean

  """The origin start of the availability"""
  origin_start_date: String

  """The end of the datetime of the availability"""
  range_end: String

  """The start of the datetime of the availability"""
  range_start: String

  """Availability ID"""
  repeating_availability_id: ID

  """The ID of the user, used for the calendar"""
  resourceId: String

  """Timezone abbreviation of the availability time range"""
  timezone_abbr: String

  """Provider this availability belongs to"""
  user: User

  """The ID of the person who the availability is for"""
  user_id: Int
}

"""Payload for an availability"""
input AvailabilityInput {
  """The ID of the appointment location"""
  appointment_location_id: String

  """The ID of the appointment type"""
  appointment_type_id: String

  """The ID of the contact type"""
  contact_type_id: String

  """The day of the week for the availability"""
  day_of_week: Int

  """The end time for the availability"""
  end_time: String

  """Whether the availability is repeating"""
  is_repeating: Boolean

  """The end of the availability range"""
  range_end: String

  """The start of the availability range"""
  range_start: String

  """The time for the availability"""
  time: String

  """The timezone for the availability"""
  timezone: String

  """The ID of the user"""
  user_id: String
}

"""Benefit associated with policy"""
type Benefit {
  """Enumerated field: Medical or Preventive. Describes the type of benefit"""
  category: String

  """Coinsurance percentage due"""
  coinsurance: String

  """Copay amount due"""
  copay: String

  """Deductible amount for the calendar year"""
  deductible_calendar_year: String

  """Deductible amount for the year to date"""
  deductible_year_to_date: String

  """The unique identifier of the benefit"""
  id: ID!

  """If true, benefits include telemedicine"""
  telemedicine: Boolean
}

"""Payload for a benefit"""
input BenefitInput {
  """If true, the benefit will be deleted"""
  _destroy: Boolean

  """The category of the benefit"""
  category: String

  """The coinsurance for the benefit"""
  coinsurance: String

  """The copay for the benefit"""
  copay: String

  """The deductible calendar year for the benefit"""
  deductible_calendar_year: String

  """The deductible year to date for the benefit"""
  deductible_year_to_date: String

  """The id of the benefit"""
  id: ID

  """Whether or not the benefit covers telemedicine"""
  telemedicine: Boolean
}

"""Payload for a billing address to create a new Healthie subscription."""
input BillingAddressInput {
  """The city"""
  city: String

  """The country code"""
  country: String

  """The first line of the address"""
  line1: String

  """The second line of the address"""
  line2: String

  """The state"""
  state: String

  """The zip code"""
  postal_code: String
}

"""Billing"""
type BillingItem {
  """amount of billing item"""
  amount_paid: String

  """Fee charged by stripe in cents"""
  application_fee_amount: String

  """card brand and last4 digits in the event of a failed charge"""
  card_source: String

  """the related charge backs"""
  charge_backs: [ChargeBack!]

  """coupon code"""
  coupon_code: String

  """cpt codes super bills id"""
  cpt_codes_super_bills_id: ID

  """created at date"""
  created_at: String!

  """type of currency"""
  currency: String

  """Pagination cursor"""
  cursor: Cursor!

  """date payment was deleted"""
  deleted_at: String

  """Error message returned when payment failed"""
  failure_reason: String

  """
  Name of person who gifted this package(if applicable). Returns nil if not an offering or if not a gift
  """
  gifted_by: String

  """
  Name of person who received this package as a gift. Returns nil if not an offering or if not a gift
  """
  gifted_to: String

  """The unique identifier of the billing item"""
  id: ID!

  """id of invoice"""
  invoice_id: ID @deprecated(reason: "Use requested_payment_id instead. This will return the same data as that")

  """canceled indicator"""
  is_canceled: Boolean

  """Whether this payment was made outside of Healthie"""
  is_outside_payment: Boolean

  """Whether this payment is recurring"""
  is_recurring: Boolean

  """The index number of partial payment"""
  item_position_number: Int

  """The payment, after refunds are taken out"""
  net_payment: String

  """
  Nil unless the payment is an uncharged upcoming scheduled payment. Otherwise, is the payment amount that is scheduled to be charged
  """
  next_scheduled_payment_amount: String

  """payment note"""
  note: String

  """offering connected to the payment"""
  offering: Offering

  """offering coupon connected to the payment"""
  offering_coupon: OfferingCoupon

  """id of coupon"""
  offering_coupon_id: ID

  """offering id"""
  offering_id: ID

  """original price"""
  original_price: String

  """payment medium"""
  payment_medium: ID

  """provider"""
  provider: User

  """receipt last sent at date"""
  receipt_last_sent_at: String

  """recipient of this payment"""
  recipient: User

  """id of receiver"""
  recipient_id: ID

  """recurring payment connected to the payment"""
  recurring_payment: RecurringPayment

  """amount of refund"""
  refund_amount: String

  """date of refund"""
  refund_date: String

  """the related refundings"""
  refund_items: [RefundItem!]

  """
  Individual responsible for payment. If user_id, user exists in Healthie, if not, individual doesn't have a Healthie account
  """
  requested_payer: RequestedPayer

  """the connected requested payment"""
  requested_payment: RequestedPayment

  """id of requested payment (we call them invoices in our UI)"""
  requested_payment_id: ID

  """sender of this payment"""
  sender: User

  """id of sender"""
  sender_id: ID

  """The description text to show for the payment"""
  shown_description: String

  """The note text to show for the payment"""
  shown_note: String

  """Enum status of billing item succeeded/failed"""
  state: String

  """id of stripe charge"""
  stripe_charge_id: ID

  """
  A JSON hash containing information on why Stripe was unable to process a charge
  """
  stripe_error: String

  """
  if a failed payment is retried successfully then this will reference that successful payment
  """
  successful_retried_payment: BillingItem

  """updated at date"""
  updated_at: String

  """User Package Selection connected to this payment"""
  user_package_selection: UserPackageSelection
}

"""BillingItem sorting enum"""
enum BillingItemOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  AMOUNT_PAID_DESC
  AMOUNT_PAID_ASC
  PATIENT_FIRST_NAME_ASC
  PATIENT_FIRST_NAME_DESC
  PROVIDER_FIRST_NAME_ASC
  PROVIDER_FIRST_NAME_DESC

  """Sort by the payment medium ascending"""
  METHOD_ASC

  """Sort by the payment medium descending"""
  METHOD_DESC
  STATE_ASC
  STATE_DESC
}

"""Body Report is a sub category of a HealthAssessment"""
type BodyReport {
  """amr of user"""
  amr: String

  """bmi of user"""
  bmi: String

  """body_fat_percent of user"""
  body_fat_percent: String

  """body_weight of user"""
  body_weight: String

  """c_bmi of user"""
  c_bmi: String

  """fat_mass of user"""
  fat_mass: String

  """lean_body_mass of user"""
  lean_body_mass: String

  """rmr of user"""
  rmr: String
}

"""Brand options that a client can customize"""
type Brand {
  """Brand Owner's about description"""
  about_description: String

  """Brand Owner's bg color"""
  bg_color: String

  """Brand Owner's brand email"""
  brand_email: String

  """Name of provider's brand"""
  brand_name: String

  """Owner of this brand"""
  brand_owner: User

  """Whether or not brand owner has practice plus"""
  brand_owner_has_practice_plus: Boolean

  """Whether or not brand owner has whitelabel"""
  brand_owner_has_whitelabel: Boolean

  """Brand Owner's brand phone"""
  brand_phone: String

  """Brand Owner's contact info"""
  contact_description: String

  """Custom sign in path for provider with practice plus"""
  custom_sign_in_path: String

  """Whether or not we should display the header text of a package embed"""
  display_embed_title: Boolean

  """Brand Owner's display name"""
  display_name: String

  """
  Whether or not we should display the package image on embed and sharing link pages
  """
  display_package_image: Boolean

  """Brand Owner's email background color"""
  email_background_color: String

  """
  The primary color that will use to customize a customer's embed process
  """
  embed_primary_color: String

  """URL to a hosted stylesheet that will apply to Embeddable Layout"""
  embeddable_layout_css_url: String

  """Brand Owner's Facebook link"""
  facebook: String

  """Brand Owner's font color of choice"""
  font_color: String

  """The brand's Universal GA ID"""
  ga_id: String

  """The brand's Google Tag Manager ID"""
  gtm_id: String

  """The unique identifier of the brand"""
  id: ID!

  """Brand Owner's Instagram link"""
  instagram: String

  """
  Custom HTML that replaces the content on the standard intake flow completed screen
  """
  intake_completed_html: String

  """Brand owner's logo"""
  logo: Upload

  """Brand Owner's logo"""
  logo_file_name: String

  """The URL to the logo"""
  logo_url: String

  """URL to a hosted stylesheet that will apply to Main Layout"""
  main_layout_css_url: String

  """Brand Owner's selected color"""
  selected_color: String

  """Brand Owner's slogan"""
  slogan: String

  """Brand Owner's tab accent color"""
  tab_accent_color: String

  """Brand Owner's credentials"""
  titles: String

  """Brand Owner's Twitter link"""
  twitter: String

  """ID of Brand Owner"""
  user_id: String

  """Brand Owner's website link"""
  website: String
}

"""Info for authentication pages for either a dietitian or partner"""
type BrandInfo {
  """Brand Owner's logo"""
  image_url: String

  """Name of the partner"""
  name: String

  """The brand associated with provider/partner"""
  partner_brand: Brand

  """if false the client signup tab is not shown"""
  show_client_tab: Boolean

  """if false the client signup tab is not shown"""
  show_provider_tab: Boolean

  """Header for the sign up page"""
  sign_up_header: String

  """Header for the sign up page"""
  sign_up_text: String

  """Custom HTML to be placed at the bottom of signup"""
  signup_footer: String

  """Unique code of the brand or provider"""
  unique_code: String

  """
  Whether the partner's users can use a username to sign in (defaults to false)
  """
  uses_username: Boolean
}

"""Payload for a new entry"""
input BulkEntryInput {
  """
  Check and either add to pre-existing average heart rate entry or create a new one
  """
  add_to_avg_heart_rate: Boolean

  """The category of the entry"""
  category: String

  """
  Check for duplicates, currently only supported if third_party_source is apple_health
  """
  check_duplicates: Boolean

  """The time the entry was created"""
  created_at: String

  """The description of the entry"""
  description: String

  """ED Post Hunger"""
  ed_posthunger: String

  """ED Pre Hunger"""
  ed_prehunger: String

  """The comma separated list of emotions"""
  emotions: String

  """
  If average of any type, value indicates amount of entries already included in average
  """
  entries_in_average: String

  """Third party external ID associated with this entry"""
  external_id: String

  """
  Third party associated with the external ID on this entry. Option currently supported is 'AppleHealth'
  """
  external_id_type: String

  """The image associated with the entry"""
  image: Upload

  """The base64 encoded image string"""
  image_string: String

  """The statistic associated with the metric entry"""
  metric_stat: String

  """The percieved hungriness"""
  percieved_hungriness: String

  """The reflection on the entry"""
  reflection: String

  """The list of subentries associated with this entry"""
  subentries: [SubentryInput]

  """Options are apple_health, google_fit, or fitbit"""
  third_party_source: String

  """
  One of MetricEntry, FoodEntry, WorkoutEntry, MirrorEntry, SleepEntry, NoteEntry, WaterIntakeEntry, PoopEntry, SymptomEntry
  """
  type: String

  """The ID of the user that created the entry"""
  user_id: String
}

"""A Calendar Color Scheme"""
type CalendarColorScheme {
  """Course ID of benefit"""
  appointment_setting_id: String

  """The category to color code by"""
  color_code_by: String

  """Color code options that make up this color scheme"""
  color_codes: [ColorCode!]

  """The default color (in case the subcategory conditions are not met)"""
  default_color: String

  """The unique identifier of the scheme"""
  id: ID!

  """The ID of the connected user"""
  user_id: String
}

"""Payload for a calendar color scheme"""
input CalendarColorSchemeInput {
  """If true, the calendar color scheme will be deleted"""
  _destroy: Boolean

  """The field, by which the color code is determined"""
  color_code_by: String

  """The color codes of the calendar color scheme"""
  color_codes: [ColorCodeInput]

  """The default color code"""
  default_color: String

  """The ID of the calendar color scheme"""
  id: ID
}

"""View settings for provider calendar"""
type CalendarViewSetting {
  """Filter appointments by status"""
  appointment_status_filter: String!

  """Filter appointments by statuses"""
  appointment_statuses_filter: [String]

  """ID of appointment type to filter appointments"""
  appointment_type_filter: ID!

  """Array of IDs of appointment types to filter appointments"""
  appointment_types_filter: [ID]

  """Array of IDs of appointment types to filter availabilities"""
  availability_appointment_types_filter: [ID]

  """Filter availabilities by contact type"""
  availability_contact_type_filter: String

  """ID of location to filter availabilities"""
  availability_location_filter: ID

  """ID of provider to filter availabilities"""
  availability_provider_filter: ID

  """ID of appointment type to filter availabilities"""
  availablilty_appt_type_filter: ID

  """ID of selected calendar colour scheme"""
  calendar_color_scheme_filter: ID

  """Selected calendar view"""
  calendar_view_filter: String

  """Filter appointments by client confirmation status"""
  client_confirmation_status: String

  """Comma separated names of contact types to filter appointments"""
  contact_types_filter: String

  """
  Selected sorting for documents(This is not a calendar setting. Related to documents area)
  """
  document_area_sorting: String

  """Visibility of color schemes section"""
  expand_color_schemes: Boolean

  """Visibility of appointment filters section"""
  expand_filter_appointments: Boolean

  """Visibility of availability filters section"""
  expand_filter_availabilities: Boolean

  """Visibility of 'Filter Providers' section in organization calendar"""
  expand_filter_by_providers: Boolean

  """Visibility of 'View By Provider' section in organization calendar"""
  expand_filter_providers: Boolean

  """Visibility of show section"""
  expand_show_availabilities: Boolean

  """The unique identifier of the setting"""
  id: ID!

  """ID of location to filter appointments"""
  location_filter: ID

  """IDs of locations to filter appointments"""
  locations_filter: [ID]

  """Visibility of one time availabilities in calendar"""
  one_time_availabilities: Boolean

  """Selected organization calendar view"""
  org_calendar_view_filter: String

  """Filter appointments by provider confirmation status"""
  provider_confirmation_status: String

  """
  ID of selected provider to filter availabilities in organization calendar
  """
  selected_availability_provider_filter: ID

  """
  Comma separated IDs of providers to filter availabilities in organization calendar
  """
  selected_availability_providers_filter: String

  """ID of selected provider in organization calendar"""
  selected_provider_filter: ID

  """Comma separated IDs of selected providers in organization calendar"""
  selected_providers_filter: String

  """Visibility of all appointments"""
  show_appointments: Boolean

  """Visibility of all availabilities"""
  show_availabilities: Boolean

  """Visibility of all synced appointments"""
  show_synced_appointments: Boolean

  """Selected calendar timezone"""
  timezone: String

  """Visibility of weekly availabilities in calendar"""
  weekly_availabilities: Boolean
}

"""Call reference information associated with a policy"""
type CallReference {
  """Date call was made"""
  date_recorded: String

  """The unique identifier of the reference call"""
  id: ID!

  """Notes taken for this reference call"""
  notes: String

  """call reference number provided by insurance company"""
  reference_number: String

  """Time call was made"""
  time_recorded: String

  """The ID of the patient who the call reference is for"""
  user_id: Int
}

"""Payload for a CallReference"""
input CallReferenceInput {
  """The date the call was recorded"""
  date_recorded: String

  """The ID of the CallReference"""
  id: ID

  """Notes about the call"""
  notes: String

  """The reference number for the call"""
  reference_number: String

  """The time the call was recorded"""
  time_recorded: String
}

"""Marketing campaign (email/sms) sent to clients by provider"""
type Campaign {
  """Button label in email"""
  button_text: String

  """URL in button"""
  button_url: String

  """individual clients who have received this campaign"""
  clients(
    """the page offset (if should paginate)"""
    offset: Int

    """if the result should be paginated"""
    should_paginate: Boolean
  ): [User!]

  """Email body"""
  email_body: String

  """Greeting used before email body"""
  email_greeting: String

  """Subject line of email"""
  email_subject: String

  """The unique identifier of the campaign"""
  id: ID!

  """If true, campaign hasn't been sent and has been saved as a draft"""
  is_draft: Boolean

  """If true, campaign (will be/has been) sent as an email"""
  is_email: Boolean!

  """If true, campaign (will be/has been) sent as an sms message"""
  is_sms: Boolean!

  """Name of a campaign labeled by provider"""
  name: String

  """SMS text message content"""
  sms_body: String

  """Groups of users with the same tags who have received this campaign"""
  tags: [Tag!]

  """Name of a campaign labeled by provider"""
  user: User

  """User groups who have received this campaign"""
  user_groups: [UserGroup!]
}

"""Info on connection to Candid Health"""
type CandidHealthConnection {
  """The unique identifier of the connection"""
  id: ID!

  """True if the Candid connection is turned by user"""
  is_enabled: Boolean!
}

"""A Care Plan"""
type CarePlan {
  """
  The name of a user group or a patient the care plan has been assigned to
  """
  assigned_to: String

  """Date of creation"""
  created_at: String!

  """Provider who created care plan"""
  creator: User

  """Pagination cursor"""
  cursor: Cursor!

  """The care plan description"""
  description: String

  """Associated documents"""
  documents: [Document!]!

  """Feature Toggle of the care plan"""
  feature_toggle: FeatureToggle

  """Associated goals"""
  goals: [Goal!]!

  """
  Shows whether a group care plan(or a single one, if patient_id argument is not passed) is active for a given user. Make sure to pass patient_id argument if you need to check the status of a group care_plan for the given user
  """
  group_plan_is_active_for_given_user(
    """The ID of a patient to check"""
    patient_id: ID
  ): Boolean

  """
  Shows whether the patient or at least one user from the related group has not skipped email. We don't want to call care_plan_mailer if all of related users have skipped_email == true
  """
  has_users_with_real_emails: Boolean

  """The unique identifier of the plan"""
  id: ID!

  """Care plan is active for the associated patient"""
  is_active: Boolean

  """Indicates whether a care plan is for a group"""
  is_group: Boolean

  """Care plan status"""
  is_hidden: Boolean!

  """
  Indicates if care plan can be used as a template and can be assigned on other users
  """
  is_template: Boolean!

  """The name of care plan"""
  name: String

  """A user the care plan has been assigned to"""
  patient: User

  """Ordered (Ascending) associated recommendations"""
  recommendations: [Recommendation!]!

  """Date when record was last updated"""
  updated_at: String!

  """A user group the care plan has been assigned to"""
  user_group: UserGroup
}

"""A connection between a care plan and a connectable item"""
type CarePlanConnection {
  """The ID of the connected care plan"""
  care_plan_id: ID

  """The ID of the connected item"""
  connectable_id: ID

  """The type of the connected item"""
  connectable_type: String

  """The unique identifier of the connection"""
  id: ID!
}

"""CarePlan sorting enum"""
enum CarePlanOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  STATUS_ASC
  STATUS_DESC
  CLIENT_FIRST_NAME_DESC
  CLIENT_FIRST_NAME_ASC
  DEACTIVATED_DESC
  DEACTIVATED_ASC
}

"""Information on an event surrounding CDA activity"""
type CdaActivityEvent {
  """The activity that occured"""
  activity_type: String

  """The type of CDA"""
  cda_type: String

  """The time of the event"""
  created_at: String

  """The ID of the document"""
  document_id: String

  """Self descriptive"""
  id: ID!

  """The outbound recipient"""
  outbound_recipient: String

  """The user who opened the document"""
  user: User

  """The email of the user who took the action."""
  user_email: String
}

"""Info on connection to Change Health"""
type ChangeClaimSubmitter {
  """The unique identifier of the connection"""
  id: ID!

  """True if the Change connection is turned by user"""
  is_enabled: Boolean
}

"""Autogenerated input type of ChangeDevicesAvailability"""
input ChangeDevicesAvailabilityInput {
  appointment_id: String
  devices_unavailability: Boolean
}

"""Autogenerated return type of ChangeDevicesAvailability."""
type ChangeDevicesAvailabilityPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""
A Chargeback object, contains info on the dispute reason, status, and evidence submitted
"""
type ChargeBack {
  """The payment in Healthie that was disputed"""
  billing_item: BillingItem

  """The date and time the chargeback was initiated"""
  created_at: String!

  """The amount that was disputed"""
  disputed_amount: String

  """Evidence to contest the chargeback"""
  evidence: ChargeBackEvidence

  """Fields that should be submitted for this chargeback"""
  evidence_fields_to_submit: [String]

  """The dispute fee charged by the payment processor"""
  fee: String

  """A formatted version of the reason"""
  formatted_reason: String

  """A formatted version of the status"""
  formatted_status: String

  """The unique identifier of the chargeback"""
  id: ID!

  """
  The reason for the chargeback. Matches Stripe's list of reasons at https://stripe.com/docs/api/disputes/object?lang=ruby
  """
  reason: String

  """The date and time that evidence needs to be submitted by"""
  response_required_by: String

  """The status of the chargeback"""
  status: String

  """
  The total cost of the chargeback. Includes both the disputed amount and the fee
  """
  total_amount: String

  """The date and time the chargeback was last updated"""
  updated_at: String!
}

"""A Chargeback Evidence object, contains info to contest the dispute"""
type ChargeBackEvidence {
  """The billing address provided by the customer."""
  billing_address: String

  """ID of the uploaded cancellation_policy."""
  cancellation_policy: String

  """
  An explanation of how and when the customer was shown your refund policy prior to purchase.
  """
  cancellation_policy_disclosure: String

  """A justification for why the customer’s subscription was not canceled."""
  cancellation_rebuttal: String

  """ID of the uploaded customer_communication."""
  customer_communication: String

  """The email address of the customer."""
  customer_email_address: String

  """The name of the customer."""
  customer_name: String

  """A description of the product or services that were sold."""
  product_description: String

  """ID of the uploaded refund_policy."""
  refund_policy: String

  """
  Documentation demonstrating that the customer was shown your refund policy prior to purchase.
  """
  refund_policy_disclosure: String

  """A justification for why the customer is not entitled to a refund."""
  refund_refusal_explanation: String

  """ID of the uploaded uncategorized_file."""
  uncategorized_file: String

  """Any additional evidence or statements."""
  uncategorized_text: String
}

"""Payload for a chargeback evidence"""
input ChargeBackEvidenceInput {
  """The billing address of the customer"""
  billing_address: String

  """The cancellation policy file"""
  cancellation_policy: Upload

  """The disclosure of the cancellation policy"""
  cancellation_policy_disclosure: String

  """The rebuttal of the cancellation"""
  cancellation_rebuttal: String

  """The communication with the customer"""
  customer_communication: Upload

  """The email address of the customer"""
  customer_email_address: String

  """The name of the customer"""
  customer_name: String

  """The description of the product"""
  product_description: String

  """The refund policy file"""
  refund_policy: Upload

  """The disclosure of the refund policy"""
  refund_policy_disclosure: String

  """The explanation of the refund refusal"""
  refund_refusal_explanation: String

  """The uncategorized file related to the chargeback"""
  uncategorized_file: Upload

  """The uncategorized reason of the chargeback"""
  uncategorized_text: String
}

"""Charge back sorting enum"""
enum ChargeBackOrderKeys {
  CREATED_AT_DESC
  CREATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_AT_ASC
}

"""Charting Item"""
type ChartingItemType {
  """The date of the item' creation"""
  created_at: String!

  """The name of the custom module form"""
  custom_module_form_name: String

  """The type of the document"""
  document: Document

  """The ID of the filler"""
  filler_id: ID

  """The type of the form answer group"""
  form_answer_group: FormAnswerGroup

  """The ID of the form answer group"""
  form_answer_group_id: ID

  """The unique identifier of the item"""
  id: ID!

  """Whether the item is a document"""
  is_document: Boolean

  """The name of the item"""
  name: String

  """The name of the provider"""
  provider_name: String

  """Whether the item is signed"""
  signed: Boolean

  """Whether the item is used for a charting"""
  use_for_charting: Boolean

  """Whether the item is used for a program"""
  use_for_program: Boolean
}

"""A charting note addendum"""
type ChartingNoteAddendumType {
  """The content of the addendum"""
  content: String

  """The date the addendum was created"""
  created_at: String!

  """The form answer group the addendum belongs to"""
  form_answer_group: FormAnswerGroup

  """The unique identifier of the addendum"""
  id: ID!

  """A provider who created the addendum"""
  user: User
}

"""Chat settings for a user"""
type ChatSetting {
  """The text of the auto welcome message"""
  auto_welcome_text: String

  """The text of the setting"""
  content: String

  """The end of scheduled autoreply period"""
  end_date: String

  """Whether a user should be prompted to confirm closing a chat"""
  hide_close_confirmation: Boolean

  """Whether a user should be prompted to confirm opening an org chat"""
  hide_org_chat_confirmation: Boolean

  """The unique identifier of the chat setting"""
  id: ID!

  """Whether the setting is active"""
  is_active: Boolean

  """Whether the setting is within recurring messaging period"""
  is_recurring_active: Boolean

  """Allow users to no add an end date"""
  no_end_date: Boolean

  """
  Whether user should receive notifications from chat while is_active is true
  """
  receive_notifications: Boolean

  """
  Whether a user should receive notifications from chat while is_recurring_active is true
  """
  receive_notifications_recurring: Boolean

  """
  Whether or not the recurring messages should be all day or for a time range
  """
  recurring_all_day: Boolean

  """The content for recurring autoreplies"""
  recurring_content: String

  """Front-end friendly version of recurring days"""
  recurring_days_data: RecurringDaysData

  """The end of time range for recurring messages"""
  recurring_end_time: String

  """Either nil, all_day, or a string representation of a time range"""
  recurring_friday: String

  """Either nil, all_day, or a string representation of a time range"""
  recurring_monday: String

  """Either nil, all_day, or a string representation of a time range"""
  recurring_saturday: String

  """The start of time range for recurring messages"""
  recurring_start_time: String

  """Either nil, all_day, or a string representation of a time range """
  recurring_sunday: String

  """Either nil, all_day, or a string representation of a time range"""
  recurring_thursday: String

  """Either nil, all_day, or a string representation of a time range"""
  recurring_tuesday: String

  """Indicates whether or not recurring messaging has been set up"""
  recurring_turned_on: Boolean

  """Either nil, all_day, or a string representation of a time range"""
  recurring_wednesday: String

  """Whether or not a schedule message is set up"""
  scheduled_turned_on: Boolean

  """Whether to send an auto welcome message"""
  send_auto_welcome: Boolean

  """The beginning of scheduled autoreply period"""
  start_date: String

  """The ID of the setting owner"""
  user_id: ID
}

"""Payload for a group of answers"""
input CheckoutFormAnswerGroupInput {
  """The id of the custom module form"""
  custom_module_form_id: String

  """The list of answers for the form"""
  form_answers: [CheckoutFormAnswerInput]

  """The id of the form answer group"""
  id: ID
}

"""Payload for an answer"""
input CheckoutFormAnswerInput {
  """The answer"""
  answer: String

  """The ID of the custom module"""
  conditional_custom_module_id: ID

  """The ID of the custom module"""
  custom_module_id: String

  """The type of the filter"""
  filter_type: String

  """The mod_type (e.g question type) that is being answered."""
  mod_type: String

  """Unique ID for the answer"""
  id: ID

  """The label for the answer"""
  label: String

  """The ID of the user who created the answer"""
  user_id: String

  """The value to filter on"""
  value_to_filter: String
}

"""Options for the service to submit a claim to"""
enum ClaimDestinationIntegration {
  candid
  claim_md
  change_health
  office_ally
}

"""
Deprecated (use EligiblityCheck instead). A ChangeHealth eligibility check
"""
type ClaimEligibilityCheck {
  """A string used to identify the eligibility check in the Change system."""
  control_number: String!

  """The time the eligibility check was run"""
  created_at: String!

  """The unique identifier of the check"""
  id: ID!

  """The retrieved plan status"""
  plan_status: String

  """The policy associated with this check"""
  policy: Policy

  """The ID of the associated policy"""
  policy_id: ID!

  """A JSON object containing the eligibility details"""
  response: String
}

"""Claim Eligibility Check Errors"""
type ClaimEligibilityCheckErrors {
  """The error code"""
  code: String

  """The description of the error"""
  description: String
}

"""Payload for an insurance plan"""
input ClientInsurancePlanInput {
  """The ID of the insurance plan"""
  id: String

  """The name of the payer"""
  payer_name: String
}

"""Payload for a deletable location"""
input ClientLocationInput {
  """If true, the location will be deleted"""
  _destroy: Boolean

  """The city"""
  city: String

  """The country code"""
  country: String

  """The ID of the location"""
  id: ID

  """The first line of the address"""
  line1: String

  """The second line of the address"""
  line2: String

  """The graphql_name of the location"""
  name: String

  """The state"""
  state: String

  """The zip code"""
  zip: String
}

"""Payload for a client policy"""
input ClientPolicyInput {
  """If true, the policy will be deleted"""
  _destroy: Boolean

  """The group number"""
  group_num: String

  """The date of birth of the policy holder"""
  holder_dob: String

  """The first name of the policy holder"""
  holder_first: String

  """The gender of the policy holder"""
  holder_gender: String

  """The last name of the policy holder"""
  holder_last: String

  """The location of the policy holder"""
  holder_location: ClientLocationInput

  """The middle initial of the policy holder"""
  holder_mi: String

  """The phone number of the policy holder"""
  holder_phone: String

  """The relationship of the policy holder to the client"""
  holder_relationship: String

  """The ID of the policy"""
  id: ID

  """The back of the insurance card"""
  insurance_card_back: Upload

  """The ID of the back of the insurance card"""
  insurance_card_back_id: String

  """The front of the insurance card"""
  insurance_card_front: Upload

  """The ID of the front of the insurance card"""
  insurance_card_front_id: String

  """The insurance plan"""
  insurance_plan: ClientInsurancePlanInput

  """The ID of the insurance plan"""
  insurance_plan_id: String

  """The name of the policy"""
  name: String

  """The policy number"""
  num: String

  """The location of the payer"""
  payer_location: ClientLocationInput

  """The policy-related phone number"""
  policy_phone_number: String

  """The priority type of the policy"""
  priority_type: String

  """Whether the policy holder has the same address as the client"""
  same_address_as_client: Boolean

  """The type of the policy"""
  type_string: String

  """The ID of the user"""
  user_id: String
}

"""A client portal settings"""
type ClientPortalSetting {
  """Chat with provider"""
  chat_with_provider: Boolean!

  """The unique identifier of the setting"""
  id: ID!

  """If the client can schedule appointments"""
  schedule_appointments: Boolean!

  """If the client can view and complete forms"""
  view_and_complete_forms: Boolean!

  """If the client can view and create goals"""
  view_and_create_goals: Boolean!

  """If the client can view and create journal entries"""
  view_and_create_journal_entries: Boolean!

  """If the client can view and pay bills"""
  view_and_pay_bills: Boolean!

  """If the client can view and purchase packages"""
  view_and_purchase_packages: Boolean!

  """If the client can view and upload documents"""
  view_and_upload_documents: Boolean!
}

"""Payload for a client portal setting"""
input ClientPortalSettingInput {
  """Whether the client can chat with the provider"""
  chat_with_provider: Boolean

  """The id of the client portal setting"""
  id: ID

  """Whether the client can schedule appointments"""
  schedule_appointments: Boolean

  """Whether the client can view and complete forms"""
  view_and_complete_forms: Boolean

  """Whether the client can view and create goals"""
  view_and_create_goals: Boolean

  """Whether the client can view and create journal entries"""
  view_and_create_journal_entries: Boolean

  """Whether the client can view and pay bills"""
  view_and_pay_bills: Boolean

  """Whether the client can view and purchase packages"""
  view_and_purchase_packages: Boolean

  """Whether the client can view and upload documents"""
  view_and_upload_documents: Boolean
}

"""Info about how a client was acquire"""
type ClientSource {
  """The unique identifier of the source"""
  id: String!

  """Get readable source based on ref_type"""
  readable_source: String

  """The source of how a client was acquire: contain ID or a Other string"""
  ref_source: String

  """If ref_source eq 'Other', than it may contain custom string or NULL"""
  ref_source_other: String

  """The type of the source of how a client was acquire"""
  ref_type: String

  """related insurance"""
  related_insurance: InsurancePlan

  """related object"""
  related_object: RelatedObject

  """related object"""
  related_object_name: String
}

"""Payload for a client source"""
input ClientSourceInput {
  """The ID of the client source"""
  id: ID

  """The source of the client"""
  ref_source: String

  """The other source of the client"""
  ref_source_other: String

  """The type of client source"""
  ref_type: String
}

"""A CMS1500 claim"""
type Cms1500 {
  """The provider agrees to accept assignment"""
  accept_assignment: Boolean

  """Notes"""
  additional_text: String

  """The insurance discount"""
  adjustment: String

  """The amount that the client paid towards the claim"""
  amount_paid: String

  """The amount that the insurance company reimbursed"""
  amount_reimbursed: String

  """The billing provider for the CMS1500"""
  billing_provider: Organization

  """The ID of the Billing Provider"""
  billing_provider_id: String

  """
  Check numbers associated with a reimbursement from the claim. Imported via ERA
  """
  check_numbers: [String]

  """Amount the client owes"""
  client_responsibility: String

  """True if the provider chose to remove client responsibility"""
  client_responsibility_removed: Boolean

  """True if the client's signature is on file"""
  client_sig_on_file: Boolean

  """Cms1500 policies in use for this claim"""
  cms1500_policies: [Cms1500Policy!]

  """The client's copay for the claim"""
  copay: String

  """The amount of copay still owed"""
  copay_still_owed: String

  """The comma separated list of cpt codes names"""
  cpt_code_names: String

  """CPT codes in use for this claim"""
  cpt_codes_cms1500s: [CptCodesCms1500!]

  """The creation date of the claim"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """The claim's date of service"""
  date_of_service: String

  """The ID of the rendering provider"""
  dietitian_id: String

  """Estimated fee for the specific cpt code based on previous use"""
  estimated_cpt_fees_for_user: [CptCodesCms1500!] @deprecated(reason: "Use CptCodesCms1500.last_fee_amount")

  """Chart Note ID, if CMS1500 was exported from a Chart Note"""
  form_answer_group_id: ID

  """ICD codes in use for this claim"""
  icd_codes_cms1500s: [IcdCodesCms1500!]

  """The unique identifier of the CMS1500"""
  id: ID

  """When true, includes referrer information on the claim"""
  include_referrer_information: Boolean

  """True if the insured's signature is on file"""
  insured_sig_on_file: Boolean

  """The value of the nineteen field"""
  nineteen_reserved: String

  """The specific Organization Info in use on this claim"""
  org_info: OrganizationInfo

  """The ID of the Organization Info"""
  organization_info_id: String

  """The original reference number of the claim"""
  orig_ref_number: String

  """The date that the claim was paid out to employees/contractors"""
  paid_out_at: String

  """The patient for the CMS1500"""
  patient: User

  """The patient's account number"""
  patient_account_num: String

  """The ID of the patient"""
  patient_id: String

  """The primary insurance plan name for the CMS1500"""
  primary_plan_name: String

  """Rejected/Denied status reason"""
  reasons: ID

  """The referral info for the CMS1500"""
  referral_info: ReferralInfo

  """The date that the claim was reimbursed"""
  reimbursed_at: String

  """The provider for the CMS1500"""
  rendering_provider: User

  """The Rendering Provider's other id number"""
  rendering_provider_other_id: String

  """Other ID info in use for this render provider"""
  rendering_provider_other_id_object: OtherIdNumber

  """The resubmission code of the claim"""
  resubmission_code: String

  """The service location for the CMS1500"""
  service_location: Location

  """The ID of the service location"""
  service_location_id: String

  """The status of the claim"""
  status: String

  """The value of the ten d field"""
  tend_reserved: String

  """Total amount the claim was billed for"""
  total_charge: String

  """The last date and time that the CMS1500 was updated"""
  updated_at: ISO8601DateTime

  """True if the claim reimbursement info was updated via SFTP"""
  updated_by_sftp: Boolean

  """When true, uses the individual npi in all npi fields"""
  use_indiv_npi: Boolean
}

"""Cms1500 sorting enum"""
enum Cms1500OrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  STATUS_ASC
  STATUS_DESC
  PRIMARY_PLAN_NAME_ASC
  PRIMARY_PLAN_NAME_DESC
  PATIENT_LAST_NAME_ASC
  PATIENT_LAST_NAME_DESC
  SERVICE_DATE_ASC
  SERVICE_DATE_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A CMS1500 policy"""
type Cms1500Policy {
  """The cms1500 for the cms1500 policy"""
  cms1500: Cms1500

  """The id of the cms1500 for the cms1500 policy"""
  cms1500_id: String

  """The unique identifier of the policy"""
  id: ID

  """The policy for the cms1500 policy"""
  policy: Policy

  """The policy id of the cms1500 for the cms1500 policy"""
  policy_id: String
}

"""Payload for associating a policy with a CMS 1500"""
input Cms1500PolicyInput {
  """If true, the join table record will be deleted upon submission"""
  _destroy: Boolean

  """The ID of the join table record"""
  id: ID

  """The associated policy"""
  policy: PolicyInput

  """The ID of the policy"""
  policy_id: String
}

"""Payload for referring physician"""
input Cms1500ReferringPhysicianInput {
  """The full name of the referring physician"""
  full_name: String

  """The ID of the referring physician"""
  id: ID
}

"""CognitiveStatus object"""
type CognitiveStatus {
  """Cognitive status"""
  cognitive_status: String

  """The unique identifier of the status"""
  id: ID!

  """Start date"""
  start_date: String

  """User id"""
  user_id: ID!
}

"""A Calendar Color Scheme"""
type ColorCode {
  """The ID of the calendar color scheme"""
  calendar_color_scheme_id: String

  """The item to code by"""
  code_by_item: String

  """The item name to code by"""
  code_by_item_name: String

  """The color"""
  color: String

  """The unique identifier of the color code"""
  id: ID!
}

"""Payload for a ColorCode"""
input ColorCodeInput {
  """If the color code should be destroyed"""
  _destroy: Boolean

  """The code by item of the color code"""
  code_by_item: String

  """The color of the color code"""
  color: String

  """The ID of the color code"""
  id: ID
}

"""A color code option"""
type ColorCodeOption {
  """The label of the color code option"""
  label: String

  """The value of the color code option"""
  value: String
}

"""A comment of an entry"""
type Comment {
  """User who created comment"""
  author: User

  """The content of this comment"""
  content: String

  """The date on which the comment was posted"""
  created_at: String!

  """User who created comment"""
  creator: User

  """Pagination cursor"""
  cursor: Cursor!

  """The id of the entry associated with the comment"""
  entry_id: String

  """The unique identifier of the comment"""
  id: ID!

  """Indicates when posting an emoji reaction"""
  is_reaction: Boolean!

  """User who created comment"""
  poster: User

  """the owner of the comment"""
  user_id: ID!
}

"""Autogenerated input type of CompleteCcdaReconciliation"""
input CompleteCcdaReconciliationInput {
  id: ID
  added_problem_ids: [ID]
  added_medication_ids: [ID]
  added_allergy_ids: [ID]
}

"""Autogenerated return type of CompleteCcdaReconciliation."""
type CompleteCcdaReconciliationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user: User
}

"""a completed course item"""
type CompletedCourseItem {
  """The ID of the completed item"""
  completed_item_id: ID

  """The type of the completed item"""
  completed_item_type: String

  """The ID of course related to the completed item"""
  course_item_id: ID

  """The date when the completed item was created"""
  created_at: String!

  """The unique identifier of the item"""
  id: ID!

  """The next item after the current item"""
  next_item: CourseItem

  """The date when the completed item was updated"""
  updated_at: String!

  """The ID of the user related to the completed item"""
  user_id: ID
}

"""An object with information about how an onboarding item was completed"""
type CompletedOnboardingItem {
  """The URL to go to to edit the attached object"""
  attached_object_edit_url: String

  """The most relevant date to display"""
  date_to_show: String

  """The unique identifier of the item"""
  id: ID!

  """The id of the object that completed the onboarding item"""
  item_id: String

  """The type of item that was completed"""
  item_type: String

  """The onboarding item that was completed"""
  onboarding_item: OnboardingItem

  """The ID of the onboarding item"""
  onboarding_item_id: String

  """Set to true if the user skipped this"""
  skipped: Boolean!

  """The completed (client)"""
  user: User

  """The ID of the completer (client)"""
  user_id: String

  """The URL to view"""
  view_url: String
}

"""Autogenerated input type of ConnectApptToCharting"""
input ConnectApptToChartingInput {
  appointment_id: ID!
  form_answer_group_id: ID!
}

"""Autogenerated return type of ConnectApptToCharting."""
type ConnectApptToChartingPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""
A object containing information about whether a specific contact type can be booked
"""
type ContactType {
  """ID of the connected appointment setting"""
  appointment_setting_id: String

  """ID of the connected appointment type"""
  appointment_type_id: String

  """An Alias of ID that makes creating the form easier"""
  form_id: String

  """The unique identifier of the contact type"""
  id: ID

  """The graphql_name of the contact type"""
  name: String

  """Whether this contact type can be used"""
  show: Boolean!

  """The ID of the connected user"""
  user_id: String
}

"""Payload for overriding a contact type"""
input ContactTypeOverride {
  """Whether to show this contact type"""
  show: Boolean!
}

"""Payload for overriding a contact type"""
input ContactTypeOverrideInput {
  """The ID of the contact type override"""
  id: ID

  """The graphql_name of the contact type"""
  name: String

  """The position of the contact type"""
  position: Int

  """Whether or not to show the contact type"""
  show: Boolean
}

"""An association between conversation holders"""
type Conversation {
  """The user who closed the conversation"""
  closed_by: User

  """The date the conversation was closed"""
  closed_date: String

  """Display default name for community chat"""
  community_chat_prefix: String

  """All ConversationMemberships associated with this conversation."""
  conversation_memberships: [ConversationMembership!]!

  """The number of users in the conversation"""
  conversation_memberships_count: Int

  """The time the Conversation was created"""
  created_at: String!

  """The conversation membership for the current user"""
  current_user_conversation_membership: ConversationMembership

  """ID of dietitian"""
  dietitian_id: ID

  """first four invitees to the conversation"""
  first_four_invitees: [User!]

  """The unique identifier of the conversation"""
  id: ID!

  """Whether the conversation includes multiple clients"""
  includes_multiple_clients: Boolean

  """The invitees to the conversation"""
  invitees: [User!]

  """Whether the conversation is hidden for the client"""
  is_hidden_for_client: Boolean

  """The content of the last note, with HTML stripped"""
  last_message_content: String

  """
  ID of the last note of conversation that was sent by the convo owner and viewed by the patient
  """
  last_note_viewed_id: String

  """The subject of conversation"""
  name: String

  """All notes associated with this conversation."""
  notes: [Note!]!

  """owner of conversation"""
  owner: User

  """ID of patient"""
  patient_id: ID

  """The last time the conversation was updated"""
  updated_at: String!

  """invitees to the conversation"""
  user_groups: [UserGroup!]
}

"""
ConversationMembership entry, returns basic info related to conversation participant
"""
type ConversationMembership {
  """Toggle for archive status"""
  archived: Boolean!

  """Conversation id of conversation membership"""
  conversation_id: ID

  """Role in conversation"""
  conversation_role: String

  """Conversation linked to this membership"""
  convo: Conversation

  """The time the conversation of the"""
  convo_updated_at: User

  """The date the Conversation Membership was created"""
  created_at: String!

  """The creator of this ConversationMembership"""
  creator: User

  """Pagination cursor"""
  cursor: Cursor!

  """URL to the avatar to display"""
  display_avatar: String

  """Either the name of the owner or conversation subject?"""
  display_name: String

  """The first name and last name initial of the owner"""
  display_name_and_initial: String

  """Display the other user first name for non group convos"""
  display_other_user_first_name: String

  """Display title or other user name for non group convos"""
  display_other_user_name: String

  """The unique identifier of the membership"""
  id: ID!

  """Get last conversation task"""
  last_task(
    """The type of the notes"""
    notes_type: String = "inbox"
  ): Task

  """Datetime membership was updated"""
  updated_at: String!

  """The creator of membership"""
  user_id: ID

  """The list of users in conversation (to use in place of display name"""
  user_list_as_display_name: String

  """Whether the conversation has been viewed"""
  viewed: Boolean!
}

"""Conversation Membership sorting enum"""
enum ConversationMembershipOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  CONVERSATION_CREATED_AT_ASC
  CONVERSATION_CREATED_AT_DESC
  CONVERSATION_UPDATED_AT_ASC
  CONVERSATION_UPDATED_AT_DESC
}

"""Autogenerated input type of ConvertFromJsonToForm"""
input ConvertFromJsonToFormInput {
  user_id: ID!
  data: String!
}

"""Autogenerated return type of ConvertFromJsonToForm."""
type ConvertFromJsonToFormPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of ConvertToMetric"""
input ConvertToMetricInput {
  """The ID of the user"""
  user_id: ID!

  """Accepts: metric | imperial as an argument"""
  convert_system: String!
}

"""Autogenerated return type of ConvertToMetric."""
type ConvertToMetricPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of CopyForms"""
input CopyFormsInput {
  """List of form IDs"""
  id_list: [ID]!

  """User ID for user that form copied to"""
  user_id: ID!
}

"""Autogenerated return type of CopyForms."""
type CopyFormsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""A Course"""
type Course {
  """Whether the course is active"""
  active: Boolean!

  """Course clients"""
  clients(
    """Filter by course status"""
    course_status: String
  ): [CourseMembership!]

  """Course group memberships for the course"""
  clients_groups(
    """Filter by course status"""
    course_status: String
  ): [CourseGroup!]

  """The number of completed memberships in the course"""
  completed_course_memberships_count: Int

  """The benefits of a course"""
  course_benefits: [CourseBenefit!]!

  """Course group memberships for the course"""
  course_groups: [CourseGroup!]

  """The items of a course"""
  course_items(
    """Include custom emails"""
    include_emails: Boolean = true
  ): [CourseItem!]!

  """Course memberships for the course"""
  course_memberships: [CourseMembership!]

  """The number of members in the course"""
  course_memberships_count: String

  """type of the course"""
  course_type: String!

  """date course was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """date course was deleted"""
  deleted_at: String

  """Description of course"""
  description: String

  """end date of the course based on included items"""
  end_date: String

  """HTML-formatted benefits of the course"""
  formatted_benefits: String

  """The unique identifier of the course"""
  id: ID!

  """The number of in progress memberships in the course"""
  in_progress_course_memberships_count: Int

  """late enrollment for fixed type courses"""
  late_enroll: Boolean

  """Name of course"""
  name: String

  """The number of not started memberships in the course"""
  not_started_course_memberships_count: Int

  """Offerings contains current course"""
  offerings: [Offering!]

  """url for course image"""
  preview_image_url: String

  """url for course video"""
  preview_video_content: String

  """start date for fixed type course"""
  start_date: String

  """Ungrouped Course memberships for the course"""
  ungrouped_course_memberships: [CourseMembership!]

  """date course was updated"""
  updated_at: String

  """Use category toggle"""
  use_category: Boolean

  """Use video label toggle"""
  use_video_label: Boolean

  """The user groups who have access to this course"""
  user_groups: [UserGroup!]!

  """User id of course"""
  user_id: ID

  """The users who have access to this course"""
  users: [User!]!

  """The progress of users who completed the course item"""
  users_course_items_progress: String

  """The users course progress"""
  users_progress: String
}

"""A Course Benefit"""
type CourseBenefit {
  """Benefit of a course"""
  benefit: String

  """Course ID of benefit"""
  course_id: ID

  """The unique identifier of the benefit"""
  id: ID!
}

"""Completion info for group participants enrolled to the course"""
type CourseCompletionInfoGroupsType {
  """Count of users in the group which completed the course"""
  completed: Int

  """Group name"""
  label: String

  """Count of users in the group"""
  total: Int

  """Group participant ids"""
  user_ids: [String!]

  """Group ID"""
  value: String
}

"""Completion info for individual participants enrolled to the course"""
type CourseCompletionInfoIndividualsType {
  """User full_name"""
  label: String

  """User ID"""
  value: String
}

"""Information based on course groups & individuals completion status"""
type CourseCompletionInfoType {
  """Complete info for the course user_groups"""
  groups: [CourseCompletionInfoGroupsType!]

  """Complete info for the course individual users"""
  individuals: [CourseCompletionInfoIndividualsType!]
}

"""Relationship between a user group and a course"""
type CourseGroup {
  """the course associated with this membership"""
  course: Course

  """The unique identifier of the group"""
  id: ID!

  """start of course"""
  start_at: String

  """
  When true, new group members start the course at the current time, overriding start_at
  """
  start_on_group_assignment: Boolean!

  """the user group associated with this membership"""
  user_group: UserGroup
}

"""A Course Item"""
type CourseItem {
  """whether the attached object is a video form"""
  attached_object_is_video: Boolean

  """
  Shows if the current course item is blocked by an incomplete previous required item
  """
  blocked_by_prev_item(
    """Get the completed course item for the given membership and course_item"""
    course_membership_id: ID
  ): Boolean

  """category of item"""
  category: String

  """Check if course item was completed by a client"""
  completed_by_client(
    """The ID of the client"""
    client_id: ID
  ): Boolean

  """The completed course item"""
  completed_course_item(
    """Get the completed course item for the given membership and course_item"""
    course_membership_id: ID
  ): CompletedCourseItem

  """The number of members who completed the item"""
  completed_memberships_count: Int

  """
  Determines whether or not completion of the course item is necessary to access the next
  """
  completion_required_for_next_module: Boolean!

  """The associated course"""
  course: Course

  """id of course associated with item"""
  course_id: ID

  """name of course that item belongs to"""
  course_name: String

  """when item was created"""
  created_at: String!

  """type of custom module of a course item (if app)"""
  custom_module_type: String

  """
  Shows if the current course item is blocked due to course membership date restriction
  """
  date_restricted(
    """The ID of a course membership"""
    course_membership_id: ID
  ): Boolean

  """description of item"""
  description: String

  """The path to edit the item"""
  edit_url: String

  """
  This is the first required module that is incomplete, and will block items in higher positions
  """
  first_incomplete_required_module: CourseItem

  """Course item has matrix field"""
  has_matrix_field: Boolean

  """The unique identifier of the item"""
  id: ID!

  """The ID of an incomplete form associated with the item"""
  incomplete_course_item_id(
    """The ID of a course membership"""
    course_membership_id: ID
  ): ID

  """id of item"""
  item_id: ID

  """type of course item"""
  item_type: String

  """name of item"""
  name: String

  """The next item in the course"""
  next_item: CourseItem

  """Check if course item is available to a client"""
  not_available_for_client(
    """The ID of a client"""
    client_id: ID
  ): Boolean

  """Check if course item is available to any client"""
  not_available_to_any_clients: Boolean

  """
  The position of the course item type when shown in a list of other modules on the same day
  """
  position: Int

  """The previous item in the course"""
  prev_item: CourseItem

  """scheduled release?"""
  scheduled_release: String

  """when item was updated"""
  updated_at: String!

  """id of user associated with item"""
  user_id: ID

  """The path to view the item"""
  view_url: String
}

"""Course members input as a label-value pair"""
input CourseMembersInput {
  """Label for the value"""
  label: String!

  """Value for the label"""
  value: String!
}

"""Relationship between a user and a course"""
type CourseMembership {
  """the course associated with this membership"""
  course: Course

  """id of course related to this membership"""
  course_id: ID

  """status of related course completion"""
  course_status: String!

  """date membership was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """The unique identifier of the membership"""
  id: ID!

  """The next incomplete item"""
  next_incomplete_item: CourseItem

  """The incomplete item after the next incomplete item"""
  next_next_incomplete_item: CourseItem

  """start of course"""
  start_at: String

  """date membership was updated"""
  updated_at: String!

  """the user associated with this membership"""
  user: User

  """id of user related to this membership"""
  user_id: ID
}

"""The CPT code"""
type CptCode {
  """The CPT code category"""
  category: String @deprecated(reason: "Always returns nil")

  """The CPT code"""
  code: String

  """The date when the CPT code was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """The description of the CPT code"""
  description: String

  """The name of the CPT code for use in labels"""
  display_name: String

  """The unique identifier of the CPT code"""
  id: ID!

  """Whether a CPT code marked as favorite"""
  is_favorite(
    """The known value of is_favorite (from the query argument)"""
    known_value: Boolean
  ): Boolean

  """The last fee applied to this CPT code by a provider"""
  last_fee: Float

  """The date when the CPT code was updated"""
  updated_at: String!
}

"""cpt codes cms 1500s join table"""
type CptCodesCms1500 {
  """cms 1500 id"""
  cms1500_id: ID

  """The CPT code itself"""
  cpt_code: CptCode

  """icd code id"""
  cpt_code_id: ID @deprecated(reason: "Use cpt_code instead")

  """date created"""
  created_at: String

  """The Early and Periodic Screening, Diagnostic and Treatment"""
  epsdt: String

  """Self descriptive"""
  family_planning_service: Boolean

  """fee"""
  fee: String

  """The unique identifier of the cms 1500"""
  id: ID

  """First Modification"""
  mod1: String

  """Second Modification"""
  mod2: String

  """Third Modification"""
  mod3: String

  """Fourth Modification"""
  mod4: String

  """
  Diagnostic pointers. These are used to connect Diagnosis(ICD) with appropriate Billing Item(CPT) in CMS1500 form
  """
  pointers: [String]

  """service date"""
  service_date: String

  """
  The end date of service (if the line item covers a date range). Can be nil if service was delivered on one day
  """
  service_end_date: String

  """units"""
  units: String

  """date updated"""
  updated_at: String
}

"""Payload for a CPT code on a CMS 1500 form"""
input CptCodesCms1500Input {
  """If true, this record will be marked for destruction"""
  _destroy: Boolean

  """The ID of the CPT code"""
  cpt_code_id: String

  """The EPSDT code"""
  epsdt: String

  """The family planning service"""
  family_planning_service: Boolean

  """The fee for the service"""
  fee: String

  """The ID of the join record"""
  id: ID

  """The first modifier"""
  mod1: String

  """The second modifier"""
  mod2: String

  """The third modifier"""
  mod3: String

  """The fourth modifier"""
  mod4: String

  """The list of pointers to the service line"""
  pointers: [String]

  """The date of the service"""
  service_date: String

  """
  The end date of service (if the line item covers a date range). Can be blank if service was delivered on one day
  """
  service_end_date: String

  """The units for the service"""
  units: String
}

"""cpt codes policies join table"""
type CptCodesPolicy {
  """cpt code"""
  code: String

  """id of instance of joins between cpt_code and policy"""
  cpt_code_id: ID

  """date created"""
  created_at: String!

  """cpt code description"""
  description: String

  """The unique identifier of the join between cpt_code and policy."""
  id: ID!

  """policy id"""
  policy_id: ID

  """date updated"""
  updated_at: String!
}

"""Properties assigning a policy to a CPT code"""
input CptCodesPolicyInput {
  """If true, the CPT codes policy will be deleted"""
  _destroy: Boolean

  """The ID of the CPT code"""
  cpt_code_id: String

  """The ID of the join table record"""
  id: ID

  """The ID of the policy"""
  policy_id: String
}

"""cpt codes super bills join table"""
type CptCodesSuperBill {
  """billing item id"""
  billing_item_id: ID

  """cpt code"""
  cpt_code: CptCode

  """cpt code id"""
  cpt_code_id: ID

  """date created"""
  created_at: String!

  """fee"""
  fee: String

  """The unique identifier of the join"""
  id: ID!

  """First Modification"""
  mod1: String

  """Second Modification"""
  mod2: String

  """Third Modification"""
  mod3: String

  """Fourth Modification"""
  mod4: String

  """Pointers"""
  pointers: [String!]

  """service date"""
  service_date: String

  """super bill id"""
  super_bill_id: ID

  """units"""
  units: String

  """date updated"""
  updated_at: String!
}

"""Payload for a CPT code super bill"""
input CptCodesSuperBillInput {
  """If true, the CPT code super bill will be destroyed"""
  _destroy: Boolean

  """The ID of the CPT code"""
  cpt_code_id: String

  """The fee"""
  fee: String

  """The ID of the CPT code super bill"""
  id: ID

  """The first modifier"""
  mod1: String

  """The second modifier"""
  mod2: String

  """The third modifier"""
  mod3: String

  """The fourth modifier"""
  mod4: String

  """The list of pointers"""
  pointers: [String]

  """The date of the service"""
  service_date: String

  """The number of units"""
  units: String
}

"""Autogenerated input type of CreateChangeAccount"""
input CreateChangeAccountInput {
  """ID of the User"""
  user_id: ID!

  """Change Health User ID"""
  change_health_user_id: String!

  """App User ID"""
  app_user_id: String

  """Change Health Password"""
  password: String!

  """Facility ID"""
  facility_id: String!
}

"""Autogenerated return type of CreateChangeAccount."""
type CreateChangeAccountPayload {
  """The additional info"""
  additional_info: String

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of CreateChangeHealthPatient"""
input CreateChangeHealthPatientInput {
  id: ID
}

"""Autogenerated return type of CreateChangeHealthPatient."""
type CreateChangeHealthPatientPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user: User
}

"""Autogenerated input type of CreateClaimSubmitter"""
input CreateClaimSubmitterInput {
  """ID of the User"""
  user_id: ID!

  """ID of the Organization"""
  organization_id: ID!

  """Healthie Biller ID"""
  biller_id: String!

  """Change Health Username"""
  change_username: String!

  """Submitter ID"""
  submitter_id: String!
}

"""Autogenerated return type of CreateClaimSubmitter."""
type CreateClaimSubmitterPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of CreateClientViaForm"""
input CreateClientViaFormInput {
  custom_module_form_id: ID
  email: String
  first_name: String
  form_answers: [FormAnswerInput]
  last_name: String
  phone_number: String
  provider_id: ID

  """Not in use at this time."""
  send_product_recommendation_email: Boolean
}

"""Autogenerated return type of CreateClientViaForm."""
type CreateClientViaFormPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  form_answer_group: FormAnswerGroup

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of CreateHarborPartner"""
input CreateHarborPartnerInput {
  """The name of the Harbor Partner"""
  name: String!

  """The URL of the Harbor Partner"""
  url: String

  """The description of the Harbor Partner"""
  description: String
}

"""Autogenerated return type of CreateHarborPartner."""
type CreateHarborPartnerPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Pagination cursor"""
scalar Cursor

"""A custom email"""
type CustomEmail {
  """created at"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """type of email"""
  email_type: String

  """email greeting"""
  greeting: String

  """The unique identifier of the email"""
  id: ID!

  """message body"""
  message_body: String

  """subject of email"""
  name: String

  """reactivation_wait_days"""
  reactivation_wait_days: String

  """Appointment Type, Program or Package object"""
  related_object: CustomEmailRelatedObject

  """subject of email"""
  subject: String

  """updated at"""
  updated_at: String!

  """user id of provider"""
  user_id: ID
}

"""CustomEmail related_object union"""
union CustomEmailRelatedObject = AppointmentType | Course | Offering

"""A custom metric for a user"""
type CustomMetric {
  """feature toggle id this custom metric belongs to"""
  feature_toggle_id: Int

  """The high end of the normal range"""
  high_warning_threshold: Int

  """The unique identifier of the metric"""
  id: ID!

  """The low end of the normal range"""
  low_warning_threshold: Int

  """The name of the custom metric"""
  name: String

  """if yes, should show based on if there is custom metric override"""
  should_show: Boolean

  """
  if yes, should show the client based on if there is a custom metric override
  """
  should_show_client: Boolean

  """if yes, show the custom metric"""
  show: Boolean!

  """if yes, show the custom metric to client"""
  show_client: Boolean!

  """if yes, track the custom metric"""
  track: Boolean!

  """user id this custom metric belongs to"""
  user_id: Int
}

"""Payload for a custom metric"""
input CustomMetricInput {
  """Whether or not to destroy the custom metric"""
  _destroy: Boolean

  """The id of the custom metric"""
  id: ID

  """The graphql_name of the custom metric"""
  name: String

  """Whether or not to show the custom metric"""
  show: Boolean

  """Whether or not to show the custom metric to the client"""
  show_client: Boolean

  """Whether or not to track the custom metric"""
  track: Boolean
}

"""A custom metric for a user"""
type CustomMetricOverride {
  """custom metric"""
  custom_metric: CustomMetric

  """id of the custom metric"""
  custom_metric_id: ID

  """feature toggle id this custom metric belongs to"""
  feature_toggle_id: Int

  """id form helper"""
  form_id: String

  """The unique identifier of the override"""
  id: ID!

  """The name of the custom metric"""
  name: String

  """if yes, show the custom metric"""
  show: Boolean!

  """if yes, show the custom metric to the client"""
  show_client: Boolean!

  """if yes, track the custom metric"""
  track: Boolean

  """user id this custom metric belongs to"""
  user_id: Int
}

"""Payload for overriding a custom metric"""
input CustomMetricOverridesInput {
  """The ID of the custom metric"""
  custom_metric_id: ID

  """The ID of the custom metric override"""
  id: ID

  """Whether or not to show the custom metric"""
  show: Boolean

  """Whether or not to show the custom metric to the client"""
  show_client: Boolean
}

"""A question in a template"""
type CustomModule {
  """
  True if there are conditionally displayed custom modules which rely on state of this module
  """
  controls_conditional_modules: Boolean

  """
  The name of the form this custom module has been originally copied from
  """
  copied_from_form_name: String

  """The conditional logic for showing/hiding the custom module"""
  custom_module_condition: CustomModuleConditionType

  """The template that this question is a part of"""
  custom_module_form: CustomModuleForm

  """The ID of the template the question is a part of"""
  custom_module_form_id: String

  """
  The ID of the form section this custom module belongs to. Used for autoscoring
  """
  custom_module_form_section_id: ID

  """
  Custom column used by API users. Used to relate our form objects with objects in third-party systems
  """
  external_id: String

  """
  Custom column used by API users. Used to relate our form objects with objects in third-party systems
  """
  external_id_type: String

  """The name to use in the HIPAA form"""
  hipaa_name: String

  """The unique identifier of the module"""
  id: ID!

  """Whether this module is a custom module"""
  is_custom: Boolean!

  """The label of the question"""
  label: String

  """
  A serialized JSON string of metadata. Maximum character limit of 128,000.
  """
  metadata: String

  """The type of question"""
  mod_type: String

  """The default options for this question"""
  options: String

  """The options, broken up into an array"""
  options_array: [String]

  """IDs of of other modules to include in the autoscore calculation"""
  other_module_ids_to_autoscore_on: [ID]

  """ID of the parent custom module"""
  parent_custom_module_id: String

  """
  The position of the question (the lower the earlier the question is shown)
  """
  position: Float

  """
  Eventually will replace position, currently unused. The position of the question (the lower the earlier the question is shown)
  """
  position_integer: Int

  """
  Whether this question is required to be completed before the form it's in can be saved
  """
  required: Boolean

  """The sublabel (description) of the question"""
  sublabel: String
}

"""Payload for a CustomModuleCondition"""
input CustomModuleConditionInput {
  """If true, the condition will be deleted"""
  _destroy: Boolean

  """The ID of the CustomModule that will be shown if the condition is met"""
  conditional_custom_module_id: ID

  """The type of filter to apply to the CustomModuleCondition"""
  filter_type: String

  """The ID of the CustomModuleCondition"""
  id: ID

  """The value to filter by"""
  value_to_filter: String
}

"""Condition under which to show a custom module"""
type CustomModuleConditionType {
  """
  The ID of the custom module whose value determines whether to show or hide the custom module
  """
  conditional_custom_module_id: ID

  """The ID of the custom module that will be shown or hidden"""
  custom_module_id: ID

  """The type of filter"""
  filter_type: String

  """The unique identifier of the condition"""
  id: ID!

  """The value to check the filter against"""
  value_to_filter: String
}

"""A template for a form, that can then be filled out"""
type CustomModuleForm {
  """The date on which the template was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """The questions in the template"""
  custom_modules: [CustomModule!]!

  """
  Custom column used by API users. Used to relate our form objects with objects in third-party systems
  """
  external_id: String

  """
  Custom column used by API users. Used to relate our form objects with objects in third-party systems
  """
  external_id_type: String

  """All filled out forms for this template"""
  form_answer_groups: [FormAnswerGroup!]!

  """The form has matrix field"""
  has_matrix_field: Boolean

  """When true, the form has modules that the user has to fill out"""
  has_non_readonly_modules: Boolean

  """The unique identifier of the module form"""
  id: ID!

  """
  Whether the form contains only one custom_module with mod_type 'video' and was created as part of a program
  """
  is_video: Boolean

  """User who last updated this form"""
  last_updated_by_user: User

  """
  A serialized JSON string of metadata. Maximum character limit of 10,000.
  """
  metadata: String

  """The given name of the template"""
  name: String

  """
  Whether subsequent times filling out the template, will start with the template prefilled with the previous answers
  """
  prefill: Boolean

  """The date on which the template was updated"""
  updated_at: String!

  """Whether or not this form was uploaded by Healthie team member"""
  uploaded_by_healthie_team: Boolean!

  """Whether the template can be used to chart with"""
  use_for_charting: Boolean!

  """Whether the template was made for a program"""
  use_for_program: Boolean!

  """The owner of the template"""
  user: User
}

"""CustomModuleForm sorting enum"""
enum CustomModuleFormOrderKeys {
  NAME_ASC
  NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC

  """Sort by owner last name descending"""
  USER_LAST_NAME_DESC

  """Sort by owner last name ascending"""
  USER_LAST_NAME_ASC
  TYPE_ASC
  TYPE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
}

"""CustomSidebarOverride Inputs"""
input CustomNavItemInputs {
  """Append current user ID to Custom Navigation Sidebar Item"""
  append_current_user_id: Boolean

  """
  Icon of the image that will display on the Custom Navigation Sidebar Item
  """
  icon: String

  """If Custom Navigation Sidebar Item displays for Providers"""
  is_provider_side: Boolean!

  """Label of Custom Navigation Sidebar Item"""
  label: String!

  """Location of Custom Navigation Sidebar Items"""
  nav_section: String!

  """
  If the Custom Navigation Sidebar Item will open in an iframe within the Healthie UI
  """
  open_in_iframe: Boolean

  """Position number for setting a specific nav link order"""
  position: Int

  """If Custom Navigation Sidebar Item is restricted to a User Group"""
  restrict_to_user_group: Boolean

  """If Custom Navigation Sidebar Item is displayed"""
  show: Boolean!

  """
  The link to the custom icon that will be displayed on the Custom Navigation Sidebar Item
  """
  svg_url: String

  """If Custom Navigation Sidebar Item should open in new tab"""
  target: String

  """The link that the Custom Navigation Sidebar Item will direct to"""
  url: String

  """User Group ID that sees the Custom Navigation Sidebar Item"""
  user_group_id: String
}

"""A custom sidebar override"""
type CustomSidebarOverride {
  """The icon of the image that will be display on the sidebar"""
  icon: String

  """The unique identifier of the override"""
  id: ID!

  """The label of the sidebar item that will be shown or hidden"""
  label: String

  """
  If true, the sidebar item will be open in an iframe within the Healthie UI
  """
  open_in_iframe: Boolean

  """If true, the sidebar item will be displayed"""
  show: Boolean

  """The link to the custom icon that will be displayed on the sidebar"""
  svg_url: String

  """Where the link will open if clicked"""
  target: String

  """The link that the sidebar item will direct to"""
  url: String
}

"""The day range input"""
input DayRangeInputObjectType {
  """The days range"""
  days: [String]

  """The time range for every day"""
  time_range: String
}

"""
Each day range is a time range and the days of the week that are in that time range
"""
type DayRangeType {
  """The days of the week that are in this time range"""
  days: [String]

  """The time range that is in this time range"""
  time_range: String
}

"""A Dexcom Connection"""
type DexcomConnection {
  """The unique identifier of the connection"""
  id: ID!

  """The last time Dexcom was synced"""
  last_sync_date: String
}

"""Payload for a diagnosis"""
input DiagnosesInput {
  """If true, the diagnosis will be deleted upon saving"""
  _destroy: Boolean

  """Whether the diagnosis is active or not"""
  active: Boolean

  """Whether the diagnosis is the primary diagnosis"""
  primary: Boolean

  """The date of the end of the diagnosis"""
  end_date: String

  """The date of the first symptom"""
  first_symptom_date: String

  """The ID of the ICD code"""
  icd_code_id: ID

  """The ID of the diagnosis"""
  id: ID
}

"""A diagnosis"""
type Diagnosis {
  """Active diagnosis"""
  active: Boolean!

  """custom module id"""
  custom_module_id: ID

  """End date"""
  end_date: String

  """First symptom date"""
  first_symptom_date: String

  """icd code"""
  icd_code: IcdCode

  """icd code id"""
  icd_code_id: ID

  """icd codes cms1500s id"""
  icd_codes_cms1500s_id: ID

  """icd codes super bill id"""
  icd_codes_super_bill_id: ID

  """The unique identifier of the diagnosis"""
  id: ID!

  """Primary diagnosis"""
  primary: Boolean

  """Date diagnosis was last updated"""
  updated_at: String

  """Owner of this diagnosis"""
  user: User

  """user id"""
  user_id: ID
}

"""Payload for a dietitian"""
input DietitianInput {
  """The ID of the dietitian"""
  id: ID

  """The NPI of the dietitian"""
  npi: String

  """The other ID of the dietitian"""
  other_id: String

  """The other ID qualifier of the dietitian"""
  other_id_qualifier: String

  """The qualifications of the dietitian"""
  qualifications: String
}

"""Information on the direct message attachment"""
type DirectMessageAttachment {
  """The file name of the attachment"""
  attachment_name: String

  """The unique ID of the direct message attachment"""
  id: ID
}

"""A discount from stripe as object"""
type Discount {
  """Amount off in cents"""
  amount_off: Int

  """Annual discount in cents"""
  annual_discount: String

  """Duration of the discount"""
  duration: String

  """Duration in months"""
  duration_in_months: Int

  """The unique identifier of the discount"""
  id: String!

  """Monthly discount in cents"""
  monthly_discount: String

  """The name of the discount"""
  name: String

  """Percent off in cents"""
  percent_off: Int
}

"""
A document file that contains an attachment and information about the attachment
"""
type Document {
  """
  When true, the user cannot adjust settings for the document besides sharing.
  """
  can_only_share: Boolean

  """The date the document was made available to the given client"""
  created_at(
    """The custom ID of viewable user (default: current user)"""
    viewable_user_id: String
  ): String!

  """Pagination cursor"""
  cursor: Cursor!

  """The description of the document"""
  description: String

  """The display name of the document"""
  display_name: String

  """Include the file in new clients welcome email"""
  email_on_welcome: Boolean!

  """A URL to download the file, good for 10 seconds"""
  expiring_url: String

  """The extension of the document"""
  extension: String

  """The file type of the document"""
  file_content_type: String

  """
  The file extension in human-readable format e.g.: 'Video'/'Audio'/'Excel' etc
  """
  friendly_type: String

  """The unique idenitifer of the document"""
  id: ID!

  """Include the document within the private charts section"""
  include_in_charting: Boolean!

  """Notes on the document (not visible to the client)"""
  internal_notes: String

  """
  A serialized JSON string of metadata. Maximum character limit of 128,000. Only accessible by staff and providers
  """
  metadata: String

  """Instances of the document being viewed/opened"""
  opens: [DocumentViewing!]

  """Owner of this document"""
  owner: User

  """In the case of a private document, the user that this document is for"""
  rel_user: User

  """ID of the assigned client"""
  rel_user_id: ID

  """The document shared"""
  shared: Boolean

  """Share the file with new clients automatically"""
  shared_on_welcome: Boolean!

  """The number of user groups who the document is shared"""
  shared_user_groups_count: Int

  """
  The number of users who the document is directly shared with (not through groups)
  """
  shared_users_count: Int

  """Share with all members of the organization"""
  shared_with_dietitians: Boolean!

  """The date the document was updated"""
  updated_at: String!

  """The user groups who have access to this document"""
  user_groups: [UserGroup!]!

  """The users who have access to this document"""
  users: [User!]!
}

"""Document sorting enum"""
enum DocumentOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_DESC
  NAME_ASC
}

"""Information about a document being opened"""
type DocumentViewing {
  """Pagination cursor"""
  cursor: Cursor!

  """The ID of the document that was opened"""
  document_id: ID!

  """The unique identifier of the viewing"""
  id: ID!

  """The user who opened the document"""
  user: User

  """The ID of the user who opened the document"""
  user_id: ID!

  """When the document was opened"""
  viewed_at: String!
}

"""Dosage of a medication or prescription"""
type DosageType {
  """The unique identifier of the dosage"""
  id: ID!

  """The medication's national drug code"""
  ndc: String

  """The strength of the dosage"""
  strength: String!
}

"""
Only available to Internal Healthie Users -- Roles assigned to a given User
"""
type DoseSpot {
  """State of account being approved"""
  approved: Boolean!

  """User's Clinic ID"""
  clinic_id: String

  """User's Clinic Key"""
  clinic_key: String

  """Date the object was created"""
  created_at: String!

  """User ID associated with DoseSpot"""
  dosespot_user_id: String

  """The unique identifier of the type"""
  id: ID!

  """This user is a clinic admin in dosespot"""
  is_clinic_admin: Boolean

  """Number of notifications on dosespot the User has"""
  notification_count: String!

  """ID of the user prescribing the dosespot"""
  prescribing_dosespot_user_id: String

  """The dosespot status"""
  registration_status: Boolean

  """Date the object was last updated"""
  updated_at: String!

  """User ID associated with the dosespot object in Healthie"""
  user_id: String
}

"""draft of a conversation note"""
type Draft {
  """content of draft"""
  content: String

  """id of linked conversation membership"""
  conversation_membership_id: ID

  """The unique identifier of the draft"""
  id: ID!
}

"""Allergen information"""
type DrugAllergenType {
  """The brand name of the allergen"""
  brand_name: String!

  """The unique identifier of the allergen"""
  id: ID!

  """The name of the allergen"""
  name: String!

  """The type of allergen"""
  type: DrugAllergenTypeEnum!
}

"""DrugAllergen class enum"""
enum DrugAllergenTypeEnum {
  """A screenable ingredient"""
  INGREDIENT

  """A class of allergens"""
  CLASS
}

"""An allergy/sensitivity/preference for a client"""
type DsiComment {
  """The content of the comment"""
  content: String!

  """The unique identifier of the comment"""
  id: ID!

  """The type of intervention"""
  intervention_type: InterventionType!

  """The organization that the comment belongs to"""
  organization_id: ID!
}

"""A processed eligibility check"""
type EligibilityCheck {
  """The time the eligibility check was run"""
  created_at: ISO8601DateTime

  """The unique identifier of the check"""
  id: ID!

  """The policy associated with this check"""
  policy: Policy

  """The ID of the associated policy"""
  policy_id: ID!

  """A JSON object containing the eligibility details"""
  response: String

  """
  A basic HTML representation of the eligibility response (nil if errors exist)
  """
  response_as_html: String
}

"""Options for the service to run the eligibiliy check with"""
enum EligibilityCheckService {
  change_health
  claim_md
}

"""Autogenerated input type of EmbedForm"""
input EmbedFormInput {
  appt_type_id: ID
  form_id: ID!
  offering_id: ID
}

"""Autogenerated return type of EmbedForm."""
type EmbedFormPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""A step that embeds a widget"""
type EmbedWidgetStepType {
  """The unique identifier of the step"""
  id: String!

  """The title of the step"""
  title: String
}

"""Autogenerated input type of EnableMfa"""
input EnableMfaInput {
  enable: Boolean!
  id: ID!
}

"""Autogenerated return type of EnableMfa."""
type EnableMfaPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of EnableMixpanel"""
input EnableMixpanelInput {
  """The ID of the user"""
  id: ID!

  """Mixpanel Project Token"""
  project_token: String!
}

"""Autogenerated return type of EnableMixpanel."""
type EnableMixpanelPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of EnableZoomFeatures"""
input EnableZoomFeaturesInput {
  id: ID!

  """Zoom Inputs"""
  zoom_feature_params: ZoomFeatureInputs
}

"""Autogenerated return type of EnableZoomFeatures."""
type EnableZoomFeaturesPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""A post about a client, with different category options"""
type Entry {
  """User who added the entry"""
  added_by_user: User

  """
  the user who actually put in the entry (not always the user who the entry is about)
  """
  added_by_user_id: ID

  """The category of this entry"""
  category: String

  """All comments association with this entry."""
  comments: [Comment!]!

  """The time at which this entry was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """Default water intake for this entry user"""
  default_water_intake_for_entry_user: Int

  """The description for the entry"""
  description: String

  """
  A more granular 1-10 scale of how hungry the user thought they were after eating
  """
  ed_posthunger: String

  """
  A more granular 1-10 scale of how hungry the user thought they were after eating
  """
  ed_posthunger_string: String

  """
  A more granular 1-10 scale of how hungry the user thought they were before eating
  """
  ed_prehunger: String

  """
  A more granular 1-10 scale of how hungry the user thought they were before eating
  """
  ed_prehunger_string: String

  """The users emotions towards the meal"""
  emotions: String

  """The users emotions towards the meal"""
  emotions_string: String

  """
  If average of any type, value indicates amount of entries already included in average calculation
  """
  entries_in_average: Int

  """Third party external ID associated with this entry"""
  external_id: String

  """
  Third party associated with the external ID on this entry. One option currently supported is 'AppleHealth'
  """
  external_id_type: String

  """True if the entry has subentries"""
  has_subentries: Boolean

  """A hexadecimal value corresponding to the metric stat of a food entry"""
  healthiness_info_hex_value: String

  """
  A boolean to check if the entry should be hidden from the main client feed
  """
  hide_from_main_feed: Boolean!

  """The unique identifier of the entry"""
  id: ID!

  """The associated image of the entry"""
  image: Upload

  """The URL of the entry's associated image"""
  image_url: String

  """Meal entries of FoodEntry"""
  meals: [Meal!]

  """The value of the metric for the entry"""
  metric_stat: Float

  """Metric stat as a string"""
  metric_stat_string: String

  """The name for this entry"""
  name: String

  """Other symptom typed by the client"""
  other_symptom: String

  """How hungry the poster thinks they were before eating"""
  percieved_hungriness: Float

  """User who the entry is about"""
  poster: User

  """The water intake previously added"""
  previous_water_intake_stat: Int!

  """the users reflections towards the meal"""
  reflection: String

  """
  A name of third party source or full name of user who have created the entry
  """
  source: String

  """subentries of the Entry"""
  subentries: [Entry!]

  """Comma-separated list of symptom names"""
  symptom_names: String

  """Multiple symptoms ID selected by the client"""
  symptoms: String

  """A name of third party source which actually created the entry"""
  third_party_source: String

  """
  The type for this entry, options are - FoodEntry, WorkoutEntry, MirrorEntry, SleepEntry, NoteEntry, WaterIntakeEntry, PoopEntry', null: false
  """
  type: String

  """The last date and time that the entry was updated"""
  updated_at: String!

  """A check to see if the entry has been viewed or not"""
  viewed: Boolean!
}

"""Entry sorting enum"""
enum EntryOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  METRIC_STAT_ASC
  METRIC_STAT_DESC
  THIRD_PARTY_SOURCE_ASC
  THIRD_PARTY_SOURCE_DESC
  UNSORTED
}

"""Autogenerated input type of ExtendPaywall"""
input ExtendPaywallInput {
  extended_paywall_date: String!
  id: ID!
  force_extension: Boolean
}

"""Autogenerated return type of ExtendPaywall."""
type ExtendPaywallPayload {
  additional_info: String

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""An object containing info about the provider's exrernal calendar"""
type ExternalCalendar {
  """Send appointments to the external calendar"""
  add_to_calendar: Boolean

  """A list of potential calendars"""
  calendar_list: [String]

  """Email of external calendar"""
  email: String

  """The type of external calerndar"""
  external_type: String

  """Calendar has ran first sync"""
  has_ran_first_sync: Boolean

  """Calendar has refresh token"""
  has_refresh_token: Boolean

  """The unique identifier of the calendar"""
  id: ID!

  """Pull in appointments from the external calendar"""
  pull_from_calendar: Boolean

  """
  Calendar has pulled in location and note info otherwise it will contain 'Busy'
  """
  pull_in_event_details: Boolean

  """Selected calendars to pull in appointments from"""
  pulled_in_calendars: [String]

  """The resource name (sync partner assigned ID) for the sync"""
  resource_name: String
}

"""A family history condition record for a client"""
type FamilyHistoryCondition {
  """The unique identifier of the family history condition"""
  id: ID!

  """Enum field for family relationships"""
  relationships: [String!]

  """snomed term associated with the condition"""
  snomed_term: SnomedTerm
}

"""Attributes to change a fax dietitian"""
input FaxDietitianInput {
  """The custom identifier of the fax dietitian"""
  id: ID

  """The location of the fax dietitian"""
  location: FaxLocationInput

  """The phone number of the fax dietitian"""
  phone_number: String

  """The qualifications of the fax dietitian"""
  qualifications: String
}

"""An object containing info about the user' s fax line requests"""
type FaxLineRequest {
  """The area_code"""
  area_code: String

  """The file type of the bill"""
  bill: String

  """The city"""
  city: String

  """The date and time that the fax line request was created"""
  created_at: String!

  """The file type of the loa"""
  loa: String

  """The request type"""
  request_type: String

  """The state"""
  state: String
}

"""Attributes to change a fax location"""
input FaxLocationInput {
  """The city of the fax location"""
  city: String

  """The country of the fax location"""
  country: String

  """The custom identifier of the fax location"""
  id: ID

  """The first line of the fax location address"""
  line1: String

  """The second line of the fax location address"""
  line2: String

  """The state of the fax location"""
  state: String

  """The zip code of the fax location"""
  zip: String
}

"""An object containing details about what the client can and can't do"""
type FeatureToggle {
  """Activity level of the user"""
  activity_level: String

  """Allow clients to sync with Apple Health"""
  allow_apple_health_sync: Boolean!

  """Allow clients to sync with Clearstep"""
  allow_clearstep_sync: Boolean!

  """Allow send messages to community chat"""
  allow_community_chat: Boolean!

  """Allow clients to sync with Dexcom"""
  allow_dexcom_sync: Boolean

  """Allow send messages to direct chat"""
  allow_direct_chat: Boolean!

  """Allow clients to sync with Fitbit"""
  allow_fitbit_sync: Boolean!

  """Allow clients to sync with Google Fit"""
  allow_google_fit_sync: Boolean!

  """Allow clients to sync with Shapa"""
  allow_shapa_sync: Boolean!

  """Allow clients to sync with Withings"""
  allow_withings_sync: Boolean!

  """whether or not the eating disorder defaults are applied"""
  apply_eating_disorder_default: Boolean!

  """
  The status of whether the linked user can view and schedule appointments
  """
  can_schedule_appointments: Boolean!

  """Whether or not clients can track poop in their journal entries"""
  can_track_poop: Boolean!

  """Whether or not the client can track symptoms"""
  can_track_symptoms: Boolean!

  """Whether or not clients can track water intake in their journal entries"""
  can_track_water_intake: Boolean!

  """The status of whether the linked user can view care plan"""
  can_view_care_plan: Boolean!

  """The status of whether the linked user can view and upload documents"""
  can_view_documents: Boolean!

  """
  The status of whether the linked user can view and complete intake forms
  """
  can_view_forms: Boolean!

  """The status of whether the linked user can view and create goals"""
  can_view_goals: Boolean!

  """
  The status of whether the linked user can view and create journal entries
  """
  can_view_journal_entries: Boolean!

  """The status of whether the linked user can view and purchase packages"""
  can_view_packages: Boolean!

  """The status of whether the linked user can view and make payments"""
  can_view_payments: Boolean!

  """The status of whether the linked user can view and complete programs"""
  can_view_programs: Boolean!

  """The care plan associated with this feature toggle"""
  care_plan: CarePlan

  """The id of the care plan associated with this feature toggle"""
  care_plan_id: ID

  """The date and time the entry was done"""
  created_at: String!

  """Custom Metrics for this toggle"""
  custom_metrics: [CustomMetric!]

  """
  Default date range selector when provider opens date picker in metrics tab
  """
  date_range_preference: String!

  """Default water intake set by provider"""
  default_water_intake: String!

  """When true, it will not auto submit the CMS1500 to the clearing house"""
  do_not_auto_submit_cms1500: Boolean!

  """
  The frequency with which clients get email notifications about their goals
  """
  email_notification_frequency: String

  """Food categories"""
  food_categories: [String!]!

  """If true, user has at least one entry type to track"""
  has_any_entry_types: Boolean

  """CCDA is available if true"""
  has_ccda: Boolean

  """The unique identifier of the feature toggle"""
  id: ID

  """Food categories"""
  initial_custom_metric_overrides: [CustomMetricOverride!]

  """Default date range when provider opens date picker in journal tab"""
  last_journal_date_range_preference: String

  """Default from_date when provider opens date picker in journal tab"""
  last_journal_from_date: String

  """Default to_date when provider opens date picker in journal tab"""
  last_journal_to_date: String

  """Metric Graphs to show in line graph form"""
  line_graph_metric_categories(
    """The id of the user to get the line graph metric categories for"""
    user_id: ID
  ): [String]

  """Sleep Graphs to show in line graph form"""
  line_graph_sleep_categories(
    """The id of the user to get the line graph sleep categories for"""
    user_id: ID
  ): [String]

  """Metric categories based on users toggle features"""
  metric_categories(
    """The id of the user to get the metric categories for"""
    user_id: ID
  ): [String!]!

  """
  Metric category objects (including defaults) based on users toggle features
  """
  metric_category_objects(
    """Self-descriptive"""
    user_id: ID
  ): [CustomMetric!]

  """Mirror categories"""
  mirror_categories: [String!]!

  """
  The frequency with which clients get push notifications about their goals
  """
  push_notification_frequency: String

  """Metrics that should be on for this feature toggle"""
  returned_custom_metrics: [String!]!

  """Send unpaid invoice reminder"""
  send_unpaid_invoice_reminder: Boolean

  """The status of whether entries on graphs are seperated by the poster"""
  seperate_provider_metric_from_client: Boolean

  """The status of whether the provider can see the A1C of the client"""
  show_a1c_metric: Boolean

  """
  The status of whether the provider can view and track the client's body fat percentage
  """
  show_bf_percent_metric: Boolean

  """
  The status of whether the provider can view and track the client's blood pressure
  """
  show_blood_pressure_metric: Boolean

  """
  The status of whether the provider can see the blood sugar metrics of the client
  """
  show_blood_sugar_metric: Boolean

  """
  The status of whether the provider can see the calculated BMI of the client
  """
  show_bmi_graph: Boolean

  """
  The status of whether the provider can see the bmi-growth chart of the client
  """
  show_bmi_growth_chart: Boolean

  """
  The status of whether the provider can see the calculated BMR (using MFJ) of the client
  """
  show_bmr_metric: Boolean

  """
  The status of whether the provider can see the body temperature entries of the client
  """
  show_body_temperature_metric: Boolean

  """The status of whether the client can see A1C metrics of the client"""
  show_client_a1c_metric: Boolean

  """
  The status of whether the client can view and track the client's body fat percentage
  """
  show_client_bf_percent_metric: Boolean

  """
  The status of whether the client can view and track the client's blood pressure
  """
  show_client_blood_pressure_metric: Boolean

  """
  The status of whether the client can see the blood sugar metrics of the client
  """
  show_client_blood_sugar_metric: Boolean

  """
  The status of whether the client can see the calculated BMI of the client
  """
  show_client_bmi_graph: Boolean

  """
  The status of whether the client can see the bmi-growth chart of the client
  """
  show_client_bmi_growth_chart: Boolean

  """
  The status of whether the client can see the calculated BMR (using MFJ) of the client
  """
  show_client_bmr_metric: Boolean

  """
  The status of whether the client can see the body temperature entries of the client
  """
  show_client_body_temperature_metric: Boolean

  """
  The status of whether the client can see the calculated BMR (using HB) of the client
  """
  show_client_harris_benedict: Boolean

  """
  The status of whether the client can see the height-growth chart of the client
  """
  show_client_height_growth_chart: Boolean

  """
  The status of whether the client can see oxygen saturation metrics of the client
  """
  show_client_ox_sat_metric: Boolean

  """
  The status of whether the client can view and track the client's waist circumference
  """
  show_client_waist_circumference_metric: Boolean

  """
  The status of whether the client can see the weight-growth chart of the client
  """
  show_client_weight_growth_chart: Boolean

  """
  The status of whether the client can view and track the client's weight
  """
  show_client_weight_metric: Boolean

  """
  The status of whether the client is asked to track expanded (1-10) postmeal hunger level
  """
  show_ed_posthunger: Boolean

  """
  The status of whether the client is asked to track expanded (1-10) premeal hunger level
  """
  show_ed_prehunger: Boolean

  """The status of whether the client can post food entries"""
  show_food: Boolean

  """
  The status of whether the client is asked to track the category (meal or snack) of the food
  """
  show_food_category: Boolean

  """
  The status of whether the client is asked to track (1-10) emotion towards the food
  """
  show_food_emotion: Boolean

  """
  The status of whether the client is asked to post a (text) reflection towards the food
  """
  show_food_reflection: Boolean

  """
  The status of whether the provider can see the calculated BMR (using HB) of the client
  """
  show_harris_benedict: Boolean

  """
  The status of whether the client is asked to track perceived healthiness
  """
  show_healthiness: Boolean

  """
  The status of whether the provider can see the height graph of the client
  """
  show_height_graph: Boolean

  """
  The status of whether the provider can see the height-growth chart of the client
  """
  show_height_growth_chart: Boolean

  """The status of whether the client can post metric entries"""
  show_metric: Boolean

  """The status of whether the client can post selfie entries"""
  show_mirror: Boolean

  """
  The status of whether the client is asked to track normal (1-3) hunger level
  """
  show_normal_hunger: Boolean

  """The status of whether the client can post note entries"""
  show_note: Boolean

  """
  The status of whether the client is asked to track (1-10) emotion towards the note
  """
  show_note_emotion: Boolean

  """
  The status of whether the client can include macro and micro nutrients for the food they track
  """
  show_nutrients_tracking: Boolean

  """
  The status of whether the provider can see the oxygen saturation of the client
  """
  show_ox_sat_metric: Boolean

  """The status of whether the client can post sleep entries"""
  show_sleep: Boolean

  """
  The status of whether the provider can view and track the client's waist circumference
  """
  show_waist_circumference_metric: Boolean

  """
  The status of whether the provider can see the weight-growth chart of the client
  """
  show_weight_growth_chart: Boolean

  """
  The status of whether the provider can view and track the client's weight
  """
  show_weight_metric: Boolean

  """The status of whether the client can post workout entries"""
  show_workout: Boolean

  """Symptom options for symptom entry type"""
  symptom_options: [SymptomOption!]!

  """
  The status of whether the client uses the metric system (versus imperial)
  """
  use_metric_system: Boolean

  """Associated user"""
  user: User

  """The user group associated with this feature toggle"""
  user_group: UserGroup

  """The user group associated with this feature toggle"""
  user_group_id: ID

  """The user associated with this feature toggle"""
  user_id: ID

  """If true, the user has active_care_plan """
  uses_feature_toggle_from_care_plan: Boolean

  """
  When enabled, let's providers choose to have metrics that clients can view, but not enter
  """
  view_not_track: Boolean

  """Workout categories"""
  workout_categories: [String!]!
}

"""Information about field that didn’t pass validation"""
type FieldError {
  """Field name that caused these errors"""
  field: String

  """Validation message"""
  message: String!
}

"""A Fitbit Sync"""
type Fitbit {
  """The unique identifier of the fitbit"""
  id: ID!

  """Checking is active sync in current moment"""
  is_enabled: Boolean!

  """The last time the fitbit was synced"""
  last_sync_date: String
}

"""A folder that contains documents and other folders"""
type Folder {
  """
  When true, the user cannot adjust settings for the folder besides sharing.
  """
  can_only_share: Boolean

  """The date the folder was made available to the given user"""
  created_at(
    """Select by a specific user"""
    viewable_user_id: String
  ): String!

  """If true, the current user can edit the folder"""
  current_user_can_edit: Boolean

  """The description of the folder"""
  description: String

  """The number of documents within this folder"""
  documents_count: Int

  """Include the file in new clients welcome email"""
  email_on_welcome: Boolean!

  """The ID of the parent folder"""
  folder_id: String

  """The list of parent folders for this folder"""
  folder_path(
    """Select by a specific client"""
    client_id: String
  ): [Folder!]

  """The unique identifier of the folder"""
  id: ID!

  """The name of the folder"""
  name: String

  """Owner of this folder"""
  owner: User

  """The parent folder of this folder (nil if there is no parent)"""
  parent_folder: Folder

  """In the case of a private folder, the user that this folder is for"""
  rel_user: User

  """The ID of the connected user"""
  rel_user_id: String

  """The folder is shared"""
  shared: Boolean

  """Share the file with new clients automatically"""
  shared_on_welcome: Boolean!

  """The number of user groups who the folder is shared"""
  shared_user_groups_count: Int

  """
  The number of users who the folder is directly shared with (not through groups)
  """
  shared_users_count: Int

  """Share with all members of the organization"""
  shared_with_dietitians: Boolean!

  """The number of subfolders within this folder"""
  subfolders_count: Int

  """The folder has a reserved name generated by the system"""
  system_generated: Boolean!

  """The user groups who have access to this folder"""
  user_groups: [UserGroup!]!

  """The users who have access to this folder"""
  users(
    """Cursor to fetch results after"""
    after: Cursor
    should_paginate: Boolean = false
    page_size: Int = 100
    order_by: UserOrderKeys = LAST_NAME_ASC
  ): [User!]!

  """The number of users who have access to this folder"""
  users_count: Int!
}

"""Folder sorting enum"""
enum FolderOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_DESC
  NAME_ASC
}

"""A food object"""
type Food {
  """The name of the food creator"""
  creator_name: String

  """Pagination cursor"""
  cursor: Cursor!

  """first serving size of the food object"""
  default_serving_size: ServingSize

  """The name of the food to display"""
  display_name: String

  """The id of the food in the Edamam database"""
  edamam_import_id: String

  """Whether the food was imported from the FDC database"""
  fdc_import: Boolean!

  """The unique identifier of the food"""
  id: ID!

  """The name of the food"""
  name: String!

  """Nutrients of the food object"""
  nutrients: [FoodNutrient!]

  """Serving sizes of the food object"""
  serving_sizes: [ServingSize!]

  """The ID of the user who created the food"""
  user_id: String
}

"""A food item to be served"""
type FoodItem {
  """The food to be served"""
  food: Food

  """The unique identifier of the food item"""
  id: ID!

  """The modifier for the serving size"""
  modifier: Float

  """The serving size"""
  serving_size: ServingSize
}

"""A food nutrient item object"""
type FoodNutrient {
  """The category of the nutrient"""
  category: String

  """Whether the nutrient is imported from the FDC database"""
  fdc_import: Boolean!

  """The unique identifier of the food"""
  food_id: String

  """The unique identifier of the nutrient"""
  id: ID!

  """The name of the nutrient"""
  name: String

  """The unit of the nutrient"""
  nutrient_unit: String

  """The value of the nutrient"""
  nutrient_value: Float
}

"""An answer in a filled form"""
type FormAnswer {
  """The answer to the question"""
  answer: String

  """
  The ID of the custom module whose value determines whether to show or hide the custom module
  """
  conditional_custom_module_id: ID

  """The creation time of the form answer"""
  created_at: String!

  """The type of question that was filled out"""
  custom_module: CustomModule

  """The id of the question template"""
  custom_module_id: String

  """
  The answer to display (some conversions are made verse raw answer data)
  """
  displayed_answer: String

  """The type of filter"""
  filter_type: String

  """The filled form that this answer is a part of"""
  form_answer_group: FormAnswerGroup

  """The unique identifier of the answer"""
  id: ID!

  """The label of the question"""
  label: String

  """The time of the last update"""
  updated_at: ISO8601DateTime

  """The id of the user that the answered question is for"""
  user_id: String

  """The value to check the filter against"""
  value_to_filter: String
}

"""
A completed form, with metadata about the completion, and the saved answers
"""
type FormAnswerGroup {
  """The appointment the note is connected to"""
  appointment: Appointment

  """The autoscored sections for the filled form"""
  autoscored_sections: [AutoscoredSectionType!]!

  """The addendums added to the locked charting note"""
  charting_note_addendums: [ChartingNoteAddendumType!]

  """The CMS1500 created from the form answer group"""
  cms1500: Cms1500

  """The date on which the filled form was saved"""
  created_at: String!

  """
  The most recent generated summary. Null if no summary has been generated
  """
  current_summary: GeneratedSummary

  """Pagination cursor"""
  cursor: Cursor!

  """The form template that was filled out"""
  custom_module_form: CustomModuleForm

  """The date the form was deleted"""
  deleted_at: String

  """An external ID stored on the filled form or charting note"""
  external_id: String

  """The user who filled out the form"""
  filler: User

  """
  Whether the filled form has been saved by the user (verse a hidden draft)
  """
  finished: Boolean!

  """The history when a charting note was locked, unlocked or signed"""
  form_answer_group_audit_events: [FormAnswerGroupAuditEvent!]!

  """Signatures for the form"""
  form_answer_group_signings: [FormAnswerGroupSigning!]!

  """
  A list of connections between a form_answer_group and group appointment users
  """
  form_answer_group_users_connections: [FormAnswerGroupUserConnection!]

  """The visible answers for the filled form"""
  form_answers(
    """When true, all answers (even conditionally hidden ones) are returned."""
    is_for_editing: Boolean = false
  ): [FormAnswer!]!

  """when true, the note cannot be edited"""
  frozen: Boolean

  """All patients that have attended in the related group appointment"""
  group_appointment_attendees: [User!]

  """The unique identifier of the group"""
  id: ID!

  """
  A collection of individual charting notes related to the main group charting note
  """
  individual_client_notes(
    """Preferable sorting order"""
    order_by: IndividualClientNoteOrderKeys
  ): [IndividualClientType!]

  """
  Same as individual_client_notes but returns a specific instance for given user
  """
  individual_note(
    """The client's ID"""
    user_id: ID
  ): IndividualClientType

  """
  Indicates whether the answer group is related to group apppointment (charting note created for group appointment)
  """
  is_group_appt_note: Boolean

  """The date and time when the charting note was locked"""
  locked_at: String

  """The provider who have locked the charting note"""
  locked_by: User

  """
  A serialized JSON string of metadata. Maximum character limit of 128,000. Only accessible by staff and providers
  """
  metadata: String

  """The given name of the filled form"""
  name: String

  """
  If you have product recommendation alogrithim enabled, this will return a package containing the products recommended by the algorithim
  """
  offering_with_recommended_products: Offering

  """
  If you have product recommendation alogrithim enabled, this will return a package containing a URL to purchase the products recommended by the algorithim
  """
  packages_with_recommended_products_purchase_url: String @deprecated(reason: "Not used anywhere, will cause an error")

  """
  Whether current user or given user can add addendum to this `form_answer_group`
  """
  provider_can_add_addendum(
    """Given provider's id. Falls back to current user if not given"""
    provider_id: ID = null
  ): Boolean!

  """Whether current user or given user can lock this `form_answer_group`"""
  provider_can_lock(
    """Given provider's id. Falls back to current user if not given"""
    provider_id: ID = null
  ): Boolean!

  """Whether current user or given user can sign this `form_answer_group`"""
  provider_can_sign(
    """Given provider's id. Falls back to current user if not given"""
    provider_id: ID = null
  ): Boolean!

  """Whether current user or given user can unlock this `form_answer_group`"""
  provider_can_unlock(
    """Given provider's id. Falls back to current user if not given"""
    provider_id: ID = null
  ): Boolean!

  """The date that the note was actually created"""
  record_created_at: String

  """The last updated date for the filled form"""
  updated_at: String!

  """The user the form is about"""
  user: User

  """ID of the user"""
  user_id: String

  """The name of the signed stream to track changes in `form_answers`"""
  versioning_stream_name: String
}

"""Base class for types"""
type FormAnswerGroupAuditEvent {
  """Action type"""
  action: Action!

  """When the action was made"""
  committed_at: ISO8601DateTime!

  """Who made the action"""
  committed_by: User!
  created_at: ISO8601DateTime!
  description: String
  form_answer_group: FormAnswerGroup!
  id: ID!
  updated_at: ISO8601DateTime!
}

"""FormAnswerGroup sorting enum"""
enum FormAnswerGroupOrderKeys {
  RECORD_CREATED_AT_ASC
  RECORD_CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  UNSORTED
}

"""
An instance representing connection between a charting note(form_answer_group) and a user signing the note
"""
type FormAnswerGroupSigning {
  """The date and time the form was signed"""
  created_at: String!

  """The id of the form that was signed"""
  form_answer_group_id: String

  """The unique identifier of the signing"""
  id: ID!

  """A provider who signed the form"""
  user: User
}

"""
An instance representing connection between a group charting note(form_answer_group.appointment.is_group == true) and a user
"""
type FormAnswerGroupUserConnection {
  """The unique identifier of the connection"""
  id: ID!

  """The user associated with the connection"""
  user: User
}

"""Payload for an answer"""
input FormAnswerInput {
  """The answer"""
  answer: String

  """The ID of the conditional custom module"""
  conditional_custom_module_id: ID

  """The ID of the custom module"""
  custom_module_id: String

  """The type of filter"""
  filter_type: String

  """
  (CURRENTLY UNUSED) The mod_type (e.g question type) that is being answered.
  """
  mod_type: String

  """Unique ID for the answer"""
  id: ID

  """The label for the answer"""
  label: String

  """The ID of the user who created the answer"""
  user_id: String

  """The value to filter by"""
  value_to_filter: String
}

"""A form history object"""
type FormHistory {
  """Action of the form history object"""
  action: FormHistoryAction

  """Date/Time created"""
  created_at: String

  """The User who created form history object or dietitian of the patient"""
  creator: User

  """The unique identifier of the form history object"""
  id: ID!

  """The patient who owns the form history object"""
  patient: User

  """The title describing form history creation"""
  title: String
}

"""Form History action enum"""
enum FormHistoryAction {
  created
  edited
  opened
  completed
  skipped
}

"""Form History sourceable_type enum"""
enum FormHistorySourceable {
  RequestedFormCompletion
  OnboardingItem
}

"""Forms status filter enum"""
enum FormStatus {
  incomplete
  completed
  not_started
}

"""Forms form type filter enum"""
enum FormType {
  requested_forms
  recurring_forms
  intake_forms
}

"""types of forms that can be requested"""
type FormTypesToRequest {
  """The unique identifier of the object"""
  id: String!

  """
  Whether the form contains only one custom_module with mod_type 'video' and was created as part of a program
  """
  is_video: Boolean

  """Type of form to request"""
  item_type: String

  """The given name of the template"""
  name: String
}

"""Fullscript Practitioner"""
type FullscriptPractitionerType {
  """Email address of the practitioner"""
  email: String

  """External reference of the practitioner"""
  external_ref: String

  """First name of the practitioner"""
  first_name: String

  """The unique identifier of the practitioner"""
  id: String!

  """Last name of the practitioner"""
  last_name: String

  """The ID of the practitioner type"""
  practitioner_type_id: String
}

"""The type of practitioners"""
type FullscriptPractitionerTypeType {
  """The code for the practitioner type"""
  code: String

  """The description of the practitioner type"""
  description: String

  """The unique identifier of the practitioner type"""
  id: String!
}

"""Fullscript Product Type"""
type FullscriptProductType {
  """Additional Info"""
  additional_info: String

  """Dosage of the product"""
  dosage: String

  """The unique identifier of the product fullscript"""
  id: String!

  """Ordered"""
  ordered: String

  """The name of the product"""
  product_name: String
}

"""Fullscript Treatment Plan"""
type FullscriptTreatmentPlanType {
  """Date the treatment plan was activated"""
  activation_date: String

  """The unique identifier of the plan"""
  id: String!

  """Number of times the plan has been ordered"""
  ordered_count: Int

  """Personal message from the practitioner"""
  personal_message: String

  """The name of the practitioner"""
  practitioner_name: String

  """The products recommended in the plan"""
  recommendations: [FullscriptProductType!]
}

"""FunctionalStatus object"""
type FunctionalStatus {
  """Functional condition"""
  functional_condition: String

  """The unique identifier of the functional status"""
  id: ID!

  """The start date of the functional status"""
  start_date: String

  """The ID of the user who created the functional status"""
  user_id: ID!
}

"""A generated summary for an associated Healthie object"""
type GeneratedSummary {
  """The datetime the summary was generated"""
  created_at: ISO8601DateTime!

  """The unique identifier of the group"""
  id: ID!

  """
  A summary (most often new-line separated bullet points) of the associated object
  """
  summary: String
}

"""Payload for a gift"""
input GiftInput {
  """The email of the giver"""
  giver_email: String

  """The name of the giver"""
  giver_name: String

  """The ID of the gift"""
  id: ID

  """The message assigned to the gift"""
  message: String
}

"""a goal"""
type Goal {
  """
  Completion Percentage of a goal for a given date range. start_range/end_range should be of the form: 'yyyy-mm-dd'
  """
  completion_percentage_for_range(
    """The end of the date range."""
    end_range: String

    """The start of the date range."""
    start_range: String!
  ): Int

  """The rate at which this goal is completed"""
  completion_rate: String @deprecated(reason: "should use completion_percentage_for_range")

  """The creation timestamp of the goal"""
  created_at: String!

  """created user of goal"""
  created_user_id: ID

  """Pagination cursor"""
  cursor: Cursor!

  """description of goal"""
  description: String

  """due date of goal"""
  due_date: String

  """All goal histories associated with this goal histories."""
  goal_histories: [GoalHistory!]!

  """The unique identifier of the goal"""
  id: ID!

  """
  If true, the goal is complete for the given day. date should be of the form: 'yyyy-mm-dd'
  """
  is_completed_for_date(
    """The date to check if the goal is completed at that time."""
    date: String!
  ): Boolean

  """if true, the goal is currently active"""
  is_current: Boolean @deprecated(reason: "should use is_completed_for_date field to determine if a goal is completed for a given day")

  """if true, a template has been created based off this goal"""
  is_used_as_template: Boolean

  """name of goal"""
  name: String

  """parent id"""
  parent_id: ID

  """The rate at which the parent goal has subgoals completed"""
  parent_subgoal_completion_rate: String

  """Reminder object for a given goal"""
  reminder: Reminder

  """frequency of goal"""
  repeat: String

  """The id of the template used to make this goal"""
  source_template_id: String

  """start date of goal"""
  start_on: String!

  """Streak info for goal"""
  streak_info(
    """The end of the date range."""
    end_range: String

    """The start of the date range."""
    start_range: String!
  ): [GoalStreakInfo!]

  """The rate at which a subgoal is completed"""
  subgoal_completion_rate: String @deprecated(reason: "should use completion_percentage_for_range")

  """Subgoals for a given goal"""
  subgoals: [Goal!]

  """count of subgoals"""
  subgoals_count: String

  """Title hyperlink. Opens when the title is clicked on."""
  title_link: String

  """Owner of this goal"""
  user: User

  """user id of goal"""
  user_id: ID
}

"""Goal data"""
type GoalDataType {
  """All goals frequency count"""
  all_goals_frequency_count: Int

  """All goals status count"""
  all_goals_status_count: Int

  """All time goals count"""
  all_time_goals_count: Int

  """Completed goals count"""
  completed_goals_count: Int

  """Daily goals count"""
  daily_goals_count: Int

  """Goal list"""
  goals: [Goal!]

  """Goals count"""
  goals_count: Int

  """Goals overall completion rate info"""
  goals_overall_completion_rate_info: GoalOverallCompletionRateInfo

  """Goals streak count"""
  goals_streak_count: Int

  """Not completed goals count"""
  not_completed_goals_count: Int

  """One time goals count"""
  one_time_goals_count: Int

  """Weekly goals count"""
  weekly_goals_count: Int
}

"""a goal history"""
type GoalHistory {
  """The date the goal is marked completed"""
  completed_on: String!

  """The completion timestamp of the goal"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """The description of the goal"""
  description: String

  """goal that was completed"""
  goal: Goal

  """goal id of goal history"""
  goal_id: ID

  """The unique identifier of the history"""
  id: ID!

  """If true, the goal is a subgoal"""
  is_subgoal: Boolean

  """The name of the goal"""
  name: String

  """The repeat frequency of the goal"""
  repeat: String

  """client of this goal"""
  user: User

  """user id of goal history"""
  user_id: ID
}

"""
a goal instance. gives a snapshot of a goal over a specific interval(start_range and end_range )
"""
type GoalInstance {
  """Pagination cursor"""
  cursor: Cursor!

  """The date the interval starts for this goal instance"""
  end_range: String

  """the relevant goal"""
  goal: Goal

  """If true, the goal was completed in between the start and end range"""
  is_completed_for_interval: Boolean

  """The date the interval starts for this goal instance"""
  start_range: String
}

"""Goal sorting enum"""
enum GoalOrderKeys {
  START_DATE_ASC
  START_DATE_DESC
  FREQUENCY_ASC
  FREQUENCY_DESC
  NAME_ASC
  NAME_DESC
  STATUS_ASC
  STATUS_DESC
  DUE_DATE_ASC
  DUE_DATE_DESC

  """Order by due date and start date descending"""
  DUE_DATE_START_DATE_DESC
}

"""Related info for a collection of goals overall completion rate"""
type GoalOverallCompletionRateInfo {
  """The number of times the goals were completed"""
  actual_times_completed: Int

  """The actual percentage of the completion rate"""
  percent: Int

  """The total number of times the goals could have been completed"""
  possible_times_completed: Int
}

"""Related info of a specific goal's streak"""
type GoalStreakInfo {
  """The length of intervals (ie: days, weeks, etc) this streak lasted"""
  count: Int

  """The day this streak ended"""
  end_date: String

  """The day this streak began"""
  start_date: String
}

"""a goal template"""
type GoalTemplate {
  """description of template from associated goal"""
  description: String

  """id of the goal this template was based on"""
  goal_id: String

  """id of the the relevant goal template"""
  id: String!

  """is_healthie_default of the the relevant goal template"""
  is_healthie_default: Boolean!

  """name of template from associated goal"""
  name: String

  """frequency of template from associated goal"""
  repeat: String!

  """Subgoal templates for a given template"""
  subgoal_templates: [GoalTemplate!]

  """Title hyperlink. Opens when the title is clicked on."""
  title_link: String

  """user associated with this template"""
  user: User

  """user who owns this goal template"""
  user_id: String
}

"""A GoogleFit Sync"""
type GoogleFit {
  """The unique identifier of the Google fit"""
  id: ID!

  """The last time the apple health was synced"""
  last_sync_date: String
}

"""A connection between a user and a care plan"""
type GroupCarePlanUserConnection {
  """The care plan active status"""
  active: Boolean!

  """The ID of the care plan"""
  care_plan_id: ID

  """The unique identifier of the join"""
  id: ID!

  """The ID of the user_group"""
  user_group_id: ID

  """The ID of the client"""
  user_id: ID
}

"""Health Assessment contains in-depth help info and goals for a client"""
type HealthAssessment {
  """The body report for the client"""
  body_report: BodyReport

  """The date the health assessment was created"""
  created_at: String!

  """gen"""
  gender: String

  """The health report for the client"""
  health_report: HealthReport

  """The height of the client"""
  height: String

  """The unique identifier of the health accessment"""
  id: ID!

  """Is the client diabetic?"""
  is_diabetic: Boolean

  """The race of the client"""
  race: String

  """The recommendation for the client"""
  recommendation: HealthAssessmentRecommendation

  """The title of the health assessment"""
  title: String
}

"""
Health Assessment Recommendation is a sub category of a HealthAssessment
"""
type HealthAssessmentRecommendation {
  """cal_deficit of user"""
  cal_deficit: String

  """carbs_cal of user"""
  carbs_cal: String

  """carbs_grams of user"""
  carbs_grams: String

  """Carbs percent"""
  carbs_percent: String

  """current_body_fat of user"""
  current_body_fat: String

  """current_body_weight of user"""
  current_body_weight: String

  """current_daily_caloric_intake of user"""
  current_daily_caloric_intake: String

  """current_time_to_goal of user"""
  current_time_to_goal: String

  """fat_cal of user"""
  fat_cal: String

  """fat_grams of user"""
  fat_grams: String

  """Fat Percent"""
  fat_percent: String

  """high_end_caloric_intake of user"""
  high_end_caloric_intake: String

  """Ideal body fat of user"""
  ideal_body_fat: String

  """ideal_body_weight of user"""
  ideal_body_weight: String

  """ideal_daily_caloric_intake of user"""
  ideal_daily_caloric_intake: String

  """ideal_time_to_goal of user"""
  ideal_time_to_goal: String

  """low_end_caloric_intake of user"""
  low_end_caloric_intake: String

  """protein_cal of user"""
  protein_cal: String

  """protein_grams of user"""
  protein_grams: String

  """Protei Percent"""
  protein_percent: String
}

"""Autogenerated input type of HealthAssessmentServiceSignup"""
input HealthAssessmentServiceSignupInput {
  device_token: String
  device_type: String
  email: String
  user_id: ID
}

"""Autogenerated return type of HealthAssessmentServiceSignup."""
type HealthAssessmentServiceSignupPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  deeplink_url: String

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""HealthConcern object"""
type HealthConcern {
  """The code for the health concern"""
  code: String

  """The description of the health concern"""
  description: String

  """The display name of the health concern"""
  display_name: String

  """The effective time of the health concern"""
  effective_time: String

  """The unique identifier of the """
  id: ID!
}

"""Health Report is a sub category of a HealthAssessment"""
type HealthReport {
  """cancer of user"""
  cancer: String

  """diabetes of user"""
  diabetes: String

  """The fit score of the user"""
  fit_score: String

  """lean_body_mass of user"""
  heart: String

  """respiratory of user"""
  respiratory: String

  """stroke of user"""
  stroke: String
}

"""Human object controls authentication for users"""
type Human {
  """The current user"""
  current_user: User

  """The Id of the human's currently selected user"""
  current_user_id: ID

  """The email of the human"""
  email: String

  """The unique identifier of the human"""
  id: ID!

  """last date the human signed in"""
  last_sign_in_at: String
}

"""An ISO 8601-encoded datetime"""
scalar ISO8601DateTime

"""An ISO 8601-encoded duration"""
scalar ISO8601Duration

"""icd code"""
type IcdCode {
  """The category of the ICD code"""
  category: String

  """The ICD code"""
  code: String

  """The date the ICD code was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """The description of the ICD code"""
  description: String

  """A display name - for use in labels"""
  display_name: String

  """The unique identifier of the ICD code"""
  id: ID!

  """Whether the ICD code is marked as favorite"""
  is_favorite(
    """The known value of is_favorite (from the query argument)"""
    known_value: Boolean
  ): Boolean

  """The date the ICD code was updated"""
  updated_at: String!
}

"""ICD Code sorting enum"""
enum IcdCodeOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
  CODE_ASC
  CODE_DESC
  FAVORITES_ASC
  FAVORITES_DESC
}

"""icd codes cms 1500s join table"""
type IcdCodesCms1500 {
  """Active IcdCodesCms1500"""
  active: Boolean

  """cms 1500 id"""
  cms1500_id: ID

  """date created"""
  created_at: String

  """display name"""
  display_name: String

  """End date"""
  end_date: String

  """ICD codes in use for this claim"""
  first_symptom_date: String

  """ICD code"""
  icd_code: IcdCode

  """icd code id"""
  icd_code_id: ID @deprecated(reason: "Use icd_code instead")

  """The unique identifier of the CMS 1500 ICD code"""
  id: ID

  """date updated"""
  updated_at: String
}

"""Payload for ICD code on CMS 1500 form"""
input IcdCodesCms1500Input {
  """If true, the ICD code will be deleted from the join table"""
  _destroy: Boolean

  """Whether the ICD code is active"""
  active: Boolean

  """The end date of the ICD code"""
  end_date: String

  """The first symptom date of the ICD code"""
  first_symptom_date: String

  """The ID of the ICD code"""
  icd_code_id: String

  """The ID of the ICD code join table"""
  id: ID
}

"""icd codes individual client note join table"""
type IcdCodesIndividualClientNote {
  """icd code"""
  icd_code: IcdCode

  """Attached ICD Code ID"""
  icd_code_id: ID

  """The unique identifier of the CMS 1500 ICD code"""
  id: ID

  """Position of the diagnosis"""
  position: Int
}

"""Payload for an ICD Code connection to an individual client note"""
input IcdCodesIndividualClientNoteInput {
  """The ID of the ICD Code connection to the individual client note"""
  id: ID

  """The ID of the ICD Code"""
  icd_code_id: ID

  """
  The position of this diagnosis, in relation to other diagnoses for this appointment inclusion.
  """
  position: Int

  """
  If true, the ICD Code connection to the individual client note will be deleted
  """
  _destroy: Boolean
}

"""icd codes policies join table"""
type IcdCodesPolicy {
  """The ICD code"""
  code: String

  """The date when the join was created"""
  created_at: String

  """The description of the join"""
  description: String

  """The ICD code object"""
  icd_code: IcdCode

  """The ID of the joined ICD code"""
  icd_code_id: ID

  """The unique identifier of the join between ICD code and policy."""
  id: ID

  """The ID of the joined policy"""
  policy_id: ID

  """The date updated"""
  updated_at: String
}

"""Payload for assigning a policy to an ICD code"""
input IcdCodesPolicyInput {
  """If true, the join table record will be deleted"""
  _destroy: Boolean

  """The ID of the ICD code"""
  icd_code_id: String

  """The ID of the join table record"""
  id: ID

  """The ID of the policy"""
  policy_id: String
}

"""icd codes super bills join table"""
type IcdCodesSuperBill {
  """The date the join was created"""
  created_at: String

  """The joined ICD code object"""
  icd_code: IcdCode

  """The ID of the ICD code"""
  icd_code_id: ID

  """The unique identifier of the join"""
  id: ID!

  """The ID of the super bill"""
  super_bill_id: ID

  """The last date when the join was updated"""
  updated_at: String
}

"""Payload for an ICD code super bill"""
input IcdCodesSuperBillInput {
  """If true, the ICD code super bill will be deleted"""
  _destroy: Boolean

  """The ID of the ICD code"""
  icd_code_id: String

  """The ID of the ICD code super bill"""
  id: ID
}

"""User immunization"""
type Immunization {
  """Additional notes"""
  additional_notes: String

  """The cvx_code"""
  cvx_code: Int!

  """The unique identifier of the type"""
  id: ID!

  """Time when the immunization was received"""
  received_at: String!

  """The immunization status"""
  status: String!

  """The identifier of the user"""
  user_id: ID!

  """The description of the code"""
  vaccine_name: String!
}

"""An implantable device"""
type ImplantableDevice {
  """Brand name of the implantable device."""
  brand_name: String

  """Name of the company that manufactures the implantable device."""
  company_name: String

  """
  A string representation of the date/time when the device record was created in the database.
  """
  created_at: String

  """A unique identifier assigned to the device."""
  device_id: String

  """The agency that issued the device identifier."""
  device_id_issuing_agency: String

  """
  Dun & Bradstreet number (DUNS number) is a unique nine-digit identifier for businesses.
  """
  duns_number: String

  """
  Global Medical Device Nomenclature (GMDN) terms, a system of internationally agreed generic descriptors used to identify all medical device products.
  """
  gmdn_terms: String

  """The unique identifier of the implantable device type"""
  id: ID!

  """Whether the device contains natural rubber latex or not."""
  labeled_contains_nrl: String

  """
  Status of the device's safety in an MRI environment (e.g., safe, conditional, unsafe).
  """
  mri_safety_status: String

  """Key of the device's public record."""
  public_device_record_key: String

  """
  Date when the public version of the device record was created or updated.
  """
  public_version_date: String

  """Version number of the public device record."""
  public_version_number: String

  """
  Status of the public version of the device record (e.g., active, retired).
  """
  public_version_status: String

  """
  A string representation of the date/time when the device record was last updated in the database.
  """
  updated_at: String

  """Version or model number of the device."""
  version_model_number: String
}

"""An Implantable Device User """
type ImplantableDeviceUser {
  """
  A boolean value representing if the Implantable Device is currently active.
  """
  active: Boolean

  """Unique identifier for the Implantable Device User connection record."""
  id: ID

  """Details of the Implantable Device."""
  implantable_device: ImplantableDevice

  """Unique identifier for the associated Implantable Device record."""
  implantable_device_id: ID

  """User provided name for the Implantable Device."""
  name: String

  """Recorded UDI for this associated Implantable Device User record."""
  udi: String

  """
  User associated with the Implantable Device, including all User details.
  """
  user: User

  """Unique identifier for the associated User record."""
  user_id: ID
}

"""An object containing info about the import data request"""
type ImportDataRequest {
  """The file type of import"""
  clients_template: String

  """The date and time that the import data request was created"""
  created_at: String!

  """The file name"""
  display_name: String

  """The file extension"""
  extension: String

  """The optional comment of import"""
  optional_comment: String

  """The request type"""
  request_type: String!
}

"""Payload for an individual client note"""
input IndividualClientNoteInput {
  """The content of the individual client note"""
  content: String

  """The ID of the individual client note"""
  id: ID

  """
  The client's attendance status. This gets applied to the AppointmentInclusion object
  """
  attended: Boolean

  """Diagnoses connected to the individual client attendance"""
  icd_codes_individual_client_notes_attributes: [IcdCodesIndividualClientNoteInput]

  """The datetime (ISO 8601) that the attendee joined the appointment"""
  join_time: String

  """The datetime (ISO 8601) that the attendee left the appointment"""
  leave_time: String

  """The ID of the user who created the individual client note"""
  user_id: ID
}

"""Individual client note sorting enum"""
enum IndividualClientNoteOrderKeys {
  ATTENDED_DESC
  CREATED_AT_DESC
}

"""Individual client note sorting enum"""
enum IndividualClientNoteSorting {
  ATTENDED_DESC @deprecated(reason: "Use `IndividualClientNoteOrderKeys` and `order_by` instead")
  CREATED_AT_DESC @deprecated(reason: "Use `IndividualClientNoteOrderKeys` and `order_by` instead")
}

"""
An object containing an individual note for certain patient associated with group charting note
"""
type IndividualClientType {
  """The ID of related appointment_inclusion"""
  appointment_inclusion_id: ID

  """True if user has attended the appointment"""
  attended: Boolean

  """The content of the note"""
  content: String

  """Diagnoses connected to the individual client attendance"""
  icd_codes_individual_client_notes: [IcdCodesIndividualClientNote!]

  """The unique identifier of the note"""
  id: ID!

  """
  The datetime that the attendee joined the appointment (comes from the related appointment inclusion)
  """
  join_time: String

  """
  The datetime that the attendee left the appointment (comes from the related appointment inclusion)
  """
  leave_time: String

  """The time of the last update"""
  updated_at: ISO8601DateTime

  """Associated patient"""
  user: User
}

"""
An object containing information about the chart for an insurance authorization type
"""
type InsuranceAuthorizationChartType {
  """The title of the earliest date value of the chart"""
  earliest_date_title: String

  """The value of the earliest date value of the chart"""
  earliest_date_value: String

  """The title of the latest date value of the chart"""
  latest_date_title: String

  """The value of the latest date value of the chart"""
  latest_date_value: String

  """The percentage width of the left section of the chart"""
  left_section_width: String

  """The title of the middle date value of the chart"""
  middle_date_title: String

  """The value of the middle date value of the chart"""
  middle_date_value: String

  """The percentage width of the right section of the chart"""
  right_section_width: String
}

"""Payload for an insurance authorization"""
input InsuranceAuthorizationInput {
  """The authorization number"""
  authorization_number: String

  """The end date of the authorization"""
  end_on: String

  """The ID of the insurance authorization"""
  id: ID

  """The start date of the authorization"""
  start_on: String

  """The unit type"""
  unit_type: String

  """The number of authorized units"""
  units_authorized: String

  """The unit limit per visit"""
  units_limit_per_visit: String

  """The number of used units"""
  units_used: String

  """The number of authorized visits"""
  visits_authorized: String

  """The number of used visits"""
  visits_used: String
}

"""An insurance authorization"""
type InsuranceAuthorizationType {
  """The authorization number"""
  authorization_number: String

  """Chart info for the insurance authorization"""
  chart_info: InsuranceAuthorizationChartType

  """The day that visits authorized by the insurance company have no effect"""
  end_on: String

  """The unique identifier of the authorization"""
  id: ID!

  """The day that visits authorized by the insurance company take effect"""
  start_on: String

  """The amount of units left"""
  unit_type: String

  """The amount of units authorized by the insurance company"""
  units_authorized: String

  """The amount of units left"""
  units_left: String

  """Most units/hours allowed per visit"""
  units_limit_per_visit: String

  """The amount of units used by the client"""
  units_used: String

  """Most recent date authorization was updated"""
  updated_at: String

  """The ID of the user for whom the authorization was created"""
  user_id: ID

  """The amount of units authorized by the insurance company"""
  visits_authorized: String

  """The amount of units left"""
  visits_left: String

  """The amount of units used by the client"""
  visits_used: String
}

"""An Insurance Plan"""
type InsurancePlan {
  """
  The Eligibility Payer ID for eligibility requests in Change that this maps to
  """
  change_healthcare_eligibility_payer_id: String

  """The Payer ID for claims requests in Change that this maps to"""
  change_healthcare_payer_id: String

  """Pagination cursor"""
  cursor: Cursor!

  """
  Location of the first policy associated to the current user and insurance plan
  """
  default_payer_location(
    """Array of plan ids"""
    ids: String
  ): Location

  """The unique identifier of the plan"""
  id: ID!

  """Insurance Plan marked as accepted"""
  is_accepted(
    """The known value of is_accepted (from the query argument)"""
    known_value: Boolean
  ): Boolean

  """A combined string to use for labels"""
  name_and_id: String

  """The Payer ID of the insurance plan"""
  payer_id: String

  """The name of the insurance plan"""
  payer_name: String

  """Owner of this insurance plan"""
  user: User @deprecated(reason: "Insurance Plans do not have an associated user")
}

"""Payload for an insurance plan"""
input InsurancePlanInput {
  """The ID of the insurance plan"""
  id: String

  """The name of the payer"""
  payer_name: String
}

"""InsurancePlan sorting enum"""
enum InsurancePlanOrderKeys {
  ACCEPTED
  PAYER_NAME_ASC
}

"""The intake flow item"""
type IntakeFlowItem {
  """Attached object"""
  attached_object_edit_url: String

  """The completed onboarding item for the given user id (from args)"""
  completed_onboarding_item: CompletedOnboardingItem

  """The form to fill out"""
  custom_module_form: CustomModuleForm

  """The relevant date to show"""
  date_to_show: String

  """The display name"""
  display_name: String

  """
  The id of the filled form that completes the request. Only present if form_type is RequestedForm
  """
  form_answer_group_id: String

  """Form type"""
  form_type: String

  """The unique idenitifier of the item"""
  id: ID!

  """Return the ID of the incomplete form"""
  incomplete_form_id: String

  """The type of item"""
  item_type: String

  """The onboarding item that was completed"""
  onboarding_item: OnboardingItem

  """Recurring form related to the request"""
  recurring_form: RecurringForm

  """The intake flow item request details"""
  request_info: IntakeFlowItemRequestInfo

  """Skipped"""
  skipped: Boolean

  """Form status"""
  status: String

  """Tab type"""
  tab_type: String

  """View url"""
  view_url: String
}

"""The intake flow item request details"""
type IntakeFlowItemRequestInfo {
  """Completion date of the form"""
  complete_date: String

  """User who completed the form"""
  completed_by: User

  """Info how client received the form"""
  details: String

  """Requested / Auto-Requested"""
  label: String

  """Request date of the form"""
  request_date: String

  """User who requested the form"""
  requested_by: User
}

"""IntakeFlow sorting enum"""
enum IntakeFlowOrderKeys {
  DATE_ASC
  DATE_DESC
  NAME_ASC
  NAME_DESC
  STATUS_ASC
  STATUS_DESC
  TYPE_ASC
  TYPE_DESC
  REQUEST_DATE_ASC
  REQUEST_DATE_DESC
  COMPLETE_DATE_ASC
  COMPLETE_DATE_DESC
}

"""Intake Flow"""
type IntakeFlowType {
  """All forms in the intake flow"""
  all_forms: [IntakeFlowItem!]

  """Completed and skipped forms in the intake flow"""
  completed_skipped: [IntakeFlowItem!]

  """Forms in the intake flow"""
  forms: [IntakeFlowItem!]

  """Intake flows"""
  intake_flows: [IntakeFlowItem!]

  """Not started and incomplete forms in the intake flow"""
  not_started_incomplete: [IntakeFlowItem!]

  """Requested forms in the intake flow"""
  requested: [IntakeFlowItem!]
}

"""Integration Category"""
type IntegrationCategoryType {
  """The description of the integration category"""
  description: String

  """The unique identifier of the category"""
  id: ID!

  """The name of the integration category"""
  name: String

  """The list of category options"""
  options: [IntegrationOptionType!]
}

"""The option of an integration"""
type IntegrationOptionType {
  """The name of the status when the option is disabled"""
  disabled_status_name: String

  """The label of the button to enable the option"""
  enable_button_label: String

  """The url of the button to enable the option"""
  enable_button_url: String

  """The name of the status when the option is enabled"""
  enabled_status_name: String

  """List of connected members"""
  erx_connected_members: [String!]

  """The unique identifier of the option"""
  id: ID!

  """The unique identifier of the category the option belongs to"""
  integration_category_id: ID

  """Whether the option is active"""
  is_active: Boolean

  """Whether the option is pending"""
  is_pending: Boolean

  """The long description of the option"""
  long_description: String

  """The name of the option"""
  name: String

  """The short description of the option"""
  short_description: String

  """The type of the option"""
  type: String
}

"""The type of intervention for a DSI comment"""
enum InterventionType {
  GENDER_MISMATCHED_DIAGNOSIS
  INCOMPATIBLE_DIABETES_DIAGNOSIS
  UDI_NOT_UNIQUE
  BREAST_CANCER_PROCEDURE_RECOMMENDATION
  ALLERGY_DRUG_INTERACTIONS
  LAB_BASED_ASSESSMENTS
  DRUG_DRUG_INTERACTIONS
  VITALS_OUTSIDE_OF_RANGE
}

"""Represents untyped JSON"""
scalar JSON

"""Options for lab filters"""
type LabFiltersDataType {
  """The list of the data clients"""
  clients: [User!]

  """The list of the labs"""
  labs: [String]

  """The list of the normalized statuses"""
  normalized_statuses: [String]

  """The list of the data providers"""
  providers: [User!]

  """The list of the statuses"""
  statuses: [String]
}

"""A lab observation request"""
type LabObservationRequest {
  """The unique identifier of the request"""
  id: ID!

  """The name of the lab analyte"""
  lab_analyte: String

  """Lab observation results for lab request"""
  lab_observation_results: [LabObservationResult]!
}

"""Payload for a client portal setting"""
input LabObservationRequestInput {
  """
  The substance being measured and test code. e.g 005009^CBC With Differential/Platelet^RN
  """
  lab_analyte: String

  """the analyte result"""
  lab_observation_result: LabObservationResultInput
}

"""A lab observation result"""
type LabObservationResult {
  """The flag of abnormality in the observation"""
  abnormal_flag: String

  """The unique identifier of the result"""
  id: ID!

  """The notes of the lab observation"""
  notes: String

  """The qualitative result of the lab observation"""
  qualitative_result: String

  """The quantitative result of the lab observation"""
  quantitative_result: String

  """The reference range of the lab observation"""
  reference_range: String

  """The units of the lab observation measurement"""
  units: String
}

"""Payload for a client portal setting"""
input LabObservationResultInput {
  """
  The units of the measurement e.g "x10E3/uL^x10E3/uL"
  """
  units: String

  """
  The reference range e.g "3.4-10.8"
  """
  reference_range: String

  """
  The qualitivate result e.g "005025^WBC^L^6690-2^Leukocytes^LN"
  """
  qualitative_result: String

  """
  The quantitative result e.g "9.6"
  """
  quantitative_result: String

  """Extra description or context on the result"""
  notes: String

  """A flag on any abnormality (e.g L for low or H for high)"""
  abnormal_flag: String
}

"""Lab Option"""
type LabOption {
  """The unique identifier of the option"""
  id: ID!

  """Name of the option"""
  name: String
}

"""Lab Order Object"""
type LabOrder {
  """abnormality in results"""
  abnormal: Boolean

  """Confirmation Code of Scheduled Appointment"""
  appt_confirmation_code: String

  """Date Lab Order was Placed"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """Get result document"""
  document: Document

  """The unique identifier of the order"""
  id: ID!

  """Order integration (lab_testing_api, evexia, rupa)"""
  integration: String!

  """Name of the lab"""
  lab: String

  """Name of the lab"""
  lab_company: String

  """Lab options included in lab order"""
  lab_options: [LabOption!]!

  """Lab results"""
  lab_results: [LabResult!]!

  """Order ID"""
  lta_id: String

  """The normalized status of the order"""
  normalized_status: String

  """Provider for lab order"""
  orderer: User

  """Patient for lab order"""
  patient: User

  """Get most recent pdf document"""
  pdf_document: Document

  """Order ID on the rupa health"""
  rupa_order_id: String

  """Show lab result with PDF document"""
  show_pdf_messages: Boolean

  """Status of the Lab Order"""
  status: String

  """Date of Test"""
  test_date: String

  """Date Lab Order was updated"""
  updated_at: String!

  """Link to view the rupa order"""
  view_rupa_order_url: String
}

"""LabOrder sorting enum"""
enum LabOrderOrderKeys {
  NAME_ASC
  NAME_DESC
  LAB_ASC
  LAB_DESC
  APPT_ASC
  APPT_DESC
  CLIENT_LAST_NAME_ASC
  CLIENT_LAST_NAME_DESC
  PROVIDER_LAST_NAME_ASC
  PROVIDER_LAST_NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Lab Result"""
type LabResult {
  """Document for lab result"""
  document: Document

  """The unique identifier of the result"""
  id: ID!

  """Lab observation requests for lab result"""
  lab_observation_requests: [LabObservationRequest]

  """The ID of the corresponding lab order"""
  lab_order_id: ID!

  """Ordering Physician for lab result"""
  ordering_physician: User

  """Patient for lab result"""
  patient: User

  """The type of the lab result"""
  result_type: String

  """The status of the result"""
  status_flag: String
}

"""A location"""
type Location {
  """The city of the address"""
  city: String

  """The Country Code of the address"""
  country: String

  """Pagination cursor"""
  cursor: Cursor!

  """The unique identifier of the location"""
  id: ID!

  """The first line of the address"""
  line1: String

  """The second line of the address"""
  line2: String

  """The name of the location"""
  name: String

  """The NPI of the location"""
  npi: String

  """The Other ID of the location"""
  other_id: String

  """The Other ID Qualification of the location"""
  other_id_qual: String

  """The place of service associated with this location"""
  place_of_service: PlaceOfService

  """The place of service id of the location"""
  place_of_service_id: String

  """The state of the address (Uses the 2 letter abbreviation if in US)"""
  state: String

  """The location condensed to a single line"""
  to_oneline: String

  """Owner of this location"""
  user: User

  """The ID of the user"""
  user_id: String

  """The zip/postal code of the address"""
  zip: String
}

"""Payload for a CMS 1500 location"""
input LocationInput {
  """The city"""
  city: String

  """The country code"""
  country: String

  """The ID of the location"""
  id: ID

  """The first line of the address"""
  line1: String

  """The second line of the address"""
  line2: String

  """The graphql_name of the location"""
  name: String

  """The NPI of the location"""
  npi: String

  """The other ID of the location"""
  other_id: String

  """The other ID qual of the location"""
  other_id_qual: String

  """The place of service ID of the location"""
  place_of_service_id: String

  """The state"""
  state: String

  """The ID of user who owns the location"""
  user_id: String

  """The zip code"""
  zip: String
}

"""Payload for a location"""
input LocationInputs {
  """The city"""
  city: String

  """The country code"""
  country: String

  """The ID of the location"""
  id: ID

  """The first line of the address"""
  line1: String

  """The second line of the address"""
  line2: String

  """The graphql_name of the location"""
  name: String

  """The state"""
  state: String

  """The zip code"""
  zip: String
}

"""Location resource"""
type LocationResourceType {
  """The resource ID"""
  resourceId: String

  """The resource title"""
  resourceTitle: String
}

"""Autogenerated input type of Lock"""
input LockInput {
  id: ID!
}

"""Autogenerated return type of Lock."""
type LockPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  form_answer_group: FormAnswerGroup

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of MaskAccount"""
input MaskAccountInput {
  email: String
  id: ID
  namespace: String = "healthie"
}

"""Autogenerated return type of MaskAccount."""
type MaskAccountPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success: Success
  success_string: String
}

"""A meal that a user has created"""
type Meal {
  """Pagination cursor"""
  cursor: Cursor!

  """The food items that are part of the meal"""
  food_items: [FoodItem!]

  """The unique identifier of the meal"""
  id: ID!

  """The name of the meal"""
  name: String

  """The user that owns the meal"""
  user_id: String
}

"""A meal plan"""
type MealPlan {
  """
  If true, meal plan is active (most recent) on client's Living Plate account
  """
  active: Boolean

  """Date meal plan was added to client's Living Plate account"""
  date_added: String

  """The unique identifier of the plan"""
  id: ID!

  """name of the meal plan on Living Plate"""
  name: String

  """
  If one exists, name of offering that was purchased that added meal plan to client's Living Plate account
  """
  offering_name: String
}

"""Medication query result"""
type MedicationOptionType {
  """The dosage options of the medication option"""
  dosage_options: [DosageType]

  """The dosages of the medication option"""
  dosages: [String!]

  """The unique identifier of the medication option"""
  id: ID!

  """The monograph of the medication option"""
  monograph(
    """The format of the monograph"""
    format: MonographFormat = HTML
  ): String

  """The name of the medication option"""
  name: String!
}

"""Medication belonging to client"""
type MedicationType {
  """
  Indicates if medication is still active (medication can also be inactive if current date doesn't fall between start and end date)
  """
  active: Boolean

  """CCDA code for this medication"""
  code: String

  """Comments entered by provider"""
  comment: String

  """The time the medication was created"""
  created_at: String!

  """Directions to use medication entered by provider"""
  directions: String

  """Dosage of medication entered by provider"""
  dosage: String

  """last date patient should be able to use medication"""
  end_date: String

  """Frequency of this medication"""
  frequency: String

  """The unique identifier of the medication"""
  id: ID!

  """
  If the medication is synchronized with an external system (e.g., an E-Rx system)
  """
  mirrored: Boolean!

  """Name of medication"""
  name: String

  """When true, this object must be consolidated as part of a CCDA Ingest"""
  requires_consolidation: Boolean

  """The way this medication is administered"""
  route: String

  """First active date of medication"""
  start_date: String

  """The last time the medication was updated"""
  updated_at: String

  """User ID of the client this medication belongs to"""
  user_id: ID
}

"""A data point for a metric"""
type MetricDataPointType {
  """The time the data point was created"""
  created_at: String!

  """The entry id of the data point"""
  entry_id: String

  """The value of the data point"""
  flex_value: String

  """The value of the data point"""
  value: Float @deprecated(reason: "Use flex value, which supports both string and number values")
}

"""Metric Graph data"""
type MetricGraphDataType {
  """
  Category of the metric, e.g. "Weight" or "Steps"
  """
  category: String

  """
  Label for the category, e.g. "Weight" or "Steps"
  """
  category_label: String

  """Data points for the graph"""
  data_points: [MetricDataPointType!]

  """False if the category has no entry"""
  has_entry: Boolean

  """Maximum value of the data points"""
  max: Float

  """Minimum value of the data points"""
  min: Float

  """
  Type of xtick, e.g. "date" or "time"
  """
  xtick_type: String

  """
  Type of ytick, e.g. "date" or "time"
  """
  ytick_type: String
}

"""Type of multi-factor authentication used"""
enum MfaType {
  SMS
  EMAIL
}

"""The format of a monograph"""
enum MonographFormat {
  """The monograph is in HTML format"""
  HTML

  """The monograph is in XML format"""
  XML
}

"""Monthly billing items data"""
type MonthlyBillingItemsDataType {
  """Amount of monthly billing items"""
  amount: Int

  """Month the data relates to"""
  month: String
}

"""Multi line metric graph data type"""
type MultiLineMetricGraphDataType {
  """Category name"""
  category: String

  """Category label"""
  category_label: String

  """False if the category has no entry"""
  has_entry: Boolean

  """Metric graph data"""
  metric_graph_datas: [MetricGraphDataType!]
}

"""The mutation root of this schema. See available mutations."""
type Mutation {
  """Add Change Health Submitter to Organization"""
  addClaimSubmitter(
    """Parameters for AddClaimSubmitter"""
    input: AddClaimSubmitterInput
  ): AddClaimSubmitterPayload

  """Add CPT Code and Description to the Database"""
  addCptCode(
    """Parameters for AddCptCode"""
    input: AddCptCodeInput
  ): AddCptCodePayload

  """Create Dosespot E-Rx for provider account"""
  addDosespot(
    """Parameters for createDosespot"""
    input: createDosespotInput
  ): createDosespotPayload

  """Add ICD Code and Description to the Database"""
  addIcdCode(
    """Parameters for AddIcdCode"""
    input: AddIcdCodeInput
  ): AddIcdCodePayload

  """Add Living Plate Integration to provider"""
  addLivingPlate(
    """Parameters for addLivingPlate"""
    input: addLivingPlateInput
  ): addLivingPlatePayload

  """Add a pharmacy to the user"""
  addPharmacy(
    """Parameters for addPharmacy"""
    input: addPharmacyInput
  ): addPharmacyPayload

  """Add a member to the Zus organization"""
  addZusUser(
    """Parameters for addZusMember"""
    input: addZusMemberInput
  ): addZusMemberPayload

  """Apply selected tags on a specific user"""
  bulkApply(
    """Parameters for bulkApply"""
    input: bulkApplyInput
  ): bulkApplyPayload

  """Apply care plan to the passed array of clients and/or groups"""
  bulkApplyCarePlanTemplate(
    """Parameters for bulkApplyCarePlanTemplate"""
    input: bulkApplyCarePlanTemplateInput
  ): bulkApplyCarePlanTemplatePayload

  """bulk create Availability"""
  bulkCreateAvailability(
    """Parameters for bulkCreateAvailability"""
    input: bulkCreateAvailabilityInput
  ): bulkCreateAvailabilityPayload

  """
  creates bulk Entries (intended for apple health only for the time being)
  """
  bulkCreateEntries(
    """Parameters for bulkCreateEntries"""
    input: bulkCreateEntriesInput
  ): bulkCreateEntriesPayload

  """Delete tasks"""
  bulkDeleteTasks(
    """Parameters for bulkDeleteTasks"""
    input: bulkDeleteTasksInput
  ): bulkDeleteTasksPayload

  """Update unseen card issues on a provider"""
  bulkUpdateCardIssues(
    """Parameters for bulkUpdateCardIssues"""
    input: bulkUpdateCardIssuesInput
  ): bulkUpdateCardIssuesPayload

  """
  Trigger notification email or care plan activation for each user related to the selected care plans. In case of activation, a group care plan will be activated for each user of user_group(unless a user already have an active care plan). If you want to activate selected care plan for only one user(user of group) use ToggleCarePlanStatusForSpecificUser mutation
  """
  bulkUpdateCarePlanUsers(
    """Parameters for bulkUpdateCarePlanUsers"""
    input: bulkUpdateCarePlanUsersInput
  ): bulkUpdateCarePlanUsersPayload

  """
  Update multiple clients at once. Will change user group for multiple clients if user_group_id passed, otherwise clients will be archived
  """
  bulkUpdateClients(
    """Parameters for bulkUpdateClients"""
    input: bulkUpdateClientsInput
  ): bulkUpdateClientsPayload

  """disabled devices in video chat"""
  changeDevicesAvailability(
    """Parameters for ChangeDevicesAvailability"""
    input: ChangeDevicesAvailabilityInput
  ): ChangeDevicesAvailabilityPayload

  """Delete unreconciled allergies/problems/medications"""
  clearUnreconciledObjects(
    """Parameters for clearUnreconciledObjects"""
    input: clearUnreconciledObjectsInput
  ): clearUnreconciledObjectsPayload

  """Complete a CCDA Reconciliation, based on user choice"""
  completeCcdaReconciliation(
    """Parameters for CompleteCcdaReconciliation"""
    input: CompleteCcdaReconciliationInput
  ): CompleteCcdaReconciliationPayload

  """Complete the checkout for booking or buying"""
  completeCheckout(
    """Parameters for completeCheckout"""
    input: completeCheckoutInput
  ): completeCheckoutPayload

  """Create CompletedCourseItem for related document"""
  completeCourseDocument(
    """Parameters for completeCourseDocument"""
    input: completeCourseDocumentInput
  ): completeCourseDocumentPayload

  """Attach Appointment to Charting Note"""
  connectApptToCharting(
    """Parameters for ConnectApptToCharting"""
    input: ConnectApptToChartingInput
  ): ConnectApptToChartingPayload

  """Generating forms"""
  convertFromJsonToForm(
    """Parameters for ConvertFromJsonToForm"""
    input: ConvertFromJsonToFormInput
  ): ConvertFromJsonToFormPayload

  """Convert to Metric"""
  convertToMetric(
    """Parameters for ConvertToMetric"""
    input: ConvertToMetricInput
  ): ConvertToMetricPayload

  """Copy a Course"""
  copyCourse(
    """Parameters for copyCourse"""
    input: copyCourseInput
  ): copyCoursePayload

  """Copy Custom Module"""
  copyCustomModule(
    """Parameters for copyCustomModule"""
    input: copyCustomModuleInput
  ): copyCustomModulePayload

  """copy Custom Module Form"""
  copyCustomModuleForm(
    """Parameters for copyCustomModuleForm"""
    input: copyCustomModuleFormInput
  ): copyCustomModuleFormPayload

  """Copy Forms"""
  copyForms(
    """Parameters for CopyForms"""
    input: CopyFormsInput
  ): CopyFormsPayload

  """Copy an Offering"""
  copyOffering(
    """Parameters for copyOffering"""
    input: copyOfferingInput
  ): copyOfferingPayload

  """Create Accepted Insurance Plans"""
  createAcceptedInsurancePlan(
    """Parameters for createAcceptedInsurancePlan"""
    input: createAcceptedInsurancePlanInput
  ): createAcceptedInsurancePlanPayload

  """Create a new addendum for the selected charting note"""
  createAddendum(
    """Parameters for createAddendum"""
    input: createAddendumInput
  ): createAddendumPayload

  """Create AllergySensitivity"""
  createAllergySensitivity(
    """Parameters for createAllergySensitivity"""
    input: createAllergySensitivityInput
  ): createAllergySensitivityPayload

  """Create Announcement"""
  createAnnouncement(
    """Parameters for createAnnouncement"""
    input: createAnnouncementInput
  ): createAnnouncementPayload

  """
  create API Key. This capability needs to be turned on for your account first
  """
  createApiKey(
    """Parameters for createApiKey"""
    input: createApiKeyInput
  ): createApiKeyPayload

  """Create AppleHealth"""
  createAppleHealth(
    """Parameters for createAppleHealth"""
    input: createAppleHealthInput
  ): createAppleHealthPayload

  """
  create appointment mutation for providers. Clients use the completeCheckout mutation
  """
  createAppointment(
    """Parameters for createAppointment"""
    input: createAppointmentInput
  ): createAppointmentPayload

  """Create a connection between a form answer group and an appointment"""
  createAppointmentFormAnswerGroupConnection(
    """Parameters for createAppointmentFormAnswerGroupConnection"""
    input: createAppointmentFormAnswerGroupConnectionInput
  ): createAppointmentFormAnswerGroupConnectionPayload

  """create an Appointment Setting"""
  createAppointmentSetting(
    """Parameters for createAppointmentSetting"""
    input: createAppointmentSettingInput
  ): createAppointmentSettingPayload

  """create Appointment Type"""
  createAppointmentType(
    """Parameters for createAppointmentType"""
    input: createAppointmentTypeInput
  ): createAppointmentTypePayload

  """Create an Appointment Type CPT Code Object"""
  createAppointmentTypeCptCode(
    """Parameters for createAppointmentTypeCptCode"""
    input: createAppointmentTypeCptCodeInput
  ): createAppointmentTypeCptCodePayload

  """Create auto task generator"""
  createAutoTaskGenerator(
    """Parameters for createAutoTaskGenerator"""
    input: createAutoTaskGeneratorInput
  ): createAutoTaskGeneratorPayload

  """create automated insurance billing setting"""
  createAutomatedInsuranceBillingSetting(
    """Parameters for createAutomatedInsuranceBillingSetting"""
    input: createAutomatedInsuranceBillingSettingInput
  ): createAutomatedInsuranceBillingSettingPayload

  """Create availability"""
  createAvailability(
    """Parameters for createAvailability"""
    input: createAvailabilityInput
  ): createAvailabilityPayload

  """create billing item"""
  createBillingItem(
    """Parameters for createBillingItem"""
    input: createBillingItemInput
  ): createBillingItemPayload

  """create Brand"""
  createBrand(
    """Parameters for createBrand"""
    input: createBrandInput
  ): createBrandPayload

  """create Campaign"""
  createCampaign(
    """Parameters for createCampaign"""
    input: createCampaignInput
  ): createCampaignPayload

  """Create and return a care plan"""
  createCarePlan(
    """Parameters for createCarePlan"""
    input: createCarePlanInput
  ): createCarePlanPayload

  """Create Change Health Labs for provider account"""
  createChangeAccount(
    """Parameters for CreateChangeAccount"""
    input: CreateChangeAccountInput
  ): CreateChangeAccountPayload

  """creates ChangeHealth patient record"""
  createChangeHealthPatient(
    """Parameters for CreateChangeHealthPatient"""
    input: CreateChangeHealthPatientInput
  ): CreateChangeHealthPatientPayload

  """create an Chat Setting"""
  createChatSetting(
    """Parameters for createChatSetting"""
    input: createChatSettingInput
  ): createChatSettingPayload

  """Create Change Health Submitter Object"""
  createClaimSubmitter(
    """Parameters for CreateClaimSubmitter"""
    input: CreateClaimSubmitterInput
  ): CreateClaimSubmitterPayload

  """Create a Client"""
  createClient(
    """Parameters for createClient"""
    input: createClientInput
  ): createClientPayload

  """
  create a client account via a form (e.g a lead capture form) or match to an existing client by name and email. This endpoint is meant to be called unauthenticated. If you want the client to buy or book something at the same time, use the CompleteCheckout mutation.
  """
  createClientViaForm(
    """Parameters for CreateClientViaForm"""
    input: CreateClientViaFormInput
  ): CreateClientViaFormPayload

  """create CMS1500"""
  createCms1500(
    """Parameters for createCms1500"""
    input: createCms1500Input
  ): createCms1500Payload

  """Create a CognitiveStatus Object"""
  createCognitiveStatus(
    """Parameters for createCognitiveStatus"""
    input: createCognitiveStatusInput
  ): createCognitiveStatusPayload

  """create Comment"""
  createComment(
    """Parameters for createComment"""
    input: createCommentInput
  ): createCommentPayload

  """create CompletedCourseItem"""
  createCompletedCourseItem(
    """Parameters for createCompletedCourseItem"""
    input: createCompletedCourseItemInput
  ): createCompletedCourseItemPayload

  """create CompletedOnboardingItem"""
  createCompletedOnboardingItem(
    """Parameters for createCompletedOnboardingItem"""
    input: createCompletedOnboardingItemInput
  ): createCompletedOnboardingItemPayload

  """Creates a Contact"""
  createContact(
    """Parameters for createContact"""
    input: createContactInput
  ): createContactPayload

  """create Conversation"""
  createConversation(
    """Parameters for createConversation"""
    input: createConversationInput
  ): createConversationPayload

  """create Course"""
  createCourse(
    """Parameters for createCourse"""
    input: createCourseInput
  ): createCoursePayload

  """create CourseBenefit"""
  createCourseBenefit(
    """Parameters for createCourseBenefit"""
    input: createCourseBenefitInput
  ): createCourseBenefitPayload

  """create CourseItem"""
  createCourseItem(
    """Parameters for createCourseItem"""
    input: createCourseItemInput
  ): createCourseItemPayload

  """create custom email"""
  createCustomEmail(
    """Parameters for createCustomEmail"""
    input: createCustomEmailInput
  ): createCustomEmailPayload

  """Create a Custom Food"""
  createCustomFood(
    """Parameters for createCustomFood"""
    input: createCustomFoodInput
  ): createCustomFoodPayload

  """create Custom Module"""
  createCustomModule(
    """Parameters for createCustomModule"""
    input: createCustomModuleInput
  ): createCustomModulePayload

  """create Custom Module Form"""
  createCustomModuleForm(
    """Parameters for createCustomModuleForm"""
    input: createCustomModuleFormInput
  ): createCustomModuleFormPayload

  """Create a Custom Navigation Item for a Whitelabel User"""
  createCustomNavItem(
    """Parameters for createCustomNavItem"""
    input: createCustomNavItemInput
  ): createCustomNavItemPayload

  """create Document"""
  createDocument(
    """Parameters for createDocument"""
    input: createDocumentInput
  ): createDocumentPayload

  """Create dosespot clinician"""
  createDosespotClinician(
    """Parameters for createDosespotClinician"""
    input: createDosespotClinicianInput
  ): createDosespotClinicianPayload

  """create Draft"""
  createDraft(
    """Parameters for createDraft"""
    input: createDraftInput
  ): createDraftPayload

  """Create a DSI comment"""
  createDsiComment(
    """Parameters for createDsiComment"""
    input: createDsiCommentInput
  ): createDsiCommentPayload

  """create ebook"""
  createEbook(
    """Parameters for createEbook"""
    input: createEbookInput
  ): createEbookPayload

  """creates a new Entry"""
  createEntry(
    """Parameters for createEntry"""
    input: createEntryInput
  ): createEntryPayload

  """Create an External Calendar"""
  createExternalCalendar(
    """Parameters for createExternalCalendar"""
    input: createExternalCalendarInput
  ): createExternalCalendarPayload

  """Create Family History"""
  createFamilyHistory(
    """Parameters for createFamilyHistory"""
    input: createFamilyHistoryInput
  ): createFamilyHistoryPayload

  """create Fax Acct Info"""
  createFaxAcctInfo(
    """Parameters for createFaxAcctInfo"""
    input: createFaxAcctInfoInput
  ): createFaxAcctInfoPayload

  """Create and return a fax line request"""
  createFaxLineRequest(
    """Parameters for createFaxLineRequest"""
    input: createFaxLineRequestInput
  ): createFaxLineRequestPayload

  """Create a FeatureToggle and Return FeatureToggle"""
  createFeatureToggle(
    """Parameters for createFeatureToggle"""
    input: createFeatureToggleInput
  ): createFeatureTogglePayload

  """Create Fitbit"""
  createFitbit(
    """Parameters for createFitbit"""
    input: createFitbitInput
  ): createFitbitPayload

  """create Folder"""
  createFolder(
    """Parameters for createFolder"""
    input: createFolderInput
  ): createFolderPayload

  """create FormAnswerGroup"""
  createFormAnswerGroup(
    """Parameters for createFormAnswerGroup"""
    input: createFormAnswerGroupInput
  ): createFormAnswerGroupPayload

  """Create FormAnswerGroupSigning"""
  createFormAnswerGroupSigning(
    """Parameters for createFormAnswerGroupSigning"""
    input: createFormAnswerGroupSigningInput
  ): createFormAnswerGroupSigningPayload @deprecated(reason: "Use `signFormAnswerGroup` mutation")

  """Create a Fullscript practitioner account using the Fullscript API"""
  createFullscriptPractitioner(
    """Parameters for createFullscriptPractitioner"""
    input: createFullscriptPractitionerInput
  ): createFullscriptPractitionerPayload

  """Create a FunctionalStatus Object"""
  createFunctionalStatus(
    """Parameters for createFunctionalStatus"""
    input: createFunctionalStatusInput
  ): createFunctionalStatusPayload

  """create Goal"""
  createGoal(
    """Parameters for createGoal"""
    input: createGoalInput
  ): createGoalPayload

  """create Goal History"""
  createGoalHistory(
    """Parameters for createGoalHistory"""
    input: createGoalHistoryInput
  ): createGoalHistoryPayload

  """Create GoogleFit"""
  createGoogleFit(
    """Parameters for createGoogleFit"""
    input: createGoogleFitInput
  ): createGoogleFitPayload

  """Create a Group"""
  createGroup(
    """Parameters for createGroup"""
    input: createGroupInput
  ): createGroupPayload

  """Create a Harbor Partner"""
  createHarborPartner(
    """Parameters for CreateHarborPartner"""
    input: CreateHarborPartnerInput
  ): CreateHarborPartnerPayload

  """Create an API key for a Harbor Partner"""
  createHarborPartnerApiKey(
    """Parameters for createHarborPartnerApiKey"""
    input: createHarborPartnerApiKeyInput
  ): createHarborPartnerApiKeyPayload

  """Create a HealthConcern Object"""
  createHealthConcern(
    """Parameters for createHealthConcern"""
    input: createHealthConcernInput
  ): createHealthConcernPayload

  """Create an Immunization"""
  createImmunization(
    """Parameters for createImmunization"""
    input: createImmunizationInput
  ): createImmunizationPayload

  """Create Implantable Device User association"""
  createImplantableDeviceUser(
    """Parameters for createImplantableDeviceUser"""
    input: createImplantableDeviceUserInput
  ): createImplantableDeviceUserPayload

  """Create an import data request"""
  createImportDataRequest(
    """Parameters for createImportDataRequest"""
    input: createImportDataRequestInput
  ): createImportDataRequestPayload

  """create an insurance authorization"""
  createInsuranceAuthorization(
    """Parameters for createInsuranceAuthorization"""
    input: createInsuranceAuthorizationInput
  ): createInsuranceAuthorizationPayload

  """Create Insurance Plan"""
  createInsurancePlan(
    """Parameters for createInsurancePlan"""
    input: createInsurancePlanInput
  ): createInsurancePlanPayload

  """Create Lab Order"""
  createLabOrder(
    """Parameters for createLabOrder"""
    input: createLabOrderInput
  ): createLabOrderPayload

  """create Location"""
  createLocation(
    """Parameters for createLocation"""
    input: createLocationInput
  ): createLocationPayload

  """Create a Meal"""
  createMeal(
    """Parameters for createMeal"""
    input: createMealInput
  ): createMealPayload

  """Create Medication"""
  createMedication(
    """Parameters for createMedication"""
    input: createMedicationInput
  ): createMedicationPayload

  """create Message Blast"""
  createMessageBlast(
    """Parameters for createMessageBlast"""
    input: createMessageBlastInput
  ): createMessageBlastPayload

  """create Note"""
  createNote(
    """Parameters for createNote"""
    input: createNoteInput
  ): createNotePayload

  """create a Notification Contact"""
  createNotificationContact(
    """Parameters for createNotificationContact"""
    input: createNotificationContactInput
  ): createNotificationContactPayload

  """create offering"""
  createOffering(
    """Parameters for createOffering"""
    input: createOfferingInput
  ): createOfferingPayload

  """Create an Offering Coupon"""
  createOfferingCoupon(
    """Parameters for createOfferingCoupon"""
    input: createOfferingCouponInput
  ): createOfferingCouponPayload

  """create OfficeallySftpAccount"""
  createOfficeallySftpAccount(
    """Parameters for createOfficeallySftpAccount"""
    input: createOfficeallySftpAccountInput
  ): createOfficeallySftpAccountPayload

  """create OnboardingFlow"""
  createOnboardingFlow(
    """Parameters for createOnboardingFlow"""
    input: createOnboardingFlowInput
  ): createOnboardingFlowPayload

  """create OnboardingItem"""
  createOnboardingItem(
    """Parameters for createOnboardingItem"""
    input: createOnboardingItemInput
  ): createOnboardingItemPayload

  """creates a new entry or add to existing water intake entry for the day"""
  createOrAddToWaterIntakeEntry(
    """Parameters for createOrAddToWaterIntakeEntry"""
    input: createOrAddToWaterIntakeEntryInput
  ): createOrAddToWaterIntakeEntryPayload

  """create Organization"""
  createOrganization(
    """Parameters for createOrganization"""
    input: createOrganizationInput
  ): createOrganizationPayload

  """Create an Organization CPT Code Object"""
  createOrganizationCptCode(
    """Parameters for createOrganizationCptCode"""
    input: createOrganizationCptCodeInput
  ): createOrganizationCptCodePayload

  """create OrganizationMembership"""
  createOrganizationMembership(
    """Parameters for createOrganizationMembership"""
    input: createOrganizationMembershipInput
  ): createOrganizationMembershipPayload

  """Creates a Patner"""
  createPartner(
    """Parameters for createPartner"""
    input: createPartnerInput
  ): createPartnerPayload

  """
  Create a Stripe Payment Intent. Currently just used for Klarna support. When the payment succeeds, Healthie will receive a webhook and automatically complete the checkout.
  """
  createPaymentIntent(
    """Parameters for createPaymentIntent"""
    input: createPaymentIntentInput
  ): createPaymentIntentPayload

  """create Permission Template"""
  createPermissionTemplate(
    """Parameters for createPermissionTemplate"""
    input: createPermissionTemplateInput
  ): createPermissionTemplatePayload

  """create Personalization Questionnaire"""
  createPersonalizationQuestionnaire(
    """Parameters for createPersonalizationQuestionnaire"""
    input: createPersonalizationQuestionnaireInput
  ): createPersonalizationQuestionnairePayload

  """Create favorite CPT/ICD code"""
  createPreferredMedicalCode(
    """Parameters for createPreferredMedicalCode"""
    input: createPreferredMedicalCodeInput
  ): createPreferredMedicalCodePayload

  """Create a Procedure Object"""
  createProcedure(
    """Parameters for createProcedure"""
    input: createProcedureInput
  ): createProcedurePayload

  """Create a product"""
  createProduct(
    """Parameters for createProduct"""
    input: createProductInput
  ): createProductPayload

  """Create ProviderCPTCode Objects"""
  createProviderCptCodes(
    """Parameters for createProviderCptCodes"""
    input: createProviderCptCodesInput
  ): createProviderCptCodesPayload

  """Create a care plan recommendation"""
  createRecommendation(
    """Parameters for createRecommendation"""
    input: createRecommendationInput
  ): createRecommendationPayload

  """Create new Referring Physician"""
  createReferral(
    """Parameters for createReferral"""
    input: createReferralInput
  ): createReferralPayload

  """Create new Referring Physician"""
  createReferringPhysician(
    """Parameters for createReferringPhysician"""
    input: createReferringPhysicianInput
  ): createReferringPhysicianPayload

  """create requested form"""
  createRequestedFormCompletion(
    """Parameters for createRequestedForm"""
    input: createRequestedFormInput
  ): createRequestedFormPayload

  """create requested payment"""
  createRequestedPayment(
    """Parameters for createRequestedPayment"""
    input: createRequestedPaymentInput
  ): createRequestedPaymentPayload

  """Create a Rupa order"""
  createRupaOrder(
    """Parameters for createRupaOrder"""
    input: createRupaOrderInput
  ): createRupaOrderPayload

  """Create a new saved filter"""
  createSavedFilter(
    """Parameters for createSavedFilter"""
    input: createSavedFilterInput
  ): createSavedFilterPayload

  """Create a sent direct message"""
  createSentDirectMessage(
    """Parameters for createSentDirectMessage"""
    input: createSentDirectMessageInput
  ): createSentDirectMessagePayload

  """create Sent Fax"""
  createSentFax(
    """Parameters for createSentFax"""
    input: createSentFaxInput
  ): createSentFaxPayload

  """Create a Smart Phrase"""
  createSmartPhrase(
    """Parameters for createSmartPhrase"""
    input: createSmartPhraseInput
  ): createSmartPhrasePayload

  """Create a Smoking Status"""
  createSmokingStatus(
    """Parameters for createSmokingStatus"""
    input: createSmokingStatusInput
  ): createSmokingStatusPayload

  """Creates a new payment card"""
  createStripeCustomerDetail(
    """Parameters for createStripeCustomerDetail"""
    input: createStripeCustomerDetailInput
  ): createStripeCustomerDetailPayload

  """create Subscription"""
  createSubscription(
    """Parameters for createSubscription"""
    input: createSubscriptionInput
  ): createSubscriptionPayload

  """create super bill"""
  createSuperBill(
    """Parameters for createSuperBill"""
    input: createSuperBillInput
  ): createSuperBillPayload

  """Create a custom user tag"""
  createTag(
    """Parameters for createTag"""
    input: createTagInput
  ): createTagPayload

  """Create a task for provider"""
  createTask(
    """Parameters for createTask"""
    input: createTaskInput
  ): createTaskPayload

  """Create a UniqueDeviceIdentifier Object"""
  createUniqueDeviceIdentifier(
    """Parameters for createUniqueDeviceIdentifier"""
    input: createUniqueDeviceIdentifierInput
  ): createUniqueDeviceIdentifierPayload

  """Creates a Visitor"""
  createVisitor(
    """Parameters for createVisitor"""
    input: createVisitorInput
  ): createVisitorPayload

  """Create Webhook"""
  createWebhook(
    """Parameters for createWebhook"""
    input: createWebhookInput
  ): createWebhookPayload

  """Enable Zus integration for provider account"""
  createZus(
    """Parameters for createZus"""
    input: createZusInput
  ): createZusPayload

  """Destroy Accepted Insurance Plan"""
  deleteAcceptedInsurancePlan(
    """Parameters for deleteAcceptedInsurancePlan"""
    input: deleteAcceptedInsurancePlanInput
  ): deleteAcceptedInsurancePlanPayload

  """Destroy AllergySensitivity"""
  deleteAllergySensitivity(
    """Parameters for deleteAllergySensitivity"""
    input: deleteAllergySensitivityInput
  ): deleteAllergySensitivityPayload

  """Destroy Announcement"""
  deleteAnnouncement(
    """Parameters for destroyAnnouncement"""
    input: destroyAnnouncementInput
  ): destroyAnnouncementPayload

  """Destroy API Key"""
  deleteApiKey(
    """Parameters for deleteApiKey"""
    input: deleteApiKeyInput
  ): deleteApiKeyPayload

  """Destroy AppleHealth"""
  deleteAppleHealth(
    """Parameters for deleteAppleHealth"""
    input: deleteAppleHealthInput
  ): deleteAppleHealthPayload

  """Delete an Appointment"""
  deleteAppointment(
    """Parameters for deleteAppointment"""
    input: deleteAppointmentInput
  ): deleteAppointmentPayload

  """Remove a form_answer_groups connection to an appointment"""
  deleteAppointmentFormAnswerGroupConnection(
    """Parameters for deleteAppointmentFormAnswerGroupConnection"""
    input: deleteAppointmentFormAnswerGroupConnectionInput
  ): deleteAppointmentFormAnswerGroupConnectionPayload

  """Destroy an AppointmentType"""
  deleteAppointmentType(
    """Parameters for deleteAppointmentType"""
    input: deleteAppointmentTypeInput
  ): deleteAppointmentTypePayload

  """Delete a AppointmentTypeCptCode Object"""
  deleteAppointmentTypeCptCode(
    """Parameters for deleteAppointmentTypeCptCode"""
    input: deleteAppointmentTypeCptCodeInput
  ): deleteAppointmentTypeCptCodePayload

  """Delete auto task generator"""
  deleteAutoTaskGenerator(
    """Parameters for deleteAutoTaskGenerator"""
    input: deleteAutoTaskGeneratorInput
  ): deleteAutoTaskGeneratorPayload

  """Delete autoscoring section"""
  deleteAutoscoring(
    """Parameters for deleteAutoscoring"""
    input: deleteAutoscoringInput
  ): deleteAutoscoringPayload

  """delete Availability"""
  deleteAvailability(
    """Parameters for deleteAvailability"""
    input: deleteAvailabilityInput
  ): deleteAvailabilityPayload

  """Destroy a Billing Item"""
  deleteBillingItem(
    """Parameters for deleteBillingItem"""
    input: deleteBillingItemInput
  ): deleteBillingItemPayload

  """Destroy a Care Plan"""
  deleteCarePlan(
    """Parameters for deleteCarePlan"""
    input: deleteCarePlanInput
  ): deleteCarePlanPayload

  """Remove connection for related item(document/goal/recommendation)"""
  deleteCarePlanConnection(
    """Parameters for deleteCarePlanConnection"""
    input: deleteCarePlanConnectionInput
  ): deleteCarePlanConnectionPayload

  """Destroy a Cms1500"""
  deleteCms1500(
    """Parameters for deleteCms1500"""
    input: deleteCms1500Input
  ): deleteCms1500Payload

  """Delete a CognitivesStatus Object"""
  deleteCognitiveStatus(
    """Parameters for deleteCognitiveStatus"""
    input: deleteCognitiveStatusInput
  ): deleteCognitiveStatusPayload

  """Destroy a Comment"""
  deleteComment(
    """Parameters for deleteComment"""
    input: deleteCommentInput
  ): deleteCommentPayload

  """Destroy a Conversation Membership"""
  deleteConversationMembership(
    """Parameters for deleteConversationMembership"""
    input: deleteConversationMembershipInput
  ): deleteConversationMembershipPayload

  """Destroy a Course"""
  deleteCourse(
    """Parameters for deleteCourse"""
    input: deleteCourseInput
  ): deleteCoursePayload

  """Destroy a Course Benefit"""
  deleteCourseBenefit(
    """Parameters for deleteCourseBenefit"""
    input: deleteCourseBenefitInput
  ): deleteCourseBenefitPayload

  """Destroy a Course Group"""
  deleteCourseGroup(
    """Parameters for deleteCourseGroup"""
    input: deleteCourseGroupInput
  ): deleteCourseGroupPayload

  """Destroy a Course Item"""
  deleteCourseItem(
    """Parameters for deleteCourseItem"""
    input: deleteCourseItemInput
  ): deleteCourseItemPayload

  """Destroy a Course Membership"""
  deleteCourseMembership(
    """Parameters for deleteCourseMembership"""
    input: deleteCourseMembershipInput
  ): deleteCourseMembershipPayload

  """Destroy a Custom Email"""
  deleteCustomEmail(
    """Parameters for deleteCustomEmail"""
    input: deleteCustomEmailInput
  ): deleteCustomEmailPayload

  """Destroy a Custom Food"""
  deleteCustomFood(
    """Parameters for deleteCustomFood"""
    input: deleteCustomFoodInput
  ): deleteCustomFoodPayload

  """Destroy an CustomModule"""
  deleteCustomModule(
    """Parameters for deleteCustomModule"""
    input: deleteCustomModuleInput
  ): deleteCustomModulePayload

  """Destroy an CustomModuleForm"""
  deleteCustomModuleForm(
    """Parameters for deleteCustomModuleForm"""
    input: deleteCustomModuleFormInput
  ): deleteCustomModuleFormPayload

  """Delete a Custom Navigation Item for a Whitelabel User"""
  deleteCustomNavItem(
    """Parameters for deleteCustomNavItem"""
    input: deleteCustomNavItemInput
  ): deleteCustomNavItemPayload

  """Destroy Dexcom Connection"""
  deleteDexcomConnection(
    """Parameters for deleteDexcomConnection"""
    input: deleteDexcomConnectionInput
  ): deleteDexcomConnectionPayload

  """Destroy a Document"""
  deleteDocument(
    """Parameters for deleteDocument"""
    input: deleteDocumentInput
  ): deleteDocumentPayload

  """Delete Dosespot E-Rx for provider account"""
  deleteDosespot(
    """Parameters for deleteDosespot"""
    input: deleteDosespotInput
  ): deleteDosespotPayload

  """Destroy a Entry"""
  deleteEntry(
    """Parameters for deleteEntry"""
    input: deleteEntryInput
  ): deleteEntryPayload

  """Destroy an External Calendar"""
  deleteExternalCalendar(
    """Parameters for deleteExternalCalendar"""
    input: deleteExternalCalendarInput
  ): deleteExternalCalendarPayload

  """Delete a Family History Condition"""
  deleteFamilyHistory(
    """Parameters for deleteFamilyHistory"""
    input: deleteFamilyHistoryInput
  ): deleteFamilyHistoryPayload

  """destroy Fax Acct Info"""
  deleteFaxAcctInfo(
    """Parameters for destroyFaxAcctInfo"""
    input: destroyFaxAcctInfoInput
  ): destroyFaxAcctInfoPayload

  """Destroy Fitbit"""
  deleteFitbit(
    """Parameters for deleteFitbit"""
    input: deleteFitbitInput
  ): deleteFitbitPayload

  """Destroy a Folder"""
  deleteFolder(
    """Parameters for deleteFolder"""
    input: deleteFolderInput
  ): deleteFolderPayload

  """Destroy a Form Answer Group"""
  deleteFormAnswerGroup(
    """Parameters for deleteFormAnswerGroup"""
    input: deleteFormAnswerGroupInput
  ): deleteFormAnswerGroupPayload

  """Delete a FunctionalsStatus Object"""
  deleteFunctionalStatus(
    """Parameters for deleteFunctionalStatus"""
    input: deleteFunctionalStatusInput
  ): deleteFunctionalStatusPayload

  """Destroy a Goal"""
  deleteGoal(
    """Parameters for deleteGoal"""
    input: deleteGoalInput
  ): deleteGoalPayload

  """Destroy a Goal GoalHistory"""
  deleteGoalHistory(
    """Parameters for deleteGoalHistory"""
    input: deleteGoalHistoryInput
  ): deleteGoalHistoryPayload

  """Destroy GoogleFit"""
  deleteGoogleFit(
    """Parameters for deleteGoogleFit"""
    input: deleteGoogleFitInput
  ): deleteGoogleFitPayload

  """Delete a HealthConcern Object"""
  deleteHealthConcern(
    """Parameters for deleteHealthConcern"""
    input: deleteHealthConcernInput
  ): deleteHealthConcernPayload

  """Delete an Implantable Device User association"""
  deleteImplantableDeviceUser(
    """Parameters for deleteImplantableDeviceUser"""
    input: deleteImplantableDeviceUserInput
  ): deleteImplantableDeviceUserPayload

  """delete an insurance authorization"""
  deleteInsuranceAuthorization(
    """Parameters for deleteInsuranceAuthorization"""
    input: deleteInsuranceAuthorizationInput
  ): deleteInsuranceAuthorizationPayload

  """Delete Insurance Plan"""
  deleteInsurancePlan(
    """Parameters for deleteInsurancePlan"""
    input: deleteInsurancePlanInput
  ): deleteInsurancePlanPayload

  """Destroy a Location"""
  deleteLocation(
    """Parameters for deleteLocation"""
    input: deleteLocationInput
  ): deleteLocationPayload

  """Destroy a Meal"""
  deleteMeal(
    """Parameters for deleteMeal"""
    input: deleteMealInput
  ): deleteMealPayload

  """Destroy Medication"""
  deleteMedication(
    """Parameters for destroyMedication"""
    input: destroyMedicationInput
  ): destroyMedicationPayload

  """Destroy a Note"""
  deleteNote(
    """Parameters for deleteNote"""
    input: deleteNoteInput
  ): deleteNotePayload

  """delete a Notification Contact"""
  deleteNotificationContact(
    """Parameters for deleteNotificationContact"""
    input: deleteNotificationContactInput
  ): deleteNotificationContactPayload

  """Destroy an Offering"""
  deleteOffering(
    """Parameters for deleteOffering"""
    input: deleteOfferingInput
  ): deleteOfferingPayload

  """Destroy an Offering Coupon"""
  deleteOfferingCoupon(
    """Parameters for deleteOfferingCoupon"""
    input: deleteOfferingCouponInput
  ): deleteOfferingCouponPayload

  """Destroy a OnboardingFlow"""
  deleteOnboardingFlow(
    """Parameters for deleteOnboardingFlow"""
    input: deleteOnboardingFlowInput
  ): deleteOnboardingFlowPayload

  """Destroy a OnboardingItem"""
  deleteOnboardingItem(
    """Parameters for deleteOnboardingItem"""
    input: deleteOnboardingItemInput
  ): deleteOnboardingItemPayload

  """Delete a OrganizationCptCode Object"""
  deleteOrganizationCptCode(
    """Parameters for deleteOrganizationCptCode"""
    input: deleteOrganizationCptCodeInput
  ): deleteOrganizationCptCodePayload

  """Destroy an organization info"""
  deleteOrganizationInfo(
    """Parameters for deleteOrganizationInfo"""
    input: deleteOrganizationInfoInput
  ): deleteOrganizationInfoPayload

  """Destroy a Organization Membership"""
  deleteOrganizationMembership(
    """Parameters for deleteOrganizationMembership"""
    input: deleteOrganizationMembershipInput
  ): deleteOrganizationMembershipPayload @deprecated(reason: "Organization Memberships Cannot Be Destroyed")

  """delete Permission Template"""
  deletePermissionTemplate(
    """Parameters for deletePermissionTemplate"""
    input: deletePermissionTemplateInput
  ): deletePermissionTemplatePayload

  """Delete favorite CPT/ICD code"""
  deletePreferredMedicalCode(
    """Parameters for deletePreferredMedicalCode"""
    input: deletePreferredMedicalCodeInput
  ): deletePreferredMedicalCodePayload

  """Delete a Procedure Object"""
  deleteProcedure(
    """Parameters for deleteProcedure"""
    input: deleteProcedureInput
  ): deleteProcedurePayload

  """Delete a product"""
  deleteProduct(
    """Parameters for deleteProduct"""
    input: deleteProductInput
  ): deleteProductPayload

  """Delete a ProviderCptCode Object"""
  deleteProviderCptCode(
    """Parameters for deleteProviderCptCode"""
    input: deleteProviderCptCodeInput
  ): deleteProviderCptCodePayload

  """Destroy a received fax"""
  deleteReceivedFax(
    """Parameters for deleteReceivedFax"""
    input: deleteReceivedFaxInput
  ): deleteReceivedFaxPayload

  """Destroy a care plan recommendation"""
  deleteRecommendation(
    """Parameters for deleteRecommendation"""
    input: deleteRecommendationInput
  ): deleteRecommendationPayload

  """Delete recurring form request"""
  deleteRecurringForm(
    """Parameters for destroyRecurringForm"""
    input: destroyRecurringFormInput
  ): destroyRecurringFormPayload

  """Delete referral"""
  deleteReferral(
    """Parameters for deleteReferral"""
    input: deleteReferralInput
  ): deleteReferralPayload

  """Delete referring physician """
  deleteReferringPhysician(
    """Parameters for deleteReferringPhysician"""
    input: deleteReferringPhysicianInput
  ): deleteReferringPhysicianPayload

  """Destroy a requested form"""
  deleteRequestedFormCompletion(
    """Parameters for deleteRequestedForm"""
    input: deleteRequestedFormInput
  ): deleteRequestedFormPayload

  """destroy requested payment"""
  deleteRequestedPayment(
    """Parameters for deleteRequestedPayment"""
    input: deleteRequestedPaymentInput
  ): deleteRequestedPaymentPayload

  """Delete a saved filter"""
  deleteSavedFilter(
    """Parameters for deleteSavedFilter"""
    input: deleteSavedFilterInput
  ): deleteSavedFilterPayload

  """Destroy Shapa Connection"""
  deleteShapaConnection(
    """Parameters for deleteShapaConnection"""
    input: deleteShapaConnectionInput
  ): deleteShapaConnectionPayload

  """Destroy a Smart Phrase"""
  deleteSmartPhrase(
    """Parameters for deleteSmartPhrase"""
    input: deleteSmartPhraseInput
  ): deleteSmartPhrasePayload

  """Delete a Smoking Status"""
  deleteSmokingStatus(
    """Parameters for deleteSmokingStatus"""
    input: deleteSmokingStatusInput
  ): deleteSmokingStatusPayload

  """Deletes a payment card"""
  deleteStripeCustomerDetail(
    """Parameters for deleteStripeCustomerDetail"""
    input: deleteStripeCustomerDetailInput
  ): deleteStripeCustomerDetailPayload

  """Destroy a Super Bill"""
  deleteSuperBill(
    """Parameters for deleteSuperBill"""
    input: deleteSuperBillInput
  ): deleteSuperBillPayload

  """Delete a custom user tag"""
  deleteTag(
    """Parameters for deleteTag"""
    input: deleteTagInput
  ): deleteTagPayload

  """Destroy a task"""
  deleteTask(
    """Parameters for deleteTask"""
    input: deleteTaskInput
  ): deleteTaskPayload

  """Delete a UniqueDeviceIdentifier Object"""
  deleteUniqueDeviceIdentifier(
    """Parameters for deleteUniqueDeviceIdentifier"""
    input: deleteUniqueDeviceIdentifierInput
  ): deleteUniqueDeviceIdentifierPayload

  """Delete a Group"""
  deleteUserGroup(
    """Parameters for deleteUserGroup"""
    input: deleteUserGroupInput
  ): deleteUserGroupPayload

  """Destroy Webhook"""
  deleteWebhook(
    """Parameters for deleteWebhook"""
    input: deleteWebhookInput
  ): deleteWebhookPayload

  """Destroy Withings Connection"""
  deleteWithingsConnection(
    """Parameters for deleteWithingsConnection"""
    input: deleteWithingsConnectionInput
  ): deleteWithingsConnectionPayload

  """Destroy an API key for a Harbor Partner"""
  destroyHarborPartnerApiKey(
    """Parameters for destroyHarborPartnerApiKey"""
    input: destroyHarborPartnerApiKeyInput
  ): destroyHarborPartnerApiKeyPayload

  """Dismiss All Announcements For A User"""
  dismissAllAnnouncements(
    """Parameters for dismissAllAnnouncements"""
    input: dismissAllAnnouncementsInput
  ): dismissAllAnnouncementsPayload

  """Dismiss Announcement"""
  dismissAnnouncement(
    """Parameters for dismissAnnouncement"""
    input: dismissAnnouncementInput
  ): dismissAnnouncementPayload

  """Transfer Credential Import"""
  dosespotImport(
    """Parameters for dosespotImport"""
    input: dosespotImportInput
  ): dosespotImportPayload

  """Update User Account to Dummy User Account"""
  dummyUser(
    """Parameters for dummyUser"""
    input: dummyUserInput
  ): dummyUserPayload

  """edit Availability"""
  editAvailability(
    """Parameters for editAvailability"""
    input: editAvailabilityInput
  ): editAvailabilityPayload

  """Embed Forms to Objects"""
  embedForm(
    """Parameters for EmbedForm"""
    input: EmbedFormInput
  ): EmbedFormPayload

  """Enable autoscoring on a form"""
  enableAutoscoring(
    """Parameters for enableAutoscoring"""
    input: enableAutoscoringInput
  ): enableAutoscoringPayload

  """Generate Patients Dosespot SSO for a Given Provider """
  enableDosespotSelfSignup(
    """Parameters for enableSelfSignup"""
    input: enableSelfSignupInput
  ): enableSelfSignupPayload

  """Adding Google Integrations"""
  enableGoogleIntegrations(
    """Parameters for enableGoogleIntegrations"""
    input: enableGoogleIntegrationsInput
  ): enableGoogleIntegrationsPayload

  """Enable Multi Factor Authentication for the Entire Org"""
  enableMfa(
    """Parameters for EnableMfa"""
    input: EnableMfaInput
  ): EnableMfaPayload

  """Enable Mixpanel for Enterprise Client"""
  enableMixpanel(
    """Parameters for EnableMixpanel"""
    input: EnableMixpanelInput
  ): EnableMixpanelPayload

  """Enable Zoom Features"""
  enableZoomFeatures(
    """Parameters for EnableZoomFeatures"""
    input: EnableZoomFeaturesInput
  ): EnableZoomFeaturesPayload

  """Expires the webhook signature"""
  expireWebhookSignature(
    """Parameters for expireWebhookSignature"""
    input: expireWebhookSignatureInput
  ): expireWebhookSignaturePayload

  """
  Creates a template from existing Care Plan. Original object is not touched
  """
  exportCarePlanToTemplate(
    """Parameters for exportToTemplate"""
    input: exportToTemplateInput
  ): exportToTemplatePayload

  """Export Client EHI data"""
  exportClientEhi(
    """Parameters for exportClientEhi"""
    input: exportClientEhiInput
  ): exportClientEhiPayload

  """extend paywall for a provider"""
  extendPaywall(
    """Parameters for ExtendPaywall"""
    input: ExtendPaywallInput
  ): ExtendPaywallPayload

  """Generate a PDF of charting notes for a client"""
  generateChartingPdf(
    """Parameters for generateChartingPdf"""
    input: generateChartingPdfInput
  ): generateChartingPdfPayload

  """Generate Patients Dosespot SSO for a Given Provider """
  generateDosespotSingleSignOn(
    """Parameters for dosespotSSO"""
    input: dosespotSSOInput
  ): dosespotSSOPayload

  """Sign up Healthie User in the Health Assessment Service"""
  healthAssessmentServiceSignup(
    """Parameters for HealthAssessmentServiceSignup"""
    input: HealthAssessmentServiceSignupInput
  ): HealthAssessmentServiceSignupPayload

  """Lock `FormAnswerGroup`"""
  lockFormAnswerGroup(
    """Parameters for Lock"""
    input: LockInput
  ): LockPayload

  """Mask in as another user"""
  maskAccount(
    """Parameters for MaskAccount"""
    input: MaskAccountInput
  ): MaskAccountPayload

  """
  all data related to the merging account (form answers, billing items, charting notes, etc) will be associated with the selected account after merging. The selected account's client profile information will remain unchanged (name, DOB, etc)
  """
  mergeClients(
    """Parameters for mergeClients"""
    input: mergeClientsInput
  ): mergeClientsPayload

  """Pair a client with a provider"""
  pairAccounts(
    """Parameters for PairAccounts"""
    input: PairAccountsInput
  ): PairAccountsPayload

  """Import client from a CCDA file"""
  parseCcdaDocument(
    """Parameters for parseCcdaDocument"""
    input: parseCcdaDocumentInput
  ): parseCcdaDocumentPayload

  """refetch ChangeHealth Lab Orders for a specified patient"""
  refetchChangeHealthLabOrder(
    """Parameters for RefetchChangeHealthLabOrder"""
    input: RefetchChangeHealthLabOrderInput
  ): RefetchChangeHealthLabOrderPayload

  """Refresh Host Links"""
  refreshHostLinks(
    """Parameters for RefreshHostLinks"""
    input: RefreshHostLinksInput
  ): RefreshHostLinksPayload

  """Remove applied tag on a specific user"""
  removeAppliedTag(
    """Parameters for removeAppliedTag"""
    input: removeAppliedTagInput
  ): removeAppliedTagPayload

  """Remove Card that is on File for Client"""
  removeCardOnFile(
    """Parameters for RemoveCardOnFile"""
    input: RemoveCardOnFileInput
  ): RemoveCardOnFilePayload

  """remove Draft"""
  removeDraft(
    """Parameters for removeDraft"""
    input: removeDraftInput
  ): removeDraftPayload

  """Remove group care plan user connection for a specific user"""
  removeUserFromGroupCarePlan(
    """Parameters for removeUserFromGroupCarePlan"""
    input: removeUserFromGroupCarePlanInput
  ): removeUserFromGroupCarePlanPayload

  """resend Sent Fax"""
  resendSentFax(
    """Parameters for resendSentFax"""
    input: resendSentFaxInput
  ): resendSentFaxPayload

  """send the human a password reset email"""
  resetPassword(
    """Parameters for resetPassword"""
    input: resetPasswordInput
  ): resetPasswordPayload

  """Restores Previous Version to be Current Version"""
  restoreVersion(
    """Parameters for restoreVersions"""
    input: restoreVersionsInput
  ): restoreVersionsPayload

  """
  Resync existed rupa lab orders data for a specific rupa connection of the current user
  """
  resyncRupaLabOrders(
    """Parameters for resyncRupaLabOrders"""
    input: resyncRupaLabOrdersInput
  ): resyncRupaLabOrdersPayload

  """revoke token or API key."""
  revokeToken(
    """Parameters for revokeToken"""
    input: revokeTokenInput
  ): revokeTokenPayload

  """Run an eligibility check on a policy"""
  runEligibilityCheck(
    """Parameters for runEligibilityCheckMutation"""
    input: runEligibilityCheckMutationInput
  ): runEligibilityCheckMutationPayload

  """Trigger care plan email for given client"""
  sendCarePlanEmail(
    """Parameters for sendCarePlanEmail"""
    input: sendCarePlanEmailInput
  ): sendCarePlanEmailPayload

  """Send the trainer an email that the client wants to speak to them"""
  sendSpeakToTrainerNotification(
    """Parameters for SendSpeakToTrainerNotification"""
    input: SendSpeakToTrainerNotificationInput
  ): SendSpeakToTrainerNotificationPayload

  """Sends a test webhook to the specified URL"""
  sendTestWebhook(
    """Parameters for sendTestWebhook"""
    input: sendTestWebhookInput
  ): sendTestWebhookPayload

  """Send Welcome Email to Client"""
  sendWelcomeEmail(
    """Parameters for SendWelcomeEmail"""
    input: SendWelcomeEmailInput
  ): SendWelcomeEmailPayload

  """Add form answer group answers as document viewable by client"""
  shareAnswersAsDocument(
    """Parameters for shareAnswersAsDocument"""
    input: shareAnswersAsDocumentInput
  ): shareAnswersAsDocumentPayload

  """share Course with another provider"""
  shareCourse(
    """Parameters for shareCourse"""
    input: shareCourseInput
  ): shareCoursePayload

  """share Custom Module Form"""
  shareCustomModuleForm(
    """Parameters for shareCustomModuleForm"""
    input: shareCustomModuleFormInput
  ): shareCustomModuleFormPayload

  """Sign `FormAnswerGroup`"""
  signFormAnswerGroup(
    """Parameters for Sign"""
    input: SignInput
  ): SignPayload

  """SignIn"""
  signIn(
    """Parameters for signIn"""
    input: signInInput
  ): signInPayload

  """Sign up"""
  signUp(
    """Parameters for signUp"""
    input: signUpInput
  ): signUpPayload

  """Toggle 2 Factor Authentication for User"""
  toggle2Fa(
    """Parameters for Toggle2Fa"""
    input: Toggle2FaInput
  ): Toggle2FaPayload

  """Add Role to User Account"""
  toggleAdvancedSettings(
    """Parameters for ToggleAdvancedSettings"""
    input: ToggleAdvancedSettingsInput
  ): ToggleAdvancedSettingsPayload

  """Toggle availability by appointment type, location, or contact type"""
  toggleAvailability(
    """Parameters for ToggleAvailability"""
    input: ToggleAvailabilityInput
  ): ToggleAvailabilityPayload

  """Toggle BAA for external calendar"""
  toggleBaa(
    """Parameters for ToggleBaa"""
    input: ToggleBaaInput
  ): ToggleBaaPayload

  """Deactivate/activate a group/single Care Plan for a given user"""
  toggleCarePlanStatusForSpecificUser(
    """Parameters for toggleCarePlanStatusForSpecificUser"""
    input: toggleCarePlanStatusForSpecificUserInput
  ): toggleCarePlanStatusForSpecificUserPayload

  """toggle paywall for a provider"""
  togglePaywall(
    """Parameters for TogglePaywall"""
    input: TogglePaywallInput
  ): TogglePaywallPayload

  """Toggle Reason for Appointment on Appointment Type of Provider"""
  toggleReasonForAppt(
    """Parameters for ToggleReasonForAppt"""
    input: ToggleReasonForApptInput
  ): ToggleReasonForApptPayload

  """Unblock an ip address"""
  unblockIpAddress(
    """Parameters for unblockIpAddress"""
    input: unblockIpAddressInput
  ): unblockIpAddressPayload

  """Unlock Charting Note"""
  unlockChartingNote(
    """Parameters for unlockChartingNote"""
    input: unlockChartingNoteInput
  ): unlockChartingNotePayload

  """Unlock `FormAnswerGroup`"""
  unlockFormAnswerGroup(
    """Parameters for Unlock"""
    input: UnlockInput
  ): UnlockPayload

  """
  Update a Notification Setting to unsubscribe from a specific notification type
  """
  unsubscribeFromNotification(
    """Parameters for unsubscribeFromNotification"""
    input: unsubscribeFromNotificationInput
  ): unsubscribeFromNotificationPayload

  """THIS MUTATION DOES NOTHING, AND SHOULD NOT BE USED."""
  updateAddendum(
    """Parameters for updateAddendum"""
    input: updateAddendumInput
  ): updateAddendumPayload @deprecated(reason: "Deprecated. Does nothing")

  """Update AllergySensitivity"""
  updateAllergySensitivity(
    """Parameters for updateAllergySensitivity"""
    input: updateAllergySensitivityInput
  ): updateAllergySensitivityPayload

  """Update Announcement"""
  updateAnnouncement(
    """Parameters for updateAnnouncement"""
    input: updateAnnouncementInput
  ): updateAnnouncementPayload

  """Update AppleHealth"""
  updateAppleHealth(
    """Parameters for updateAppleHealth"""
    input: updateAppleHealthInput
  ): updateAppleHealthPayload

  """Update the Appointment"""
  updateAppointment(
    """Parameters for updateAppointment"""
    input: updateAppointmentInput
  ): updateAppointmentPayload

  """Update AppointmentInclusion"""
  updateAppointmentInclusion(
    """Parameters for updateAppointmentInclusion"""
    input: updateAppointmentInclusionInput
  ): updateAppointmentInclusionPayload

  """update Appointment Setting"""
  updateAppointmentSetting(
    """Parameters for updateAppointmentSetting"""
    input: updateAppointmentSettingInput
  ): updateAppointmentSettingPayload

  """Update an Appointment Type and return Appointment Type"""
  updateAppointmentType(
    """Parameters for updateAppointmentType"""
    input: updateAppointmentTypeInput
  ): updateAppointmentTypePayload

  """Update a AppointmentTypeCptCode Object"""
  updateAppointmentTypeCptCode(
    """Parameters for updateAppointmentTypeCptCode"""
    input: updateAppointmentTypeCptCodeInput
  ): updateAppointmentTypeCptCodePayload

  """Update auto task generator"""
  updateAutoTaskGenerator(
    """Parameters for updateAutoTaskGenerator"""
    input: updateAutoTaskGeneratorInput
  ): updateAutoTaskGeneratorPayload

  """update automated insurance billing setting"""
  updateAutomatedInsuranceBillingSetting(
    """Parameters for updateAutomatedInsuranceBillingSetting"""
    input: updateAutomatedInsuranceBillingSettingInput
  ): updateAutomatedInsuranceBillingSettingPayload

  """Update autoscoring"""
  updateAutoscoring(
    """Parameters for updateAutoscoring"""
    input: updateAutoscoringInput
  ): updateAutoscoringPayload

  """Update a BillingItem"""
  updateBillingItem(
    """Parameters for updateBillingItem"""
    input: updateBillingItemInput
  ): updateBillingItemPayload

  """Update a Brand and return Brand"""
  updateBrand(
    """Parameters for updateBrand"""
    input: updateBrandInput
  ): updateBrandPayload

  """Update Care Plan by Care Plan Template"""
  updateByTemplate(
    """Parameters for updateByTemplate"""
    input: updateByTemplateInput
  ): updateByTemplatePayload

  """Update and return calendar view setting"""
  updateCalendarViewSetting(
    """Parameters for updateCalendarViewSetting"""
    input: updateCalendarViewSettingInput
  ): updateCalendarViewSettingPayload

  """Update Calorie Levels in the Health Assessment Service"""
  updateCalorieLevel(
    """Parameters for UpdateCalorieLevel"""
    input: UpdateCalorieLevelInput
  ): UpdateCalorieLevelPayload

  """update Campaign"""
  updateCampaign(
    """Parameters for updateCampaign"""
    input: updateCampaignInput
  ): updateCampaignPayload

  """Update and return a Care Plan"""
  updateCarePlan(
    """Parameters for updateCarePlan"""
    input: updateCarePlanInput
  ): updateCarePlanPayload

  """Update ChangeHealthAccount (used for Labs)"""
  updateChangeHealthAccount(
    """Parameters for updateChangeHealthAccount"""
    input: updateChangeHealthAccountInput
  ): updateChangeHealthAccountPayload

  """Update ChargeBack"""
  updateChargeBack(
    """Parameters for updateChargeBack"""
    input: updateChargeBackInput
  ): updateChargeBackPayload

  """update Chat Setting"""
  updateChatSetting(
    """Parameters for updateChatSetting"""
    input: updateChatSettingInput
  ): updateChatSettingPayload

  """Create Change Health Submitter Object"""
  updateClaimSubmitter(
    """Parameters for UpdateClaimSubmitter"""
    input: UpdateClaimSubmitterInput
  ): UpdateClaimSubmitterPayload

  """Update Client"""
  updateClient(
    """Parameters for updateClient"""
    input: updateClientInput
  ): updateClientPayload

  """update CMS1500"""
  updateCms1500(
    """Parameters for updateCms1500"""
    input: updateCms1500Input
  ): updateCms1500Payload

  """Update a CognitiveStatus Object"""
  updateCognitiveStatus(
    """Parameters for updateCognitiveStatus"""
    input: updateCognitiveStatusInput
  ): updateCognitiveStatusPayload

  """Update a Conversation and return Conversation"""
  updateConversation(
    """Parameters for updateConversation"""
    input: updateConversationInput
  ): updateConversationPayload

  """Update a ConversationMembership and return ConversationMembership"""
  updateConversationMembership(
    """Parameters for updateConversationMembership"""
    input: updateConversationMembershipInput
  ): updateConversationMembershipPayload

  """Update a Course"""
  updateCourse(
    """Parameters for updateCourse"""
    input: updateCourseInput
  ): updateCoursePayload

  """update a Course Group"""
  updateCourseGroup(
    """Parameters for updateCourseGroup"""
    input: updateCourseGroupInput
  ): updateCourseGroupPayload

  """Update a CourseItem"""
  updateCourseItem(
    """Parameters for updateCourseItem"""
    input: updateCourseItemInput
  ): updateCourseItemPayload

  """update a Course Membership"""
  updateCourseMembership(
    """Parameters for updateCourseMembership"""
    input: updateCourseMembershipInput
  ): updateCourseMembershipPayload

  """Update Currency on User Object"""
  updateCurrency(
    """Parameters for UpdateCurrency"""
    input: UpdateCurrencyInput
  ): UpdateCurrencyPayload

  """Update a Custom Email"""
  updateCustomEmail(
    """Parameters for updateCustomEmail"""
    input: updateCustomEmailInput
  ): updateCustomEmailPayload

  """Update a Custom Food"""
  updateCustomFood(
    """Parameters for updateCustomFood"""
    input: updateCustomFoodInput
  ): updateCustomFoodPayload

  """Update an Custom Module and return Custom Module"""
  updateCustomModule(
    """Parameters for updateCustomModule"""
    input: updateCustomModuleInput
  ): updateCustomModulePayload

  """Update an Custom Module Form and return Custom Module Form"""
  updateCustomModuleForm(
    """Parameters for updateCustomModuleForm"""
    input: updateCustomModuleFormInput
  ): updateCustomModuleFormPayload

  """Update a Custom Navigation Item for a Whitelabel User"""
  updateCustomNavItem(
    """Parameters for updateCustomNavItems"""
    input: updateCustomNavItemsInput
  ): updateCustomNavItemsPayload

  """Update a Document and return Document"""
  updateDocument(
    """Parameters for updateDocument"""
    input: updateDocumentInput
  ): updateDocumentPayload

  """Update a DSI comment"""
  updateDsiComment(
    """Parameters for updateDsiComment"""
    input: updateDsiCommentInput
  ): updateDsiCommentPayload

  """Updates an Entry and returns an Entry"""
  updateEntry(
    """Parameters for updateEntry"""
    input: updateEntryInput
  ): updateEntryPayload

  """Update an External Calendar"""
  updateExternalCalendar(
    """Parameters for updateExternalCalendar"""
    input: updateExternalCalendarInput
  ): updateExternalCalendarPayload

  """Update Family History"""
  updateFamilyHistory(
    """Parameters for updateFamilyHistory"""
    input: updateFamilyHistoryInput
  ): updateFamilyHistoryPayload

  """update Fax Acct Info"""
  updateFaxAcctInfo(
    """Parameters for updateFaxAcctInfo"""
    input: updateFaxAcctInfoInput
  ): updateFaxAcctInfoPayload

  """Update a FeatureToggle and Return FeatureToggle"""
  updateFeatureToggle(
    """Parameters for updateFeatureToggle"""
    input: updateFeatureToggleInput
  ): updateFeatureTogglePayload

  """Update Fitbit"""
  updateFitbit(
    """Parameters for updateFitbit"""
    input: updateFitbitInput
  ): updateFitbitPayload

  """Update a Folder and return Folder"""
  updateFolder(
    """Parameters for updateFolder"""
    input: updateFolderInput
  ): updateFolderPayload

  """update FormAnswerGroup"""
  updateFormAnswerGroup(
    """Parameters for updateFormAnswerGroup"""
    input: updateFormAnswerGroupInput
  ): updateFormAnswerGroupPayload

  """Update a FunctionalStatus Object"""
  updateFunctionalStatus(
    """Parameters for updateFunctionalStatus"""
    input: updateFunctionalStatusInput
  ): updateFunctionalStatusPayload

  """Update a Goal"""
  updateGoal(
    """Parameters for updateGoal"""
    input: updateGoalInput
  ): updateGoalPayload

  """Update GoogleFit"""
  updateGoogleFit(
    """Parameters for updateGoogleFit"""
    input: updateGoogleFitInput
  ): updateGoogleFitPayload

  """Updates the care plan status for groups"""
  updateGroupCarePlan(
    """Parameters for updateGroupCarePlan"""
    input: updateGroupCarePlanInput
  ): updateGroupCarePlanPayload

  """Update a Harbor Partner"""
  updateHarborPartner(
    """Parameters for UpdateHarborPartner"""
    input: UpdateHarborPartnerInput
  ): UpdateHarborPartnerPayload

  """Update a HealthConcern Object"""
  updateHealthConcern(
    """Parameters for updateHealthConcern"""
    input: updateHealthConcernInput
  ): updateHealthConcernPayload

  """Update an Appointment Setting"""
  updateHiddenAppointmentSettings(
    """Parameters for UpdateHiddenSettings"""
    input: UpdateHiddenSettingsInput
  ): UpdateHiddenSettingsPayload

  """Update a Human"""
  updateHuman(
    """Parameters for updateHuman"""
    input: updateHumanInput
  ): updateHumanPayload

  """Update an Immunization and return Immunization"""
  updateImmunization(
    """Parameters for updateImmunization"""
    input: updateImmunizationInput
  ): updateImmunizationPayload

  """Update Implantable Device User association"""
  updateImplantableDeviceUser(
    """Parameters for updateImplantableDeviceUser"""
    input: updateImplantableDeviceUserInput
  ): updateImplantableDeviceUserPayload

  """update an insurance authorization"""
  updateInsuranceAuthorization(
    """Parameters for updateInsuranceAuthorization"""
    input: updateInsuranceAuthorizationInput
  ): updateInsuranceAuthorizationPayload

  """Update Insurance Plan"""
  updateInsurancePlan(
    """Parameters for updateInsurancePlan"""
    input: updateInsurancePlanInput
  ): updateInsurancePlanPayload

  """Update Lab Order"""
  updateLabOrder(
    """Parameters for updateLabOrder"""
    input: updateLabOrderInput
  ): updateLabOrderPayload

  """update Location"""
  updateLocation(
    """Parameters for updateLocation"""
    input: updateLocationInput
  ): updateLocationPayload

  """Update Macronutrient Split in the Health Assessment Service"""
  updateMacronutrientSplit(
    """Parameters for UpdateMacronutrientSplit"""
    input: UpdateMacronutrientSplitInput
  ): UpdateMacronutrientSplitPayload

  """Update a Meal"""
  updateMeal(
    """Parameters for updateMeal"""
    input: updateMealInput
  ): updateMealPayload

  """Update Medication"""
  updateMedication(
    """Parameters for updateMedication"""
    input: updateMedicationInput
  ): updateMedicationPayload

  """Update a Note"""
  updateNote(
    """Parameters for updateNote"""
    input: updateNoteInput
  ): updateNotePayload

  """Update a Note Scheduler and return NoteSchedulerType"""
  updateNoteScheduler(
    """Parameters for updateNoteScheduler"""
    input: updateNoteSchedulerInput
  ): updateNoteSchedulerPayload

  """update a notification"""
  updateNotification(
    """Parameters for updateNotification"""
    input: updateNotificationInput
  ): updateNotificationPayload

  """Update a Notification Contact"""
  updateNotificationContact(
    """Parameters for updateNotificationContact"""
    input: updateNotificationContactInput
  ): updateNotificationContactPayload

  """Update multiple notification records at once"""
  updateNotificationRecords(
    """Parameters for bulkUpdateNotificationRecords"""
    input: bulkUpdateNotificationRecordsInput
  ): bulkUpdateNotificationRecordsPayload

  """Update a Notification Setting and return Notification Setting"""
  updateNotificationSetting(
    """Parameters for updateNotificationSetting"""
    input: updateNotificationSettingInput
  ): updateNotificationSettingPayload

  """update multiple notifications at once"""
  updateNotifications(
    """Parameters for bulkUpdateNotifications"""
    input: bulkUpdateNotificationsInput
  ): bulkUpdateNotificationsPayload

  """Update an Offering"""
  updateOffering(
    """Parameters for updateOffering"""
    input: updateOfferingInput
  ): updateOfferingPayload

  """update OfficeallySftpAccount"""
  updateOfficeallySftpAccount(
    """Parameters for updateOfficeallySftpAccount"""
    input: updateOfficeallySftpAccountInput
  ): updateOfficeallySftpAccountPayload

  """Update a OnboardingFlow and return OnboardingFlow"""
  updateOnboardingFlow(
    """Parameters for updateOnboardingFlow"""
    input: updateOnboardingFlowInput
  ): updateOnboardingFlowPayload

  """Update a OnboardingItem and return OnboardingItem"""
  updateOnboardingItem(
    """Parameters for updateOnboardingItem"""
    input: updateOnboardingItemInput
  ): updateOnboardingItemPayload

  """Update Org Owner of Organization"""
  updateOrgOwner(
    """Parameters for updateOrgOwner"""
    input: updateOrgOwnerInput
  ): updateOrgOwnerPayload

  """Update Organization"""
  updateOrganization(
    """Parameters for updateOrganization"""
    input: updateOrganizationInput
  ): updateOrganizationPayload

  """Update a OrganizationCptCode Object"""
  updateOrganizationCptCode(
    """Parameters for updateOrganizationCptCode"""
    input: updateOrganizationCptCodeInput
  ): updateOrganizationCptCodePayload

  """Update org members"""
  updateOrganizationMember(
    """Parameters for updateOrganizationMember"""
    input: updateOrganizationMemberInput
  ): updateOrganizationMemberPayload

  """Update a OrganizationMembership"""
  updateOrganizationMembership(
    """Parameters for updateOrganizationMembership"""
    input: updateOrganizationMembershipInput
  ): updateOrganizationMembershipPayload
  updateOrganizationUiConfiguration(
    """Parameters for UpdateUiConfiguration"""
    input: UpdateUiConfigurationInput
  ): UpdateUiConfigurationPayload

  """update Permission Template"""
  updatePermissionTemplate(
    """Parameters for updatePermissionTemplate"""
    input: updatePermissionTemplateInput
  ): updatePermissionTemplatePayload

  """Update a policy"""
  updatePolicy(
    """Parameters for updatePolicyMutation"""
    input: updatePolicyMutationInput
  ): updatePolicyMutationPayload

  """Update a Procedure Object"""
  updateProcedure(
    """Parameters for updateProcedure"""
    input: updateProcedureInput
  ): updateProcedurePayload

  """Update a product"""
  updateProduct(
    """Parameters for updateProduct"""
    input: updateProductInput
  ): updateProductPayload

  """Update ProviderCptCode Objects"""
  updateProviderCptCodes(
    """Parameters for updateProviderCptCodes"""
    input: updateProviderCptCodesInput
  ): updateProviderCptCodesPayload

  """Update a Received Direct Message"""
  updateReceivedDirectMessage(
    """Parameters for updateReceivedDirectMessage"""
    input: updateReceivedDirectMessageInput
  ): updateReceivedDirectMessagePayload

  """update a received fax"""
  updateReceivedFax(
    """Parameters for updateReceivedFax"""
    input: updateReceivedFaxInput
  ): updateReceivedFaxPayload

  """Update a care plan recommendation"""
  updateRecommendation(
    """Parameters for updateRecommendation"""
    input: updateRecommendationInput
  ): updateRecommendationPayload

  """update a recurring form"""
  updateRecurringForm(
    """Parameters for updateRecurringForm"""
    input: updateRecurringFormInput
  ): updateRecurringFormPayload

  """Update Referral"""
  updateReferral(
    """Parameters for updateReferral"""
    input: updateReferralInput
  ): updateReferralPayload

  """Update Referring Physician"""
  updateReferringPhysician(
    """Parameters for updateReferringPhysician"""
    input: updateReferringPhysicianInput
  ): updateReferringPhysicianPayload

  """Add Reply To Email Addresses to User"""
  updateReplyToEmailAddresses(
    """Parameters for AddReplyToEmailAddresses"""
    input: AddReplyToEmailAddressesInput
  ): AddReplyToEmailAddressesPayload

  """update requested payment"""
  updateRequestedPayment(
    """Parameters for updateRequestedPayment"""
    input: updateRequestedPaymentInput
  ): updateRequestedPaymentPayload

  """Update an existing saved filter"""
  updateSavedFilter(
    """Parameters for updateSavedFilter"""
    input: updateSavedFilterInput
  ): updateSavedFilterPayload

  """Update a Smart Phrase"""
  updateSmartPhrase(
    """Parameters for updateSmartPhrase"""
    input: updateSmartPhraseInput
  ): updateSmartPhrasePayload

  """Update a Smoking Status"""
  updateSmokingStatus(
    """Parameters for updateSmokingStatus"""
    input: updateSmokingStatusInput
  ): updateSmokingStatusPayload

  """Archive/Unarchive a Course"""
  updateState(
    """Parameters for updateState"""
    input: updateStateInput
  ): updateStatePayload

  """Updates a payment card"""
  updateStripeCustomerDetail(
    """Parameters for updateStripeCustomerDetail"""
    input: updateStripeCustomerDetailInput
  ): updateStripeCustomerDetailPayload

  """Update Stripe Verification Details"""
  updateStripeVerificationDetails(
    """Parameters for updateStripeVerificationDetails"""
    input: updateStripeVerificationDetailsInput
  ): updateStripeVerificationDetailsPayload

  """update Subscription"""
  updateSubscription(
    """Parameters for updateSubscription"""
    input: updateSubscriptionInput
  ): updateSubscriptionPayload

  """Update a SuperBill"""
  updateSuperBill(
    """Parameters for updateSuperBill"""
    input: updateSuperBillInput
  ): updateSuperBillPayload

  """Update a custom user tag"""
  updateTag(
    """Parameters for updateTag"""
    input: updateTagInput
  ): updateTagPayload

  """Update a task for provider"""
  updateTask(
    """Parameters for updateTask"""
    input: updateTaskInput
  ): updateTaskPayload

  """Update multiple tasks provider"""
  updateTasksBulk(
    """Parameters for bulkUpdateTasks"""
    input: bulkUpdateTasksInput
  ): bulkUpdateTasksPayload

  """Update a UniqueDeviceIdentifier Object"""
  updateUniqueDeviceIdentifier(
    """Parameters for updateUniqueDeviceIdentifier"""
    input: updateUniqueDeviceIdentifierInput
  ): updateUniqueDeviceIdentifierPayload

  """
  Update the current user, or a patient that the current user has access to. To update other org members, use updateOrganizationMembership
  """
  updateUser(
    """Parameters for updateUser"""
    input: updateUserInput
  ): updateUserPayload

  """Updates the appointment pricing for this user"""
  updateUserAppointmentPricing(
    """Parameters for updateUserAppointmentPricing"""
    input: updateUserAppointmentPricingInput
  ): updateUserAppointmentPricingPayload

  """Update User's Email Address"""
  updateUserEmail(
    """Parameters for UpdateUserEmail"""
    input: UpdateUserEmailInput
  ): UpdateUserEmailPayload

  """Update a Group"""
  updateUserGroup(
    """Parameters for updateUserGroup"""
    input: updateUserGroupInput
  ): updateUserGroupPayload

  """Update Webhook"""
  updateWebhook(
    """Parameters for updateWebhook"""
    input: updateWebhookInput
  ): updateWebhookPayload

  """Enable Zus integration for provider account"""
  updateZus(
    """Parameters for Update"""
    input: UpdateInput
  ): UpdatePayload

  """Upload a CMS1500 batch to CandidHealth"""
  uploadBatchToCandidHealth(
    """Parameters for uploadBatchToCandidHealth"""
    input: uploadBatchToCandidHealthInput
  ): uploadBatchToCandidHealthPayload

  """Upload a CMS1500 batch to ChangeHealth"""
  uploadBatchToChangeHealth(
    """Parameters for uploadBatchToChangeHealth"""
    input: uploadBatchToChangeHealthInput
  ): uploadBatchToChangeHealthPayload

  """Upload a CMS1500 batch to OfficeAlly"""
  uploadBatchToOfficeally(
    """Parameters for uploadBatchToOfficeally"""
    input: uploadBatchToOfficeallyInput
  ): uploadBatchToOfficeallyPayload

  """
  Upload a CMS1500 to integrations: ChangeHealth, OfficeAlly, CandidHealth
  """
  uploadCms1500sToIntegrations(
    """Parameters for uploadToIntegrations"""
    input: uploadToIntegrationsInput
  ): uploadToIntegrationsPayload

  """Verify 2FA code for Human"""
  validateVerificationToken(
    """Parameters for validateVerificationToken"""
    input: validateVerificationTokenInput
  ): validateVerificationTokenPayload
}

"""Chat message object"""
type Note {
  """url for note audio"""
  attached_audio_url: String

  """url for note image"""
  attached_image_url: String

  """note content"""
  content: String

  """conversation id"""
  conversation_id: ID

  """The time at which this note was created"""
  created_at: String!

  """User who created note"""
  creator: User

  """Pagination cursor"""
  cursor: Cursor!

  """True if this note deleted by a user"""
  deleted_by_user: Boolean!

  """id for note document"""
  document_id: ID

  """Name of attached document"""
  document_name: String

  """The unique identifier of the note"""
  id: ID!

  """Name of attached image"""
  image_name: String

  """True if this note is using as auto response message"""
  is_autoresponse: Boolean!

  """A User which created a Note on behalf of a Conversation Owner"""
  on_behalf_user: User

  """receiver of note"""
  recipient_id: ID @deprecated(reason: "Use conversation_memberships of conversation instead")

  """Scheduled sent at"""
  scheduled_at: String

  """Get associated task with a chat message"""
  task: Task

  """The time at which this note was updated or marked as deleted by a user"""
  updated_at: String!

  """creator of note"""
  user_id: ID

  """
  conditional to see if user recipient viewd note. In community chats, you need to pass in a viewer_id
  """
  viewed(
    """ID of the user that you want to check has viewed the note"""
    viewer_id: ID
  ): Boolean
}

"""Payload for a note"""
input NoteInput {
  """The document attached to the note"""
  attached_document: Upload

  """The image attached to the note"""
  attached_image: Upload

  """The content of the note"""
  content: String
}

"""Note sorting enum"""
enum NoteOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
}

"""Scheduled chat notes"""
type NoteScheduler {
  """Scheduled messsage blast: get first four users"""
  first_four_invitees: [User!]

  """The unique identifier of the scheduler"""
  id: ID!

  """The number of invitees"""
  invitees_count: Int

  """Get last conversation task"""
  last_task: Task

  """The note"""
  note: Note

  """The content of the note"""
  note_content: String

  """Get all directly selected user ids"""
  participant_ids: [ID]

  """Get all directly selected user groups"""
  selected_user_groups: [UserGroup!]

  """Get all directly selected users"""
  selected_users: [User!]

  """The date and time when the scheduler was last updated."""
  updated_at: String!

  """Owner user of a note scheduler"""
  user: User
}

"""A notification"""
type Notification {
  """
  returns the associated entry if type is EntryNotification, otherwise, nil
  """
  associated_entry: Entry

  """The id of the object associated with the notification"""
  associated_object: String

  """The creation time of the notification"""
  created_at: String!

  """creator name of this notification"""
  creator_user_name: String

  """Pagination cursor"""
  cursor: Cursor!

  """The unique identifier of the notification"""
  id: ID!

  """The link that the notification goes to"""
  link: String

  """The full link that the notification goes to"""
  link_string: String

  """The message body of the notification"""
  message: String

  """recipient of this notification"""
  other_party: User

  """The recipient of the notification"""
  other_party_id: String

  """This turns to true if the user clicks on the notification"""
  read: String

  """This turns to true if the user loads the notification"""
  seen: Boolean!

  """The type of notification"""
  type: String

  """creator of this notification"""
  user: User

  """The creator of the notification"""
  user_id: String
}

"""A notification contact"""
type NotificationContact {
  """Has personal client portal access"""
  client_portal_access: Boolean!

  """Client portal settings"""
  client_portal_setting: ClientPortalSetting

  """contact type"""
  contact_type: String

  """should a notifications of user be copied to contact"""
  copy_notifications: Boolean!

  """contact email"""
  email: String

  """is emergency contact"""
  emergency: Boolean!

  """first name of a contact"""
  first_name: String

  """full legal name with preferred"""
  full_legal_name_with_preferred: String

  """full name of a contact"""
  full_name: String

  """The unique identifier of the contact"""
  id: ID!

  """last name of a contact"""
  last_name: String

  """Linked user to notification contact"""
  linked_client: User

  """ID of the linked user account"""
  linked_client_id: String

  """contact phone number"""
  phone_number: String

  """relationship between contact and user"""
  relationship: String

  """Date notification contact was last updated"""
  updated_at: String!

  """Owner of this notification contact"""
  user: User

  """user id"""
  user_id: ID
}

"""Payload for a notification contact"""
input NotificationContactInput {
  """If true, the notification contact will be deleted"""
  _destroy: Boolean

  """The email of the notification contact"""
  email: String

  """The ID of the notification contact"""
  id: ID
}

"""Notification sorting enum"""
enum NotificationOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
}

"""An object containing the users preferences on notification"""
type NotificationSetting {
  """The unique identifier of the setting"""
  id: ID!

  """An option of receiving pdates and special offers [email/sms]"""
  marketing_communcation_preference: String!

  """Send an email when a course module is completed"""
  notification_on_module_completion: Boolean!

  """Receive updates and special offers"""
  receive_updates_and_offers: Boolean!

  """Get an email whenever a client posts a comment"""
  send_comment_emails: Boolean

  """Get a push notification when there is a new comment"""
  send_comment_push: Boolean

  """Send an email when a client completes a program"""
  send_course_complete_email: Boolean

  """Send an email 5 minutes before the appointment"""
  send_email_before_appointment: Boolean

  """Send an email when a new appointment is booked"""
  send_email_on_appointment_book: Boolean

  """Send an email when an appointment is cancelled"""
  send_email_on_appointment_cancel: Boolean

  """Send an email to provider when client has been assigned"""
  send_email_on_client_has_been_assigned_to_you: Boolean

  """Get an email when fax delivery fails"""
  send_email_on_fax_delivery_failure: Boolean

  """Get an email when a fax is received"""
  send_email_on_fax_received: Boolean

  """Get an email if client completed an intake flow"""
  send_email_on_intake_flow_complete: Boolean

  """Get an email if client completed an intake flow item"""
  send_email_on_intake_flow_item_complete: Boolean

  """Get an email if client started an intake flow"""
  send_email_on_intake_flow_start: Boolean

  """Get an email when a new document is uploaded"""
  send_email_on_new_document: Boolean

  """Get an email when a new folder is created"""
  send_email_on_new_folder: Boolean

  """Send an email when a client purchases a package"""
  send_email_on_package_purchase: Boolean

  """Get an email when a scheduled payment fails"""
  send_email_on_scheduled_payment_failed: Boolean

  """
  Send an email to primary account holder when subscription payment is made
  """
  send_email_receipt_for_subscription_payment: Boolean

  """Get an email when provider adds an emoji to a journal entry"""
  send_emoji_email: Boolean

  """Get a push notification when provider adds an emoji to a journal entry"""
  send_emoji_push: Boolean

  """Get an email whenever a client posts an entry"""
  send_entry_emails: Boolean

  """Send an email to client when reminder to complete goal checked"""
  send_goal_reminder_email: Boolean

  """
  Send a push notification to client when reminder to complete goal checked
  """
  send_goal_reminder_push: Boolean

  """Get an email whenever you get a new message in a group chat"""
  send_group_message_emails: Boolean

  """Get a push notification when there is a new message in a group chat"""
  send_group_message_push: Boolean

  """
  Sends an email to the client provider when their insurance is about to expire
  """
  send_insurance_expiry_notifications: Boolean

  """Get an email whenever you get a new message"""
  send_message_emails: Boolean

  """Get a push notification when there is a new message"""
  send_message_push: Boolean

  """Get an email when a new client is added to the organization"""
  send_new_clients_emails: Boolean

  """
  Send an email to the client provider when client has updated their insurance information
  """
  send_new_insurance_added_notifications: Boolean

  """Send an email to client when new program module is available"""
  send_new_module_email: Boolean

  """
  Send a push notification to client when new program module is available
  """
  send_new_module_push: Boolean

  """Get a push notification 5 minutes before the appointment"""
  send_push_before_appointment: Boolean

  """The date and time of the last update of the setting"""
  updated_at: String

  """The owner of the notification setting"""
  user: User
}

"""Payload for a food nutrients"""
input NutrientsInput {
  """The number of added sugars in the food"""
  added_sugars: String

  """The amount of calcium in the food"""
  calcium: String

  """The amount of carbohydrates in the food"""
  carbs: String

  """The amount of cholesterol in the food"""
  cholesterol: String

  """The amount of fat in the food"""
  fat: String

  """The amount of iron in the food"""
  iron: String

  """The number of kilocalories in the food"""
  kcal: String

  """The amount of monounsaturated fat in the food"""
  monounsaturated_fat: String

  """The amount of polyunsaturated fat in the food"""
  polyunsaturated_fat: String

  """The amount of potassium in the food"""
  potassium: String

  """The amount of protein in the food"""
  protein: String

  """The amount of saturated fat in the food"""
  saturated_fat: String

  """The amount of sodium in the food"""
  sodium: String

  """The amount of total fiber in the food"""
  total_fiber: String

  """The amount of total sugars in the food"""
  total_sugars: String

  """The amount of trans fat in the food"""
  trans_fat: String

  """The amount of vitamin A in the food"""
  vitamin_a: String

  """The amount of vitamin C in the food"""
  vitamin_c: String

  """The amount of vitamin D in the food"""
  vitamin_d: String
}

"""Offering (or Package)"""
type Offering {
  """Formatted frequency string abbreviated for offering list page"""
  abbreviated_frequency_times_string: String

  """Whether or not this packages has been archived"""
  archived: Boolean!

  """Ask for a CC (even on a free package)"""
  ask_for_cc: Boolean!

  """frequency client will be billed for package"""
  billing_frequency: String

  """count of billing items for a given offering"""
  billing_items_count: Int

  """
  True if package is allowed to be gifted to other clients. Currently only available for non-recurring offerings
  """
  can_be_gifted: Boolean!

  """
  If false the payment for the offering should be collected manually at a later time
  """
  charge_immediately: Boolean!

  """course id associated with this package"""
  course_id: ID

  """created at"""
  created_at: String!

  """currency used to pay for this package"""
  currency: String

  """Pagination cursor"""
  cursor: Cursor!

  """Description of the package, not allowing nil"""
  description: String

  """ID of the embedded custom module form"""
  embed_question_form_id: String

  """fb_pixel"""
  fb_pixel: String

  """first time payment price of package"""
  first_time_payment: String

  """Formatted frequency string"""
  frequency_times_string: String

  """The unique identifier of the offering"""
  id: ID!

  """A URL to purchase the package"""
  immediate_purchase_url: String

  """Whether the package includes a course that has ended"""
  includes_ended_fixed_course: Boolean

  """initial payment amount of package"""
  initial_payment_amount: String

  """initial price of package including applicable taxes"""
  initial_price_with_taxes: String

  """selected meal plan from living plate"""
  living_plate_meal_plan_id: String

  """
  if this offering has a living plate meal plan associated, returns a link to living plate meal plan preview
  """
  living_plate_meal_plan_name: String

  """
  if this offering has a living plate meal plan associated, returns a link to living plate meal plan preview
  """
  living_plate_preview_url: String

  """
  Number of times the package could be purchased. Unlimited if set to nil
  """
  max_purchases: String

  """meal plan options in offering (currently only from living plate)"""
  meal_plan_options: [MealPlan!]

  """minimum_quantity"""
  minimum_quantity: String

  """name of package"""
  name: String

  """courses related to offering"""
  offering_courses: [OfferingCourse!]

  """user groups that are specific to this offering"""
  offering_group_visibilities: [OfferingGroupVisibility!]

  """offering image"""
  offering_image: OfferingImage

  """id of offering image"""
  offering_image_id: ID

  """URL of the offering image to use"""
  offering_image_url: String

  """appointment types related to offering"""
  offering_includes(
    """
    If present, only return offering includes that include the given appointment type
    """
    appointment_type_id: ID

    """If true, only return offering includes that are bookable by the client"""
    only_bookable_by_client: Boolean
  ): [OfferingInclude!]

  """count of offering includes associated with offering"""
  offering_includes_count: Int!

  """lab options included in offering"""
  offering_lab_options: [OfferingLabOption!]

  """Taxes on offering products"""
  offering_product_taxes: Float

  """Products included in the offering"""
  offering_products: [OfferingProduct!]

  """on on_purchase_ifs_tag_id"""
  on_purchase_ifs_tag_id: String

  """
  Shows whether user group should be changed when client which is already in the user group is buying the package
  """
  override_group_on_purchase: Boolean!

  """price of package"""
  price: String

  """price per minute"""
  price_per_minute: String

  """repeat times"""
  repeat_times: String

  """
  When true, the package requires appointment booking during package purchase
  """
  require_booking_purchase: Boolean!

  """position of package when displayed in packages list"""
  row_order: String

  """offering image id"""
  selected_image_id: String

  """show free text to customers on offerings of zero price"""
  show_free_text: Boolean!

  """show offering toggle"""
  show_offering: Boolean!

  """show price toggle"""
  show_price: Boolean!

  """start_fb_pixel"""
  start_fb_pixel: String

  """total of billing_items.amount_paid for a given offering"""
  total_revenue: Float

  """
  When false, the package is at its purchase cap, and cannot be bought by a client
  """
  under_purchase_cap: Boolean

  """updated at"""
  updated_at: String!

  """The user who owns the package"""
  user: User

  """user group id associated with this package"""
  user_group_id: ID

  """User group name associated with this offering"""
  user_group_name: String

  """id of user"""
  user_id: ID

  """count of user package selections for a given offering"""
  user_package_selections_count: Int

  """user pays toggle"""
  user_pays: Boolean!

  """video associated with offering"""
  video_url: String

  """
  Whether the package is visible to all or to a specific group or completely hidden.
  """
  visibility_status: String!
}

"""Offering Coupon"""
type OfferingCoupon {
  """The amount off due to this offering coupon"""
  amount_off: String

  """The amount off due to this offering coupon"""
  amount_off_string: String

  """The time this offering coupon is applied"""
  applies_to_string: String

  """The code of this offering coupon"""
  code: String

  """The time at which this offering coupon was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """The time at which this offering coupon was deleted"""
  deleted_at: String

  """The date the promo code expires at"""
  expires_at: String

  """The flat amount off due to this offering coupon"""
  flat_amount_off: String

  """The unique identifier of the coupon"""
  id: ID!

  """The coupon is expired or valid, returns true if coupon is expired"""
  is_expired: Boolean!

  """The coupon is expired or valid, returns true if the coupon is valid"""
  is_valid: Boolean!

  """The amount of times the offering coupon has been used"""
  number_of_times_used: String

  """The owner of this Offering Coupon"""
  offering_coupon_owner: User

  """Names of offerings this coupon is connected to"""
  package_connection_names: [String!]

  """The promo type of this offering coupon"""
  promo_type: String

  """The repeat times of this offering coupon"""
  repeat_times: String

  """concatenated string of ammount off string and applies to string"""
  to_one_line: String

  """The time at which this offering coupon was last updated at"""
  updated_at: String!

  """The amount of times the offering coupon can be used"""
  usage_limit: String

  """The user id who created this offering coupon"""
  user_id: String
}

"""OfferingCoupon sorting enum"""
enum OfferingCouponOrderKeys {
  CODE_ASC
  CODE_DESC
  TYPE_ASC
  TYPE_DESC
  APPLIES_TO_ASC
  APPLIES_TO_DESC
  AMOUNT_ASC
  AMOUNT_DESC
  EXPIRES_AT_ASC
  EXPIRES_AT_DESC
  TOTAL_USAGE_ASC
  TOTAL_USAGE_DESC
}

"""Offering Course"""
type OfferingCourse {
  """course"""
  course: Course

  """id of related course"""
  course_id: ID!

  """created at"""
  created_at: String!

  """The unique identifier of the join"""
  id: ID!

  """id of related offering"""
  offering_id: ID

  """udpated at"""
  updated_at: String!
}

"""
User groups that are specific to this offering will only be visible to clients in these user groups
"""
type OfferingGroupVisibility {
  """The unique identifier of the visibility"""
  id: ID!

  """name of the user group"""
  name: String

  """id of related offering"""
  offering_id: ID

  """id of related user group"""
  user_group_id: ID
}

"""Offering Image"""
type OfferingImage {
  """created at"""
  created_at: String!

  """The unique identifier of the offering image"""
  id: ID!

  """image content type"""
  image_content_type: String

  """image file name"""
  image_file_name: String

  """image file size"""
  image_file_size: String

  """when image was updated"""
  image_updated_at: String

  """url for image"""
  image_url: String

  """name of image"""
  name: String

  """updated at"""
  updated_at: String!
}

"""Offering image upload"""
input OfferingImageUpload {
  """The image for upload"""
  image: Upload
}

"""Offering Include"""
type OfferingInclude {
  """appointment type"""
  appointment_type: AppointmentType

  """id of related appointment type"""
  appointment_type_id: ID

  """created at"""
  created_at: String!

  """expires in"""
  expires_in: String

  """form id"""
  form_id: String

  """The unique identifier of the offering include."""
  id: ID!

  """
  whether or not the offering_include (appointment type) should be recurring
  """
  is_repeating: Boolean!

  """id of related offering"""
  offering_id: ID

  """quanity of appointments in package"""
  quantity: String

  """whether or not the offering book"""
  required_appointment_type: Boolean!

  """udpated at"""
  updated_at: String!
}

"""Payload for an include to an offering"""
input OfferingIncludesFields {
  """The unique identifier of the appointment type"""
  appointment_type_id: ID

  """The unique identifier of the object"""
  id: ID

  """Whether the offering is repeating"""
  is_repeating: Boolean

  """The quantity of the offering"""
  quantity: String

  """Whether the appointment type is required"""
  required_appointment_type: Boolean
}

"""Offering Lab Option"""
type OfferingLabOption {
  """created at"""
  created_at: String!

  """The unique identifier of the lab option"""
  id: ID!

  """lab option"""
  lab_option: LabOption

  """id of related appointment type"""
  lab_option_id: ID

  """id of related offering"""
  offering_id: ID

  """udpated at"""
  updated_at: String!
}

"""Offering sorting enum"""
enum OfferingOrderKeys {
  SET_ORDER
  PRICE_ASC
  PRICE_DESC
  NAME_ASC
  NAME_DESC

  """Sort by billing items count descending"""
  BEST_SELLER
}

"""Offering product type"""
type OfferingProduct {
  """
  If true the quantity of the main product will be reduced, otherwise changing offering_product.quantity won't affect on the main product
  """
  deduct_main_quantity: Boolean

  """The unique identifier of the offering product"""
  id: ID!

  """ID of related offering"""
  offering_id: ID!

  """
  The price of included product. If offering_product.price == nil, the price will be equal to product.price
  """
  price: String

  """A product included into the offering"""
  product: Product

  """The quantity of included products"""
  quantity: String

  """Tax amount if product has tax rate"""
  tax_amount: String

  """If true tax will be added to the price"""
  taxable: Boolean!
}

"""Payload for an offering product"""
input OfferingProductInput {
  """If true, the offering product will be deleted"""
  _destroy: Boolean

  """If true, the main quantity will be deducted"""
  deduct_main_quantity: Boolean

  """The ID of the offering product"""
  id: ID

  """The price of the offering product"""
  price: String

  """The offering product"""
  product: ProductInput

  """The quantity of the offering product"""
  quantity: String

  """If true, the offering product is taxable"""
  taxable: Boolean
}

"""Offerings data type"""
type OfferingsDataType {
  """The frequency of the offering"""
  freq: String

  """The month of the offering"""
  month: String
}

"""Info on SFTP connection to OfficeAlly"""
type OfficeallySftpAccount {
  """The OfficeAlly SFTP URL"""
  ftp_url: String

  """The unique identifier of the connection"""
  id: ID!

  """True if the SFTP connection is turned by user"""
  is_enabled: Boolean

  """True if the SFTP connection is working"""
  is_valid: Boolean

  """The last time we imported from the SFTP"""
  last_imported_from: String

  """The SFTP OfficeAlly Username"""
  username: String
}

"""An onboarding flow that is comprised of onboarding items"""
type OnboardingFlow {
  """The date this onboarding flow was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """If true, the flow has more froms after welcome"""
  has_forms_after_welcome: Boolean

  """The unique identifier of the flow"""
  id: ID!

  """Check if current user organization has more than 1 provider"""
  is_multiple_providers: Boolean

  """The name of this onboarding flow"""
  name: String

  """All onboarding items that make up the onboarding flow"""
  onboarding_items(
    """If true, only return custom module forms"""
    custom_module_forms_only: Boolean = false
  ): [OnboardingItem!]!

  """The number of onboarding items in the flow"""
  onboarding_items_count: Int

  """Owner of this onboarding flow"""
  user: User

  """The user groups this onboarding flow is associated with"""
  user_groups: [UserGroup!]

  """The number of user groups this onboarding flow is associated with"""
  user_groups_count: Int

  """
  The combined name list of the user groups this onboarding flow is associated with
  """
  user_groups_name_string: String
}

"""OnboardingFlow sorting enum"""
enum OnboardingFlowOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  FORMS_COUNT_ASC
  FORMS_COUNT_DESC
}

"""An onboarding item that has something for the client to complete"""
type OnboardingItem {
  """The URL to go to to edit the attached object"""
  attached_object_edit_url: String

  """Custom text above the billing info screen"""
  billing_disclaimer: String

  """Return the ID of the associated completed form_answer_group"""
  completed_form_id: String

  """The completed onboarding item for the given user id (from args)"""
  completed_onboarding_item: CompletedOnboardingItem

  """The relevant date to show"""
  date_to_show: String

  """
  The display name for the onboarding item (based off the attached object)
  """
  display_name: String

  """Onboarding item has matrix field"""
  has_matrix_field: Boolean

  """The unique identifier of the onboarding item"""
  id: ID!

  """Return the ID of the incomplete form"""
  incomplete_form_id: String

  """Show if it the last item in related onboarding flow"""
  is_last_item(
    """Show if it the last item in related onboarding flow"""
    custom_module_forms_only: Boolean = false
  ): Boolean

  """Whether the user can skip this onboarding item"""
  is_skippable: Boolean!

  """The ID of the associated item"""
  item_id: String

  """The type of item attached to this onboarding item"""
  item_type: String

  """The user group this onboarding flow is assigned to"""
  onboarding_flow: OnboardingFlow

  """ID of the onboarding flow"""
  onboarding_flow_id: ID

  """Custom text above the photo ID screen"""
  photo_id_disclaimer: String

  """Custom text above the insurance policy screen"""
  policy_disclaimer: String

  """Owner of this onboarding item"""
  user: User

  """The URL to view the onboarding item"""
  view_url: String

  """Custom text for the welcome screen"""
  welcome_text: String
}

"""Payload for a location of an organization"""
input OrgLocationInput {
  """The city"""
  city: String

  """The country code"""
  country: String

  """The ID of the location"""
  id: ID

  """The first line of the address"""
  line1: String

  """The second line of the address"""
  line2: String

  """The graphql_name of the location"""
  name: String

  """The NPI of the location"""
  npi: String

  """The other ID of the location"""
  other_id: String

  """The other ID qual of the location"""
  other_id_qual: String

  """The place of service ID of the location"""
  place_of_service_id: String

  """The state"""
  state: String

  """The ID of user who owns the location"""
  user_id: String

  """The zip code"""
  zip: String
}

"""An organization, that is an umbrella group for multiple providers"""
type Organization {
  """The active potential care team members of the organization"""
  active_care_team_members(
    """The list of IDs of interested providers"""
    provider_ids: [ID]

    """
    Filters the provider list to only include users who have ALL of the specified tags applied. Ignored if org_level is not true
    """
    tag_ids: [ID]

    """
    An array of provider record identifiers. When passed in, only providers with these matching record identifiers are returned.
    """
    record_identifiers: [String]
    state_licenses: [String]
  ): [User!]

  """
  The active users of the organization used for starting new conversations
  """
  active_members_for_conversation(exclude_sub_org_members: Boolean = false, keywords: String = null): [User!]

  """Returns organization appointment locations"""
  appointment_locations: [AppointmentLocation!]

  """Can have suborgs for this org"""
  can_have_suborgs: Boolean

  """The creation date of the organization"""
  created_at: String!

  """The filled out teaching kitchen form"""
  filled_tk_form: FormAnswerGroup @deprecated

  """The unique identifier of the organization"""
  id: ID!

  """The location of the organization"""
  location: Location

  """The name of the organization"""
  name: String

  """The NPI of the organization"""
  npi: String

  """The number of users in the organization"""
  num_users: String

  """The ID of the onboarding flow for org providers"""
  onboarding_flow_id: String

  """The active organization memberships of the organization"""
  only_active_organization_memberships: [OrganizationMembership!]

  """The active providers of the organization"""
  only_active_providers(
    """If false return only active providers of current org"""
    include_suborg_providers: Boolean

    """Customize IDs of iterested providers"""
    provider_ids: [ID]
  ): [User!]

  """The number of active providers of the organization"""
  only_active_providers_count(
    """Customize IDs of iterested providers"""
    provider_ids: [ID]
  ): Int

  """The active support users of the organization"""
  only_active_support: [User!]

  """The number of active support user of the organization"""
  only_active_support_count: Int

  """Potential Organization Roles for this Organization"""
  org_roles: [String!]

  """Returns organization cpt codes"""
  organization_cpt_codes: [OrganizationCptCodeType!]

  """The email of organization"""
  organization_email: String!

  """The first organization info of the organization"""
  organization_info: OrganizationInfo

  """The organization infos of the organization"""
  organization_infos(id: ID, keywords: String, offset: Int = 0, should_paginate: Boolean = false): [OrganizationInfo!]

  """The count of organization infos of the organization"""
  organization_infos_count: Int

  """The organization memberships of the organization"""
  organization_memberships(keywords: String, offset: Int = 0, page_size: Int = 10, should_paginate: Boolean = false, use_filters: Boolean = false): [OrganizationMembership!]

  """The total count of organization memberships on this organization"""
  organization_memberships_count: Int

  """The other id"""
  other_id: String

  """The other ID qualifier (what type of ID it is)"""
  other_id_qual: String

  """The owner of the organization"""
  owner: User

  """The ID of the org owner"""
  owner_id: ID

  """The owner of the org's subscription"""
  owner_subscription: SubscriptionInstance

  """Parent organization for this org"""
  parent_organization: Organization

  """ID of the parent organization"""
  parent_organization_id: ID

  """Permission templates for this org"""
  permission_templates: [PermissionTemplateType!]

  """The phone number of the organization"""
  phone_number: String

  """The providers of the organization"""
  providers(
    keywords: String

    """Two letter state abbreviation (e.g. "CA", "NY")"""
    licensed_in_state: String
    offset: Int = 0
    provider_ids: [ID] = []
    should_paginate: Boolean = false
    with_private_notes_for_id: String

    """
    When passed in, only providers with at least ONE of the passed-in tags will be returned.
    """
    with_tag_ids: [ID]
  ): [User!]

  """The number of providers in the organization"""
  providers_count: Int

  """
  The number of users in the organization connected their rupa health account
  """
  rupa_health_members: [User!]

  """Returns organization state licenses"""
  state_licenses: [String!]

  """Suborganizations for this org"""
  suborganizations: [Organization!]

  """Returns organization tags"""
  tags: [Tag!]

  """Tax ID of organization"""
  tax_id: String

  """The tax is of the organization"""
  tax_id_type: String

  """User groups that are in the organization"""
  user_groups: [UserGroup!]

  """The users of the organization"""
  users(active_status: String, keywords: String, show_all_by_default: Boolean = false): [User!]

  """Builder ID for the Zus token"""
  zus_builder_id: String
}

"""OrganizationCptCode object"""
type OrganizationCptCodeType {
  """The CPT code id"""
  cpt_code_id: ID!

  """date created"""
  created_at: String!

  """The unique identifier of the join"""
  id: ID!

  """The organization id"""
  organization_id: ID!

  """The price per unit"""
  price_per_unit: String

  """date updated"""
  updated_at: String!
}

"""Specific information for an organization"""
type OrganizationInfo {
  """The creation date of the organization"""
  created_at: String!

  """The External ID of the organization"""
  external_id: String

  """The unique identifier of the organization info"""
  id: ID!

  """The number type ID of the organization"""
  id_number_type: String

  """The location of the organization"""
  location: Location

  """The name of the organization"""
  name: String

  """The NPI of the organization"""
  npi: String

  """The associated organization"""
  organization: Organization

  """The other id"""
  other_id: String

  """The other ID qualifier (what type of ID it is)"""
  other_id_qual: String

  """The phone number of the organization"""
  phone_number: String

  """Set billing provider as primary"""
  primary: Boolean

  """The tax id of the organization"""
  tax_id: String

  """The tax id type of the organization"""
  tax_id_type: String
}

"""Payload for adding an organization info"""
input OrganizationInfoInput {
  """The ID of the organization"""
  id: ID

  """The location of the organization"""
  location: LocationInput

  """The graphql_name of the organization"""
  name: String

  """The NPI of the organization"""
  npi: String

  """The ID of the organization"""
  organization_id: ID

  """The other ID of the organization"""
  other_id: String

  """The other ID qual of the organization"""
  other_id_qual: String

  """The phone number of the organization"""
  phone_number: String

  """The tax ID of the organization"""
  tax_id: String

  """The tax ID type of the organization"""
  tax_id_type: String
}

"""An organization membership"""
type OrganizationMembership {
  """
  Allows group level actions (e.g. send group messages in chat, assigning group to course modules, request form completions from group)
  """
  allow_group_level_actions: Boolean!

  """
  If true, clients who this org member has been added as a care team member will be able to schedule appointments with them.
  """
  allow_self_scheduling_in_care_team: Boolean

  """
  If true, clients who this org member has been added as a care team member for will automatically see a Chat conversation with this org member.
  """
  auto_create_convo_for_care_team: Boolean

  """If true, the user can access calendar quick share"""
  can_access_calendar_quick_share: Boolean!

  """
  If true, the user should be able to access other active organization members conversations
  """
  can_access_to_members_chat: Boolean

  """If true, the user can add new clients"""
  can_add_clients: Boolean!

  """If true, the user can add new people to the organization"""
  can_add_members: Boolean!

  """
  If true, the user should be able to add other active organization members to chat
  """
  can_add_members_to_chat: Boolean

  """
  If true, the user should be able to assign a task to any member of their organization
  """
  can_assign_tasks_to_all_org_members: Boolean

  """
  If true, the user can be added to the care team members list for a client
  """
  can_be_care_team_member: Boolean!

  """If true, the user can charge clients"""
  can_charge_clients: Boolean!

  """If true, the user can create tags"""
  can_create_tags: Boolean

  """If true, the user can delete charting notes"""
  can_delete_charting_notes: Boolean!

  """If true, the user can delete faxes"""
  can_delete_faxes: Boolean!

  """If true, the user can edit appontment types"""
  can_edit_appointment_types: Boolean!

  """If true, the user can edit calendar"""
  can_edit_calendar: Boolean

  """If true, the user can edit client credit"""
  can_edit_credit: Boolean

  """If true, the user can edit documents"""
  can_edit_docs: Boolean

  """If true, the user can edit eduacation content"""
  can_edit_education: Boolean

  """If true, the user can edit forms"""
  can_edit_forms: Boolean

  """If true, the user can manage the people and roles in the organization"""
  can_edit_members: Boolean

  """If true, the user can edit client packages"""
  can_edit_packages: Boolean

  """If true, the user can add ,edit and delete products"""
  can_edit_products: Boolean

  """If true, the user can edit settings"""
  can_edit_settings: Boolean

  """If true, the user can enroll and remove clients from programs"""
  can_enroll_clients_to_programs: Boolean

  """deprecated, use can_lock_own_charting_notes instead"""
  can_lock_form_answer_groups: Boolean @deprecated(reason: "Use `can_lock_own_charting_notes` instead")

  """If true, the user can lock charting notes other providers created"""
  can_lock_others_charting_notes: Boolean

  """If true, the user can lock charting notes they created"""
  can_lock_own_charting_notes: Boolean

  """If true, the user should be able to manage care plan templates"""
  can_manage_care_plan_templates: Boolean

  """
  If true, the user should be able to mark tasks that are assigned to other org members as completed
  """
  can_mark_assigned_tasks_to_other_org_members_as_completed: Boolean

  """If true, the user can merge clients"""
  can_merge_clients: Boolean

  """If true, view labs page and view patient lab results"""
  can_order_labs: Boolean

  """If true, the user can remove clients"""
  can_remove_client: Boolean

  """If true, the user should be able to rename or delete tags"""
  can_rename_and_delete_tags: Boolean

  """
  If true, the user can request to prescribe controlled substances. Requires E-Rx
  """
  can_request_to_prescribe_controlled_substances: Boolean

  """If true, the user can view the billing tab"""
  can_see_billing: Boolean

  """If true, the user can see all calendars in the organization"""
  can_see_calendar: Boolean

  """If true, the user can see all clients in the organization"""
  can_see_clients: Boolean

  """If true, the user can see documents within the entire org"""
  can_see_docs: Boolean

  """If true, the user can see incoming faxes"""
  can_see_faxes: Boolean

  """
  If true user should be able to see fullscript tab in client profile and view fullscript box in homepage
  """
  can_see_fullscript_tab: Boolean

  """
  If true, the user should be able see a button that allows them to signup for dosespot in the overview section of the client profile
  """
  can_see_option_to_use_erx_dosespot: Boolean

  """If true, the user can see sent faxes"""
  can_see_sent_faxes: Boolean

  """If true, the user can see transfers tab in billing page"""
  can_see_transfers: Boolean

  """If true, the user can set a password for organization clients"""
  can_set_client_password: Boolean

  """
  If true, the user can share documents and folders with organizations members
  """
  can_share_documents_and_folders_with_org_members: Boolean

  """If true, the user can sign charting notes other providers created"""
  can_sign_others_charting_notes: Boolean

  """If true, the user can sign charting notes they created"""
  can_sign_own_charting_notes: Boolean

  """When true, user can submit to Candid"""
  can_submit_cms_1500s_to_candid_health: Boolean

  """When true, user can submit to Change"""
  can_submit_cms_1500s_to_change_health: Boolean

  """If true, the user can submit CMS 1500s to Office Ally"""
  can_submit_cms_1500s_to_office_ally: Boolean

  """
  If `true`, the user can unlock charting notes. Always `true` for org owners and providers w/o an org
  """
  can_unlock_charting_notes: Boolean

  """If true, it will return all organization tasks for current user"""
  can_view_all_org_members_tasks: Boolean

  """If true, the user can access the audit log API query."""
  can_view_audit_log: Boolean

  """If true, the user can view/edit cms1500s"""
  can_view_cms1500s: Boolean

  """
  If true can use goal favorites that are shared from other members of the organization
  """
  can_view_goal_templates: Boolean

  """If true, the user can edit appontment types"""
  can_view_labs: Boolean

  """If true, the user can view org dashboard"""
  can_view_org_dashboard: Boolean

  """If true, the user can view organization-level reports"""
  can_view_reports: Boolean

  """If true, the user can view/edit super bills"""
  can_view_super_bills: Boolean

  """
  If true, the user can write addendums for other org members charting notes
  """
  can_write_org_addendums: Boolean

  """Pagination cursor"""
  cursor: Cursor!

  """E-Rx Dosespot role"""
  erx_dosespot_role: String

  """If true, the user will receive notif about failed notif"""
  gets_failed_fax_notif: Boolean

  """If true, the user will receive a fax notif"""
  gets_fax_notif: Boolean

  """If true the user will have their own branding """
  has_own_branding: Boolean

  """When true, user sees the primary diagnosis column for diagnoses"""
  has_primary_diagnosis_column: Boolean

  """The unique identifier of the of the membership"""
  id: ID!

  """If true, the user has been noted as being an admin"""
  is_admin: Boolean

  """
  When true, the user can view and manage developer features like webhooks.
  """
  is_developer: Boolean

  """Whether the user is a provider in the organization"""
  is_provider: Boolean

  """
  If true, the user is notified when any client activity including intake forms, journal entries, programs, documents
  """
  notify_any_client_activity: Boolean

  """
  If true the user is notified when any appontment is booked within the org
  """
  notify_on_book: Boolean

  """
  If true the user is notified when any appontment is cancelled within the org
  """
  notify_on_cancel: Boolean

  """
  if true, the user should get an email notification whenever a client payment fails or there is a chargeback.
  """
  notify_on_payment_failure: Boolean

  """The organization role"""
  org_role: String

  """Last applied permission template"""
  permission_template: PermissionTemplateType

  """Last applying date of permission template"""
  permission_template_applied_at: String

  """If true, the user can request eligibility checks"""
  request_eligibility_checks: Boolean

  """If true, the user will see all org billing, not just individual"""
  sees_all_billing: Boolean

  """
  If true, the user will see all org clients, not just individual on clients list page
  """
  sees_all_clients: Boolean

  """Selected licensed in values"""
  selected_licensed_in_filter: [String!]

  """Selected locations values"""
  selected_locations_filter: [String!]

  """Selected statuses values"""
  selected_statuses_filter: [String!]

  """Selected statuses values"""
  selected_tags_filter: [String!]

  """
  If true, the user receive email notification when any client in the organization completes an intake flow
  """
  send_email_on_intake_flow_complete: Boolean

  """
  If true, the user receive email notification when any client in the organization starts an intake flow
  """
  send_email_on_intake_flow_start: Boolean

  """If true, the user will share appontment types with the entire org"""
  share_appointment_types: Boolean

  """If true, the user shares custom metrics with entire org"""
  share_custom_metrics: Boolean

  """If true user should uses the same API access token for Fullscript"""
  share_fullscript: Boolean

  """
  If true has their goal favorites available to other members of the organization
  """
  share_goal_templates: Boolean

  """If true, the user shares packages with entire org"""
  share_packages: Boolean

  """If true, all active organization members will see shared smart phrases"""
  share_smart_phrases: Boolean

  """If true the user will share user groups with the entire org"""
  share_user_groups: Boolean

  """Show availability in the calendar by default"""
  show_availability_first: Boolean

  """If true, show org link on left hand side"""
  show_org_tab: Boolean

  """
  If true the clients are able to start a new conversation with the member
  """
  start_conversation_with: Boolean

  """The title of the org member"""
  title: String

  """The user attached to the organization membership"""
  user: User
}

"""OrganizationMembership sorting enum"""
enum OrganizationMembershipOrderKeys {
  LAST_NAME_ASC
  LAST_NAME_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  STATUS_ASC
  STATUS_DESC
  TYPE_ASC
  TYPE_DESC
  POSITION_ASC
}

"""Roles that a user can have in an organization"""
enum OrganizationMembershipRole {
  """The user is a standard member of the organization (includes providers)"""
  STANDARD

  """The user is a support member of the organization"""
  SUPPORT
}

"""Alternative ID numbers for a provider"""
type OtherIdNumber {
  """The unique identifier of the other id number"""
  id: ID!

  """The label to use for the other id"""
  label: String

  """The associated organization"""
  organization: Organization

  """The ID of the associated organization"""
  organization_id: String

  """The other id"""
  other_id: String

  """The other ID qualifier (what type of ID it is)"""
  other_id_qualifier: String

  """The associated user"""
  user: User @deprecated(reason: "You never need to query the user of the other_id")

  """The ID of the associated user"""
  user_id: String
}

"""Payload for another id number"""
input OtherIdNumberInput {
  """The ID of the other id number"""
  id: ID

  """The other id number"""
  other_id: String

  """The qualifier of the other id number"""
  other_id_qualifier: String

  """The user ID of the other id number"""
  user_id: String
}

"""Autogenerated input type of PairAccounts"""
input PairAccountsInput {
  client_id: ID
  override_current_pairing: Boolean
  provider_id: ID
}

"""Autogenerated return type of PairAccounts."""
type PairAccountsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Payload for a patient"""
input PatientInput {
  """The date of birth of the patient"""
  dob: String

  """The ID of the patient"""
  id: ID

  """The location of the patient"""
  location: LocationInput

  """The list of policies of the patient"""
  policies: [PolicyInput]

  """The list of referring physicians of the patient"""
  referring_physicians: [Cms1500ReferringPhysicianInput]

  """The sex of the patient"""
  sex: String

  """The social security number of the patient"""
  ssn: String

  """The full legal name and preferred name of the patient"""
  full_legal_name_with_preferred: String
}

"""A location of a patient"""
input PatientLocationInputs {
  """The city"""
  city: String

  """The country code"""
  country: String

  """The ID of the location"""
  id: ID

  """The first line of the address"""
  line1: String

  """The second line of the address"""
  line2: String

  """The graphql_name of the location"""
  name: String

  """The state"""
  state: String

  """The zip code"""
  zip: String
}

"""An permission templateType"""
type PermissionTemplateType {
  """
  Allows group level actions (e.g. send group messages in chat, assigning group to course modules, request form completions from group)
  """
  allow_group_level_actions: Boolean!

  """
  If true, clients who this org member has been added as a care team member will be able to schedule appointments with them.
  """
  allow_self_scheduling_in_care_team: Boolean

  """
  If true, clients who this org member has been added as a care team member for will automatically see a Chat conversation with this org member.
  """
  auto_create_convo_for_care_team: Boolean

  """If true, the user can access calendar quick share"""
  can_access_calendar_quick_share: Boolean!

  """
  If true, the user should be able to access other active organization members conversations
  """
  can_access_to_members_chat: Boolean

  """If true, the user can add new clients"""
  can_add_clients: Boolean!

  """If true, the user can add new people to the organization"""
  can_add_members: Boolean!

  """
  If true, the user should be able to add other active organization members to chat
  """
  can_add_members_to_chat: Boolean

  """
  If true, the user should be able to assign a task to any member of their organization
  """
  can_assign_tasks_to_all_org_members: Boolean

  """
  If true, the user can be added to the care team members list for a client
  """
  can_be_care_team_member: Boolean!

  """If true, the current user can modify this permission template"""
  can_be_edited: Boolean!

  """If true, the user can charge clients"""
  can_charge_clients: Boolean!

  """If true, the user can create tags"""
  can_create_tags: Boolean

  """If true, user сan delete charting notes"""
  can_delete_charting_notes: Boolean!

  """If true, the user can delete faxes"""
  can_delete_faxes: Boolean!

  """If true, the user can edit appontment types"""
  can_edit_appointment_types: Boolean!

  """If true, the user can edit calendar"""
  can_edit_calendar: Boolean

  """If true, the user can edit client credit"""
  can_edit_credit: Boolean

  """If true, the user can edit documents"""
  can_edit_docs: Boolean

  """If true, the user can edit eduacation content"""
  can_edit_education: Boolean

  """If true, the user can edit forms"""
  can_edit_forms: Boolean

  """If true, the user can manage the people and roles in the organization"""
  can_edit_members: Boolean

  """If true, the user can edit client packages"""
  can_edit_packages: Boolean

  """If true, the user can add ,edit and delete products"""
  can_edit_products: Boolean

  """If true, the user can edit settings"""
  can_edit_settings: Boolean

  """If true, the user can enroll and remove clients from programs"""
  can_enroll_clients_to_programs: Boolean

  """If true, the user can lock charting notes other providers created"""
  can_lock_others_charting_notes: Boolean

  """If true, the user can lock charting notes they created"""
  can_lock_own_charting_notes: Boolean

  """If true, the user should be able to manage care plan templates"""
  can_manage_care_plan_templates: Boolean

  """
  If true, can mark tasks complete that are assigned to other org members
  """
  can_mark_assigned_tasks_to_other_org_members_as_completed: Boolean

  """If true, the user can merge clients"""
  can_merge_clients: Boolean

  """If true, view labs page and view patient lab results"""
  can_order_labs: Boolean

  """If true, the user can remove clients"""
  can_remove_client: Boolean

  """If true, the user should be able to rename or delete tags"""
  can_rename_and_delete_tags: Boolean

  """If true, the user can view the billing tab"""
  can_see_billing: Boolean

  """If true, the user can see all calendars in the organization"""
  can_see_calendar: Boolean

  """If true, the user can see all clients in the organization"""
  can_see_clients: Boolean

  """If true, the user can see documetns within the entire org"""
  can_see_docs: Boolean

  """If true, the user can see incoming faxes"""
  can_see_faxes: Boolean

  """
  If true user should be able to see fullscript tab in client profile and view fullscript box in homepage
  """
  can_see_fullscript_tab: Boolean

  """If true, the user can see sent faxes"""
  can_see_sent_faxes: Boolean

  """If true, the user can see transfers tab in billing page"""
  can_see_transfers: Boolean

  """If true, user can set client passwords"""
  can_set_client_password: Boolean

  """
  If true, the user can share documents and folders with organizations members
  """
  can_share_documents_and_folders_with_org_members: Boolean

  """If true, the user can sign charting notes other providers created"""
  can_sign_others_charting_notes: Boolean

  """If true, the user can sign charting notes they created"""
  can_sign_own_charting_notes: Boolean

  """If true, the user can submit CMS 1500s to Office Ally"""
  can_submit_cms_1500s_to_office_ally: Boolean

  """If true, it will return all organization tasks for current user"""
  can_view_all_org_members_tasks: Boolean

  """If true, the user can access the audit log API query."""
  can_view_audit_log: Boolean

  """If true, the user can view/edit cms1500s"""
  can_view_cms1500s: Boolean

  """
  If true can use goal favorites that are shared from other members of the organization
  """
  can_view_goal_templates: Boolean

  """If true, the user can edit appontment types"""
  can_view_labs: Boolean

  """If true, the user can view org dashboard"""
  can_view_org_dashboard: Boolean

  """If true, the user can view organization-level reports"""
  can_view_reports: Boolean

  """If true, the user can view/edit super bills"""
  can_view_super_bills: Boolean

  """
  If true, the user can write addendums for other org members charting notes
  """
  can_write_org_addendums: Boolean

  """The date of creation"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """If true, the user will receive notif about failed notif"""
  gets_failed_fax_notif: Boolean

  """If true, the user will receive a fax notif"""
  gets_fax_notif: Boolean

  """If true the user will have their own branding """
  has_own_branding: Boolean

  """The unique identifier of the template"""
  id: ID!

  """If true, the user has been noted as being an admin"""
  is_admin: Boolean

  """Whether the user is a developer"""
  is_developer: Boolean

  """Whether the user is a provider in the organization"""
  is_provider: Boolean

  """Name of template"""
  name: String

  """
  If true, the user is notified when any client activity including intake forms, journal entries, programs, documents
  """
  notify_any_client_activity: Boolean

  """
  If true the user is notified when any appontment is booked within the org
  """
  notify_on_book: Boolean

  """
  If true the user is notified when any appontment is cancelled within the org
  """
  notify_on_cancel: Boolean

  """If true, user will notified about all failed payments"""
  notify_on_payment_failure: Boolean

  """The organization role"""
  org_role: String

  """If true, the user can request eligibility checks"""
  request_eligibility_checks: Boolean

  """If true, the user will see all org billing, not just individual"""
  sees_all_billing: Boolean

  """
  If true, the user will see all org clients, not just individual on clients list page
  """
  sees_all_clients: Boolean

  """
  If true, the user receive email notification when any client in the organization completes an intake flow
  """
  send_email_on_intake_flow_complete: Boolean

  """
  If true, the user receive email notification when any client in the organization starts an intake flow
  """
  send_email_on_intake_flow_start: Boolean

  """If true, the user will share appontment types with the entire org"""
  share_appointment_types: Boolean

  """If true, the user shares custom metrics with entire org"""
  share_custom_metrics: Boolean

  """If true user should uses the same API access token for Fullscript"""
  share_fullscript: Boolean

  """
  If true has their goal favorites available to other members of the organization
  """
  share_goal_templates: Boolean

  """If true, the user shares packages with entire org"""
  share_packages: Boolean

  """If true, all active organization members will see shared smart phrases"""
  share_smart_phrases: Boolean

  """If true the user will share user groups with the entire org"""
  share_user_groups: Boolean

  """Show availability in the calendar by default"""
  show_availability_first: Boolean

  """If true, show org link on left hand side"""
  show_org_tab: Boolean

  """
  If true the clients are able to start a new conversation with the member
  """
  start_conversation_with: Boolean

  """Date when record was last updated"""
  updated_at: String

  """The user attached to the organization membership"""
  user: User
}

"""A pharmacy generated from Dosespot"""
type Pharmacy {
  """The city of the address"""
  city: String

  """The unique identifier of the pharmacy"""
  id: ID!

  """latitude coordinate of the pharmacy"""
  latitude: String

  """The first line of the address"""
  line1: String

  """The second line of the address"""
  line2: String

  """longitude coordinate of the pharmacy"""
  longitude: String

  """The name of the pharmacy"""
  name: String

  """The phone number of the pharmacy"""
  phone_number: String

  """The state of the address (Uses the 2 letter abbreviation if in US)"""
  state: String

  """The zip/postal code of the address"""
  zip: String
}

"""Payload for a location of a physician"""
input PhysicianLocationInput {
  """The city"""
  city: String

  """The country code"""
  country: String

  """The ID of the location"""
  id: ID

  """The first line of the address"""
  line1: String

  """The second line of the address"""
  line2: String

  """The graphql_name of the location"""
  name: String

  """The NPI of the location"""
  npi: String

  """The other ID of the location"""
  other_id: String

  """The other ID qual of the location"""
  other_id_qual: String

  """The place of service ID of the location"""
  place_of_service_id: String

  """The state"""
  state: String

  """The ID of user who owns the location"""
  user_id: String

  """The zip code"""
  zip: String
}

"""Payload for a referral"""
input PhysicianReferralInput {
  """If the referral should be destroyed"""
  _destroy: Boolean

  """The ID of the referral"""
  id: ID

  """The reason for the referral"""
  referral_reason: String

  """The ID of the user"""
  user_id: ID
}

"""Alternative ID numbers for a provider"""
type PlaceOfService {
  """The code for the place of service"""
  code: String

  """A combined name and code string, correctly formatted"""
  code_name: String

  """The unique identifier of the place of service"""
  id: ID!

  """The name of the place of service"""
  name: String
}

"""A plan that can be used for a subscription"""
type Plan {
  """The features of the plan"""
  features: [String]

  """The header of the plan"""
  header: String

  """The unique identifier of the plan"""
  id: ID!

  """The subheader of the plan"""
  subheader: String
}

"""A policy"""
type Policy {
  """Benefits associated with policy"""
  benefits: [Benefit!]

  """Call reference information associated with this policy"""
  call_reference: CallReference

  """
  Returns a list of errors associated with the policy after doing a Change Health Insurance Eligibility Check
  """
  claim_eligibility_check_errors: [ClaimEligibilityCheckErrors!]

  """CPT codes authorized for this policy"""
  cpt_codes_policies: [CptCodesPolicy!]

  """Holder's date of birth"""
  dob_to_use: String

  """Date policy becomes inactive"""
  effective_end: String

  """Date policy becomes active"""
  effective_start: String

  """policy group num"""
  group_num: String

  """policy holder address"""
  holder_address: String

  """policy holder dob, required"""
  holder_dob: String

  """holder first name"""
  holder_first: String

  """holder gender"""
  holder_gender: String

  """holder last name"""
  holder_last: String

  """The address of the holder"""
  holder_location: Location

  """holder location id"""
  holder_location_id: String

  """holder middle initial"""
  holder_mi: String

  """policy holder name"""
  holder_name: String

  """holder phone number"""
  holder_phone: String

  """policy holder relationship, required"""
  holder_relationship: String

  """ICD codes authorized for this policy"""
  icd_codes_policies: [IcdCodesPolicy!]

  """The unique identifier of the policy"""
  id: ID!

  """Insurance authorization (eligibility) associated with policy"""
  insurance_authorization: InsuranceAuthorizationType

  """True if insurance authorization is required"""
  insurance_authorization_required: Boolean

  """Document Id of insurance card image(back)"""
  insurance_card_back_id: String

  """Document Id of insurance card image(front)"""
  insurance_card_front_id: String

  """The insurance plan"""
  insurance_plan: InsurancePlan

  """policy plan id, required"""
  insurance_plan_id: String

  """
  DEPRECATED. The last automated eligibility check run for this Change Health policy.
  """
  last_eligibility_check: ClaimEligibilityCheck @deprecated(reason: "Use `latest_eligibility_check` instead")

  """the most recent automated eligibility check run for this policy."""
  latest_eligibility_check: EligibilityCheck

  """The name of the policy"""
  name: String

  """Notes in client profile recorded by provider user"""
  notes: String

  """policy num, required"""
  num: String

  """The address of the insurance plan"""
  payer_location: Location

  """payer locatoin id"""
  payer_location_id: String

  """policy phone number"""
  policy_phone_number: String

  """Priority of policy for client (primary, secondary, or inactive)"""
  priority_type: String

  """
  Referral added to this policy. Optional field that should not be nil if referral_required is true
  """
  referral: Referral

  """True if referral is required for policy"""
  referral_required: Boolean

  """Same as client adddress toggle"""
  same_address_as_client: Boolean

  """Insurance plan type?"""
  type_string: String

  """Date policy was last updated"""
  updated_at: String

  """Owner of this policy"""
  user: User

  """user id, required"""
  user_id: ID
}

"""Payload for a policy"""
input PolicyInput {
  """The group number"""
  group_num: String

  """The date of birth of the holder"""
  holder_dob: String

  """The first name of the holder"""
  holder_first: String

  """The gender of the holder"""
  holder_gender: String

  """The last name of the holder"""
  holder_last: String

  """The location of the holder"""
  holder_location: LocationInput

  """The middle initial of the holder"""
  holder_mi: String

  """The phone number of the holder"""
  holder_phone: String

  """The relationship of the holder to the client"""
  holder_relationship: String

  """The ID of the policy"""
  id: ID

  """The ID of the insurance card back"""
  insurance_card_back_id: String

  """The ID of the insurance card front"""
  insurance_card_front_id: String

  """The insurance plan associated with the policy"""
  insurance_plan: InsurancePlanInput

  """The ID of the insurance plan"""
  insurance_plan_id: String

  """The name of the policy"""
  name: String

  """The policy number"""
  num: String

  """The location of the payer"""
  payer_location: LocationInput

  """The phone number of the policy"""
  policy_phone_number: String

  """The priority type of the policy"""
  priority_type: String

  """Whether the holder has the same address as the client"""
  same_address_as_client: Boolean

  """The type of policy"""
  type_string: String

  """The ID of the user associated with the policy"""
  user_id: String
}

"""A potential appointment slot"""
type PotentialAppointmentSlot {
  """The ID of the appointment this slot is for"""
  appointment_id: String

  """
  The type of appointment the slot is for. Returns nil if not a group appointment. Returning this for many slots can potentially slow down query times.
  """
  appointment_type: AppointmentType

  """
  The hexcode color of the slot (Not used in Healthie's default self-scheduling widget)
  """
  color: String

  """The date of the slot"""
  date: String

  """Whether this slot has waitlist enabled"""
  has_waitlist_enabled: Boolean

  """Whether this slot is fully booked"""
  is_fully_booked: Boolean

  """The length of the appointment type (in minutes)"""
  length: Int

  """The ID of the user who owns the slot"""
  user_id: String
}

"""Preferred Medical Code"""
type PreferredMedicalCode {
  """ICD/CPT code description"""
  code_description: String

  """ICD/CPT code"""
  code_indentifier: String

  """Connected Cpt Code Object"""
  cpt_code: CptCode

  """Formatted name: 'F19.20: psychotics unspecified'"""
  display_name: String

  """Connected ICD Code Object"""
  icd_code: IcdCode

  """The unique identifier of the code"""
  id: ID!
}

"""Prescription created in Dosespot"""
type Prescription {
  """Comment entered by provider"""
  comment: String

  """Date when prescription became ineffective"""
  date_inactive: String

  """Date prescription was written"""
  date_written: String

  """Number of days supplied prescription should last"""
  days_supply: Int

  """
  Direction provided to patient when taking prescription. Entered by provider
  """
  directions: String

  """The dosage (strength) of the prescription"""
  dosage: String

  """The form of the prescription. Example: tablet, capsule, teaspoon"""
  dose_form: String

  """The classification of the drug"""
  drug_classification: String

  """Date when prescription became effective"""
  effective_date: String

  """Encounter entered by provider"""
  encounter: String

  """The unique identifier of the prescription"""
  id: ID!

  """If the prescription is urgent"""
  is_urgent: Boolean

  """Date prescription was last refilled"""
  last_fill_date: String

  """Monograph path entered by provider"""
  monograph_path: String @deprecated(reason: "Deprecated by vendor, use MedicationOptionType.monograph instead")

  """The prescription's national drug code"""
  ndc: String

  """
  If true, pharmacy has been instructed not to dispense a substitute/generic version
  """
  no_substitutions: Boolean

  """Over the counter drug"""
  otc: String

  """Pharmacy information assigned in dosespot (Not stored in db)"""
  pharmacy: Pharmacy

  """Notes for pharmacy entered by provider"""
  pharmacy_notes: String

  """The name of the prescriber"""
  prescriber_name: String

  """Name and dosage of the prescription. Example: ibuprofen 200 mg tablet"""
  product_name: String

  """Quantity of medication per refill"""
  quantity: String

  """Number of refills prescribed"""
  refills: String

  """Form in which prescription is delivered"""
  route: String

  """The prescription reference number"""
  rx_reference_number: String

  """The prescription rxcui"""
  rxcui: String

  """
  The schedule of medication. Examples: PRN, QD, BID, TID, QID, Q4H, Q6H, Q8H, Q12H, Q24H, Q48H, Q72H, Q96H, QAM, QPM, QHS, QOD, QWEEK, QMONTH, QYEAR
  """
  schedule: String

  """
  Status of prescription. Example: Entered, Printed, Sending, eRxSent, Deleted 
  """
  status: String

  """Unit of medication. Example: tablet, capsule, teaspoon"""
  unit: String
}

"""Appointment type price and cpt_code_price"""
type PriceAndCptPriceType {
  """The cpt_code_price for this appointment type"""
  cpt_price: String

  """The price for this appointment type"""
  price: String
}

"""Payload for a primary organization"""
input PrimaryOrganizationInfoInput {
  """If true, the organization will be deleted"""
  _destroy: Boolean

  """The external ID of the organization"""
  external_id: String

  """The ID of the organization"""
  id: ID

  """The ID number type of the organization"""
  id_number_type: String

  """The location of the organization"""
  location: OrgLocationInput

  """The graphql_name of the organization"""
  name: String

  """The NPI of the organization"""
  npi: String

  """The other ID of the organization"""
  other_id: String

  """The other ID qual of the organization"""
  other_id_qual: String

  """The phone number of the organization"""
  phone_number: String

  """Whether the organization is primary"""
  primary: Boolean

  """The tax ID of the organization"""
  tax_id: String

  """The tax ID type of the organization"""
  tax_id_type: String
}

"""Base class for types"""
type Problem {
  """Code of the problem"""
  code: String

  """Self-descriptive"""
  id: ID!

  """Name of the problem"""
  name: String

  """When true, this object must be consolidated as part of a CCDA Ingest"""
  requires_consolidation: Boolean
}

"""Procedure object"""
type Procedure {
  """The code of the procedure"""
  code: String

  """The code system name of the procedure"""
  code_system_name: String

  """The CPT code id of the procedure"""
  cpt_code_id: ID!

  """The display name of the procedure"""
  display_name: String

  """The unique identifier of the procedure"""
  id: ID!

  """The end date time of the procedure"""
  procedure_end_datetime: String

  """The start date time of the procedure"""
  procedure_start_datetime: String

  """The status of the procedure"""
  status: String

  """The target site of the procedure"""
  target_site: String

  """The user id of the procedure"""
  user_id: ID
}

"""The product"""
type Product {
  """The date and time when the product was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """The unique identifier of the product"""
  id: ID!

  """The name of the product"""
  name: String!

  """The price of the product"""
  price: String!

  """The available amount of the product"""
  remaining_quantity: String!

  """Tax description"""
  tax_description: String

  """Tax rate"""
  tax_rate: String

  """If product has tax rate"""
  taxable: Boolean

  """Indicates if the product has unlimited amount"""
  unlimited_quantity: Boolean!

  """Owner of the product"""
  user: User
}

"""Product input"""
input ProductInput {
  """The product id"""
  id: String

  """The product name"""
  name: String
}

"""Product sorting enum"""
enum ProductOrderKeys {
  NAME_ASC
  NAME_DESC
  QUANTITY_ASC
  QUANTITY_DESC
  PRICE_ASC
  PRICE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
}

"""Profession"""
type Profession {
  """Unique identifier of the profession"""
  id: ID!

  """The name of the profession"""
  profession: String!

  """The category of the profession"""
  profession_category: String!
}

"""Payload for a profession"""
input ProfessionsInput {
  """The graphql_name of the profession"""
  profession: String

  """The category of the profession"""
  profession_category: String
}

"""A provider appointment location object"""
type ProviderAppointmentLocation {
  """The unique identifier of the appointment location"""
  appointment_location_id: ID

  """The unique identifier of the location"""
  id: ID!

  """The location (in plain text)"""
  location: String
}

"""Payload to bind an appointment location to a provider"""
input ProviderAppointmentLocationsInput {
  """If true, the join table record will be deleted"""
  _destroy: Boolean

  """The ID of the appointment location"""
  appointment_location_id: ID

  """The ID of the join table record"""
  id: ID
}

"""Provider appointment type connection"""
type ProviderApptTypeConnection {
  """The appointment type ID associated with this connection"""
  appointment_type_id: ID

  """The unique identifier of the connection"""
  id: ID!

  """Name of the provider associated with this appointment type connection"""
  provider_name: String

  """
  User ID of the provider associated with this appointment type connection
  """
  user_id: ID
}

"""Properties for creating or updating a ProviderCptCode"""
input ProviderCptCodeInput {
  """The CPT code ID"""
  cpt_code_id: ID

  """The unique identifier of the code"""
  id: ID

  """The price per unit of the code"""
  price_per_unit: String

  """The unique identifier of the provider"""
  provider_id: ID
}

"""ProviderCptCode object"""
type ProviderCptCodeType {
  """The CPT code ID"""
  cpt_code_id: ID!

  """The unique identifier of the type"""
  id: ID!

  """The price per unit"""
  price_per_unit: String

  """The provider ID"""
  provider_id: ID!
}

"""The query root of this schema. See available queries."""
type Query {
  """Fetch advance appointment prices"""
  advanceAppointmentPrices(appointment_type_id: ID, user_id: ID): [AdvanceAppointmentPrice!]

  """Search results for allergies, allergens, and reactions"""
  allergySuggestions(
    """accepts drug, environmental, food, pet, and reaction"""
    category: String
  ): [String]

  """Fetch an announcement"""
  announcement(id: ID): Announcement

  """Fetch an array of announcements for a provider"""
  announcements(
    """Cursor to fetch results after"""
    after: Cursor

    """If true, only show announcements that client has not dismissed"""
    exclude_dismissed: Boolean

    """Search announcements by name, title and description"""
    keywords: String = null
    offset: Int = 0
    should_paginate: Boolean
    page_size: Int
  ): [Announcement!]

  """Number of announcements for a provider"""
  announcementsCount(
    """If true, only show announcements that client has not dismissed"""
    exclude_dismissed: Boolean

    """Search announcements by name, title and description"""
    keywords: String = null
  ): Int

  """Fetch paginated API Keys collection"""
  apiKeys(
    """Cursor to fetch results after"""
    after: Cursor
    keywords: String = null
    offset: Int = 0
    page_size: Int = 20
    order_by: ApiKeyOrderKeys = CREATED_AT_DESC
  ): [ApiKey!]

  """Number of API Keys"""
  apiKeysCount(keywords: String = null): Int

  """An applied tag to a user"""
  appliedTag(id: ID, include_deleted: Boolean): AppliedTag

  """Applied tags to a users"""
  appliedTags(
    id: ID

    """The tag ID"""
    tag_id: ID
    order_by: AppliedTagOrderKeys = UNSORTED

    """
    When passed in, only applied tags updated after the specified datetime are returned.
    """
    updated_after: ISO8601DateTime

    """
    When passed in, only applied tags updated before the specified datetime are returned.
    """
    updated_before: ISO8601DateTime
  ): [AppliedTag!]

  """fetch an appointment by id, group appointments are (considered public)"""
  appointment(
    id: ID

    """When true, deleted appointments can be retrieved via this query."""
    include_deleted: Boolean = false
  ): Appointment

  """
  Return potential booking issues for an appointment, date, time, repeats, attendees, and provider.
  """
  appointmentBookingWarnings(
    """
    (optional) appointment type used to check for credits and for appointment duration.
    """
    appointment_type_id: ID

    """(optional) IDs of clients assigned to the appointment."""
    attendee_ids: [ID]

    """date to check for conflicting events and credit deficits."""
    date: String

    """(optional) whether this is a repeating appointment."""
    is_repeating: Boolean = false

    """ID of the provider to check for conflicting events."""
    provider_id: ID

    """
    (optional) what type of interval for repeating appointments (Weekly, Monthly, Biweekly, Every 4 Weeks).
    """
    repeat_interval: String

    """(optional) how many times the appointment repeats."""
    repeat_times: String

    """
    (optional) used to skip checking for conflicts on recurring appointments.
    """
    recurring_appt_id: String

    """
    The time to check (in conjunction with date parameter) for conflicting events.
    """
    time: String

    """
    (optional) Timezone used when looking for conflicting events. Will default to timezone of provider if not provided.
    """
    timezone: String

    """(optional) used to skip checking for conflicts on single appointments."""
    current_appt_id: String

    """
    (optional) whether an existing appointment being checked is a group appointment or not.
    """
    is_group_appt: Boolean = false

    """(optional) whether editing an existing appointment or not."""
    is_editing: Boolean = false

    """
    (optional) for group appointments where org members are added as attending
    """
    additional_providers: String

    """
    (optional) used when checking for conflicts for blocks, which have no appointment type with length
    """
    length_in_minutes: Int = null
  ): [AppointmentBookingWarning!]

  """returns metadata about appointments for provider dashboard"""
  appointmentFrequencyData(only_to_current_date: Boolean, org_level: Boolean): [AppointmentDataType!]

  """fetch an appointment by id, group appointments are (considered public)"""
  appointmentInclusion(
    id: ID

    """
    When external reschedule/cancellation is allowed, the UUID can be used to allow the holder to retrieve and update/cancel their inclusion in an appointment.
    """
    uuid: ID
  ): AppointmentInclusionType

  """fetch an appointment location by id (considered public)"""
  appointmentLocation(id: ID): AppointmentLocation

  """
  get appointment locations that the current user can use. (considered public)
  """
  appointmentLocations(
    """
    Pass in datetime of the appointment to limit the locations based on room availability
    """
    appointment_date: String

    """
    Pass in id of the appointment type to limit the locations based on room availability
    """
    appointment_type_id: ID
    ids: [Int] = null
    keywords: String = null
    location_ids: String = null
    org_level: Boolean = false
    provider_id: ID
    provider_ids: [ID] = null
    resource: String = null

    "When true, only locations with associated availabilities are returned.\nWhen false, only locations with no associated availabilities are returned.\nDoes nothing unless availability by location enabled.\n"
    with_availability: Boolean = null
  ): [AppointmentLocation!]

  """
  Returns a json hash of the number of appointments in each day of the month. The month is the month that the passed day is in.
  """
  appointmentNumberPerDayOfMonth(
    """If not provided, defaults to the current date"""
    date: String
    include_blockers: Boolean = false
  ): String

  """fetch a Appointment Setting by id (considered public)"""
  appointmentSetting(id: ID, provider_id: ID): AppointmentSetting

  """fetch an appointment type by id (considered public)"""
  appointmentType(id: ID): AppointmentType

  """Fetch credit history for the specific appointment type"""
  appointmentTypeCreditChanges(appointment_type_id: ID, user_id: ID): [AppointmentCreditChange!]

  """Fetch paginated Appointment Type collection (considered public)"""
  appointmentTypes(
    """Cursor to fetch results after"""
    after: Cursor

    """JSONified array of ids to include"""
    appointment_type_ids: String = null
    clients_can_book: Boolean = null
    embed_or_sharing_link: Boolean = false
    keywords: String = null
    offering_id: String = null
    offset: Int = 0
    org_level: Boolean = false
    page_size: Int = 1000
    provider_id: String = null
    should_paginate: Boolean = true
    show_group: Boolean = null
    with_deleted_appt_types: Boolean = false
    order_by: AppointmentTypeOrderKeys = POSITION_ASC
  ): [AppointmentType!]

  """Number of appointment types (considered public)"""
  appointmentTypesCount(
    """JSONified array of ids to include"""
    appointment_type_ids: String = null
    clients_can_book: Boolean = null
    embed_or_sharing_link: Boolean = false
    keywords: String = null
    offering_id: String = null
    org_level: Boolean = false
    provider_id: String
    show_group: Boolean = null
    with_deleted_appt_types: Boolean = false
  ): Int

  """Fetch paginated appointment collection"""
  appointments(
    """Cursor to fetch results after"""
    after: Cursor
    colorSchemeId: String
    currentWeek: Boolean
    endDate: String

    """when true, all appointments with invoices will be excluded"""
    exclude_appointments_with_invoice: Boolean = false

    """Options are 'future', 'past', 'ended', 'didnt-occur'"""
    filter: String = "future"

    """
    Returns appointments of the specified appointment locations. Overrides filter_by_location_id
    """
    filter_by_appointment_location_ids: [ID]
    filter_by_appointment_status: String

    """
    Returns appointments of the specified appointment statuses. Overrides filter_by_appointment_status
    """
    filter_by_appointment_statuses: [String]
    filter_by_appointment_type_id: ID

    """
    Returns appointments of the specified appointment types. Overrides filter_by_appointment_type_id
    """
    filter_by_appointment_type_ids: [ID]
    filter_by_contact_types: String

    """
    When true, only appointments without an associated chart note will be returned. When false, only appointments with an associated chart note will be return. If nil, has no effect
    """
    filter_by_chart_note_written: Boolean
    filter_by_client_confirmed: Boolean
    filter_by_location_id: ID
    filter_by_provider_confirmed: Boolean

    """When true, no pulled-in synced appointments will be included"""
    filter_synced_appointments: Boolean = false

    """
    When true, only appointments up to the next future scheduled appointment will be included
    """
    filter_by_invoices: Boolean = false

    """When true, use provider inclusions for lookup of providers"""
    use_provider_inclusions: Boolean = false
    include_blockers: Boolean = true

    """
    When true, returns blocking appointments with no appointment type/location/status
    """
    include_nil_blockers: Boolean = false

    """include all providers in the organization and sub-organizations"""
    include_suborganizations: Boolean = false
    is_active: Boolean
    is_confirmed: Boolean

    """When true, returns appointments for all providers in the org"""
    is_org: Boolean
    is_upcoming: Boolean
    is_with_clients: Boolean
    keywords: String = null
    offset: Int = 0

    """
    The number of appointments to return at one time (when should_paginate is true). Maximum of 500
    """
    page_size: Int
    provider_id: ID
    provider_ids: [ID]
    should_paginate: Boolean = false
    show_appointments: Boolean = true
    order_by: AppointmentOrderKeys
    specificDay: String
    startDate: String
    unconfirmed: Boolean
    user_id: ID
    with_all_statuses: Boolean = false
    with_others: Boolean
    without_status: Boolean = false

    """Returns appointments for the specified attendee_ids"""
    attendee_ids: [ID]
    state_license: String
  ): [Appointment!]

  """Number of Appointments"""
  appointmentsCount(
    currentWeek: Boolean
    endDate: String

    """when true, all appointments with invoices will be excluded"""
    exclude_appointments_with_invoice: Boolean = false
    filter: String = "future"

    """
    Returns appointments of the specified appointment locations. Overrides filter_by_location_id
    """
    filter_by_appointment_location_ids: [ID]
    filter_by_appointment_status: String
    filter_by_appointment_type_id: ID

    """
    Returns appointments of the specified appointment  Overrides filter_by_appointment_type_id
    """
    filter_by_appointment_type_ids: [ID]

    """
    When true, only appointments with an associated chart note will be returned. When false, only appointments without an associated chart note will be return. If nil, has no effect
    """
    filter_by_chart_note_written: Boolean
    filter_by_location_id: ID

    """When true, no pulled-in synced appointments will be included"""
    filter_synced_appointments: Boolean = false

    """
    When true, only appointments up to the next future scheduled appointment will be included
    """
    filter_by_invoices: Boolean = false
    include_blockers: Boolean = true

    """
    When true, returns blocking appointments with no appointment type/location/status
    """
    include_nil_blockers: Boolean = false

    """include all providers in the organization and sub-organizations"""
    include_suborganizations: Boolean = false
    is_active: Boolean
    is_confirmed: Boolean
    is_org: Boolean
    is_upcoming: Boolean
    is_with_clients: Boolean
    keywords: String = null
    provider_id: ID

    """
    This will filter the appointments by the array of provider_ids used here. NOTE: must have is_org set to true for this to argument to be respected.
    """
    provider_ids: [ID]
    show_appointments: Boolean = true
    specificDay: String
    startDate: String
    unconfirmed: Boolean
    user_id: ID
    with_all_statuses: Boolean = false
    with_others: Boolean
    without_status: Boolean = false

    """
    When true, returns only healthie appointments and excluding external appointments
    """
    only_healthie_appointments: Boolean = false
  ): Int

  """Data summary for appointment reports"""
  appointmentsSummary(
    provider_ids: [ID] = []

    """If not provided, defaults to the current date"""
    range_end: String

    """If not provided, defaults to the current date"""
    range_start: String
    range_type: String

    """
    When provided, the query will require data to be loaded from cache if the appointment count is over the provided number. If data is not in the cache, it will return without data, and load the data in the cache in the background.
    """
    require_cache_threshold: Int
  ): AppointmentSummaryData

  """fetch auto task generators belonging to a specific user"""
  autoTaskGenerators(user_id: String): [AutoTaskGenerator!]

  """fetch the automated insurance billing setting"""
  automatedInsuranceBillingSetting(user_id: ID): AutomatedInsuranceBillingSetting

  """Fetch availabilities for range"""
  availabilities(
    appointment_location_id: String
    appointment_type_id: String

    """Array of IDs of appointment types to filter availabilities"""
    appointment_type_ids: [ID]

    """
    ID of the provider to show availabilities for, supercedes provider id and is_org
    """
    availability_provider_id: ID
    contact_type_id: String

    """the end date of availability (datetime string)"""
    endDate: String

    """
    Amount of hours after the endDate to pull availabilities in for. This is helpful when using this query with some calendar display libraries
    """
    end_date_padding: Int = 24
    includeRepeating: Boolean
    is_org: Boolean
    is_repeating: Boolean
    one_time: Boolean
    provider_id: ID
    provider_ids: [ID]
    show_availability: Boolean = true

    """the start date of availability (datetime string)"""
    startDate: String

    """
    Amount of hours before the startDate to pull availabilities in for. This is helpful when using this query with some calendar display libraries
    """
    start_date_padding: Int = 12
    user_id: String
    timezone: String
    state_license: String
  ): [Availability!]

  """number of availabilities"""
  availabilitiesCount(appointment_location_id: String, appointment_type_id: String, endDate: String, is_org: Boolean, provider_id: ID, startDate: String): Int

  """Fetch availability"""
  availability(id: ID): Availability

  """
  (Limited availability, subject to breaking changes). JSONified Hash with summary of availability.
  """
  availabilitySummaryJson(
    """Date (in YYYY-MM-DD) to retrieve availability summary for"""
    date: String
  ): String

  """Fetch available item types (for use in onboarding items)"""
  availableItemTypes(onboarding_flow_id: String): String

  """
  Get open appointment times for a date range. Returns array of dates sorted in ascending order (considered public)
  """
  availableSlotsForRange(
    """
    (optional) The ID of the appointment that will be rescheduled. Only needed if you want to use appointment-specific rescheduling restrictions
    """
    appointment_to_reschedule_id: ID

    """
    An array of group appointment type IDs can be passed in. When passed in, will return availability for multiple group appointment  Overrides appt_type_id.
    """
    appointment_type_ids: [ID]
    appt_loc_id: String
    appt_type_id: String
    clients_can_join_waitlist: Boolean = false
    contact_type: String

    """If not provided, defaults to the current date"""
    end_date: String

    """
    When passed in, slots after this will not be returned. Inclusive. YYYY-MM-DD format
    """
    end_date_boundary: String
    length: String

    """Two letter state abbreviation (e.g. "CA", "NY")"""
    licensed_in_state: String = null

    """
    When false, multiple slots for the same time (for different providers) will be returned.
    """
    make_unique: Boolean = true
    org_level: Boolean = false
    outside_factors: Boolean = true

    """Required"""
    provider_id: String
    provider_ids: [String]

    """
    Filters the provider list to only include users who have all of the specified tags applied. Ignored if org_level is not true
    """
    tag_ids: [ID]

    """If not provided, defaults to the current date"""
    start_date: String

    """
    When passed in, slots before this will not be returned. YYYY-MM-DD format
    """
    start_date_boundary: String

    """When passed in, slots will be calculated with the specified timezone"""
    timezone: String
  ): [PotentialAppointmentSlot!]

  """Get the Cms1500 Policies object for a given claim and client"""
  baseCms1500ForUser(base_date: String, cms1500_id: String, form_answer_group_id: ID, only_active_policies: Boolean = false, patient_id: ID, rendering_provider_id: String): Cms1500

  """Get basic info about User from signup token"""
  basicUserInfoFromToken(token: String = null): User

  """
  DEPRECATED: All ICD Codes that are allowed to be used in healthecare claims
  """
  billableIcdCodes: [IcdCode!] @deprecated(reason: "All ICD Codes that are allowed to be used in healthecare claims")

  """fetch a billing item by id"""
  billingItem(id: ID): BillingItem

  """Fetch paginated billing items collection"""
  billingItems(
    """Cursor to fetch results after"""
    after: Cursor
    client_id: ID

    """YYYY-MM-DD format"""
    created_at_end: String = null

    """YYYY-MM-DD format"""
    created_at_start: String = null
    keywords: String = null
    offerings_only: Boolean
    offset: Int = 0

    """The number of billing items to return (Max 100)"""
    page_size: Int = 20
    provider_id: ID
    order_by: BillingItemOrderKeys = CREATED_AT_DESC
    status: [String] = []
    user_id: ID = null
  ): [BillingItem!]

  """Number of billing items"""
  billingItemsCount(
    client_id: ID
    keywords: String = null
    status: [String] = []
    provider_id: ID

    """YYYY-MM-DD format"""
    created_at_start: String = null

    """YYYY-MM-DD format"""
    created_at_end: String = null
  ): Int

  """fetch a Brand by id (considered public)"""
  brand(custom_sign_in_path: String, id: ID, locationString: String, provider_id: ID): Brand

  """fetch a Brand by custom sign in path (considered public)"""
  brandFromCustomSignInPath(custom_sign_in_path: String): Brand

  """
  get info used on authentication pages for either a dietitian or partner
  """
  brandInfo(code: String = null, dietitian_id: String = null, invite_code: String = null, partner_name: String = null): BrandInfo

  """Fetch a calendar view settings for current user"""
  calendarViewSetting(
    """
    If passed values from a Saved Filter will be returned for the calendar settings
    """
    saved_filter_id: ID
  ): CalendarViewSetting

  """Fetch an array of campaigns for a provider"""
  campaigns(offset: Int = 0): [Campaign!]

  """Number of campaigns for a provider"""
  campaignsCount: Int

  """Check if the user has access to the package buy limit feature"""
  canCapOfferingPurchases(token: String = null): Boolean

  """fetch the current users candidhealth connection"""
  candidHealthConnection: CandidHealthConnection

  """
  Fetch paginated stripe customer accounts with associated errors or soon to expire credit cards
  """
  cardIssues(
    """Cursor to fetch results after"""
    after: Cursor
    offset: Int = 0
    order_by: StripeCustomerDetailOrderKeys = EXPIRATION_DATE_DESC
  ): [StripeCustomerDetail!]

  """
  Fetch paginated stripe customer accounts with associated errors or soon to expire credit cards
  """
  cardIssuesCount: Int

  """fetch a single care plan"""
  carePlan(id: ID): CarePlan

  """Fetch paginated care plan collection"""
  carePlans(
    """Cursor to fetch results after"""
    after: Cursor
    offset: Int = 0
    patient_id: ID
    page_size: Int = 20
    order_by: CarePlanOrderKeys = STATUS_ASC
    template_search_keywords: String
    templates_only: Boolean
  ): [CarePlan!]

  """Number of care plans"""
  carePlansCount(patient_id: ID): Int

  """Number of care plans templates"""
  carePlansTemplatesCount(keywords: String): Int

  """Fetch list of patient-initiated CDA activity events"""
  cdaActivityEvents: [CdaActivityEvent!]

  """fetch the current users Change Health connection"""
  changeClaimSubmitter: ChangeClaimSubmitter

  """fetch a chargeback by the Healthie ID or the Stripe Dispute ID. """
  chargeBack(id: ID, stripe_dispute_id: ID): ChargeBack

  """fetch all charge backs for a user or organization"""
  chargeBacks(
    """
    If user has access to all billing for their organization, this will return all chargebacks for the organization
    """
    show_all_for_org: Boolean = false
    offset: Int = 0
    per_page: Int = 10
    order_by: ChargeBackOrderKeys
  ): [ChargeBack!]

  """fetch count of all charge backs"""
  chargeBacksCount(
    """
    If user has access to all billing for their organization, this will return the count of all chargebacks for the organization
    """
    show_all_for_org: Boolean = false
  ): Int

  """All items to include in the charting list"""
  chartingItems(
    custom_module_form_id: ID
    date: String
    document_id: ID
    filler_id: String
    form_answer_group_id: String
    include_docs: Boolean = true
    keywords: String = null
    name: String
    user_id: String

    """
    Filter charting items between date range. The `date` argument supersedes this filter. If an end date is present and no start date is, the start date will default to today.
    """
    start_date: String

    """
    Filter charting items between date range. The `date` argument supersedes this filter. If an start date is present and no end date is, the end date will default to today.
    """
    end_date: String
  ): [ChartingItemType!]

  """All items to include in the charting list"""
  chartingItemsCount(
    custom_module_form_id: ID
    date: String
    document_id: ID
    filler_id: String
    form_answer_group_id: String
    include_docs: Boolean = true
    keywords: String = null
    name: String
    user_id: String

    """
    Filter charting items between date range. The `date` argument supersedes this filter. If an end date is present and no start date is, the start date will default to today.
    """
    start_date: String

    """
    Filter charting items between date range. The `date` argument supersedes this filter. If an start date is present and no end date is, the end date will default to today.
    """
    end_date: String
  ): Int

  """Fetch a charting note addendum by id"""
  chartingNoteAddendum(id: ID): ChartingNoteAddendumType

  """fetch a Chat Setting"""
  chatSetting(id: ID): ChatSetting

  """get current video chats for a user."""
  closeToCurrentVideoChats(
    """User to get video chats that are starting in the next 10 minutes"""
    user_id: String
  ): [Appointment!]

  """Fetch a CMS1500 by ID"""
  cms1500(id: ID): Cms1500

  """Fetch paginated Cms1500s collection"""
  cms1500s(
    """Cursor to fetch results after"""
    after: Cursor
    client_id: ID
    keywords: String = null
    offset: Int = 0
    page_size: Int = 20
    provider_id: ID
    should_paginate: Boolean = true
    order_by: Cms1500OrderKeys = CREATED_AT_DESC
    status: String
  ): [Cms1500!]

  """Number of Cms1500s"""
  cms1500sCount(client_id: ID, keywords: String = null, provider_id: ID, status: String): Int

  """Color Code Options for a given category"""
  colorCodeOptions(appointment_setting_id: String, color_code_by: String): [ColorCodeOption!]

  """Fetch comment"""
  comment(id: ID = null): Comment

  """Fetch comments collection"""
  comments(
    """Cursor to fetch results after"""
    after: Cursor
    entry_id: ID = null

    """
    An array of entry IDs to grab comments for. Overrides entry_id if passed in
    """
    entry_ids: [ID]
    offset: Int = 0

    """
    If should paginate is true, the number of results to return on a page. Max 1000
    """
    page_size: Int = 100
    should_paginate: Boolean = false
  ): [Comment!]

  """number of comments"""
  commentsCount(
    entry_id: ID = null

    """
    An array of entry IDs to grab comments for. Overrides entry_id if passed in
    """
    entry_ids: [ID]
  ): Int

  """fetch a completedCourseItem by course_item_id and user_id"""
  completedCourseItem(course_item_id: ID, user_id: ID): CompletedCourseItem

  """Get the completed onboarding item by ID"""
  completedOnboardingItem(
    """The ID of the completed onboarding item"""
    id: ID!
  ): CompletedOnboardingItem

  """All Contact Types For Current User"""
  contactTypes: [String!]

  """fetch a conversation by id"""
  conversation(id: ID): Conversation

  """fetch a conversation membership by id"""
  conversationMembership(
    """
    The id of the conversation, will return the membership object for the conversation owner
    """
    id: ID

    """
    The id of the conversation membership, must have access to the conversation to use
    """
    conversation_membership_id: ID
  ): ConversationMembership

  """fetch a conversationmembership by id and invitees"""
  conversationMembershipInvitees(id: ID): [ConversationMembership!]

  """Fetch paginated conversationmemberships collection"""
  conversationMemberships(
    """Cursor to fetch results after"""
    after: Cursor
    active_status: String = "active"
    client_id: String = null
    conversation_type: String = "all"
    keywords: String = null
    notes_type: String = "inbox"
    offset: Int = 0
    page_size: Int = 20

    """
    If true with client_id, only returns client messages that are shared with the provider
    """
    only_include_shared_memberships: Boolean = false

    """If TRUE: fetch organization members conversations"""
    org_chat: Boolean = false

    """
    ID of the provider to get conversation for (if nil, will return current users)
    """
    provider_id: ID = null

    """Used to filter org chat conversations by provider ids"""
    provider_ids: [ID] = null
    read_status: String = "all"
    order_by: ConversationMembershipOrderKeys = UPDATED_AT_DESC
  ): [ConversationMembership!]

  """Number of conversationmembership"""
  conversationMembershipsCount(
    active_status: String = "active"
    client_id: String = null
    conversation_type: String = "all"
    keywords: String = null

    """
    If true with client_id, only returns client messages that are shared with the provider
    """
    only_include_shared_memberships: Boolean = false
    notes_type: String = "inbox"

    """If TRUE: count organization members conversations"""
    org_chat: Boolean = false

    """
    ID of the provider to get conversation for (if nil, will return current users)
    """
    provider_id: ID = null

    """Used to filter org chat conversations by provider ids"""
    provider_ids: [ID] = null
    read_status: String = "all"
  ): Int

  """
  Fetch current user's conversations. It is normally better to use the conversationMemberships query.
  """
  conversations(
    """Get conversations between the current user and a given user"""
    user_id: ID
  ): [Conversation!]

  """Number of conversation"""
  conversationsCount(keywords: String = null): Int

  """fetch a course by id (considered public)"""
  course(course_id: ID, id: ID): Course

  """fetch clients belonging to a course by course_id"""
  courseClients(course_id: ID, course_status: String, offset: Int = 0): [CourseMembership!]

  """total number of clients for a specific course"""
  courseClientsCount(course_id: ID, course_status: String): Int

  """Get course completion info for users and user_groups"""
  courseCompletetionInfo(course_id: ID): CourseCompletionInfoType

  """Course group memberships for the course"""
  courseGroupClients(course_group_id: String, course_id: ID, course_status: String, offset: Int = 0): [User!]

  """Total clients in course group memberships"""
  courseGroupClientsCount(course_group_id: String, course_id: ID, course_status: String): Int

  """fetch a courseitem by id (considered public)"""
  courseItem(course_membership_id: ID, id: ID): CourseItem

  """get all custom custom emails for a current user"""
  courseItemCustomEmails: [CustomEmail!]

  """
  get all documents for current user, can optionally include the attached org document by providing course_id and course_item_id.
  """
  courseItemDocuments(course_item_id: ID): [Document!]

  """get all custom module forms for a current user"""
  courseItemForms: [CustomModuleForm!]

  """Course items info for the course membership"""
  courseItems(client_id: ID, course_id: ID, find_for_provider: Boolean = false, include_emails: Boolean = true): [CourseItem!]

  """fetch a courseMembership by id"""
  courseMembership(course_id: ID, course_item_id: ID, course_membership_id: ID, id: ID, user_group_id: ID, user_id: ID): CourseMembership

  """Fetch paginated course membership collection"""
  courseMemberships(
    """Cursor to fetch results after"""
    after: Cursor
    client_id: ID
    fetch_all: Boolean = false
    offset: Int = 0
    page_size: Int = 10
  ): [CourseMembership!]

  """Number of course memberships"""
  courseMembershipsCount(client_id: ID): Int

  """Fetch paginated course collection"""
  courses(
    """Cursor to fetch results after"""
    after: Cursor
    active: Boolean = true
    course_type: String = null
    keywords: String = null
    offset: Int = 0
    only_available: Boolean = null
    page_size: Int = null
    should_paginate: Boolean = true
  ): [Course!]

  """Number of course"""
  coursesCount(active: Boolean = true, course_type: String = null, keywords: String = null): Int

  """All CPT Codes"""
  cptCodes(
    """Cursor to fetch results after"""
    after: Cursor
    for_superbill: Boolean = false
    is_favorited: Boolean
    keywords: String
    offset: Int = 0
    page_size: Int = 20
    should_paginate: Boolean = false
  ): [CptCode!]

  """CPT Codes count"""
  cptCodesCount(is_favorited: Boolean): Int

  """fetch the current user."""
  currentUser: User

  """fetch the current users notifications count."""
  currentUserNotificationsCount: UserNotificationsCount

  """get current video chats for a user."""
  currentVideoChats(
    only_current: Boolean = false

    """
    User to get current video chats for (if left blank, defaults to current user)
    """
    user_id: String
  ): [Appointment!]

  """Custom Email object"""
  customEmail(
    """Cursor to fetch results after"""
    after: Cursor
    id: ID
  ): CustomEmail

  """A HTML string containing mailer template for certain email type"""
  customEmailPreview(course_id: String, email_body_only: Boolean, email_type: String, find_record: Boolean, greeting: String, id: String, message_body: String, preview_email_type: String, reactivation_wait_days: String, subject: String): String

  """Fetch paginated custom emails collection"""
  customEmails(
    """Cursor to fetch results after"""
    after: Cursor
    email_type: String = "Invite Email"
    offset: Int = 0
    provider_id: ID
    page_size: Int = 10
  ): [CustomEmail!]

  """Number of custom emails"""
  customEmailsCount(email_type: String = "Invite Email"): Int

  """fetch a custom module form by ID (templates are considered public)"""
  customModuleForm(
    """Cursor to fetch results after"""
    after: Cursor
    charting: Boolean
    default: Boolean = false

    """The ID of the custom module form"""
    id: ID
  ): CustomModuleForm

  """All form templates for the current user"""
  customModuleForms(
    """Cursor to fetch results after"""
    after: Cursor
    active_status: Boolean
    category: String
    include_default_templates: Boolean = false
    keywords: String
    offset: Int = 0
    page_size: Int = 10
    should_paginate: Boolean = false
    order_by: CustomModuleFormOrderKeys = UPDATED_AT_DESC
  ): [CustomModuleForm!]

  """Fetch paginated count for provider custom module forms"""
  customModuleFormsCount(active_status: Boolean, category: String, include_default_templates: Boolean = false, keywords: String): Int

  """get open appointment times for a range (considered public)"""
  daysAvailableForRange(
    """
    (optional) The ID of the appointment that will be rescheduled. Only needed if you want to use appointment-specific rescheduling restrictions
    """
    appointment_to_reschedule_id: ID
    appt_loc_id: String
    appt_type_id: String
    clients_can_join_waitlist: Boolean = false
    contact_type: String

    """If not provided, defaults to the current date"""
    date_from_month: String

    """
    When passed in, supercedes date_from_month. Must be passed in along with start_date
    """
    end_date: String

    """
    When passed in, slots after this will not be returned. Inclusive. YYYY-MM-DD format
    """
    end_date_boundary: String
    length: String

    """Two letter state abbreviation (e.g. "CA", "NY")"""
    licensed_in_state: String = null

    """Required True if querying multiple providers"""
    org_level: Boolean = false
    outside_factors: Boolean = true

    """Required"""
    provider_id: String
    provider_ids: [String]

    """
    Filters the provider list to only include users who have all of the specified tags applied. Ignored if org_level is not true
    """
    tag_ids: [ID]

    """
    When passed in, supercedes date_from_month. Must be passed in along with end_date
    """
    start_date: String

    """
    When passed in, slots before this will not be returned. YYYY-MM-DD format
    """
    start_date_boundary: String
    timezone: String
  ): [String]

  """fetch a document by id"""
  document(care_plan_id: ID, course_id: ID, course_item_id: ID, custom_module_id: ID, id: ID): Document

  """
  Get Document Viewings for a specific document. A 'View' is when a document is downloaded or opened in a new tab
  """
  documentViewings(
    """Cursor to fetch results after"""
    after: Cursor
    document_id: ID = null
    offset: Int = 0

    """The number of document views to return per page. Maximum 500"""
    per_page: Int = 10
  ): [DocumentViewing!]

  """Number of instances for a document viewings for a specific document"""
  documentViewingsCount(document_id: ID = null): Int

  """Fetch paginated documents collection"""
  documents(
    """Cursor to fetch results after"""
    after: Cursor
    consolidated_user_id: String = null
    file_type: String = null
    filter: String = "all"
    folder_id: String = null
    for_template_use: Boolean = false
    keywords: String = null
    offset: Int = 0
    page_size: Int = 20
    private_user_id: String = null
    provider_id: ID
    should_paginate: Boolean = false
    order_by: DocumentOrderKeys = NAME_ASC
    viewable_user_id: String = null
  ): [Document!]

  """Number of documents"""
  documentsCount(consolidated_user_id: String = null, file_type: String = null, filter: String = "all", folder_id: String = null, keywords: String = null, private_user_id: String = null, provider_id: ID, viewable_user_id: String = null): Int

  """Fetch User Info on DoseSpot Object"""
  dosespotUserInfo(user_id: ID): DoseSpot

  """
  Fetch the iframe link to prescribe for a given patient (patient must have valid phone_number, dob, location.line1, location.city, location.state, and location.zip)
  """
  dosespot_ui_link(patient_id: ID): String

  """draft by conversation_membership id"""
  draft(conversation_membership_id: ID): Draft

  """Fetch an allergen by ID"""
  drugAllergen(id: ID!): DrugAllergenType

  """Search for allergens by name"""
  drugAllergens(keywords: String!): [DrugAllergenType!]

  """Fetch DSI comment for given intervention_type"""
  dsiComment(intervention_type: InterventionType): DsiComment

  """
  Fetch a link from Fullscript to create a treatment plan for a given user
  """
  dynamicLink(user_id: String): String

  """fetch embed steps based off of params"""
  embedWidgetSteps(is_for_web: Boolean = false, locationString: String): [EmbedWidgetStepType!]

  """Fetch paginated entries collection"""
  entries(
    """Cursor to fetch results after"""
    after: Cursor

    """The category of entry (e.g Weight or Blood Pressure) to return"""
    category: String = null
    client_id: String = null

    """
    This field takes in a datetime string, and returns entries before that datetime. Must be sent in with a start_datetime_range
    """
    end_datetime_range: String = null

    """
    This field takes in a date (e.g 2020-11-29), and returns entries before the beginning of that day. Must be sent in with a start_range
    """
    end_range: String = null
    entry_id: String = null
    group_id: String = null

    """When true, returns entries for all client in the organization"""
    is_org: Boolean = false
    keywords: String = null
    offset: Int = 0

    """
    If should paginate is true, the number of results to return on a page. Max 500
    """
    page_size: Int = 10
    order_by: EntryOrderKeys = CREATED_AT_DESC

    """
    This field takes in a datetime string, and returns entries after that datetime. Must be sent in with a end_datetime_range
    """
    start_datetime_range: String = null

    """
    This field takes in a date (e.g 2020-11-28), and returns entries starting at the beginning of that day
    """
    start_range: String = null
    summary_view: Boolean = false

    """The type of entry (e.g MetricEntry) to return"""
    type: String = null
  ): [Entry!]

  """Number of entries"""
  entriesCount(
    category: String = null
    client_id: String = null

    """
    This field takes in a datetime string, and returns entries before that datetime. Must be sent in with a start_datetime_range
    """
    end_datetime_range: String = null

    """
    This field takes in a date (e.g 2020-11-29), and returns entries before the beginning of that day. Must be sent in with a start_range
    """
    end_range: String = null
    group_id: String = null

    """When true, returns entries for all client in the organization"""
    is_org: Boolean = false
    keywords: String = null

    """
    When passed in, the count query will never return a higher number than this. This can significantly speed up performance if you are just want users to scroll through recent entries
    """
    maximum_count: Int = null

    """
    This field takes in a datetime string, and returns entries after that datetime. Must be sent in with a end_datetime_range
    """
    start_datetime_range: String = null

    """
    This field takes in a date (e.g 2020-11-28), and returns entries starting at the beginning of that day
    """
    start_range: String = null
    type: String = null
  ): Int

  """fetch an entry by id"""
  entry(client_id: ID = null, id: ID, type: String = null): Entry

  """fetch a featureToggle by id"""
  featureToggle(id: ID, user_id: ID): FeatureToggle

  """fetch a featureToggle by id"""
  featureToggleForEditing(care_plan_id: ID, id: ID, user_group_id: ID, user_id: ID): FeatureToggle

  """fetch a folder by id"""
  folder(custom_module_id: ID, id: String): Folder

  """Fetch paginated folders collection"""
  folders(client_id: String = null, consolidated_user_id: String = null, document_to_move_id: ID, filter: String = "all", folder_id: String = null, folder_to_move_id: ID = null, for_template_use: Boolean = false, keywords: String = null, private_user_id: String = null, provider_id: ID, should_paginate: Boolean = false, order_by: FolderOrderKeys = NAME_ASC, viewable_user_id: String = null): [Folder!]

  """Number of folders"""
  foldersCount(consolidated_user_id: String = null, filter: String = "all", folder_id: String = null, keywords: String = null, private_user_id: String = null, provider_id: ID, viewable_user_id: String = null): Int

  """Fetch food items"""
  foodSearch(
    """Cursor to fetch results after"""
    after: Cursor
    exclude_recent: Boolean = null
    food_type: String = null
    keywords: String = null
    offset: Int = null
    page_size: Int = 15
    upc: String = null
    user_id: String = null
  ): [Food!]

  """Get size of food items that matches the keyword"""
  foodSearchCount(exclude_recent: Boolean = null, food_type: String = null, keywords: String = null, upc: String = null, user_id: String = null): Int

  """Fetch a form answer group by id"""
  formAnswerGroup(
    for_superbills: Boolean
    external_id: String

    """
    Return a FormAnswerGroup based on an associated appointment_form_answer_group_connection_id
    """
    appointment_form_answer_group_connection_id: ID
    id: ID
    ids: [ID] = null

    """If TRUE, create form history 'opened' event"""
    track_opened_event: Boolean = false
  ): FormAnswerGroup

  """All filled forms for a given set of arguments"""
  formAnswerGroups(
    """Cursor to fetch results after"""
    after: Cursor
    custom_module_form_id: ID
    date: String
    filler_id: String
    form_answer_group_id: String

    """Accepts an array of FormAnswerGroup ids"""
    ids: [ID]
    include_group_notes: Boolean
    name: String
    user_id: String
    locked_status: Boolean
    signed_status: Boolean

    """
    When passed in, only objects updated after the specified datetime are returned.
    """
    updated_after: ISO8601DateTime

    """
    When passed in, only objects updated before the specified datetime are returned.
    """
    updated_before: ISO8601DateTime
    should_paginate: Boolean = false
    offset: Int = 0
    page_size: Int = 10
    order_by: FormAnswerGroupOrderKeys = CREATED_AT_DESC
  ): [FormAnswerGroup!]

  """The number of filled forms for a given set of a arguments"""
  formAnswerGroupsCount(
    date: String
    filler_id: String
    form_answer_group_id: String

    """Accepts an array of FormAnswerGroup ids"""
    ids: [ID]
    name: String
    user_id: String
    locked_status: Boolean
    signed_status: Boolean

    """
    When passed in, only objects updated after the specified datetime are returned.
    """
    updated_after: ISO8601DateTime

    """
    When passed in, only objects updated before the specified datetime are returned.
    """
    updated_before: ISO8601DateTime
  ): Int

  """
  Form histories owned by a patient and related to a sourceable form (RequsetedFormCompletion / OnboardingItem)
  """
  formHistories(
    """The patient ID who owns the form"""
    patient_id: ID

    """Source object ID"""
    sourceable_id: ID

    """Source object type"""
    sourceable_type: FormHistorySourceable
    offset: Int = 0
  ): [FormHistory!]!

  """
  Total count of form histories owned by a patient and related to a sourceable form (RequsetedFormCompletion / OnboardingItem)
  """
  formHistoriesCount(
    """The patient ID who owns the form"""
    patient_id: ID

    """Source object ID"""
    sourceable_id: ID

    """Source object type"""
    sourceable_type: FormHistorySourceable
  ): Int!

  """Fetch available forms to request"""
  formTypesToRequest(keywords: String): [FormTypesToRequest!]

  """
  Fullscript practitioners that share the same clinic id as organization owner
  """
  fullscriptPractitionerTypes: [FullscriptPractitionerTypeType!]

  """
  Fullscript practitioners that share the same clinic id as organization owner
  """
  fullscriptPractitioners: [FullscriptPractitionerType!]

  """fetch a goal by id"""
  goal(client_id: ID = null, date: String = null, get_client_goal: Boolean = false, id: ID, patient_goal_module: Boolean = false, program_goal: Boolean): Goal

  """All completed goals for a given set of users"""
  goalHistories(
    """Cursor to fetch results after"""
    after: Cursor
    category: String = null
    include_subgoals: Boolean = true
    offset: Int = 0
    page_size: Int = 10
    should_paginate: Boolean = true
    unique: Boolean = true
    user_id: ID
  ): [GoalHistory!]

  """All completed goals for a given set of users"""
  goalHistoriesCount(category: String = null, include_subgoals: Boolean = true, offset: Int = 0, unique: Boolean = true, user_id: ID): Int

  """Fetch goal history"""
  goalHistory(id: ID = null): GoalHistory

  """A goal's instances"""
  goalInstances(
    """Cursor to fetch results after"""
    after: Cursor
    end_range: String = null
    goal_id: ID = null
    keywords: String = null
    offset: Int = 0
    per_page: Int = 10
    start_range: String = null

    """Can be complete or not_complete"""
    status_filter: String = null
  ): [GoalInstance!]

  """Number of instances for a goal"""
  goalInstancesCount(
    end_range: String = null
    goal_id: ID = null
    keywords: String = null
    offset: Int = 0
    per_page: Int = 10
    start_range: String = null

    """Can be complete or not_complete"""
    status_filter: String = null
  ): Int

  """Goal templates for given user"""
  goalTemplates(
    """Can be 'personal', 'organizational', or 'default'"""
    category: String = null
    keywords: String = null
    user_id: ID = null
  ): [GoalTemplate!]

  """Number of Goal templates for given user"""
  goalTemplatesCount(keywords: String = null, user_id: ID = null): Int

  """All goals, either for a given user or for all of the providers clients"""
  goals(
    """Cursor to fetch results after"""
    after: Cursor
    category: String = null
    end_range: String = null

    """Can be daily, weekly, or one_time"""
    frequency_filter: String = null
    keywords: String = null
    offset: Int = 0
    per_page: Int = 10
    rel_goal_id: String = null
    order_by: GoalOrderKeys = DUE_DATE_START_DATE_DESC
    start_range: String = null

    """Can be complete or not_complete"""
    status_filter: String = null
    user_id: ID
  ): [Goal!]

  """Number of goal"""
  goalsCount(
    category: String = null
    end_range: String = null

    """Can be daily, weekly, or one_time"""
    frequency_filter: String = null
    keywords: String = null
    offset: Int = 0
    rel_goal_id: String = null
    start_range: String = null

    """Can be complete or not_complete"""
    status_filter: String = null
    user_id: ID = null
  ): Int

  """All goals data"""
  goalsData(
    """Cursor to fetch results after"""
    after: Cursor

    """Search over goals' repeat property"""
    category: String = null
    end_range: String = null

    """Can be daily, weekly, or one_time"""
    frequency_filter: String = null

    """Search over goals' names and descriptions"""
    keywords: String = null
    offset: Int = 0
    per_page: Int = 10

    """the goal ID"""
    rel_goal_id: String = null
    order_by: GoalOrderKeys = DUE_DATE_START_DATE_DESC
    start_range: String = null

    """Can be complete or not_complete"""
    status_filter: String = null
    user_id: ID
  ): GoalDataType

  """Overall completion percentage of goals"""
  goalsOverallCompletionRate(
    category: String = null
    end_range: String = null

    """Can be daily, weekly, or one_time"""
    frequency_filter: String = null
    keywords: String = null
    offset: Int = 0
    rel_goal_id: String = null
    start_range: String = null

    """Can be complete or not_complete"""
    status_filter: String = null
    user_id: ID = null
  ): Int @deprecated(reason: "Use goalsOverallCompletionRateInfo instead")

  """Overall completion percentage of goals"""
  goalsOverallCompletionRateInfo(
    category: String = null
    end_range: String = null

    """Can be daily, weekly, or one_time"""
    frequency_filter: String = null
    goal_id: ID = null
    keywords: String = null
    offset: Int = 0
    start_range: String = null

    """Can be complete or not_complete"""
    status_filter: String = null
    user_id: ID = null
  ): GoalOverallCompletionRateInfo

  """Overall completion percentage of goals"""
  goalsStreakCount(
    category: String = null
    end_range: String = null

    """Can be daily, weekly, or one_time"""
    frequency_filter: String = null
    goal_id: ID = null
    keywords: String = null
    offset: Int = 0
    start_range: String = null

    """Can be complete or not_complete"""
    status_filter: String = null
    user_id: ID = null
  ): Int

  """When true, the user can set up question conditions in the form builder"""
  hasConditionalQuestionEditing: Boolean

  """When true, the user can add sublabels to questions in the form builder"""
  hasSubLabels: Boolean

  """Fetch a single health assessment"""
  healthAssessment(device_token: String, device_type: String, email: String, run_id: ID, user_id: ID): HealthAssessment

  """Fetch Health Assessments"""
  healthAssessments(device_token: String, device_type: String, email: String, run_id: ID, user_id: ID): [HealthAssessment!]

  """Fetch ICD Code by ID"""
  icdCode(id: ID): IcdCode

  """All ICD Codes"""
  icdCodes(
    """Cursor to fetch results after"""
    after: Cursor
    is_billable: Boolean = null

    """The favorited status of the ICD Code"""
    is_favorited: Boolean
    keywords: String = null
    offset: Int = 0

    """Whether results are paginated, highly recommended for use"""
    should_paginate: Boolean = false
    order_by: IcdCodeOrderKeys
  ): [IcdCode!]

  """Count of all ICD Codes"""
  icdCodesCount(
    is_billable: Boolean = true

    """The favorited status of the ICD Code"""
    is_favorited: Boolean
    keywords: String = null
  ): Int

  """fetch import data request by user_id"""
  importDataRequest(user_id: ID): ImportDataRequest

  """A new CMS1500 form with some objects already prefilled"""
  initialCms1500(form_answer_group_id: ID, patient_id: ID, provider_id: String): Cms1500

  """Initial form answers for a given user and template"""
  initialFormAnswers(custom_module_form_id: ID = null, incomplete_form_id: ID = null, user_id: ID = null): [FormAnswer!]

  """Initial date of service for a new form answer group"""
  initialServiceDate(appointment_id: ID, user_id: ID): ISO8601DateTime

  """appointment types related to offering"""
  initializedOfferingIncludes(offering_id: ID = null): [OfferingInclude!]

  """Insurance Authorization belonging to a client"""
  insuranceAuthorization(
    """Client to get insurance authorization for"""
    client_id: ID

    """id of insurance authorization"""
    id: ID
  ): InsuranceAuthorizationType

  """Get all potential insurance plans"""
  insurancePlans(
    """Cursor to fetch results after"""
    after: Cursor

    """Array of plan ids"""
    ids: String

    """The accepted status of the insurance plan"""
    is_accepted: Boolean

    """Get custom insurance plans"""
    is_custom: Boolean

    """Search keywords"""
    keywords: String
    offset: Int
    should_paginate: Boolean
    order_by: InsurancePlanOrderKeys
  ): [InsurancePlan!]

  """Get all potential insurance plans"""
  insurancePlansCount(
    """Array of plan ids"""
    ids: String

    """The accepted status of the insurance plan"""
    is_accepted: Boolean

    """Get custom insurance plans"""
    is_custom: Boolean

    """Search keywords"""
    keywords: String
  ): Int

  """Fetch intake flow"""
  intakeFlow(
    keywords: String = null
    order_by: IntakeFlowOrderKeys
    user_id: ID = null

    """Filter records by list of statuses"""
    statuses: [FormStatus] = []

    """Filter records by list of form types"""
    form_types: [FormType] = []
  ): IntakeFlowType

  """Fetch list of  available integrations"""
  integrationsList(category: String = null): [IntegrationCategoryType!]

  """Initial date of service for a new form answer group"""
  intitialServiceDate(appointment_id: ID, user_id: ID): String @deprecated(reason: "Use `initialServiceDate` instead")

  """get the base price for the invoice based off the associated item"""
  invoiceBasePrice(cms1500_id: ID, offering_id: ID): String
  invoiceTemplates(keywords: String = null): [RequestedPaymentTemplate!]

  """Get options for lab filters"""
  labFiltersData: LabFiltersDataType

  """Fetch all lab options (considered public)"""
  labOptions: [LabOption!]

  """Fetch onboarding flows collection"""
  labOrder(id: ID): LabOrder

  """Fetch lab orders collection"""
  labOrders(
    """Cursor to fetch results after"""
    after: Cursor
    client_filter: String = null
    client_id: ID
    keywords: String = null
    lab_filter: String = null
    offset: Int = 0
    page_size: Int = 10
    provider_filter: String = null
    recent_orders: Boolean = false
    order_by: LabOrderOrderKeys = UPDATED_AT_DESC
    status_filter: String = null
  ): [LabOrder!]

  """Number of lab orders related to the current user"""
  labOrdersCount(client_filter: String = null, keywords: String = null, lab_filter: String = null, provider_filter: String = null, status_filter: String = null): Int

  """Fetch a laboratory result by ID"""
  labResult(
    """The ID of the lab result"""
    id: ID!
  ): LabResult

  """Fetch most recent conversationMembership"""
  lastCM(
    active_status: String = "active"

    """
    ID of the provider to get conversation for (if nil, will return current users)
    """
    provider_id: ID = null
  ): ConversationMembership

  """The 6 most recently active clients"""
  lastClientActivities(limit: Int = 6): [User!]

  """has loadMoreNotes been called"""
  loadMoreNotesCalled: Boolean

  """fetch a location by id"""
  location(id: ID): Location

  """Get location resources"""
  locationResources(location_ids: String = null): [LocationResourceType!]

  """Get locations for a given user (or current user)"""
  locations(
    """Cursor to fetch results after"""
    after: Cursor

    """Pass in true to get service facilities for CMS 1500"""
    has_name: Boolean = null
    keywords: String
    offset: Int = 0
    page_size: Int = 10
    should_paginate: Boolean = false
    user_id: String = null

    """Pass in true to get service facilities for CMS 1500"""
    has_service_facilities: Boolean = false
  ): [Location!]

  """A count of available locations for the current user"""
  locationsCount(
    has_name: Boolean = false
    keywords: String

    """Pass in true to get service facilities for CMS 1500"""
    has_service_facilities: Boolean = false
  ): Int

  """Fetch user meals"""
  mealSearch(
    """Cursor to fetch results after"""
    after: Cursor
    keywords: String = null
    offset: Int = null
    page_size: Int = 15
    user_id: String = null
  ): [Meal!]

  """Get size of user meals that matches the keyword"""
  mealSearchCount(keywords: String = null, user_id: String = null): Int

  """
  Meal plan options from user Living Plate account. Nil if no Living Plate account associated
  """
  meal_plan_options: [MealPlan!]

  """Fetch a medication by ID"""
  medication(id: ID): MedicationType
  medication_option(id: ID!): MedicationOptionType

  """Fetch an array of medications options. Considered Public"""
  medication_options(keywords: String): [MedicationOptionType!]

  """Fetch an array of medications for a given patient"""
  medications(
    active: Boolean
    patient_id: ID

    """
    When true, only unreconciled objects are returned. Otherwise, they are not included
    """
    unreconciled_from_ccda_ingest: Boolean = false
  ): [MedicationType!]

  """Fetch count of medications for a given patient"""
  medications_count(active: Boolean, patient_id: ID): Int

  """Fetch data for the metric graphs for a given user"""
  metricGraphData(
    category: String = ""

    """End of the date range, must be sent in with a start date."""
    end_date: String
    entry_type: String = "MetricEntry"

    """
    When false, returns no third-party data. When true, returns only third-party data. If not passed in, will return all data
    """
    has_third_party_source: Boolean
    multiplier: String = null

    """Start of the date range, must be sent in with an end date."""
    start_date: String
    user_id: String = null
  ): MetricGraphDataType

  """Fetch data for the metric graphs for a given user"""
  metricGraphsData(
    """End of the date range, must be sent in with a start date."""
    end_date: String

    """
    When false, returns no third-party data. When true, returns only third-party data. If not passed in, will return all data
    """
    has_third_party_source: Boolean

    """Start of the date range, must be sent in with an end date."""
    start_date: String
    user_id: String = null
  ): [MetricGraphDataType!]!
  minimumOfferingPrice(lab_option_ids: [ID] = [], state: String): String

  """returns metadata about montly payments"""
  monthlyBillingItemsData(gross: Boolean, org_level: Boolean): [MonthlyBillingItemsDataType!]

  """Fetch data for multi line metric graphs for a given user"""
  multiLineMetricGraphData(
    category: String = ""

    """End of the date range, must be sent in with a start date."""
    end_date: String
    entry_type: String = "MetricEntry"
    food_graph_type: String = "nutrients_split"

    """Start of the date range, must be sent in with an end date."""
    start_date: String
    sub_category: String = ""
    user_id: String = null
  ): MultiLineMetricGraphDataType

  """String containing info for the user about the client upgrade price"""
  newClientPriceString(new_client_num: Int): String

  """String containing info for the user about the org upgrade price"""
  newOrganizationPriceString(new_provder_num: Int): String

  """
  String containing info for the user about the org upgrade price when adding a new support user
  """
  newOrganizationSupportPriceString(new_support_num: Int): [String]

  """Fetch closest appointment"""
  nextAppointment: Appointment

  """get open appointment times for a range (considered public)"""
  nextAvailableSlot(
    """
    (optional) The ID of the appointment that will be rescheduled. Only needed if you want to use appointment-specific rescheduling restrictions
    """
    appointment_to_reschedule_id: ID
    appt_loc_id: String
    appt_type_id: String
    contact_type: String

    """
    When passed in, slots after this will not be returned. Inclusive. YYYY-MM-DD format
    """
    end_date_boundary: String
    length: String

    """Two letter state abbreviation (e.g. "CA", "NY")"""
    licensed_in_state: String = null
    org_level: Boolean = false
    outside_factors: Boolean = true

    """Required"""
    provider_id: String
    provider_ids: [String]

    """
    Filters the provider list to only include users who have all of the specified tags applied. Ignored if org_level is not true
    """
    tag_ids: [ID]

    """
    When passed in, slots before this will not be returned. YYYY-MM-DD format
    """
    start_date_boundary: String
    timezone: String
  ): String

  """fetch a courseitem by id (considered public)"""
  nextCourseItem(id: ID): CourseItem

  """fetch a note by id"""
  note(id: ID): Note

  """get the viewed status of a note"""
  noteViewedStatus(id: ID): Boolean

  """Fetch note scheduler by id"""
  note_scheduler(id: ID): NoteScheduler

  """Fetch paginated note collection for given conversation"""
  notes(
    """Cursor to fetch results after"""
    after: Cursor
    conversation_id: ID
    ids: [ID]
    keywords: String = null
    offset: Int = 0

    """If TRUE: get base user as a conversation owner"""
    org_chat: Boolean = false
    page_size: Int = 10
    provider_id: ID = null
    scheduled_notes: Boolean = false
    since_note_id: ID
    order_by: NoteOrderKeys = CREATED_AT_DESC

    """If TRUE: get notes with tasks"""
    with_tasks: Boolean = false
  ): [Note!]

  """Number of notes"""
  notesCount(
    conversation_id: ID
    keywords: String = null

    """If TRUE: get base user as a conversation owner"""
    org_chat: Boolean = false
    provider_id: ID = null
    scheduled_notes: Boolean = false
  ): Int

  """get count of notifications for a given user (or for the current user)"""
  notificationCount(other_party_id: String = null, read_status: Boolean = null, seen_status: Boolean = null, types: [String] = null): Int

  """fetch a Notification Setting by id"""
  notificationSetting(id: ID): NotificationSetting

  """get notifications for a given user (or for the current user)"""
  notifications(
    """Cursor to fetch results after"""
    after: Cursor
    offset: Int = 0
    other_party_id: String = null
    page_size: Int = 10
    read_status: Boolean = null
    seen_status: Boolean = null
    order_by: NotificationOrderKeys = CREATED_AT_DESC
    types: [String] = null
  ): [Notification!]

  """fetch an offering by id (considered public)"""
  offering(id: ID): Offering

  """Fetch paginated list of users associated with an offering"""
  offeringBillingItems(offering_id: ID, offset: Int = 0): [BillingItem!]

  """Number of users associated with an offering"""
  offeringBillingItemsCount(offering_id: ID): Int

  """Fetch paginated coupon offerings collection"""
  offeringCoupons(
    """Cursor to fetch results after"""
    after: Cursor
    from_package_details: Boolean = false
    keywords: String = null
    offering_id: ID
    page_size: Int = 10
    offset: Int = 0
    order_by: OfferingCouponOrderKeys = CODE_ASC
    user_id: ID
  ): [OfferingCoupon!]

  """Number of offering coupons"""
  offeringCouponsCount(from_package_details: Boolean = false, keywords: String, offering_id: ID): Int

  """get all user groups relating to offerings"""
  offeringGroupVisibilities(
    """
    the provider ID we want to use to fetch all user groups relating to offerings
    """
    provider_id: ID
  ): [OfferingGroupVisibility!]

  """All OfferingImage that have no user_id"""
  offeringImages: [OfferingImage!]

  """Fetch paginated offerings collection (considered public)"""
  offerings(
    """Cursor to fetch results after"""
    after: Cursor
    client_visibility: String
    keywords: String = null
    offering_id: ID
    offering_ids: [ID]
    offering_user_group_id: ID
    offset: Int = 0
    only_client_visible: Boolean = false

    """
    The number of packages to return at one time (when should_paginate is true)
    """
    page_size: Int
    provider_id: ID
    should_paginate: Boolean = true
    show_only_visible: Boolean = false
    order_by: OfferingOrderKeys = SET_ORDER
    status: String
  ): [Offering!]

  """Number of offerings (considered public)"""
  offeringsCount(client_visibility: String, keywords: String = null, offering_id: ID, offering_ids: [ID], offering_user_group_id: ID, only_client_visible: Boolean = false, provider_id: ID, should_paginate: Boolean = true, status: String): Int

  """returns metadata about offerings purchased"""
  offeringsData(org_level: Boolean): [OfferingsDataType!]

  """fetch the current users officeally sftp connection"""
  officeallySftpAccount: OfficeallySftpAccount

  """Fetch an onboarding flow by id or uuid"""
  onboardingFlow(
    id: ID
    user_id: ID

    """Fetch onboarding flow by unique identifier. Considered public"""
    uuid: String
  ): OnboardingFlow

  """Fetch onboarding flows collection"""
  onboardingFlows(
    """Cursor to fetch results after"""
    after: Cursor
    keywords: String = null
    offset: Int = 0
    should_paginate: Boolean = true
    page_size: Int = 10
    order_by: OnboardingFlowOrderKeys = NAME_ASC
  ): [OnboardingFlow!]

  """Number of onboarding flows"""
  onboardingFlowsCount(keywords: String = null, offset: Int = 0): Int

  """fetch an onboarding item by id (considered public)"""
  onboardingItem(
    id: ID

    """Patient ID who owns the form"""
    user_id: ID

    """If TRUE, create form history 'opened' event"""
    track_opened_event: Boolean = false
  ): OnboardingItem

  """Returns all cpt codes associated with org providers"""
  orgProvidersCptCodes(org_id: ID): [ProviderCptCodeType!]

  """
  fetch an organization by id, by provider id, or by the current_user, demographic org info is (considered public)
  """
  organization(email: String, for_client: Boolean, id: ID, provider_id: ID, provider_ids: [ID], state_licenses: [String]): Organization

  """Fetch organization info by id"""
  organizationInfo(id: ID): OrganizationInfo

  """fetch members of organization"""
  organizationMembers(
    conversation_id: ID
    keywords: String = null

    """Two letter state abbreviation (e.g. "CA", "NY")"""
    licensed_in_state: String = null
    offset: Int = 0

    """The number of organization members to return (Max 100)"""
    page_size: Int = 10
    order_by: UserOrderKeys = LAST_NAME_ASC
  ): [User!]

  """org members count"""
  organizationMembersCount(
    conversation_id: ID
    keywords: String = null

    """Two letter state abbreviation (e.g. "CA", "NY")"""
    licensed_in_state: String = null
  ): Int

  """
  Get the organization membership info of the current user, basic org member info is (considered public)
  """
  organizationMembership(
    """The id of a user"""
    user_id: ID

    """The id of an organization membership"""
    id: ID
  ): OrganizationMembership

  """Get the organization memberships"""
  organizationMemberships(id: String, order_by: OrganizationMembershipOrderKeys, user_ids: [ID]): [OrganizationMembership!]

  """fetch an Other Id Number by id"""
  otherIdNumber(id: ID): OtherIdNumber

  """A collection of Other ID's and its Qualifiers for given user"""
  otherIdNumbers(user_id: ID): [OtherIdNumber!]

  """returns true if the there are more transfers to load"""
  paginate_transfers(limit: Int, starting_after: String): Boolean

  """Fetch permission template"""
  permissionTemplate(id: ID): PermissionTemplateType

  """Get Permission Templates"""
  permissionTemplates(
    """Cursor to fetch results after"""
    after: Cursor
    offset: Int = 0
    page_size: Int = 5
  ): [PermissionTemplateType!]

  """Number of permission templates"""
  permissionTemplatesCount: Int

  """Fetch a pharmacy given dosespot pharmacy id"""
  pharamcy(
    """id assigned by dosespot"""
    id: String
  ): Pharmacy @deprecated(reason: "Use `pharmacy` instead")

  """Fetch an array of pharmacies given search parameters"""
  pharmacies(
    """requires at least 3 characters"""
    address: String

    """requires at least 3 characters"""
    city: String

    """keywords for name of pharmacy, requires at least 3 characters"""
    name: String
    ncpdp_id: String
    phone_or_fax: String

    """
    Array of pharmacy  accepted values: EPCS, TwentyFourHourPharmacy, LongTermCarePharmacy, MailOrder, SpecialtyPharmacy, Retail
    """
    specialties: [String]

    """two letter abbreviation (i.e ny, ca, md)"""
    state: String

    """requires at least 3 numeric characters"""
    zip: String
  ): [Pharmacy!]

  """Fetch a pharmacy given dosespot pharmacy id"""
  pharmacy(
    """id assigned by dosespot"""
    id: String
  ): Pharmacy

  """fetch all place of services"""
  placeOfServices: [PlaceOfService!]

  """fetch a Plan by id (considered public)"""
  plan(id: ID): Plan

  """fetch a policy by id"""
  policy(id: ID): Policy

  """Fetch collection of preferred CPT/ICD codes"""
  preferred_medical_codes(code_type: String = null): [PreferredMedicalCode!]

  """
  Fetch a prescriptions for a given patient and prescription id pulled from Dosespot
  """
  prescription(patient_id: ID, prescription_id: String): Prescription

  """
  Fetch an array of prescriptions for a given patient pulled from Dosespot
  """
  prescriptions(patient_id: ID, status: String): [Prescription!]

  """fetch a courseitem by id (considered public)"""
  prevCourseItem(id: ID): CourseItem

  """Fetch paginated product collection"""
  products(
    """Cursor to fetch results after"""
    after: Cursor
    keywords: String = null
    offset: Int = 0
    should_paginate: Boolean = true
    page_size: Int = 20
    order_by: ProductOrderKeys = NAME_ASC
  ): [Product!]

  """Number of products"""
  productsCount(keywords: String = null): Int

  """fetch a provider by id"""
  provider(
    client_id: ID
    id: ID

    """Change provider tax id based off the specified organization info"""
    organization_info_id: ID
    super_bill_id: ID
  ): User

  """get provider appointment locations."""
  providerAppointmentLocations(provider_id: ID): [AppointmentLocation!]

  """Returns all cpt codes associated with this provider"""
  providerCptCodes(provider_id: ID): [ProviderCptCodeType!]

  """Fetch generic custom modules for use in the form builder"""
  questionBankModules(category: String = "default"): [CustomModule!]

  """Fetch receipt_line_items collection by super_bill_id"""
  receiptLineItems(super_bill_id: ID): [ReceiptLineItem!]

  """Fetch received direct message via ID"""
  receivedDirectMessage(id: ID): ReceivedDirectMessage

  """Fetch Received Direct Meessages"""
  receivedDirectMessages(offset: Int = 0, keywords: String = null, order_by: ReceivedDirectMessageOrderKeys = CREATED_AT_DESC): [ReceivedDirectMessage!]

  """Fetch number of Received Direct Meessages"""
  receivedDirectMessagesCount(offset: Int = 0, keywords: String = null): Int

  """Fetch Received Fax by ID"""
  receivedFax(
    """The ID of the Received Fax"""
    id: ID
  ): ReceivedFax

  """Fetch paginated Received Faxes collection"""
  receivedFaxes(
    """Cursor to fetch results after"""
    after: Cursor
    active_status: String = "active"
    keywords: String = null
    offset: Int = 0
    order_by: ReceivedFaxOrderKeys = CREATED_AT_DESC
    page_size: Int = 20
  ): [ReceivedFax!]

  """Number of Received Faxes"""
  receivedFaxesCount(active_status: String = "active", keywords: String = null): Int

  """Fetch recent food items"""
  recentFoods(food_type: String = null, keywords: String = null, user_id: String = null): [Food!]

  """Fetch recurring forms collection"""
  recurringForms(connectable_id: String = null, connectable_type: String = "UserGroup"): [RecurringForm!]

  """Fetch a recurring payment by id"""
  recurringPayment(id: ID): RecurringPayment

  """Fetch active recurring_payments"""
  recurringPayments(active_status: String = "active", user_id: ID): [RecurringPayment!]

  """Fetch Referral by ID"""
  referral(
    """The ID of the Referral"""
    id: ID
  ): Referral

  """Get referring physician based on id"""
  referringPhysician(
    has_fax_number: Boolean = false
    id: ID

    """The id of the patient the referring physician is associated with"""
    user_id: String
  ): ReferringPhysician

  """all referring physicians based on current user"""
  referringPhysicians(
    """Cursor to fetch results after"""
    after: Cursor
    has_fax_number: Boolean = false
    keywords: String = null
    offset: Int = 0
    should_paginate: Boolean = false
    order_by: ReferringPhysicianOrderKeys = NAME_ASC
    page_size: Int = 10
  ): [ReferringPhysician!]

  """Number of referring physicians"""
  referringPhysiciansCount: Int

  """fetch a requested form completion by id"""
  requestedFormCompletion(
    id: ID

    """If TRUE, create form history 'opened' event"""
    track_opened_event: Boolean = false
  ): RequestedFormCompletion

  """Fetch requested form completions collection"""
  requestedFormCompletions(keywords: String = null, status: String = null, user_id: ID = null): [RequestedFormCompletion!]

  """fetch a requested payment (invoice) by id"""
  requestedPayment(id: ID, invoice_id: String, preview: Boolean = false, uuid: String): RequestedPayment

  """Fetch paginated Requested Payments collection"""
  requestedPayments(
    """Cursor to fetch results after"""
    after: Cursor
    keywords: String = null
    offset: Int = 0
    preview: Boolean = false

    """
    will return all requested payments with this ID as the sender or recipient
    """
    sender_id: ID = null
    order_by: RequestedPaymentOrderKeys = CREATED_AT_DESC

    """Can be paid, partial or unpaid"""
    status_filter: String = null
    page_size: Int = 20
  ): [RequestedPayment!]

  """Number of Requested Payments"""
  requestedPaymentsCount(
    keywords: String = null
    sender_id: ID = null

    """Can be paid, partial or unpaid"""
    status_filter: String = null
  ): Int

  """Fetch specific saved filter"""
  savedFilter(id: ID, uuid: ID): SavedFilter

  """Fetch all saved filters for a user or organization"""
  savedFilters(user_id: ID, organization_id: ID): [SavedFilter!]

  """Fetch user's scheduled message blasts"""
  scheduledMessageBlasts(
    """If True - returns organization membership scheduled message blasts"""
    org_chat: Boolean = false

    """Only include relevant scheduled message blasts for client"""
    client_id: String = null

    """
    ID of the provider to get conversation for (if nil, will return current users)
    """
    provider_id: ID = null

    """Used to filter org chat conversations by provider ids"""
    provider_ids: [ID] = null
  ): [NoteScheduler!]

  """Fetch collection of all scheduled packages"""
  scheduledUserPackageSelections(
    """ID of the user to load the list of given packages"""
    user_id: ID
  ): [ScheduledUserPackageSelection!]

  """SDK configuration"""
  sdkConfig(
    """SDK version to obtain the configuration for"""
    version: String
  ): SDKConfig!

  """Fetch sent direct message via ID"""
  sentDirectMessage(id: ID): SentDirectMessage

  """Fetch number of Sent Direct Messages"""
  sentDirectMessages(offset: Int = 0, keywords: String = null, order_by: SentDirectMessageOrderKeys = CREATED_AT_DESC): [SentDirectMessage!]

  """Fetch number of Sent Direct Meessages"""
  sentDirectMessagesCount(offset: Int = 0, keywords: String = null): Int

  """Fetch sent Fax by ID"""
  sentFax(
    """The ID of the sent Fax"""
    id: ID!
  ): SentFax

  """Fetch paginated Sent Faxes collection"""
  sentFaxes(
    """Cursor to fetch results after"""
    after: Cursor
    keywords: String = null
    offset: Int = 0
    order_by: SentFaxOrderKeys = CREATED_AT_DESC
    page_size: Int = 20
  ): [SentFax!]

  """Number of Sent Faxes"""
  sentFaxesCount(keywords: String = null): Int

  """Fetch notification list for a specific client or list of clients."""
  sentNotificationRecords(
    end_date: String
    offset: Int = 0

    """
    Used in conjunction with provider_id. When true, returns sent notification records for all patients in the organization
    """
    org_level: Boolean

    """The ID of the patient to return sent notification records for."""
    patient_id: ID

    """
    When passed in, returns sent notification records for the given provider's patients. Overrides patient_id. Current user must be an admin to use this param
    """
    provider_id: ID

    """Must be true if provider_id is passed in."""
    should_paginate: Boolean = false
    start_date: String
    status: String
    type: String
  ): [SentNotificationRecord!]

  """Get number of SentNotificationRecord entries"""
  sentNotificationRecordsCount(
    end_date: String

    """
    Used in conjunction with provider_id. When true, returns sent notification records for all patients in the organization
    """
    org_level: Boolean = false

    """The ID of the patient to return sent notification records for."""
    patient_id: ID

    """
    When passed in, returns sent notification records for the given provider's patients. Overrides patient_id. Current user must be an admin to use this param
    """
    provider_id: ID
    start_date: String
    status: String
    type: String
  ): Int

  """
  Fetch paginated SentWebhooks collection. SentWebhook records are available for 180 days.
  """
  sentWebhooks(
    """Cursor to fetch results after"""
    after: Cursor
    keywords: String = null
    offset: Int = 0
    order_by: SentWebhookOrderKeys = CREATED_AT_DESC
    page_size: Int = 20
  ): [SentWebhook!]

  """
  Number of SentWebhooks. SentWebhook records are available for 180 days.
  """
  sentWebhooksCount(keywords: String = null): Int

  """Fetch serving sizes for a food"""
  servingSizes(food_id: String): [ServingSize!]

  """A HTML string of charting note answers"""
  shareNotePreview(answers: String, form_answer_group_id: String, letterhead: Boolean, user_id: String): String

  """Should current user see scheduled chat tab"""
  showScheduledTab: Boolean

  """Get the signed stream name for a given stream name"""
  signedStreamName(
    """The id of the conversation to get the signed stream name for"""
    conversation_id: ID

    """The type of stream to get the signed stream name for"""
    type: SignedStreamName!
  ): String

  """Fetch user smart phrases"""
  smartPhrases(
    """Cursor to fetch results after"""
    after: Cursor
    keywords: String = null
    offset: Int = null
    order_by: SmartPhraseOrderKeys = NAME_ASC
    should_paginate: Boolean = true
  ): [SmartPhrase!]

  """Get size of user smart phrases that matches the keyword"""
  smartPhrasesCount(keywords: String = null): Int

  """initial cpt codes for a new super bill"""
  startingSuperBillCptCodes(form_answer_group_id: ID = null, form_answer_group_ids: [ID] = null, user_id: ID = null): [CptCodesSuperBill!]

  """initial icd10 codes for a new super bill"""
  startingSuperBillIcd10s(form_answer_group_id: ID = null, user_id: ID = null): [IcdCodesSuperBill!]

  """Return providers' state licenses"""
  stateLicenses(provider_id: ID, provider_ids: [ID]): [StateLicense!]

  """
  Default Stripe bank account object associated to a practitioner stripe account
  """
  stripeBankAccount: StripeBankAccountType

  """Information about the user's stripe company"""
  stripeCompany: StripeCompanyType

  """An array containing infoformation about countries that stripe supports"""
  stripeCountries: [StripeCountry!]

  """An object containing info about a country that stripe supports"""
  stripeCountry(country_code: String): StripeCountry

  """Fetch all stripe payment cards for user"""
  stripeCustomerDetails(user_id: ID): [StripeCustomerDetail!]

  """All subgoals for a given goal"""
  subGoals(goal_id: ID, offset: Int = 0, user_id: ID): [Goal!]

  """Number of subgoals"""
  subGoalsCount(goal_id: ID, offset: Int = 0, user_id: ID = null): Int

  """Get the current users subscription"""
  subscription: SubscriptionInstance

  """fetch a superbill by id"""
  superBill(id: ID): SuperBill

  """Fetch paginated super bills collection"""
  superBills(
    """Cursor to fetch results after"""
    after: Cursor
    client_id: ID
    keywords: String = null
    offset: Int = 0
    provider_id: ID
    order_by: SuperBillOrderKeys = CREATED_AT_DESC
    page_size: Int = 20

    """status to filter superbills, default all """
    status: String = "all"
  ): [SuperBill!]

  """Number of super bills"""
  superBillsCount(
    client_id: ID
    keywords: String = null
    provider_id: ID

    """status to filter superbills, default all """
    status: String = "all"
  ): Int

  """A collection of tags related to current patient/provider/organization"""
  tags(
    """When true, only returns tags applied to providers in the organization"""
    applied_to_providers: Boolean
    ids: [ID]
    order_by: TagOrderKeys = NAME_ASC
    user_id: String
  ): [Tag!]

  """Number of tags"""
  tagsCount(
    """When true, only returns tags applied to providers in the organization"""
    applied_to_providers: Boolean
    ids: [ID]
    user_id: String
  ): Int
  task(id: ID): Task

  """All tasks assigned to a provider or client"""
  tasks(
    """Cursor to fetch results after"""
    after: Cursor
    client_id: String
    completed_status: String

    """
    Nil -> does nothing, false -> tasks created by others, true -> tasks created by current user
    """
    created_by_self: Boolean = null
    keywords: String
    offset: Int
    per_page: Int
    show_hidden: Boolean = true
    order_by: TaskOrderKeys
    type: String
    withoutPagination: Boolean = false
  ): [Task!]

  """All tasks assigned to a provider or client"""
  tasksCount(
    completed_status: String

    """
    Nil -> does nothing, false -> tasks created by others, true -> tasks created by current user
    """
    created_by_self: Boolean = null
    keywords: String
    show_hidden: Boolean
    type: String
  ): Int
  timesForRange(appt_loc_id: String, appt_type_id: String, endDate: String, length: String, startDate: String): [String] @deprecated(reason: "use availableSlotsForRange.")

  """fetch transactions for the current user"""
  transactions(payout_id: String, user_id: String): [TransactionType!]

  """fetch transfers for the current user"""
  transfers(limit: Int, order_by: TransferOrderKeys = CREATED_AT_DESC, starting_after: String): [TransferType!]

  """
  Fetch an array of treatment plans and recommended products from Fullscript given a user id
  """
  treatmentPlans(user_id: String): [FullscriptTreatmentPlanType!]

  """
  Get the users completed onboarding items, that are not part of the users current flow
  """
  unassociatedCompletedOnboardingItems(
    """User to get unassociated onboarding items"""
    user_id: ID
  ): [CompletedOnboardingItem!]

  """fetch ungrouped course memberhips belonging to a a specific course"""
  ungroupedCourseMemberships(course_id: ID, course_status: String, offset: Int = 0): [CourseMembership!]

  """count of ungrouped course memberhips for a specific course"""
  ungroupedCourseMembershipsCount(course_id: ID, course_status: String): Int

  """fetch a user by id"""
  user(clear_notifs: Boolean = true, id: ID, or_current_user: Boolean = false): User

  """fetch a user group by id"""
  userGroup(id: ID): UserGroup

  """Fetch paginated user groups collection"""
  userGroups(
    """Cursor to fetch results after"""
    after: Cursor
    keywords: String = null
    offset: Int = 0
    should_paginate: Boolean = false
    order_by: UserGroupOrderKeys = NAME_ASC
    page_size: Int = 10

    """checks the allow_group_level_actions permission on org membership"""
    check_group_level_actions: Boolean = false
  ): [UserGroup!]

  """Number of user groups"""
  userGroupsCount(
    keywords: String = null

    """checks the allow_group_level_actions permission on org membership"""
    check_group_level_actions: Boolean = false
  ): Int

  """Fetch collection of all purchased packages"""
  userPackageSelections(
    """Cursor to fetch results after"""
    after: Cursor

    """ID of the offering to filter the list"""
    offering_id: ID
    offset: Int = 0
    page_size: Int = 20

    """ID of the user to load the list of given packages"""
    user_id: ID
  ): [UserPackageSelection!]
  userPackageSelectionsCount(
    """ID of the offering to filter the list"""
    offering_id: ID
    offset: Int = 0

    """ID of the user to load the list of given packages"""
    user_id: ID
  ): Int

  """
  Fetch paginated patients collection (use organizationMembers query for providers)
  """
  users(
    """Cursor to fetch results after"""
    after: Cursor

    """Possible options: [active, archived]"""
    active_status: String = null
    conversation_id: ID
    convo_patients_only: Boolean = false

    """When this is true, but conversation_id is nil, we return no users"""
    expect_conversation_id: Boolean = false
    from_superadmin: Boolean = false
    group_id: String = null

    """
    When true, only clients with credit cards will be returned. Passing false does nothing
    """
    has_cc_on_file: Boolean
    id: ID
    ids: [ID]
    keywords: String = null
    limited_to_provider: Boolean = false
    offset: Int = 0

    """The number of users to return (Max 100)"""
    page_size: Int = 10
    provider_id: String = null
    should_paginate: Boolean = true
    show_all_by_default: Boolean = true
    order_by: UserOrderKeys = LAST_NAME_ASC

    """
    When passed in, only clients with at least ONE of the passed-in tags will be returned.
    """
    tag_ids: [ID] = []
    with_feature_toggles: Boolean = false
  ): [User!]

  """Number of users"""
  usersCount(
    active_status: String = null
    conversation_id: ID
    convo_patients_only: Boolean = false

    """When this is true, but conversation_id is nil, we return no users"""
    expect_conversation_id: Boolean = false
    group_id: String = null

    """
    When true, only clients with credit cards will be returned. Passing false does nothing
    """
    has_cc_on_file: Boolean
    keywords: String = null
    limited_to_provider: Boolean = false
    provider_id: String = null

    """
    When passed in, only clients with at least ONE of the passed-in tags will be returned.
    """
    tag_ids: [ID] = []
  ): Int

  """
  Check if a coupon is valid, and return the new price (considered public)
  """
  validateCoupon(coupon_code: String, offering_id: ID, provider_id: ID, requested_payment_id: ID): ValidateOfferingCoupon

  """Check if a reset passwrd token is valid"""
  validateResetPasswordToken(token: String = null): Boolean

  """Check if a signup token is valid"""
  validateSignupToken(token: String = null): Boolean
  waterIntakeEntry(
    """Date entry was posted"""
    created_at: String

    """Entry to query daily intake total if present."""
    entry_id: ID
  ): Entry

  """Fetch possible Webhook event types"""
  webhookEventTypes: [String!]

  """Fetch paginated Webhooks collection"""
  webhooks(
    """Cursor to fetch results after"""
    after: Cursor
    keywords: String = null
    offset: Int = 0
    order_by: WebhookOrderKeys = CREATED_AT_DESC
    page_size: Int = 20
  ): [Webhook!]

  """Number of Webhooks"""
  webhooksCount(keywords: String = null): Int

  """Whitelabel setting to use"""
  whitelabelSetting(branded_url: String): WhitelabelSetting

  """
  Generate a JWT to be used in the client-side Zoom SDK. This is just available on production, and requires your account to be approved by Healthie. The JWT is valid for 1 day.
  """
  zoomSdkJwt(
    """The Zoom meeting or webinar number"""
    mn: String

    """The user role. 0 to specify participant, 1 to specify host"""
    role: String
  ): String
}

"""receipt line item"""
type ReceiptLineItem {
  """Date of service (as a date)"""
  created_at: String!

  """description of line item"""
  description: String

  """The unique identifier of the line item"""
  id: ID!

  """previous price"""
  previous_price: String

  """price of line item"""
  price: String

  """id of super bill"""
  super_bill_id: ID

  """updated at"""
  updated_at: String!
}

"""Payload for a receipt line item"""
input ReceiptLineItemInput {
  """The time the receipt line item was created"""
  created_at: String

  """The description of the receipt line item"""
  description: String

  """The ID of the receipt line item"""
  id: ID

  """The previous price of the receipt line item"""
  previous_price: String

  """The current price of the receipt line item"""
  price: String
}

"""A Received Direct Message"""
type ReceivedDirectMessage {
  """The number of attachments for the received direct message"""
  attachments_count: Int

  """The XML data contained in the attach CDA file"""
  cda_xml: String

  """The received date of the direct message"""
  created_at: String

  """Array of direct message attachments"""
  direct_message_attachments: [DirectMessageAttachment!]

  """When true, the message has an attached CDA"""
  has_cda: Boolean

  """The unique identifier of the fax"""
  id: ID!

  """The listed recipient"""
  listed_recipient: String

  """The listed sender"""
  listed_sender: String

  """The message body of the direct message"""
  message_body: String

  """
  The patient associated with the direct message. Will be nil if the direct message is not associated
  """
  patient: User

  """The subject"""
  subject: String
}

"""ReceivedDirectMessage sorting enum"""
enum ReceivedDirectMessageOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A Received Fax"""
type ReceivedFax {
  """The archived status of the fax"""
  archived: Boolean!

  """Any user added comments on the fax"""
  comments: String

  """The received date of the fax"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """The number of the sender of the fax"""
  from_number: String

  """The unique identifier of the fax"""
  id: ID!

  """Returns the referral provider name if fax number is found"""
  referring_provider_name: String

  """Whether the received fax has been viewed by the current user"""
  viewed_by_current_user: Boolean
}

"""ReceivedFax sorting enum"""
enum ReceivedFaxOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NUMBER_ASC
  NUMBER_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A Care Plan Recommendation"""
type Recommendation {
  """The unique identifier of the recommendation"""
  id: ID!

  """Recommendation text"""
  recommendation_body: String

  """
  The type of recommendation (1)Activity, (2)Nutrition, (3)Supplement, (4)Other
  """
  recommendation_type: String

  """Sanitized recommendation_body"""
  sanitized_body: String
}

"""A Recurring Appointment"""
type RecurringAppointment {
  """The unique identifier of the recurring appointment"""
  id: ID!

  """Auto-register clients for all appointments in series"""
  join_all: Boolean!

  """Interval between each appointment in the series"""
  repeat_interval: String

  """Count of the appointment recurrences"""
  repeat_times: String
}

"""Payload for a recurring appointment"""
input RecurringAppointmentInput {
  """The unique identifier of the recurring appointment"""
  id: ID

  """If true, all appointments will be joined into one appointment"""
  join_all: Boolean = false

  """Options are ["Weekly", "Biweekly", "Monthly", or "Every 4 Weeks"]"""
  repeat_interval: String

  """Options are ["2", "3", "4", "5", "6", "7", "8", "9", "10"]"""
  repeat_times: String
}

"""
Each data point has a time range and the days that are in that time range
"""
type RecurringDaysData {
  """The days that are in the time range"""
  day_ranges: [DayRangeType!]

  """The unique identifier of the recurring days data"""
  id: ID!
}

"""The recurring days input"""
input RecurringDaysInputObjectType {
  """The list of day ranges"""
  day_ranges: [DayRangeInputObjectType]

  """The id of the recurring day"""
  id: ID
}

"""A Recurring Form"""
type RecurringForm {
  """Associated custom module form"""
  custom_module_form: CustomModuleForm

  """The ID of the form itself"""
  form_id: String

  """The type of form"""
  form_type: String!

  """Whether the user or group is connected to the recurring form"""
  has_connected_recipient(
    """The ID of the user or group"""
    connectable_id: ID

    """The type of the user or group"""
    connectable_type: String
  ): Boolean

  """The unique identifier of the recurring form"""
  id: ID!

  """
  The interval of recurrence. Can be: '23:12' / 'Monday, Tuesday' / '31st'
  """
  interval: String

  """The type of recurrence('Daily'(1) / 'Weekly'(2) / 'Monthly'(3))"""
  interval_type: String

  """Wherther the recurrence is active or not"""
  is_active: Boolean!

  """The day when reccurence ends"""
  recurrence_end_at: String

  """Get user_group assigned to the recurring form"""
  userGroups: [UserGroup!]

  """The ID of the provider who set up recurrence"""
  user_id: String

  """Get patients assigned to the recurring form"""
  users: [User!]

  """
  The identifiers of associated users and groups: ['1', '2', 'group-5', 'group-13']
  """
  users_and_groups: [String]!
}

"""Recurring Payment"""
type RecurringPayment {
  """The amount of recurring payment"""
  amount_paid: String

  """The amount to be paid for the next payment"""
  amount_to_pay: String

  """The ID of the appointment associated with this recurring payment"""
  appointment_id: ID

  """The frequency the payment should be made"""
  billing_frequency: String

  """The number of billing items"""
  billing_items_count: String

  """The date on which the recurring payment is canceled"""
  canceled_at: String

  """The provider who canceled the recurring payment"""
  canceled_by: User

  """The date on which the recurring payment is created"""
  created_at: String!

  """
  Includes the next payment date, returns true if next payment date is set and payments remanining is greater than zero
  """
  has_next_payment_date: Boolean

  """Whether or not this recurring payment has scheduled billing item"""
  has_scheduled_billing_item: Boolean

  """The unique identifier of the recurring payment"""
  id: ID!

  """If the recurring payment has been canceled"""
  is_canceled: Boolean!

  """Whether or not the recurring payments has been paused"""
  is_paused: Boolean!

  """The last billing item for this recurring payment"""
  last_billing_item: BillingItem

  """The date of the next payment"""
  next_payment_date: String

  """The next payment date if the recurring payment is restarted"""
  next_restart_payment_date: String

  """The ID of the coupon"""
  offering_coupon_id: ID

  """The offering ID"""
  offering_id: ID

  """The name of the offering associated with recurring payment"""
  offering_name: String

  """The original price"""
  original_price: String

  """The date on which the recurring payment is paused"""
  paused_at: String

  """ The provider who paused the recurring payment"""
  paused_by: User

  """Count remaining payments or returns Until Canceled"""
  payments_remaining: String

  """The ID of the receiver"""
  recipient_id: ID

  """The number of times the payment should repeat"""
  repeat_tiems: String

  """The ID oft the sender"""
  sender_id: ID

  """The date payments should begin"""
  start_at: String

  """The updated at date"""
  updated_at: String
}

"""A referral"""
type Referral {
  """created at"""
  created_at: String!

  """The unique identifier of the referral"""
  id: ID!

  """
  A serialized JSON string of metadata. Maximum character limit of 128,000.
  """
  metadata: String

  """The reason the client was referred to the physician"""
  referral_reason: String

  """The referring physician"""
  referring_physician: ReferringPhysician

  """id of the referring physician"""
  referring_physician_id: ID

  """updated at"""
  updated_at: String!

  """The referred client"""
  user: User

  """id of the referred client"""
  user_id: ID
}

"""The referral information for a CMS1500 claim"""
type ReferralInfo {
  """The state the auto accident occurred in"""
  auto_accident_state: String

  """The date of current illness, injury, or pregnancy"""
  case_date: String

  """The qualifier for case_date"""
  case_qualifier: String

  """The associated CMS1500"""
  cms1500: Cms1500 @deprecated(reason: "You are no longer able to get the cms1500 from the referral info")

  """The id of the associated CMS1500"""
  cms1500_id: String

  """Options that the condition can be related to"""
  condition_related_to: [String]

  """The end of the hospitalization period"""
  hospitalization_end: String

  """The start of the hospitalization period"""
  hospitalization_start: String

  """The unique identifier of the referral info"""
  id: ID

  """
  This field identifies additional date information about the patient's condition or treatment.
  """
  other_associated_date: String

  """The qualifier for other_associated_date"""
  other_associated_qualifier: String

  """The prior authorization number"""
  prior_auth_number: String

  """The first name of the referring provider"""
  ref_provider_first: String

  """The last name of the referring provider"""
  ref_provider_last: String

  """The middle name of the referring provider"""
  ref_provider_middle: String

  """The NPI of the referring provider"""
  ref_provider_npi: String

  """The other id of the referring provider"""
  ref_provider_other_id: String

  """The other id qualifier of the referring provider"""
  ref_provider_other_id_qual: String

  """The qualifications of the referring provider"""
  ref_provider_qual: String

  """The date of the referral"""
  referral_date: String

  """The associated referring physician"""
  referring_physician: ReferringPhysician

  """The id of associated referring physician"""
  referring_physician_id: ID

  """The end of the unable to work period"""
  unable_to_work_end: String

  """The start of the unable to work period"""
  unable_to_work_start: String
}

"""Payload for a referral info"""
input ReferralInfoInput {
  """The state of the auto accident"""
  auto_accident_state: String

  """The date of the case"""
  case_date: String

  """The qualifier of the case"""
  case_qualifier: String

  """The condition relationships"""
  condition_related_to: [String]

  """The end date of the hospitalization"""
  hospitalization_end: String

  """The start date of the hospitalization"""
  hospitalization_start: String

  """The id of the referral info"""
  id: ID

  """The other associated date"""
  other_associated_date: String

  """The other qualifier"""
  other_associated_qualifier: String

  """The prior auth number"""
  prior_auth_number: String

  """The first name of the referring provider"""
  ref_provider_first: String

  """The last name of the referring provider"""
  ref_provider_last: String

  """The middle name of the referring provider"""
  ref_provider_middle: String

  """The NPI of the referring provider"""
  ref_provider_npi: String

  """The other id of the referring provider"""
  ref_provider_other_id: String

  """The other id qualifier of the referring provider"""
  ref_provider_other_id_qual: String

  """The qualifier of the referring provider"""
  ref_provider_qual: String

  """The id of the referring physician"""
  referring_physician_id: ID

  """The end date of the unable to work"""
  unable_to_work_end: String

  """The start date of the unable to work"""
  unable_to_work_start: String
}

"""Payload for a referral"""
input ReferralInput {
  """If true, the referral will be deleted"""
  _destroy: Boolean

  """The ID of the referral"""
  id: ID

  """The referring physician object"""
  referring_physician: ReferringPhysicianInput

  """The ID of the referring physician"""
  referring_physician_id: ID
}

"""a referring physician"""
type ReferringPhysician {
  """"""
  accepts_insurance: Boolean

  """Business Name of physician"""
  business_name: String

  """created at"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """email of physician"""
  email: String

  """fax number of physician"""
  fax_number: String

  """first name of physician"""
  first_name: String

  """full name of physician"""
  full_name: String

  """The unique identifier of the physician"""
  id: ID!

  """last name of physician"""
  last_name: String

  """The associated location"""
  location: Location

  """location id"""
  location_id: ID

  """
  A serialized JSON string of metadata. Maximum character limit of 128,000.
  """
  metadata: String

  """Dietitian's notes"""
  notes: String

  """npi of physician"""
  npi: String

  """Saved Other ID associated with this provider"""
  other_id: String

  """Qualifier for Other ID"""
  other_id_qualifier: String

  """phone number of physician"""
  phone_number: String

  """The user who entered the referring physician"""
  provider: User!

  """Associated users"""
  referrals: [Referral!]

  """Associated users count"""
  referrals_count: Int

  """Physician's speciality"""
  speciality: String

  """updated at"""
  updated_at: String!

  """Physician's website"""
  website: String
}

"""Payload for a referring physician"""
input ReferringPhysicianInput {
  """If true, the referring physician will be deleted"""
  _destroy: Boolean

  """The email of the referring physician"""
  email: String

  """The fax number of the referring physician"""
  fax_number: String

  """The first name of the referring physician"""
  first_name: String

  """The ID of the referring physician"""
  id: ID

  """The last name of the referring physician"""
  last_name: String

  """The legal name of the referring physician"""
  legalname: String

  """The location of the referring physician"""
  location: ClientLocationInput

  """The NPI of the referring physician"""
  npi: String

  """The phone number of the referring physician"""
  phone_number: String
}

"""ReferringPhysician sorting enum"""
enum ReferringPhysicianOrderKeys {
  NAME_ASC
  NAME_DESC
  BUSINESS_NAME_ASC
  BUSINESS_NAME_DESC
  SPECIALITY_ASC
  SPECIALITY_DESC
  CITY_ASC
  CITY_DESC
  CLIENTS_REFERRED_ASC
  CLIENTS_REFERRED_DESC
}

"""Autogenerated input type of RefetchChangeHealthLabOrder"""
input RefetchChangeHealthLabOrderInput {
  id: ID
}

"""Autogenerated return type of RefetchChangeHealthLabOrder."""
type RefetchChangeHealthLabOrderPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of RefreshHostLinks"""
input RefreshHostLinksInput {
  user_id: ID!
}

"""Autogenerated return type of RefreshHostLinks."""
type RefreshHostLinksPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""A refinding item of a related billing item"""
type RefundItem {
  """The ID of the billing_item"""
  billing_item_id: String

  """The currency"""
  currency: String

  """The unique identifier of the refund"""
  id: ID!

  """The refund amount"""
  refund_amount: String

  """The refund date"""
  refund_date: String

  """The status of refunding"""
  status: String
}

"""A Related Object"""
type RelatedObject {
  """A combined string to use for labels"""
  full_name: String

  """The Healthie unique identifier"""
  id: ID!
}

"""A reminder object"""
type Reminder {
  """The unique identifier of the reminder"""
  id: ID!

  """Interval of a reminder ex. daily"""
  interval_type: String!

  """Value of the reminder interval ex. monday"""
  interval_value: String

  """True if reminder is active"""
  is_enabled: Boolean!
}

"""Payload for a reminder"""
input ReminderInput {
  """The ID of the reminder. If no id is given, a reminder will be created"""
  id: ID

  """The type of the reminder interval. Options are daily, weekly, once"""
  interval_type: String

  """
  For daily interval -> don't send anything. For weekly interval, send in comma separated all lower-case day of week (e.g wednesday, friday). For once, send in the date (e.g 2020-11-28)
  """
  interval_value: String

  """If not set to true, the reminder will not be sent"""
  is_enabled: Boolean

  """Send in true to delete the reminder"""
  remove_reminder: Boolean
}

"""Autogenerated input type of RemoveCardOnFile"""
input RemoveCardOnFileInput {
  id: ID!
  remove_card_on_file: Boolean!
}

"""Autogenerated return type of RemoveCardOnFile."""
type RemoveCardOnFilePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""The selected date range for specific report"""
type ReportsDateFilterSelection {
  """The selected date range for appointments"""
  appointments: String

  """The selected date range for authorizations"""
  authorization: String

  """The selected date range for bank transfers"""
  bank_transfers: String

  """The selected date range for client activities"""
  client_activity: String

  """The selected date range for client blood sugar metrics"""
  client_blood_sugar_metrics: String

  """The selected date range for client credits"""
  client_credits: String

  """The selected date range for clients list"""
  client_list: String

  """The selected date range for client metrics"""
  client_metrics: String

  """The selected date range for client statuses"""
  client_status: String

  """The selected date range for cms 1500s"""
  cms_1500s: String

  """The unique identifier of the selection"""
  id: ID!

  """The selected date range for payments"""
  payments: String

  """The selected date range for superbills"""
  superbills: String
}

"""A request, from a provider to a client, to fill out a form"""
type RequestedFormCompletion {
  """The form to fill out"""
  custom_module_form: CustomModuleForm

  """The ID of the form to fill out"""
  custom_module_form_id: String

  """The relevant date to show"""
  date_to_show: String

  """The filled form that completes the request"""
  form_answer_group: FormAnswerGroup

  """The id of the filled form that completes the request"""
  form_answer_group_id: String

  """The unique identifier of the form"""
  id: ID!

  """type of form requested"""
  item_type: String!

  """The recipient (client)"""
  recipient: User

  """The ID of the recipient (client)"""
  recipient_id: String

  """Recurring Form related to the request"""
  recurring_form: RecurringForm

  """The sender (provider)"""
  sender: User

  """The ID of the sender (provider)"""
  sender_id: String

  """The status of the request"""
  status: String
}

"""The status of the requested form"""
type RequestedFormStatusType {
  """Used to return something after request if the job has been triggered"""
  status: String
}

"""A Requested Payer for the Invoice"""
type RequestedPayer {
  """The address of the requested payer"""
  address: String

  """The email of the requested payer"""
  email: String

  """The unique identifier of the requested payer"""
  id: ID!

  """The name of the requested payer"""
  name: String
}

"""Payload for a requested payer"""
input RequestedPayerInput {
  """The address of the requested payer"""
  address: String

  """The email of the requested payer"""
  email: String

  """The ID of the requested payer"""
  id: ID

  """The graphql_name of the requested payer"""
  name: String
}

"""A request, from a provider to a client, to make a payment"""
type RequestedPayment {
  """The appointment associated with this requested payment"""
  appointment: Appointment

  """The ID of the appointment associated with this requested payment"""
  appointment_id: String

  """The id of the filled form that completes the request"""
  billing_item_id: String

  """The payments that completes the request"""
  billing_items(
    """Only return successful billing items"""
    only_successful: Boolean = true
  ): [BillingItem!]!

  """The ID of the CMS1500 to pay for"""
  cms1500_id: String

  """The CMS1500 service date"""
  cms1500_service_date: String

  """The currency of the requested payment (invoice)"""
  currency: String

  """Pagination cursor"""
  cursor: Cursor!

  """The relevant date to show"""
  date_to_show: String

  """Balance to pay"""
  debt: Int @deprecated(reason: "use debt_decimal instead")

  """The debt, including decimals"""
  debt_decimal: Float

  """The details of the invoice (based off of associated item)"""
  details: String

  """The datetime that the share email was last sent, nil if never"""
  email_sent_at: String

  """The unique identifier of the payment"""
  id: ID!

  """The generated invoice ID"""
  invoice_id: String

  """The type of invoice"""
  invoice_type: String

  """True if requested payment was manually paid"""
  is_manually_paid: Boolean

  """True if the invoice is still in preview mode"""
  is_preview: Boolean!

  """Extra details on the invoice"""
  notes: String

  """The offering to purchase"""
  offering: Offering

  """The ID of the offering to buy"""
  offering_id: String

  """The price of the offering at the time of invoice creation"""
  offering_price_at_invoice_creation: String

  """
  The requested payer. This will return null if the requested payer exists as a client in Healthie
  """
  other_requested_payer: RequestedPayer

  """The datetime that the invoice was paid"""
  paid_at: String

  """Percent from total price which has been paid (if status == Partial)"""
  paid_percent: Int

  """price of payment requested"""
  price: String

  """The recipient (client)"""
  recipient: User

  """The ID of the recipient (client)"""
  recipient_id: String

  """
  Individual responsible for payment. If user_id, the user exists in Healthie, otherwise the individual doesn't have a Healthie account.
  """
  requested_payer: RequestedPayer

  """The ID of the requested payer"""
  requested_payer_id: String

  """The template used to create this requested payment"""
  requested_payment_template: RequestedPaymentTemplate

  """The sender (provider)"""
  sender: User

  """The ID of the sender (provider)"""
  sender_id: String

  """The service date"""
  service_date: String

  """The services provided"""
  services_provided: String

  """The status of the request"""
  status: String

  """User Package Selection connected to this requested payment"""
  user_package_selection: UserPackageSelection
}

"""RequestedPayment sorting enum"""
enum RequestedPaymentOrderKeys {
  """Sort by client last name and first name ascending"""
  CLIENT_NAME_ASC

  """Sort by client last name and first name descending"""
  CLIENT_NAME_DESC

  """Sort by provider last name and first name ascending"""
  PROVIDER_NAME_ASC

  """Sort by provider last name and first name descending"""
  PROVIDER_NAME_DESC
  PRICE_ASC
  PRICE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  STATUS_ASC
  STATUS_DESC
  TYPE_ASC
  TYPE_DESC
  INVOICE_ID_ASC
  INVOICE_ID_DESC
}

"""Requested payment template"""
type RequestedPaymentTemplate {
  """Whether the template is active or not"""
  active_template: Boolean!

  """The unique identifier of the template"""
  id: ID!

  """The name of the template"""
  name: String

  """The requested payment of the template"""
  requested_payment: RequestedPayment
}

"""Payload for a requested payment template"""
input RequestedPaymentTemplateInput {
  """Whether or not the requested payment template is active"""
  active_template: Boolean

  """The ID of the requested payment template"""
  id: ID

  """The graphql_name of the requested payment template"""
  name: String
}

"""A room at a location"""
type Room {
  """Unique ID for this room"""
  id: ID!

  """When true, there can only be one appointment at a time in the room"""
  limit_to_one: Boolean!

  """Name of the room"""
  name: String
}

"""Room appointment type connection"""
type RoomApptTypeConnection {
  """The appointment type ID associated with this connection"""
  appointment_type_id: ID!

  """The unique identifier of the connection"""
  id: ID!

  """Room ID of the room associated with this appointment type connection"""
  room_id: ID!

  """Name of the room associated with this appointment type connection"""
  room_name: String
}

"""Payload for a Room"""
input RoomInput {
  """If true, the room will be deleted"""
  _destroy: Boolean

  """The ID of the room"""
  id: ID

  """If true, only one user can be in the room at a time"""
  limit_to_one: Boolean

  """The graphql_name of the room"""
  name: String
}

"""Configuration for the SDK"""
type SDKConfig {
  """Stripe's publishable key"""
  stripe_publishable_key: String!
}

"""A set of filter options saved for quick loading in the calendar"""
type SavedFilter {
  """JSON-formatted options to use for setting filter"""
  filter_data: JSON!

  """Unique ID for this filter"""
  id: ID!

  """Name of the filter"""
  name: String!

  """The organization_id that has access to the filter"""
  organization_id: String

  """The user that created the filter"""
  user_id: String!

  """The unique UUID/string of the filter, used for sharing"""
  uuid: String!
}

"""
Billing items that are scheduled and will have a user package selection associated with them
"""
type ScheduledUserPackageSelection {
  """The unique identifier of the room"""
  id: ID!

  """Related offering"""
  offering: Offering

  """Related recurring_payment"""
  recurring_payment: RecurringPayment

  """Related user"""
  user: User
}

"""Autogenerated input type of SendSpeakToTrainerNotification"""
input SendSpeakToTrainerNotificationInput {
  email: String
  user_id: ID
}

"""Autogenerated return type of SendSpeakToTrainerNotification."""
type SendSpeakToTrainerNotificationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of SendWelcomeEmail"""
input SendWelcomeEmailInput {
  user_id: ID!
}

"""Autogenerated return type of SendWelcomeEmail."""
type SendWelcomeEmailPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""A Received Direct Message"""
type SentDirectMessage {
  """The number of attachments for the received direct message"""
  attachments_count: Int

  """The received date of the direct message"""
  created_at: String

  """When true, the message has an attached CDA"""
  has_cda: Boolean

  """The unique identifier of the fax"""
  id: ID!

  """The body of the direct message"""
  message_body: String

  """The outbound recipient"""
  outbound_recipient: String

  """ID of the related patient"""
  patient_id: String

  """The status"""
  status: String

  """The subject of the direct message"""
  subject: String
}

"""SentDirectMessage sorting enum"""
enum SentDirectMessageOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Options of what patient XML formats to include in the message"""
enum SentDirectMessageXml {
  cda
  referral_note
}

"""A Sent Fax"""
type SentFax {
  """The creation date of the fax"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """Where the fax was sent"""
  destination_number: String

  """The unique identifier of the fax"""
  id: ID!

  """The ids of the chart notes sent with the fax"""
  parsed_form_answer_group_ids: [ID!]

  """The patient that the fax is in regards to"""
  patient: User

  """
  False if no document ids or form answer group ids (fax existed before the addition of document ids column)
  """
  resendable: Boolean

  """The sender of the fax"""
  sender: User

  """The status of the fax"""
  status: String

  """The display string of the fax status"""
  status_display_string: String

  """The updated date of the sent fax"""
  updated_at: String
}

"""SentFax sorting enum"""
enum SentFaxOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NUMBER_ASC
  NUMBER_DESC
  STATUS
  STATUS_ASC
  STATUS_DESC
  CLIENT_LAST_NAME_ASC
  CLIENT_LAST_NAME_DESC
  SENDER_LAST_NAME_ASC
  SENDER_LAST_NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""A Sent Notification"""
type SentNotificationRecord {
  """The enumerated values: [:sms, :push, :email]"""
  category: String!

  """The time when the record was created"""
  created_at: String!

  """The enumerated values: [:sent, :delivered, :bounced]"""
  delivery_status: String!

  """The unique identifier of the record"""
  id: ID!

  """
  Description of notification context. (Ex: 'Follow-up Session on Nov 16 at 1:00 PM EST with Joe Smith')
  """
  notification_description: String

  """
  Examples: 'appointment_reminder', 'folder_shared', 'reminder_to_work_on_a_goal'
  """
  notification_type: String

  """
  The type categorizing notification_type into subgroups. Accepted values: [appointments, billing, chat_messages, accounting, documents, forms, goals, journals, packages, programs]
  """
  representation_type: String

  """The ID of the user this notification was sent to"""
  user_id: ID
}

"""The record of a sent webhook"""
type SentWebhook {
  """The datetime that the webhook was sent"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """The type of webhook"""
  event_type: String

  """Whether the webhook is enabled or not"""
  http_response_status: String

  """The unique identifier of the webhook"""
  id: ID!

  """The id of the resource the sent webhook related to"""
  resource_id: ID

  """The type of resource the sent webhook related to"""
  resource_id_type: String

  """The URL that the webhook was sent to"""
  url: String

  """The configured webhook thst was sent"""
  webhook_id: ID
}

"""SentWebhook sorting enum"""
enum SentWebhookOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_TYPE_ASC
  EVENT_TYPE_DESC
  URL_ASC
  URL_DESC
}

"""A serving size object"""
type ServingSize {
  """The number of servings"""
  amount: Float

  """The calories of serving size"""
  calories: Float

  """Whether or not this serving size was imported from the USDA database"""
  fdc_import: Boolean!

  """The food id of the food this serving size belongs to"""
  food_id: String

  """The id of the food portion this serving size belongs to"""
  food_portion_id: ID

  """The unique identifier of the serving size"""
  id: ID!

  """
  The macro nutrients of this serving size (Calories, Carbohydrate, Protein, Fat)
  """
  macro_nutrients: [FoodNutrient!]

  """
  percentage of 100g. For example if modifier is 2.5 then this serving size is 250g
  """
  modifier: Float

  """The nutrients of this serving size"""
  nutrients(
    """If true, only returns nutrients if food is created by user ()"""
    food_search: Boolean
  ): [FoodNutrient!]

  """The type of serving (i.e grams, scoop, spoonful)"""
  unit: String
}

"""The serving size of a food"""
input ServingSizeInput {
  """The amount of the serving size"""
  amount: String

  """The id of the serving size"""
  id: ID

  """The unit of the serving size"""
  unit: String
}

"""A Shapa Connection"""
type ShapaConnection {
  """The unique identifier of the connection"""
  id: ID!

  """The last time Shapa was synced"""
  last_sync_date: String
}

"""Autogenerated input type of Sign"""
input SignInput {
  id: ID!
}

"""Autogenerated return type of Sign."""
type SignPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  form_answer_group: FormAnswerGroup
  form_answer_group_signing: FormAnswerGroupSigning

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""The type of offered signed stream names"""
enum SignedStreamName {
  """For new/updated notes in a conversation"""
  NOTES

  """For a user's conversation membership updates"""
  CONVERSATION_MEMBERSHIPS
}

"""A smart phrase object"""
type SmartPhrase {
  """The time when the smart phrase was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """The unique identifier of the smatr phrase"""
  id: ID!

  """The name of the smart phrase"""
  name: String

  """The content of the smart phrase"""
  phrase: String

  """The time when the smart phrase was last updated"""
  updated_at: ISO8601DateTime

  """The smart phrase owner"""
  user: User
}

"""Smart Phrase Order enum"""
enum SmartPhraseOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Smoking Status object"""
type SmokingStatus {
  """The unique identifier of the status"""
  id: ID!

  """The smoking status code"""
  smoking_status_code: String

  """The end date of the status"""
  status_end_datetime: String

  """The start date of the status"""
  status_start_datetime: String

  """The id of the user the status belongs to"""
  user_id: ID
}

"""Snomed terms"""
type SnomedTerm {
  """id for snomed term"""
  concept_id: String

  """snomed term name"""
  term: String
}

"""The properties of the specialty"""
input SpecialtiesInput {
  """The graphql_name of the specialty"""
  specialty: String

  """The category of the specialty"""
  specialty_category: String
}

"""Specialty"""
type Specialty {
  """The unique identifier of the specialty"""
  id: ID!

  """The name of the specialty"""
  specialty: String!

  """The name of the specialty category"""
  specialty_category: String!
}

"""Information on an SsoConnection"""
type SsoConnection {
  """Whether or not to allow Just-In-Time provisioning"""
  allow_jit_provisioning: Boolean

  """The type of user this SSO is for (either patient or staff)"""
  for_user_type: String

  """The unique identifier of the SSO connection"""
  id: ID!

  """The label to display on the sign in button"""
  label: String

  """The URL to take the user to to sign in via SSO"""
  sign_in_url: String

  """The URL to take the user to to sign out via SSO"""
  sign_out_url: String
}

"""A state license object"""
type StateLicense {
  """The full name of the state"""
  full_state_name: String

  """The unique identifier of the state license"""
  id: ID!

  """The abbreviation of the state"""
  state: String
}

"""Payload for a state license"""
input StateLicensesInput {
  """If true, the state license will be destroyed"""
  _destroy: Boolean

  """The ID of the state license"""
  id: ID

  """The code of the state"""
  state: String
}

"""A Stripe bank account"""
type StripeBankAccountType {
  """The name of the account holder"""
  account_holder_name: String

  """The type of the account holder (Individual or Company)"""
  account_holder_type: String

  """The last 4 digits of the bank account number"""
  accounts_number_last_4: String

  """The city of the business address"""
  city: String

  """The country of the business address"""
  country: String

  """The currency the bank account is in"""
  currency: String

  """The date of birth of the company's business representative"""
  dob: String

  """The ID of the bank account object (generated by Stripe)"""
  id: String

  """If the holder has verified government issued id"""
  id_image_provided: Boolean

  """The first line of the business address"""
  line1: String

  """The second line of the business address"""
  line2: String

  """The last 4 digits of the routing number"""
  routing_number_last_4: String

  """If the holder has a verified social security number"""
  ssn_last_4_provided: Boolean

  """The state of the business address"""
  state: String

  """If the holder has a verified business tax ID"""
  tax_id_provided: Boolean

  """The zip code of the business address"""
  zip: String
}

"""A Stripe company address object"""
type StripeCompanyAddressType {
  """The city or town of the address."""
  city: String

  """The two-letter country code of the address."""
  country: String

  """The first line of the address."""
  line1: String

  """The second line of the address."""
  line2: String

  """The postal code of the address."""
  postal_code: String

  """The state or province of the address."""
  state: String
}

"""A Stripe company"""
type StripeCompanyType {
  """The company address"""
  address: StripeCompanyAddressType

  """Whether the company directors have been provided"""
  directors_provided: Boolean

  """Whether the company executives have been provided"""
  executives_provided: Boolean

  """The legal name of the company"""
  name: String

  """Whether the company owners have been provided"""
  owners_provided: Boolean

  """The company phone number"""
  phone: String

  """Whether the company tax ID has been provided"""
  tax_id_provided: Boolean

  """The verification status of the company"""
  verification: String
}

"""A Stripe country"""
type StripeCountry {
  """The accepted currencies for this country"""
  accepted_currencies: [String]

  """The country code"""
  country_code: String

  """The currency of the country"""
  currency: String

  """A custom field 1"""
  field1: String

  """A custom field 2"""
  field2: String

  """The name of the country"""
  name: String
}

"""Details of the client's credit card"""
type StripeCustomerDetail {
  """
  The name of the bank the bank account is with (nil for 'Card' source types)
  """
  bank_type: String

  """The brand of the card"""
  card_type: String

  """
  The type of card indicated by the user. Defaults to personal, Options are 'hsa', 'fsa', and 'personal'
  """
  card_type_label: String

  """Stripe card country"""
  country: String

  """Pagination cursor"""
  cursor: Cursor!

  """The expiration date of the card"""
  expiration: String

  """Whether the card is expiring next month"""
  expiring_next_month: Boolean

  """The unique identifier of the customer detail object"""
  id: ID!

  """The last 4 digits of the credit card"""
  last_four: String

  """The status of the payment method"""
  source_status: String

  """The type of payment method (either 'Card' or 'Bank Account')"""
  source_type: String

  """The ID of the client (in Stripe)"""
  stripe_id: String

  """The client associated with stripe account(in Healthie)"""
  user: User

  """The ID of the client (in Healthie)"""
  user_id: String

  """Stripe card address zip"""
  zip: String
}

"""StripeCustomerDetails sorting enum"""
enum StripeCustomerDetailOrderKeys {
  EXPIRATION_DATE_DESC
  EXPIRATION_DATE_ASC
  PATIENT_FIRST_NAME_ASC
  PATIENT_FIRST_NAME_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
}

"""An invoice from stripe as object"""
type StripeInvoice {
  """The list of add-ons applied to the invoice."""
  add_ons: [StripePlan!]

  """
  The amount of the invoice, as a positive or negative integer in the smallest currency unit (e.g., 100 cents to charge $1.00 or -100 to credit $1.00). The value is multiplied by the quantity to get the full amount. If the total is zero, this field will be absent.
  """
  applied_balance: StripePlan

  """The base amount of the invoice, not including any discounts, in cents."""
  base_plan: StripePlan

  """The list of credits applied to the invoice."""
  credits: [StripePlan!]

  """The discount applied to the invoice."""
  discount: Discount

  """The unique identifier of the invoice"""
  id: String!

  """The end of the period the invoice covers."""
  period_end: String

  """The start of the period the invoice covers."""
  period_start: String

  """The total amount of the invoice, including all discounts and add-ons."""
  total: String
}

"""A discount from stripe as object"""
type StripePlan {
  """The amount in cents to be charged on the interval specified"""
  amount: String

  """The annual cost of the plan"""
  annual_cost: String

  """The description of the plan"""
  description: String

  """The unique identifier of the plan"""
  id: String!

  """The interval when the plan is charged"""
  interval: String
}

"""Payload for a sub-organization"""
input SubOrganizationInfoInput {
  """Whether to copy the appointment settings from the parent organization"""
  copy_appointment_settings: Boolean = true

  """Whether to copy the onboarding flows from the parent organization"""
  copy_onboarding_flows: Boolean = false

  """Whether to copy the packages from the parent organization"""
  copy_packages: Boolean = false

  """Whether to copy the programs from the parent organization"""
  copy_programs: Boolean = false

  """The ID of the suborganization"""
  id: ID

  """Whether to inherit appointment types from the parent organization"""
  inherit_appointment_types: Boolean = true

  """Whether to inherit custom module forms from the parent organization"""
  inherit_custom_module_forms: Boolean = true

  """Whether to inherit the stripe account from the parent organization"""
  inherit_stripe_account: Boolean = true
}

"""Payload for a sub-entry"""
input SubentryInput {
  """The category of the sub-entry"""
  category: String

  """The description of the sub-entry"""
  description: String

  """The ID of the sub-entry"""
  id: ID

  """The statistic of the sub-entry"""
  metric_stat: String

  """The type of the sub-entry"""
  type: String
}

"""Payload for a sub-goal"""
input SubgoalInput {
  """Whether or not this sub-goal should be deleted"""
  _destroy: Boolean

  """The ID of the user who created it"""
  created_user_id: String

  """The description of the sub-goal"""
  description: String

  """The date the sub-goal should end - format should be: yyyy-mm-dd"""
  due_date: String

  """The ID of the sub-goal. If no id is given, a sub-goal will be created"""
  id: ID

  """The graphql_name of the sub-goal"""
  name: String

  """The ID of the parent goal"""
  parent_id: String

  """
  The frequency of this goal. Possible values are: 'Daily','Weekly', 'Once'
  """
  repeat: String

  """The ID of the sub-goal's template used to create this sub-goal"""
  source_template_id: String

  """
  The sub-goal title hyperlink. Opens when the sub-goal graphql_name is clicked on.
  """
  title_link: String

  """
  The ID of the user who created this sub-goal. If no user_id is given, the current user will be used
  """
  user_id: String
}

"""Subscriptions for events tracking"""
type Subscription {
  """Track changes in appointments where user is participated"""
  appointmentUserDevicesSubscription(
    """The ID of the appointment to track"""
    id: ID
  ): Appointment

  """Track changes in conversations"""
  conversationChangedSubscription(
    """The ID of the conversation to track"""
    id: ID
  ): Conversation

  """Track new members of conversations"""
  conversationMembershipAddedSubscription(
    """The notes_type state of conversations, for getting last_task"""
    notesType: String
  ): ConversationMembership

  """Track new updates to members of conversations"""
  conversationMembershipUpdatedSubscription(
    """The notes_type state of conversations, for getting last_task"""
    notesType: String
  ): ConversationMembership

  """Track modifications of form answer groups"""
  formAnswerGroupModifiedSubscription(
    """The ID of trackable FormAnswerGroup"""
    id: ID
  ): FormAnswerGroup

  """Track clients added to group appointment"""
  groupAppointmentClientsAddedSubscription: Appointment

  """Track added notes"""
  noteAddedSubscription(
    """The ID of the conversation to track"""
    conversationId: String
  ): Note

  """Track user updates"""
  userUpdatedSubscription: UserNotificationsCount

  """Track video chats"""
  videoChatsSubscription: VideoChatsSubscriptionPayload
}

"""a subscription object"""
type SubscriptionInstance {
  """
  When a customer cancels, or is set to cancel, this will be a datetime of when access will cease
  """
  access_will_stop_at: String

  """Amount difference if switching to annual/monthly"""
  amount_saved_if_plan_switched: Int

  """Amount savings from monthly to annual"""
  amount_savings_on_base_plan: String

  """Total cost of subscription for the year"""
  annual_total: String

  """Expiration of credit card on Stripe"""
  card_expiration: String

  """Returns true if card is expired"""
  card_expired: Boolean

  """Type of credit card on Stripe (Mastercard, Visa, Amex, etc.)"""
  card_type: String

  """Number of clients under the user that owns the subscription"""
  client_count: Int

  """Cost per month of annual plan"""
  cost_of_annual_base_plan: String

  """Shows how many days are left in the users trial"""
  days_left_in_trial: Int

  """Discounts currently active on Stripe account"""
  discounts: [Discount!]

  """Array of discounts applied in Stripe (most possible is 2)"""
  discounts_if_switched: [Discount!]

  """
  Returns true if there is already a scheduled subscription change on this account
  """
  has_scheduled_change: Boolean

  """The unique identifier of the subscription"""
  id: ID!

  """The interval of the subscription"""
  interval: String

  """Example of next invoice if switching plan"""
  invoice_if_switched: StripeInvoice

  """Returns true if the user is trialing"""
  is_trialing: Boolean

  """Last four digits of credit card on Stripe"""
  last_four: String

  """Last attempted invoice in Stripe"""
  last_invoice: StripeInvoice

  """When the user is scheduled to be locked out due to non-payment"""
  locked_out_at: String

  """Total cost of subscription for the month"""
  month_total: String

  """Cost per month of annual plan"""
  monthly_cost_of_annual_base_plan: String

  """Cost per month for base plan"""
  monthly_cost_of_base_plan: String

  """The number of providers that the subscription covers"""
  paid_for_providers: String

  """The number of support staff that the subscription covers"""
  paid_for_support: String

  """Percent difference if switching to annual/monthly"""
  percent_change_if_plan_switched: Int

  """Percent savings from monthly to annual"""
  percent_savings_on_base_plan: Int

  """
  Array of line items applied to Stripe subscription other than base plan (i.e fax line, extra providers, office ally etc.)
  """
  plan_add_ons: [StripePlan!]

  """The ID of the plan in Healthie"""
  plan_id: String

  """Name of the plan in Stripe"""
  plan_name: String

  """Returns true if the user is set to cancel"""
  set_to_cancel: Boolean

  """Remaining balance on stripe customer"""
  stripe_balance: String

  """The ID of the customer in Stripe"""
  stripe_id: String

  """Stripe Subscription plan name"""
  stripe_plan: String

  """The ID of the subscription in Stripe"""
  stripe_subscription_id: String

  """Upcoming invoice in Stripe"""
  upcoming_invoice: StripeInvoice

  """Owner of this subscription"""
  user: User

  """The ID of the user who owns the subscription"""
  user_id: String
}

"""Base class for types"""
type Success {
  human_id: String
  success_string: String
}

"""SuperBill"""
type SuperBill {
  """address"""
  address: String

  """amount of super bill"""
  amount_paid: String

  """amount due after amount paid is subtracted from total fee"""
  balance_due: String

  """Returns cpt codes names list comma separated"""
  cpt_code_names: String

  """CPT codes in use for this super bill"""
  cpt_codes_super_bills: [CptCodesSuperBill!]

  """date super bill was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """date superbill was deleted"""
  deleted_at: String

  """id of dietitian"""
  dietitian_id: ID

  """ICD codes in use for this super bill"""
  icd_codes_super_bills: [IcdCodesSuperBill!]

  """The unique identifier of the bill"""
  id: ID!

  """license number"""
  license_num: String

  """location"""
  location: Location

  """location id"""
  location_id: ID

  """npi number"""
  npi: String

  """patient of this superbill"""
  patient: User

  """dob of patient"""
  patient_dob: String

  """id of patient"""
  patient_id: ID

  """location"""
  patient_location: Location

  """patient location id"""
  patient_location_id: ID

  """name of patient"""
  patient_name: String

  """phone number of patient"""
  patient_phone: String

  """place of service"""
  place_of_service: PlaceOfService

  """place of service id"""
  place_of_service_id: ID

  """city"""
  prov_city: String

  """email"""
  prov_email: String

  """address line one"""
  prov_line1: String

  """address line one"""
  prov_line2: String

  """phone"""
  prov_phone: String

  """state"""
  prov_state: String

  """zip"""
  prov_zip: String

  """provider"""
  provider: User

  """name of provider"""
  provider_name: String

  """receipt line items of this super bill"""
  receipt_line_items: [ReceiptLineItem!]

  """name of referrer"""
  referrer_name: String

  """npi of referrer"""
  referrer_npi: String

  """Date of service (as a date)"""
  service_date: String

  """status"""
  status: String

  """tax id"""
  tax_id: String

  """total fee for superbill"""
  total_fee: String

  """date super bill was updated"""
  updated_at: String!
}

"""SuperBill sorting enum"""
enum SuperBillOrderKeys {
  NAME_ASC
  NAME_DESC
  SERVICE_DATE_ASC
  SERVICE_DATE_DESC
  AMOUNT_PAID_ASC
  AMOUNT_PAID_DESC
  AMOUNT_BILLED_ASC
  AMOUNT_BILLED_DESC
  STATUS
  CREATED_AT_ASC
  CREATED_AT_DESC
}

"""A Symptom Option"""
type SymptomOption {
  """
  Custom Symptoms use numeric IDs. Standard symptoms just use the symptom name
  """
  id: ID!

  """The symptom name"""
  name: String!

  """The symptom value"""
  value: Int!
}

"""A custom tag that can be applied on a user"""
type Tag {
  """The number of active users who have the tag"""
  active_users_count: Int

  """The name of the user who created the tag"""
  added_by: String

  """The number of archived users who have the tag"""
  archived_users_count: Int

  """The time when the tag was created"""
  created_at: String!

  """The unique identifier of the tag"""
  id: ID!

  """A human-readable name of the tag"""
  name: String!

  """The number of org members who have the tag"""
  org_members_count: Int

  """The array of tagged users"""
  tagged_users(
    """The pagination offset (if pagination required)"""
    offset: Int

    """Require pagination of tagged users"""
    should_paginate: Boolean = false
  ): [User!]

  """The last time the tag was updated"""
  updated_at: String!

  """The user who created the tag"""
  user: User
}

"""Tag sorting enum"""
enum TagOrderKeys {
  NAME_ASC
  NAME_DESC

  """Sort by amount of patients applied to this Tag descending"""
  ACTIVE_USERS_DESC

  """Sort by amount of patients applied to this Tag ascending"""
  ACTIVE_USERS_ASC

  """Sort by the first name of the user who added the Tag descending"""
  ADDED_BY_DESC

  """Sort by the first name of the user who added the Tag ascending"""
  ADDED_BY_ASC

  """Sort by amount of organization members applied to this Tag ascending"""
  ORG_MEMBERS_ASC

  """Sort by amount of organization members applied to this Tag descending"""
  ORG_MEMBERS_DESC
}

"""
Tasks for providers to create, complete, and optionally assign to client profiles
"""
type Task {
  """The client tagged to this task"""
  client: User

  """The indentifier of the client tagged on this task"""
  client_id: ID

  """If true, user has marked task complete"""
  complete: Boolean

  """Date and time this task was completed"""
  completed_at: String

  """User ID of the user who completed this task"""
  completed_by_id: ID

  """Details describing this task"""
  content: String

  """Date and time this task was created"""
  created_at: String!

  """ID of an auto generator"""
  created_by_generator_id: String

  """User id of user who created this task"""
  created_by_id: ID

  """The user who created this task"""
  creator: User

  """Pagination cursor"""
  cursor: Cursor!

  """Date and time this task was is due to be complete"""
  due_date: String

  """If true, hide completed task from top nav bar"""
  hidden: Boolean!

  """The unique identifier of the task"""
  id: ID!

  """Get associated chat message with a task"""
  note: Note

  """Get relative path to view the note"""
  note_path: String

  """Order in which tasks are displayed (ascending)"""
  position: Int

  """
  Level of urgency for this task(0 = standard priority, 1 = high priority)
  """
  priority: Int!

  """ID of additional relation"""
  ref_source: String

  """Reminder object for a given goal"""
  reminder: Reminder

  """If truem, user has viewed this task in top navbar """
  seen: Boolean!

  """Indicates to smart task"""
  smart: Boolean!

  """Get category of smart task"""
  smart_category: String

  """The last date and time that the task was updated"""
  updated_at: ISO8601DateTime

  """The user assigned to complete this task"""
  user: User

  """User ID of the user assigned to this task"""
  user_id: ID
}

"""Task sorting enum"""
enum TaskOrderKeys {
  TASK_ASC
  TASK_DESC
  CREATOR_ASC
  CREATOR_DESC
  ASSIGNEE_ASC
  ASSIGNEE_DESC
  CREATED_ASC
  CREATED_DESC
  PRIORITY_ASC
  PRIORITY_DESC
  DUE_DATE_ASC
  DUE_DATE_DESC

  """Order by client first name and last name descending"""
  CLIENT_NAME_DESC

  """Order by client first name and last name ascending"""
  CLIENT_NAME_ASC
  COMPLETED_AT_ASC
  COMPLETED_AT_DESC
  COMPLETED_AT_DESC_INCOMPLETE_FIRST
  UPDATED_AT_ASC
  UPDATED_AT_DESC
}

"""Payload for a task reminder"""
input TaskReminderInput {
  """Id of the reminder. If no id is given, a reminder will be created"""
  id: ID

  """The type of interval. Options are daily, weekly, once"""
  interval_type: String

  """
  For a daily interval send nothing. For a weekly interval, send a comma separated day of week in the lower case (e.g wednesday, friday). To remind once, send the date (e.g 2020-11-28)
  """
  interval_value: String

  """If not set to true, the reminder will not be sent"""
  is_enabled: Boolean

  """Time for reminder"""
  reminder_time: Int

  """Send in true to delete the reminder"""
  remove_reminder: Boolean
}

"""Autogenerated input type of Toggle2Fa"""
input Toggle2FaInput {
  enable: String!
  id: ID!
}

"""Autogenerated return type of Toggle2Fa."""
type Toggle2FaPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of ToggleAdvancedSettings"""
input ToggleAdvancedSettingsInput {
  enable: String!
  role: String!
  user_id: ID!
}

"""Autogenerated return type of ToggleAdvancedSettings."""
type ToggleAdvancedSettingsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of ToggleAvailability"""
input ToggleAvailabilityInput {
  enable: String!
  id: ID!
  setting: String!
}

"""Autogenerated return type of ToggleAvailability."""
type ToggleAvailabilityPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of ToggleBaa"""
input ToggleBaaInput {
  enable: String!
  id: ID!
}

"""Autogenerated return type of ToggleBaa."""
type ToggleBaaPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of TogglePaywall"""
input TogglePaywallInput {
  enable: String!
  id: String!
}

"""Autogenerated return type of TogglePaywall."""
type TogglePaywallPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of ToggleReasonForAppt"""
input ToggleReasonForApptInput {
  """Appointment Type ID"""
  appointment_type_id: ID!

  """Boolean.to_String() to Enable/Disable"""
  enable: String!
}

"""Autogenerated return type of ToggleReasonForAppt."""
type ToggleReasonForApptPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""A transaction"""
type TransactionType {
  """The currency of the transaction"""
  currency: String

  """The amount for the transaction after fees"""
  displayed_amount: String

  """
  Charge ID associated to transaction. Can be matched with billing_item.stripe_charge_id
  """
  source_name: String
}

"""Transfer sorting enum"""
enum TransferOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  AMOUNT_DESC
  AMOUNT_ASC
  STATUS_DESC
  STATUS_ASC
  EXPECTED_TO_HAPPEN_ASC
  EXPECTED_TO_HAPPEN_DESC
  TRANSACTIONS_COUNT_ASC
  TRANSACTIONS_COUNT_DESC
}

"""A transfer"""
type TransferType {
  """The amount for the transfer"""
  amount: String

  """The currency of the transfer"""
  currency: String

  """The amount to display (formatted and with currency symbol)"""
  displayed_amount: String

  """The expected to happen date to display"""
  displayed_expected_to_happen: String

  """The initiation date to display"""
  displayed_initiated: String

  """The date that the transfer is expected to complete"""
  expected_to_happen: String

  """Total of all fees deducted from all transactions"""
  fees: String

  """Stripe ID for this transfer"""
  id: String!

  """The initiation time of the transfer"""
  initiated: String

  """The status for the transfer"""
  status: String

  """Number of transactions"""
  transactions_count: Int

  """The type of transfer"""
  type: String
}

"""Base class for scalars"""
scalar UUID

"""UniqueDeviceIdentifier object"""
type UniqueDeviceIdentifier {
  """The assigning authority for the device code"""
  assigning_authority: String

  """The device code"""
  device_code: String

  """The display name for the device code"""
  display_name: String

  """The unique identifier of the identifier"""
  id: ID!

  """The scoping entity for the device code"""
  scoping_entity: String

  """The UDI code for the device"""
  udi_code: String
}

"""Autogenerated input type of Unlock"""
input UnlockInput {
  id: ID!
  description: String!
}

"""Autogenerated return type of Unlock."""
type UnlockPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  form_answer_group: FormAnswerGroup

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of UpdateCalorieLevel"""
input UpdateCalorieLevelInput {
  device_token: String
  device_type: String
  email: String
  high_end_caloric_intake: String
  run_id: ID
  user_id: ID
}

"""Autogenerated return type of UpdateCalorieLevel."""
type UpdateCalorieLevelPayload {
  assessment: HealthAssessment

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of UpdateClaimSubmitter"""
input UpdateClaimSubmitterInput {
  """ChangeClaimSubmitter ID used to locate ClaimSubmitter"""
  change_health_submitter_id: ID!

  """ID of the User"""
  user_id: ID!

  """ID of the Organization"""
  organization_id: ID!

  """Healthie Biller ID"""
  biller_id: String!

  """Change Health Username"""
  change_username: String!

  """Submitter ID"""
  submitter_id: String!
}

"""Autogenerated return type of UpdateClaimSubmitter."""
type UpdateClaimSubmitterPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of UpdateCurrency"""
input UpdateCurrencyInput {
  user_id: ID!
  currency: String!
}

"""Autogenerated return type of UpdateCurrency."""
type UpdateCurrencyPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Updating CustomSidebarOverride Inputs"""
input UpdateCustomNavItemInputs {
  """Append current user ID to Custom Navigation Sidebar Item"""
  append_current_user_id: Boolean

  """
  Icon of the image that will display on the Custom Navigation Sidebar Item
  """
  icon: String

  """If Custom Navigation Sidebar Item displays for Providers"""
  is_provider_side: Boolean

  """Label of Custom Navigation Sidebar Item"""
  label: String

  """Location of Custom Navigation Sidebar Items"""
  nav_section: String

  """
  If the Custom Navigation Sidebar Item will open in an iframe within the Healthie UI
  """
  open_in_iframe: Boolean

  """Position number for setting a specific nav link order"""
  position: Int

  """If Custom Navigation Sidebar Item is restricted to a User Group"""
  restrict_to_user_group: Boolean

  """If Custom Navigation Sidebar Item is displayed"""
  show: Boolean

  """
  The link to the custom icon that will be displayed on the Custom Navigation Sidebar Item
  """
  svg_url: String

  """If Custom Navigation Sidebar Item should open in new tab"""
  target: String

  """The link that the Custom Navigation Sidebar Item will direct to"""
  url: String

  """User Group ID that sees the Custom Navigation Sidebar Item"""
  user_group_id: String
}

"""Autogenerated input type of UpdateHarborPartner"""
input UpdateHarborPartnerInput {
  """The ID of the Harbor Partner to update"""
  harbor_partner_id: ID!

  """The name of the Harbor Partner"""
  name: String

  """The URL of the Harbor Partner"""
  url: String

  """The description of the Harbor Partner"""
  description: String
}

"""Autogenerated return type of UpdateHarborPartner."""
type UpdateHarborPartnerPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of UpdateHiddenSettings"""
input UpdateHiddenSettingsInput {
  """User's AppointmentSetting ID"""
  appointment_setting_id: ID!

  """Appointment Setting Params"""
  appointment_setting_params: AppointmentSettingInputs!
}

"""Autogenerated return type of UpdateHiddenSettings."""
type UpdateHiddenSettingsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of Update"""
input UpdateInput {
  """Healthie organization ID"""
  organization_id: ID!

  """Zus Parameters"""
  zus_params: ZusInputs!
}

"""Autogenerated input type of UpdateMacronutrientSplit"""
input UpdateMacronutrientSplitInput {
  carbs_percentage: String
  device_token: String
  device_type: String
  email: String
  fat_percentage: String
  protein_percentage: String
  run_id: ID
  user_id: ID
}

"""Autogenerated return type of UpdateMacronutrientSplit."""
type UpdateMacronutrientSplitPayload {
  assessment: HealthAssessment

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated return type of Update."""
type UpdatePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of UpdateUiConfiguration"""
input UpdateUiConfigurationInput {
  role: OrganizationMembershipRole!
  ui_configuration: JSON!
}

"""Autogenerated return type of UpdateUiConfiguration."""
type UpdateUiConfigurationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  organization: Organization
}

"""Autogenerated input type of UpdateUserEmail"""
input UpdateUserEmailInput {
  current_email: String!
  new_email: String!
  user_id: ID!
}

"""Autogenerated return type of UpdateUserEmail."""
type UpdateUserEmailPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

scalar Upload

"""An user entry, returns basic user information"""
type User {
  """Access Token (for iCal)"""
  access_token: String

  """
  The status of whether the user is active or not (if false, patient is archived)
  """
  active: Boolean!

  """Active care plan for the user"""
  active_care_plan: CarePlan

  """Active group care plan for the user"""
  active_group_care_plan: CarePlan

  """All active patients associated with this user."""
  active_patients(
    """If provided, only returns patients with this course"""
    course_id: ID

    """Search keywords"""
    keywords: String

    """Page offset"""
    offset: Int = 0

    """Enables pagination if true"""
    should_paginate: Boolean = false
  ): [User!]!

  """A number of all active patients associated with this user."""
  active_patients_count(
    """If provided, only returns patients with this course"""
    course_id: ID
  ): Int

  """A collection of tags applied on the specific user"""
  active_tags: [Tag!]

  """
  Additional tabs to display within the provider's view of the client profile
  """
  additional_client_profile_items: [CustomSidebarOverride!]!

  """Additional links to display within gear menu in patient's header"""
  additional_header_dropdown_items: [CustomSidebarOverride!]!

  """additional phone number for user"""
  additional_phone_number: String

  """additional unique record identifier for user"""
  additional_record_identifier: String

  """Additional links to display on patient sidebar"""
  additional_sidebar_items: [CustomSidebarOverride!]!

  """Appointment prices associated with this user"""
  advance_appointment_prices: [AdvanceAppointmentPrice!]

  """The user's lead dyno affiliate info"""
  affiliate: Affiliate @deprecated(reason: "NO LONGER USED")

  """The age of the user (in years)"""
  age: String

  """All Verification fields left for the provider to fill out"""
  all_verification_fields: [String]

  """
  Allergies, Sensitivities, Intolerances, and Preferences reported by client
  """
  allergy_sensitivities(
    """Only returns allergies with this category"""
    category: String

    """Only return current allergies"""
    is_current: Boolean = false

    """
    When true, only unreconciled objects are returned. Otherwise, they are not included
    """
    unreconciled_from_ccda_ingest: Boolean = false
  ): [AllergySensitivity!]

  """Allow the user to send messages in community chat"""
  allow_community_chat(
    """Set to true if all sent in users are known to be patients"""
    all_patients: Boolean = false
  ): Boolean

  """Allow the user to send direct messages in chat"""
  allow_direct_chat(
    """Set to true if all sent in users are known to be patients"""
    all_patients: Boolean = false
  ): Boolean

  """
  All announcements associated with this user. For a dietitian it returns all announcements created including those created in organization if applicable. For a patient it returns announcements generated by his/her dietitian.
  """
  announcements(
    """If true, excludes announcements that patient has dismissed"""
    exclude_dismissed: Boolean
  ): [Announcement!]!

  """If the user has incomplete onboarding steps"""
  any_incomplete_onboarding_steps: Boolean

  """If the user has courses shared with them"""
  any_shared_courses: Boolean

  """If the user has docs shared with them"""
  any_shared_documents: Boolean

  """If the user has courses shared with them"""
  any_shared_incomplete_courses: Boolean

  """Whether the user has docs shared with them that they have not viewed"""
  any_unviewed_documents: Boolean

  """AppleHealth for the user"""
  apple_health: AppleHealth

  """Appointment Locations for the user"""
  appointment_locations: [AppointmentLocation!]

  """Appointment Settings for the user"""
  appointment_setting: AppointmentSetting

  """All Appointment Type Credits for this user"""
  appointment_type_credits(
    """Only returns credits for this appointment type"""
    appointment_type_id: ID
  ): [AppointmentTypeCredit!]!

  """All available appointment types for the provider."""
  appointment_types(
    """Filter types by these ids"""
    appointment_type_ids: String

    """Only return bookable types"""
    require_client_bookable: Boolean
  ): [AppointmentType!]!

  """Appointments for the user"""
  appointments: [Appointment!]

  """
  Datetime of archival. This field will only be populated with archived changes made after Aug 7, 2023
  """
  archived_at: String

  """
  If true, user has seen popup explaining how to assign providers and clients to tasks
  """
  assign_tasks_seen: Boolean

  """Tasks assigned by the user to other users"""
  assigned_tasks(
    """The maximum number of tasks to return"""
    limit: Int

    """If true, return hidden tasks"""
    show_hidden: Boolean = false
  ): [Task!]

  """When false, the user is opted out of the automatic charge feature."""
  auto_charge_enabled: Boolean!

  """All available contact types for the provider."""
  available_contact_types: String

  """The link to the avatar image (nil if no image has been uploaded)"""
  avatar_url: String

  """The status of the user's bank account"""
  bank_account_verified_status: String

  """
  If user still has verification steps for stripe, returns deadline timestamp
  """
  bank_verification_deadline: String

  """All Billing Items for this user"""
  billing_items: [BillingItem!]!

  """If a user has seen the message blast alert"""
  blast_seen: Boolean

  """Displays bmi percentile for growth charts"""
  bmi_percentile: String

  """Displays standard by which bmi percentile is calculated"""
  bmi_percentile_standard: String

  """The brand that the user made"""
  brand(
    """If true, return the brand with all fields"""
    is_for_editing: Boolean = false
  ): Brand

  """The URL of the brand's alternative logo"""
  brand_alt_logo_url: String

  """The URL of the brand logo"""
  brand_logo_url: String

  """The Brand Name Of the User"""
  brand_name: String

  """The name of the Brand"""
  branded_name: String

  """Broken synced calendar"""
  broken_synced_cal: ExternalCalendar

  """HTML String to display on top of the calendar"""
  calendar_text: String

  """Calendar timezone"""
  calendar_timezone: String

  """Call references made for a patient's insurances"""
  call_references: [CallReference!]

  """If true, has Zus credential"""
  can_access_zus: Boolean

  """Allow the user to add clients"""
  can_add_clients: Boolean

  """If the provider can add members"""
  can_add_members: Boolean

  """If true this user to archive clients"""
  can_archive_clients: Boolean

  """Allow this user to charge clients"""
  can_charge_clients: Boolean

  """Allow the user to Check Eligibility"""
  can_check_eligibility: Boolean

  """If true, the user can delete charting notes"""
  can_delete_charting_notes: Boolean

  """If true this user to delete faxes"""
  can_delete_faxes: Boolean

  """If true,  the user to edit Appointment Types"""
  can_edit_appointment_types: Boolean

  """If true, the user can edit brand"""
  can_edit_brand: Boolean

  """If true, the user can edit client credit"""
  can_edit_credit: Boolean

  """If true, the user can edit org documents"""
  can_edit_docs: Boolean

  """If the provider can edit forms"""
  can_edit_forms: Boolean

  """If the provider can edit members"""
  can_edit_members: Boolean

  """If true, the user to edit org calendar"""
  can_edit_org_calendar: Boolean

  """If true, the user can edit packages"""
  can_edit_packages: Boolean

  """If true, the user can add, edit and delete products"""
  can_edit_products: Boolean

  """If true, the user can add or remove clients within programs"""
  can_edit_program_clients: Boolean

  """If true, the user can edit programs"""
  can_edit_programs: Boolean

  """Allow the user to edit account settings"""
  can_edit_settings: Boolean

  """If the provider organization can have suborgs"""
  can_have_suborgs: Boolean

  """If the user can add suborgs"""
  can_insert_suborgs: Boolean

  """If true, the user can lock other providers charting notes"""
  can_lock_others_charting_notes: Boolean

  """If true, the user can lock their own charting notes"""
  can_lock_own_charting_notes: Boolean

  """
  If the provider can mark tasks that are assigned to other org members as completed
  """
  can_mark_assigned_tasks_to_other_org_members_as_completed: Boolean

  """If true, the user can merge clients"""
  can_merge_clients: Boolean

  """If true, can order new lab using labs widget"""
  can_order_labs: Boolean

  """Allow this user to schedule appointments (Linked accounts)"""
  can_schedule_appointments: Boolean

  """
  If true, user can see products tab in client profile and see fullscript box on homepage if not linked to fullscript
  """
  can_see_fullscript_tab: Boolean

  """Show insurance info for a client"""
  can_see_insurance_authorization: Boolean

  """When true, the user should see option to use erx dosespot"""
  can_see_option_to_use_erx_dosespot: Boolean

  """If true, can view transfer tab in billing page"""
  can_see_transfers: Boolean

  """If true, the user can sign other providers charting notes"""
  can_sign_others_charting_notes: Boolean

  """If true, the user can sign their own charting notes"""
  can_sign_own_charting_notes: Boolean

  """
  If `true`, the user can unlock charting notes. Always `true` for org owners and providers w/o an org
  """
  can_unlock_charting_notes: Boolean

  """If true, can access to labs widget"""
  can_view_labs: Boolean

  """
  If True, the user will be able to add addendums for an other org member locked form answer groups
  """
  can_write_org_addendums: Boolean

  """If true, the user cannot access org settings"""
  cannot_access_org_member_settings: Boolean

  """If True, the user will not be able to lock form answer groups"""
  cannot_lock_form_answer_groups: Boolean @deprecated(reason: "Use can_lock_own_charting_notes instead")

  """
  Fetch paginated stripe customer accounts with associated errors or soon to expire credit cards
  """
  card_issues_count: Int

  """A JSON object containing validation errors for the patient's CDA file"""
  cda_validation_errors_json: String

  """The Patient's CDA"""
  cda_xml(end_date: String, start_date: String): String

  """Hash for Chameleon"""
  chameleon_hash: String

  """
  When true, user will be able to check insurance eligibility via Change Healthcare
  """
  change_healthcare_insurance_eligibility_connected: Boolean

  """Clearinghouse/RCM destinations that the user can submit to"""
  claim_destination_options: [ClaimDestinationIntegration!]

  """
  Clearstep Connection for the user. If the Shapa integration is enabled, then the Clearstep integration should automatically appear as enabled
  """
  clearstep_connection: ShapaConnection

  """Info about how a user was acquired"""
  client_source: ClientSource

  """Completed Tasks of organzation if user has permission, or user if not"""
  completed_tasks(
    """The maximum number of tasks to return"""
    limit: Int

    """If true, return hidden tasks"""
    show_hidden: Boolean = false
  ): [Task!]

  """Whether the user has accepted the lab order waiver"""
  consented_to_labs: Boolean

  """course membership scoped by specific course"""
  course_membership_via_course: CourseMembership

  """All course memberships for this user"""
  course_memberships: [CourseMembership!]

  """All course memberships for this user"""
  course_membrships: [CourseMembership!]! @deprecated(reason: "This field has a typo. use User.course_memberships instead")

  """The date this user created an account"""
  created_at: String

  """The credit balance of the user"""
  credit_balance: String

  """
  The most recent generated summary. Null if no summary has been generated
  """
  current_summary: GeneratedSummary

  """Pagination cursor"""
  cursor: Cursor!

  """All custom custom emails associated with this user."""
  custom_custom_emails: [CustomEmail!]

  """Custom Metric of the user"""
  custom_metrics: [CustomMetric!]!

  """The default currency for the user"""
  default_currency: String

  """
  When set for a client, the provider's Dosespot iFrame will launch into this clinic. When null, the Dosespot iframe will launch into the provider's default clinic. This will error unless the provider is connected to that clinic in Dosespot. Only used for patients.
  """
  default_dosespot_clinic_id: ID

  """
  Default eligibility check service to use. Nil if none available or if user is a patient
  """
  default_eligibility_check_service: EligibilityCheckService

  """Default external videochat URL for scheduling with this user"""
  default_external_video_url: String

  """The id of the users default onboarding flow"""
  default_onboarding_flow: OnboardingFlow

  """The id of the users default onboarding flow"""
  default_onboarding_flow_id: String

  """Patient's default pharmacy. Only applicable to dosespot users"""
  default_pharmacy: Pharmacy

  """Default stripe payment card"""
  default_stripe_customer_detail_id: ID

  """Check that user has no video or audio devices (or both)"""
  devices_unavailability: Boolean

  """Dexcom Connection for the user"""
  dexcom_connection: DexcomConnection

  """diagnoses for the user"""
  diagnoses: [Diagnosis!]

  """Dietitian of this user"""
  dietitian: User

  """The Dietitian ID of the Client"""
  dietitian_id: String

  """Dismisses a small advertisement about the ability to sync calendars"""
  dimissed_calendar_prompt: Boolean

  """Dismisses a notice warn about charting note addendum"""
  dismissed_charting_note_addendum_warning: Boolean

  """If true, do not show fullscript box in provider homepage"""
  dismissed_fullscript: Boolean

  """
  Dismisses the warning while insurance eligibility checking should not be shown
  """
  dismissed_insurance_eligibility_warning: Boolean

  """
  Dismisses the warning while locking a charting note should not be shown
  """
  dismissed_lock_charting_note_warning: Boolean @deprecated(reason: "Not used")

  """If true, do not show fullscript box in provider homepage"""
  dismissed_products_tab: Boolean

  """The Brand that controls the look of the website for the user"""
  displayed_brand: Brand

  """date of birth of user"""
  dob: String

  """An ID used for document, course, and conversation sharing"""
  doc_share_id: String

  """Number of notifications from Dosespot (e-prescriptions)"""
  dosespot_notification_count: Int

  """
  Dosespot assigned ID for this patient. nil if the patient is not connected to Dosespot
  """
  dosespot_patient_id: String

  """When true, user has an eligibility checking service connected"""
  eligibility_checking_connected: Boolean

  """The email of this user"""
  email: String

  """The erx dosespot role"""
  erx_dosespot_role: String

  """Amount of money waiting to be paid out, as a float"""
  estimated_future_payouts: Float

  """
  Patient cards that have expired (requires can_see_billing for org level patients)
  """
  expired_client_cards_count: Int

  """
  Patient cards that will expire by next recurring payment (requires can_see_billing for org level patients)
  """
  expiring_client_cards_count: Int

  """Family history conditions for user"""
  family_history_conditions: [FamilyHistoryCondition!]

  """Fax line request data"""
  fax_line_request: FaxLineRequest

  """Fax number belonging to the user"""
  fax_number: String

  """Feature Toggle of the user"""
  feature_toggle: FeatureToggle

  """Date of the first client entry"""
  first_client_entry_date: String

  """The first (preferred) name of this user"""
  first_name: String

  """The first name and last initial of the user"""
  first_name_last_initial: String

  """Fitbit for the user"""
  fitbit: Fitbit

  """The number of food entries the user has"""
  food_entries_count: String

  """All filled out forms for this user"""
  form_answer_groups: [FormAnswerGroup!]

  """
  Formatted string of money waiting to be paid out, including currency symbol
  """
  formatted_estimated_future_payouts: String

  """The full legal name of this user"""
  full_legal_name: String

  "The full legal name of this user with preferred name in parentheses. e.g 'Jonathan (Jon) Jones'\n"
  full_legal_name_with_preferred: String

  """The full name of the user"""
  full_name: String

  """Fullscript for the user"""
  fullscript: fullscript

  """Practitioner id for the user's Fullscript account"""
  fullscript_practitioner_id: String

  """gender of user"""
  gender: String

  """Gender identity of user (typically nil unless gender field is 'Other')"""
  gender_identity: String

  """User gender identity code"""
  gender_identity_code: String

  """id of generated reports folder"""
  generated_reports_folder_id: String

  """The Number of goals the user has"""
  goals_count: String

  """The Google Calendar Account for this user"""
  google_calendar: ExternalCalendar

  """Google Fit for the user"""
  google_fit: GoogleFit

  """The name of the patients user group"""
  group_name: String

  """
  When true, the user can see client portal setting in notification contact form
  """
  has_access_to_client_portal_setting_in_notification_contact: Boolean

  """When true, the user can access CMS 1500 content in the CMS 1500 tab"""
  has_access_to_cms_1500s_content: Boolean

  """When true, the user can see insurance billing automation features"""
  has_access_to_insurance_billing_automation: Boolean

  """
  When true, the user can see the connect button to sign up on dosespot on the settings integrations section
  """
  has_access_to_sign_up_on_dosespot: Boolean

  """When true, the user can see the zus megazap component"""
  has_access_to_zus_megazap_component: Boolean @deprecated(reason: "Megazap is now enabled by default, so this is always true")

  """If true, the user's account can take ACH payments"""
  has_ach: Boolean

  """If true, user has at least one entry type to track"""
  has_any_entry_types: Boolean

  """If the user's organization has API access"""
  has_api_access: Boolean

  """If true, the user has access to download the mobile app"""
  has_available_mobile_app: Boolean

  """(Considered public) If true, the user has bookable appts"""
  has_bookable_appts: Boolean

  """(Considered public) If true, the user has bookable packages"""
  has_bookable_packages: Boolean

  """Whether the user has CCDA feature available"""
  has_ccda: Boolean

  """True if the user has change health connection"""
  has_change_health: Boolean

  """If true, the user has complted their intake forms"""
  has_completed_intake_forms: Boolean

  """If courses exist for an organization or provider"""
  has_courses: Boolean

  """If true, the user has created a password"""
  has_created_password: Boolean

  """Allow the user to change the color of their calendar"""
  has_custom_color_schemes: Boolean

  """Check if user has any custom food item"""
  has_custom_food: Boolean

  """Check if user has any created meals"""
  has_custom_meals: Boolean

  """When true, the user can set scheduling priority levels for providers"""
  has_custom_scheduling_prioritization: Boolean

  """
  When true, the user can have custom text for SMS reminders for specific appointment types
  """
  has_custom_text_reminders: Boolean

  """
  If the user is marked as a developer and can modify webhooks and api keys.
  """
  has_developer_access: Boolean

  """If true, user is a provider with a dosespot account linked"""
  has_dosespot: Boolean

  """If True, the user has enterprise plan"""
  has_enterprise_plan: Boolean

  """If True, the user has expanded vbc charting fields"""
  has_expanded_vbc_charting_fields: Boolean

  """True if the user can add external videochat URLs"""
  has_external_videochat_urls: Boolean

  """If true, the user has connected their Fullscript account to Healthie"""
  has_fullscript: Boolean

  """If true, the user have available appointment slots in future"""
  has_future_availabilities(
    """
    When passed in, will always make has_future_availabilities return true if the offerings do not have bookable appointment types
    """
    offering_ids: [ID]
  ): Boolean

  """True if the user has access to goal title links"""
  has_goal_title_links: Boolean

  """Can the user receive inbound faxes?"""
  has_inbound_faxing: Boolean

  """Allow this user to access increased branding"""
  has_increased_branding: Boolean

  """
  Insurance Pay checks to see if there IS an insurance policy for the client
  """
  has_insurance_pay: Boolean

  """
  If true, patient's most recent demographic information(phone, dob, location, gender, name) could not be updated in dosespot because information is invalid
  """
  has_invalid_dosespot_info: Boolean

  """True if the user has any lab orders"""
  has_lab_orders: Boolean

  """Whether users has a lab order from lab_testing_api"""
  has_lab_testing_api_orders: Boolean

  """If true, user is a provider with a living plate linked"""
  has_living_plate: Boolean

  """
  When true, the user can have a custom email sent out when an appointment is marked as no-show
  """
  has_marked_as_no_show_email: Boolean

  """
  When true, the user can have a custom email sent out when an appointment is marked as rescheduled
  """
  has_marked_as_rescheduled_email: Boolean

  """True if user is able to see conversations of all organization members"""
  has_org_chat_access: Boolean

  """Check to see if the user has any other active org members"""
  has_other_org_members: Boolean

  """When true, the user has their own appointment setting"""
  has_own_appointment_setting: Boolean

  """When true, the user has their own custom emails"""
  has_own_custom_emails: Boolean

  """
  When true, the provider can control settings around allow rescheduling past appointments.
  """
  has_past_rescheduling_settings: Boolean

  """Whether or not this user has plus plan and above"""
  has_plus_or_above_plan: Boolean

  """True if the user has PP features"""
  has_practice_plus: Boolean

  """Has had payment in the last 30 days"""
  has_recent_payments: Boolean

  """True if the user has rupa connection"""
  has_rupa_health: Boolean

  """
  Self Pay checks to see if there is NOT an insurance policy for the client
  """
  has_self_pay: Boolean

  """
  If true, user has shared appointment settings with at least one memember in org
  """
  has_shared_appt_setting_with_org: Boolean

  """
  If the provider controls settings around enforcing state licensing restrictions for appointments
  """
  has_state_licensing_restrictions: Boolean

  """
  If true, suborganization owner has stripe account from the parent organization owner
  """
  has_stripe_id_from_parent_org: Boolean

  """Whether the user has a synced calendar"""
  has_synced_cal: Boolean

  """
  When true, the user can set appointment settings for specific appointment types
  """
  has_type_specific_appointment_settings: Boolean

  """Check to see if the user has any user groups"""
  has_user_groups: Boolean

  """Check to see if the user can switch to another user"""
  has_user_switch_options: Boolean

  """True if the user is allowed to use Zoom"""
  has_zoom_access: Boolean

  """
  Heads Up Health SSO link for user; always returns nil if Heads Up Health add-on is not enabled
  """
  heads_up_health_sso_link: String

  """height of user"""
  height: Float

  """Displays height percentile for growth charts"""
  height_percentile: String

  """Displays standard by which height percentile is calculated"""
  height_percentile_standard: String

  """String of height including units"""
  height_str: String

  """Hash for Help Scout"""
  helpscout_hash: String

  """ID of the human"""
  human_id: ID

  """The unique identifier of the user"""
  id: ID!

  """A collection of immunizations for this client"""
  immunizations: [Immunization!]

  """Implantable device users for the user"""
  implantable_devices_users: [ImplantableDeviceUser!]

  """True if User organization with multiple providers"""
  in_multiple_providers_org: Boolean

  """If a user is in an org"""
  in_org(
    """
    Some times we already know the user is an an org when we run the query, so we can just return true
    """
    known_to_be_in_org: Boolean = false
  ): Boolean

  """
  Incomplete Tasks of organization if user has permissions, or user if not
  """
  incomplete_tasks(
    """The maximum number of tasks to return"""
    limit: Int

    """If true, return hidden tasks"""
    show_hidden: Boolean = false
  ): [Task!]

  """Insurance Authorization for this user"""
  insurance_authorization: InsuranceAuthorizationType

  """Hash for intercom"""
  intercom_hash: String @deprecated(reason: "NO LONGER USED")

  """The invite code for the provider"""
  invite_code: String

  """Get filter string for user invoices"""
  invoices_filter: String

  """Check if the user is an active provider in an organization"""
  is_active_provider: Boolean

  """True if chat autoresponding is active"""
  is_chat_autoresponding: Boolean

  """boolean for if the user has ever logged in to Healthie as a provider"""
  is_first_time_provider: Boolean

  """If true, the user is in an organization"""
  is_org: Boolean

  """True if the user an organization admin"""
  is_org_admin: Boolean

  """If true, the user is in an organization with more than one user"""
  is_org_with_multiple_users: Boolean

  """the status of whether the user is the owner of their org or not"""
  is_owner: Boolean

  """the status of whether the user is a patient or not"""
  is_patient(
    """If true, we already know the value and can skip the query"""
    already_known_value: Boolean
  ): Boolean

  """Whether a user is a super admin"""
  is_super_admin: Boolean

  """Whether the user is trialing"""
  is_trialing: String

  """
  If the user aware they switched providers on specific login (can only do for current user)
  """
  knows_about_provider: Boolean

  """
  The client-side Kustomer API Key. (Only applies to specific custom whitelabels)
  """
  kustomer_api_key: String @deprecated(reason: "NO LONGER USED")

  """last date user was active through web or mobile"""
  last_active: String

  """last date the user was active"""
  last_activity: String

  """String of the last date the user was active"""
  last_activity_string: String

  """The User's last active appointment object"""
  last_app: Appointment

  """the last payment made by client"""
  last_billing_item: BillingItem

  """id of last conversation"""
  last_conversation_id: String

  """The last name of this user"""
  last_name: String

  """last date the user signed in"""
  last_sign_in_at: String

  """Last time allergy/sensitivity was updated"""
  last_updated_allergy(
    """Category of allergy/sensitivity"""
    category: String
  ): AllergySensitivity

  """The last weighing date of the user"""
  last_weighing_date: String

  """Link to most recent roadmap article on helpscout"""
  latest_article_link: String

  """Last product roadmap article number"""
  latest_article_number: Int

  """The legal first name of this user"""
  legal_name: String

  """license number of user"""
  license_num: String

  """Graphs to show in line graph form"""
  line_graph_metric_categories: [String]

  """A collections of users who are in relationship with this client"""
  linked_relatives: [NotificationContact!]

  """
  Link automatically signs user into Living plate dashboard without entering login credentials
  """
  living_plate_magic_link: String

  """The address of this user"""
  location: Location

  """All available locations for the client."""
  locations: [Location!]

  """Fetch count of medications for a given patient"""
  medications_count(
    """If true, only return active medications"""
    active: Boolean

    """The patient ID to fetch medications for"""
    patient_id: ID
  ): Int

  """
  A serialized JSON string of metadata. Maximum character limit of 128,000.
  """
  metadata: String

  """The number of metric entries the user has"""
  metric_entries_count: String

  """The number of mirror entries the user has"""
  mirror_entries_count: String

  """
  The amount of money the user owes. If the user is a provider this will return 0
  """
  money_owed: String

  """All tasks assigned to user"""
  my_tasks(
    """The maximum number of tasks to return"""
    limit: Int

    """If true, return hidden tasks"""
    show_hidden: Boolean = false

    """The order to return the tasks in"""
    order_by: TaskOrderKeys
  ): [Task!]

  """The full name of the user"""
  name: String

  """The User's next upcoming active appointment object"""
  next_app: Appointment

  """The User's next upcoming active appointment date (method)"""
  next_appointment: String @deprecated(reason: "use next_appt_date instead")

  """The Users next upcoming active appointment date (field)"""
  next_appt_date: String

  """The next onboarding item that the user has to fill"""
  next_onboarding_step: OnboardingItem

  """Recurring payment with next upcoming payment date"""
  next_recurring_payment: RecurringPayment

  """
  The next step preventing the user from moving forward. nil if user has completed all steps
  """
  next_required_step: String

  """If True, the user has non paid plan"""
  non_paid: Boolean

  """notification contacts for the user"""
  notification_contacts: [NotificationContact!]

  """Notification Settings for the user"""
  notification_setting: NotificationSetting

  """NPI of the user"""
  npi: String

  """Number of entries for the client"""
  num_entries: String

  """All offering_coupons associated with this provider."""
  offering_coupons: [OfferingCoupon!]

  """All available offerings for the provider."""
  offerings: [Offering!]!

  """User onc gender identity"""
  onc_gender_identity: String

  """The number open payments for the user"""
  open_payments_count: Int

  """Returns name of the org if exists, otherwise returns full name"""
  org_name_or_self_name: String

  """The user of the organization token"""
  organization: Organization

  """The contact email for this users organization"""
  organization_email: String

  """The organization membership of the user"""
  organization_membership: OrganizationMembership

  """Single Other ID number for the user"""
  other_id_number(
    """CMS1500 ID"""
    cms1500_id: ID

    """The ID to filter by"""
    id: ID

    """If true, only return the last CMS1500 ID"""
    is_last_cms1500: Boolean
  ): OtherIdNumber

  """All other id numbers for this user"""
  other_id_numbers: [OtherIdNumber!]

  """Other organization members."""
  other_org_members(
    """If true, only return active users"""
    only_active: Boolean
  ): [User!]!

  """Other organization members for sharing"""
  other_org_members_for_sharing: [User!]!

  """The IDs of other care team members for the client"""
  other_provider_ids: [ID]

  """The Outlook Calendar Account for this user"""
  outlook: ExternalCalendar

  """Status paid for fax"""
  paid_for_fax_status: String

  """boolean for If a user is a part of the journify organization"""
  part_of_journify: Boolean @deprecated(reason: "NO LONGER USED.")

  """When true, the user is a patient and has auto submit cms1500 enabled"""
  patient_has_cms1500_auto_submission_enabled: Boolean

  """All patients associated with this user."""
  patients(
    """The client IDs to filter by"""
    client_ids: [ID]

    """If true, only return active users"""
    only_active: Boolean
  ): [User!]!

  """The number of all active patients associated with this user."""
  patients_count(
    """
    When true, this will only return the number of patients whose primary provider is this user
    """
    only_primary: Boolean
  ): Int

  """the number of notifications belonging to a patient"""
  patients_notification_count(
    """The types of notifications to exclude"""
    excluded_types: String
  ): Int

  """All patients with a credit card on file associated with this user."""
  patients_with_cc: [User!]!

  """When true, the user will never be prompted to change their timezone"""
  permanently_disable_tz_prompt: Boolean

  """The phone number of the user"""
  phone_number: String

  """Place of service for this user"""
  place_of_service: PlaceOfService

  """All policies associated with this user"""
  policies: [Policy!]

  """All policies associated with this user"""
  policiesOrderAscending: [Policy!]

  """Preferred language based on language code"""
  preferred_language: String

  """User preferred language code"""
  preferred_language_code: String

  """Fetch count of prescriptions for a given patient pulled from Dosespot"""
  prescriptions_count(
    """The patient ID to fetch prescriptions for"""
    patient_id: ID

    """The status of the prescriptions to fetch"""
    status: String
  ): Int

  """Displays administrator account as other user account"""
  pretend_to_be: String

  """The primary ethnicity value based on ethnicity code"""
  primary_ethnicity: String

  """User primary ethnicity code"""
  primary_ethnicity_code: String

  """User primary race"""
  primary_race: String

  """User primary race code"""
  primary_race_code: String

  """Problems for the user"""
  problems(
    """
    When true, only unreconciled objects are returned. Otherwise, they are not included
    """
    unreconciled_from_ccda_ingest: Boolean = false
  ): [Problem]

  """Professions of the user"""
  professions: [Profession!]

  """Pronouns that the client identifies with"""
  pronouns: String

  """Provider appointment locations"""
  provider_appointment_locations: [ProviderAppointmentLocation!]

  """When true, the user is a provider and has auto submit cms1500 enabled"""
  provider_has_cms1500_auto_submission_enabled: Boolean

  """All providers associated with the client"""
  providers(
    """If true, only return providers that can be scheduled"""
    can_be_scheduled_with: Boolean
  ): [User!]

  """Meal Plans from Living Plate"""
  purchased_meal_plans: [MealPlan!]

  """qualifications of the user"""
  qualifications: String

  """quicks notes for a given user"""
  quick_notes: String

  """All reactivation custom emails associated with this user."""
  reactivation_emails: [CustomEmail!]

  """unique record identifier for user"""
  record_identifier: String

  """referrals for the user"""
  referrals: [Referral!]

  """
  An array of referring physicians associated to all referrals associated with a client
  """
  referring_physicians: [ReferringPhysician!]

  """NPI of the referring provider"""
  referring_provider_id: String

  """Name of the referring provider"""
  referring_provider_name: String

  """NPI of the referring provider"""
  referring_provider_npi: String

  """The date range filter selections for each report"""
  reports_date_filter_selection: ReportsDateFilterSelection

  """The number of forms that have been requested for the user"""
  requested_form_count: Int

  """
  If true, the user is a patient with required fields to create dosespot patient. If false, then either the provider doesn't have a linked dosespot account, or the patient has all required fields.
  """
  required_dosespot_fields: String

  """
  User subscription has been inactive and needs to be reactivated before allowing acccess
  """
  requires_reactivation: Boolean

  """
  User subscription has been inactive for 91+ days and should receive 7 day trial upon reactivation
  """
  requires_shortened_trial: Boolean

  """Patient ID on the rupa health"""
  rupa_patient_id: String

  """
  Providers with higher priority will be chosen first when availability is generated for self-scheduling. Defaults to 0
  """
  scheduling_priority: String

  """The secondary ethnicity value based on ethnicity code"""
  secondary_ethnicity: String

  """User secondary ethnicity code"""
  secondary_ethnicity_code: String

  """User secondary race"""
  secondary_race: String

  """User secondary race code"""
  secondary_race_code: String

  """True if user is up to date with all product roadmap articles"""
  seen_last_article: Boolean

  """
  A link that takes a user to set their password. This will return null if the user has set a password, or the authenticated user is not an admin
  """
  set_password_link: String

  """Sex of the user (Stated on ID card for insurance purposes)"""
  sex: String

  """Sexual orientation of the user"""
  sexual_orientation: String

  """
  The sexual orientation code of the user, corresponds to sexual orientation
  """
  sexual_orientation_code: String

  """The sexual orientation value if other"""
  sexual_orientation_other: String

  """Shapa Connection for the user"""
  shapa_connection: ShapaConnection

  """
  An ID that includes the shard the user is on. Matches ID unless user is on a custom shard
  """
  shard_aware_id: ID!

  """Show appointments tab on the sidebar"""
  show_appointments_tab: Boolean

  """Show "Billing Dropdown" on patient sidebar"""
  show_billing_dropdown_item: Boolean

  """Show billing tab on the sidebar"""
  show_billing_tab: Boolean

  """Show brand link in the header"""
  show_brand_tab: Boolean

  """Allow this user to view care plan (Linked accounts)"""
  show_care_plan_area: Boolean

  """Show chat tab on the sidebar"""
  show_chat_tab: Boolean

  """If to show the client credits in the UI"""
  show_client_appointment_credits: Boolean

  """Show Cms1500s tab on the sidebar"""
  show_cms1500s_tab: Boolean

  """Show the option to view the dashboard"""
  show_dashboard: Boolean

  """Show documents tab on the sidebar"""
  show_documents_tab: Boolean

  """Show education tab on the sidebar"""
  show_education_tab: Boolean

  """Display DOB next to the name of the client"""
  show_expanded_label: Boolean

  """Show forms tab on the sidebar"""
  show_forms_tab: Boolean

  """Allow this user to view goals (Linked accounts)"""
  show_goals_area: Boolean

  """If true, user will be able to view Grow settings page"""
  show_grow: Boolean

  """Show "Integrations" option in gear menu"""
  show_integrations_dropdown_item: Boolean

  """Allow this user to view journal entries (Linked accounts)"""
  show_journal_entries_area: Boolean

  """Show the organization tab on sidebar"""
  show_org_tab: Boolean

  """Show packages tab on the sidebar"""
  show_packages_tab: Boolean

  """Show "Update Payment Methods" option in gear menu"""
  show_payment_methods_dropdown_item: Boolean

  """Show payments tab on the sidebar"""
  show_payments_tab: Boolean

  """Show received fax tab on the sidebar"""
  show_received_fax_tab: Boolean

  """Show reports tab on the sidebar"""
  show_reports_tab: Boolean

  """Show scheduled tab on the chat page"""
  show_scheduled_chat_tab: Boolean

  """Show sent fax tab on the sidebar"""
  show_sent_fax_tab: Boolean

  """Show subscription link in the settings dropdown"""
  show_subscription_link: Boolean

  """If a user has seen the message blast alert"""
  show_superbill_org_select: Boolean

  """Show Superbill tab on the sidebar"""
  show_superbills_tab: Boolean

  """The total number of sidebar notifications to be displayed for the user"""
  sidebar_notification_count: Int

  """True if the user skipped adding a bank account"""
  skipped_bank_account: Boolean

  """The status of whether the user has a real email or not"""
  skipped_email: Boolean

  """Specialties of the user"""
  specialties: [Specialty!]

  """The SSN of the user"""
  ssn: String

  """Returns a user state licenses"""
  state_licenses: [StateLicense!]

  """Stripe Info of the client"""
  stripe_customer_detail: StripeCustomerDetail

  """Stripe credit cards of the client"""
  stripe_customer_details: [StripeCustomerDetail!]

  """
  The stripe id of the user (Used to look up bank account details for provider)
  """
  stripe_id: String

  """ID of account representative in Stripe. Nil if not staff/provider"""
  stripe_person_id: String

  """Returns the subscription for this user.  Nil if not staff/provider"""
  subscription: SubscriptionInstance

  """Address to use on super bills"""
  super_bill_address: String

  """Providers location to use on super bills"""
  super_bill_location: Location

  """Patient location to use on super bills"""
  super_bill_patient_location: Location

  """Provider's phone number to use on super bills"""
  super_bill_phone_number: String

  """Other users this account can switch to"""
  switchable_users: [User!]

  """Number of other users this account can switch to"""
  switchable_users_count: Int

  """Number of tasks"""
  tasks_count(
    """If true, only count tasks created by others"""
    only_created_by_others: Boolean = false

    """If true, count hidden tasks"""
    show_hidden: Boolean = false

    """Type of task to count"""
    type: String
  ): Int

  """tax id of user"""
  tax_id: String

  """The user's timezone"""
  timezone: String

  """Access token"""
  token: String

  """Total active packages credits"""
  total_active_packages_with_credits: Int

  """Total clients with appointment credits greater than 0"""
  total_clients_with_appt_type_credits: Int

  """Total count of the user lab orders objects"""
  total_lab_orders: Int

  """The authenticated human if an account is masked"""
  true_human_id: String

  """UI settings for the user (JSON). Internal Healthie Use Only"""
  ui: JSON

  """The number unconfirmed appointments for the user"""
  unconfirmed_appointment_count(
    """If true, include appointments unconfirmed by clients"""
    unconfirmed_by_clients: Boolean = false
  ): Int

  """The number of unseen conversations for the user"""
  unread_convo_count: Int

  """The number of unscheduled lab orders"""
  unscheduled_lab_orders_count: Int

  """The number of unseen appointment notfications"""
  unseen_appt_notification_count: Int

  """The number of unseen comment notfications"""
  unseen_comment_notification_count: Int

  """The number of unseen document notfications"""
  unseen_document_notification_count: Int

  """The number of unseen entry notfications"""
  unseen_entry_notification_count: Int

  """The number of unseen goal notfications"""
  unseen_goal_notification_count: Int

  """The number of unseen note notfications"""
  unseen_note_notification_count: Int

  """The number of unseen notifications for the user (mobile only)"""
  unseen_notification_count: Int @deprecated(reason: "use unseen_notifications_count_mobile")

  """The number of unseen notifications for the user (web only)"""
  unseen_notifications_count: Int

  """
  The number of unseen notifications for the user (this field only used by mobile) [identical to :unseen_notification_count]
  """
  unseen_notifications_count_mobile: Int

  """The number of unseen payment notfications"""
  unseen_payment_notification_count: Int

  """Number of unseen bounced notification records"""
  unseen_sent_notification_records_count: Int

  """All active upcoming appointments of the user"""
  upcoming_appointments: [Appointment!]

  """All active upcoming payments of the user"""
  upcoming_payments: [RecurringPayment!]

  """Date user was last updated"""
  updated_at: String

  """File name of uploaded avatar image"""
  uploaded_avatar_file_name: String

  """User Group of this user"""
  user_group: UserGroup

  """The ID of the patient's user group"""
  user_group_id: String

  """All user groups associated with this provider."""
  user_groups(
    """
    If true, will check the OrganizationMembership permission. default: false
    """
    check_group_level_actions: Boolean

    """If provided, only return user groups associated with this course"""
    course_id: ID

    """Search keywords"""
    keywords: String

    """Page offset"""
    offset: Int = 0

    """Enables pagination if true"""
    should_paginate: Boolean = false
  ): [UserGroup!]!

  """A number of user groups associated with this provider."""
  user_groups_count(
    """
    If true, will check the OrganizationMembership permission. default: false
    """
    check_group_level_actions: Boolean

    """If provided, only return user groups associated with this course"""
    course_id: ID
  ): Int!

  """User of who sent this member an invite"""
  user_who_invited_member: User

  """Verification fields left for the provider to fill out"""
  verification_fields: [String]

  """The last weight of the user"""
  weight: String

  """Displays weight percentile for growth charts"""
  weight_percentile: String

  """Displays standard by which weight percentile is calculated"""
  weight_percentile_standard: String

  """Withings Connection for the user"""
  withings_connection: WithingsConnection

  """The number of workout entries the user has"""
  workout_entries_count: String

  """If user has Zus, returns Zus proxy token"""
  zus_proxy_token: String
}

"""A user group, returns basic info about the user group"""
type UserGroup {
  """The date the user group was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """An ID used for document, course, and conversation sharing"""
  doc_share_id: String

  """The unique identifier of the user group"""
  id: ID!

  """The invite code"""
  invite_code: String

  """The name of the user group"""
  name: String

  """Onboarding Flow of this user group"""
  onboarding_flow: OnboardingFlow

  """The id of the associated onboarding flow"""
  onboarding_flow_id: String

  """Recurring Form Names for this user group"""
  recurring_forms: [RecurringForm!]

  """Recurring Forms Count for this user group"""
  recurring_forms_count: Int

  """Owner of this user group"""
  user: User

  """ids of user in group"""
  user_ids: [String]

  """All patients associated with this user group."""
  users(
    """
    The active status of the users in the group. Can be "active" or "inactive"
    """
    active_status: String

    """The id of the conversation to filter users by"""
    convo_id: ID

    """Sort the returned users by last name"""
    should_sort: Boolean = true
  ): [User!]!

  """The number of users in the group"""
  users_count: Int

  """Users in user group with course membership"""
  users_with_membership: [User!]
}

"""UserGroup sorting enum"""
enum UserGroupOrderKeys {
  INVITE_CODE_ASC
  INVITE_CODE_DESC
  CREATED_AT_ASC
  CREATED_AT_DESC
  NAME_ASC
  NAME_DESC
  USERS_COUNT_ASC
  USERS_COUNT_DESC
}

"""Counts of different types of notifications for a user"""
type UserNotificationsCount {
  """The number of unread conversation notifications"""
  conversation_notification_count: Int

  """The unique identifier of the counter"""
  id: ID

  """The number of unscheduled lab orders"""
  unscheduled_lab_orders_count: Int
}

"""User sorting enum"""
enum UserOrderKeys {
  EMAIL_ASC
  EMAIL_DESC
  FIRST_NAME_ASC
  FIRST_NAME_DESC
  LAST_NAME_DESC
  LAST_NAME_ASC
  CREATED_AT_DESC
  CREATED_AT_ASC
  UPDATED_AT_DESC
  UPDATED_AT_ASC
  GROUP_NAME_ASC
  GROUP_NAME_DESC
  PROVIDER_NAME_ASC
  PROVIDER_NAME_DESC
  NEXT_APPT_DATE_ASC
  NEXT_APPT_DATE_DESC
}

"""A user package selection"""
type UserPackageSelection {
  """The related billing item"""
  billing_item: BillingItem

  """The id of the related billing item"""
  billing_item_id: ID

  """The time when the user package selection was created"""
  created_at: String!

  """Pagination cursor"""
  cursor: Cursor!

  """The unique identifier of the user package selection"""
  id: ID!

  """
  The amount of the first payment for a package, including promo discounts
  """
  initial_price_with_offering_coupon: String

  """The related offering"""
  offering: Offering

  """The id of the related offering coupon"""
  offering_coupon_id: ID

  """The related recurring payment"""
  recurring_payment: RecurringPayment

  """The related requested payment"""
  requested_payment: RequestedPayment

  """The id of the related requested payment"""
  requested_payment_id: ID

  """The related user"""
  user: User
}

"""Payload for a user policy"""
input UserPolicyInput {
  """If true, the policy will be deleted"""
  _destroy: Boolean

  """The group number"""
  group_num: String

  """The date of birth of the policy holder"""
  holder_dob: String

  """The first name of the policy holder"""
  holder_first: String

  """The gender of the policy holder"""
  holder_gender: String

  """The last name of the policy holder"""
  holder_last: String

  """The location of the policy holder"""
  holder_location: ClientLocationInput

  """The middle initial of the policy holder"""
  holder_mi: String

  """The phone number of the policy holder"""
  holder_phone: String

  """The relationship of the policy holder to the client"""
  holder_relationship: String

  """The ID of the policy"""
  id: ID

  """The back of the insurance card"""
  insurance_card_back: Upload

  """The ID of the back of the insurance card"""
  insurance_card_back_id: String

  """The front of the insurance card"""
  insurance_card_front: Upload

  """The ID of the front of the insurance card"""
  insurance_card_front_id: String

  """The insurance plan"""
  insurance_plan: ClientInsurancePlanInput

  """The ID of the insurance plan"""
  insurance_plan_id: String

  """The name of the policy"""
  name: String

  """The policy number"""
  num: String

  """The location of the payer"""
  payer_location: ClientLocationInput

  """The policy-related phone number"""
  policy_phone_number: String

  """The priority type of the policy"""
  priority_type: String

  """Whether the policy holder has the same address as the client"""
  same_address_as_client: Boolean

  """The type of the policy"""
  type_string: String

  """The ID of the user"""
  user_id: String

  """
  Either ID of related intake flow item which this policy was created for. Usually it is Insurance Form. Email notification will be triggered if this field is passed
  """
  onboarding_item_id: ID
}

"""Information based on if an offering coupon is valid"""
type ValidateOfferingCoupon {
  """The reason why the promo code was not successfully applied"""
  fail_reason: String

  """Discount amount for first payment"""
  first_amount: String

  """
  The size of the discount with the promo code applied to the first payment (in case offering has a different first payment amount)
  """
  new_first_price: String

  """The new price with a promo code applied"""
  new_price: String

  """Indicates number of discount periods"""
  repeat_times: String

  """Indicates necessary of displaying CC form"""
  still_ask_for_cc: Boolean
}

"""Video chat info for subscriptions"""
type VideoChat {
  """The type of contact for the video chat"""
  contact_type: String

  """The date of the video chat"""
  date: ISO8601DateTime

  """The ID of the video chat"""
  id: ID!

  """Whether the video chat is a group chat"""
  is_group: Boolean

  """The name of the video chat provider"""
  provider_name: String

  """The user who created the video chat"""
  user: User
}

"""Autogenerated return type of VideoChatsSubscription."""
type VideoChatsSubscriptionPayload {
  """Updates of the current chat"""
  current_video_chat: VideoChat

  """Information about an ended chat"""
  ended_video_chat: VideoChat

  """Information about an upcoming chat"""
  upcoming_video_chat: VideoChat
}

"""A default video URL"""
type VideoUrlDefault {
  """
  The default URL to use for anyone with the connected appointment setting
  """
  default_url: String!

  """The unique identifier of the url"""
  id: ID!

  """The ID of the connected user"""
  user_id: ID!

  """The options for the connected video URL"""
  video_url_options: [VideoUrlOption!]
}

"""Payload for a new VideoUrlDefault"""
input VideoUrlDefaultInput {
  """The default url for the video url default"""
  default_url: String

  """The ID of the video url default"""
  id: ID

  """The ID of the user who owns the video url default"""
  user_id: ID

  """The video url options"""
  video_url_options: [VideoUrlOptionInput]
}

"""A video URL option"""
type VideoUrlOption {
  """The unique identifier of the option"""
  id: ID!

  """The default URL to use for the connected provider"""
  url: String

  """The ID of the connected provider"""
  url_by_item_id: String
}

"""Payload for a video url"""
input VideoUrlOptionInput {
  """The ID of the video url"""
  id: ID

  """The url of the video"""
  url: String

  """The url of the video by item id"""
  url_by_item_id: String
}

"""Info about a visitor to the site"""
type Visitor {
  """Message from visitor"""
  about_me: String

  """Email of the visitor"""
  email: String

  """First name of visitor"""
  first_name: String

  """The unique identifier of the visitor"""
  id: ID!

  """Last name of visitor"""
  last_name: String

  """Phone number of visitor"""
  phone_number: String
}

"""A configured webhook"""
type Webhook {
  """Pagination cursor"""
  cursor: Cursor!

  """The type of webhook"""
  event_type: String

  """The unique identifier of the webhook"""
  id: ID!

  """Whether the webhook is enabled or not"""
  is_enabled: Boolean!

  """Whether the webhook should retry on failure"""
  should_retry: Boolean!

  """The secret key used to sign the webhook"""
  signature_secret: String

  """The URL that the webhook will be sent to"""
  url: String

  """
  The date and time that the customer was wamed about the webhook failing
  """
  warned_at: ISO8601DateTime

  """The events that the webhook is subscribed to"""
  webhook_events: [WebhookEvent!]
}

"""The events that the webhook is subscribed to"""
type WebhookEvent {
  """The date and time that the webhook was created"""
  created_at: ISO8601DateTime!

  """The type of webhook"""
  event_type: String!

  """The date and time that the webhook first failed"""
  first_failed_at: ISO8601DateTime

  """The unique identifier of the webhook"""
  id: ID!

  """The date and time that the webhook last failed"""
  last_failed_at: ISO8601DateTime

  """The number of times the webhook has been retried"""
  retry_count: Int!

  """The date and time that the webhook was last updated"""
  updated_at: ISO8601DateTime!

  """The webhook that the event is associated with"""
  webhook: Webhook!
}

"""Payload for a webhook event"""
input WebhookEventInput {
  """The ID of the webhook event"""
  id: ID

  """The type of webhook event"""
  event_type: String!
}

"""Webhook sorting enum"""
enum WebhookOrderKeys {
  CREATED_AT_ASC
  CREATED_AT_DESC
  EVENT_TYPE_ASC
  EVENT_TYPE_DESC
  URL_ASC
  URL_DESC
}

"""Info for Whitelabeling"""
type WhitelabelSetting {
  """Amplitude API Key"""
  amplitude_api_key(
    """The branded URL of the backend (used in certain whitelabel setups)"""
    branded_url: String
  ): String

  """URL of whitelabeled Android app"""
  android_app_link: String

  """The branded URL of the backend (used in certain whitelabel setups)"""
  branded_backend_url: String

  """Branded email of whitelabel"""
  branded_email: String

  """Branded favicon url of whitelabel"""
  branded_favicon_url: String

  """Branded logo url of whitelabel"""
  branded_logo_url: String

  """Branded name of whitelabel"""
  branded_name: String

  """URL of whitelabel site"""
  branded_url: String

  """URL of whitelabeled Food icon"""
  food_icon_url: String

  """The unique identifier of the setting"""
  id: ID!

  """The number of minutes of allowable inactivity"""
  inactivity_minutes_timeout: String

  """URL of whitelabeled iOS app"""
  ios_app_link: String

  """URL of whitelabeled Metric icon"""
  metric_icon_url: String

  """Mixpanel Project Token"""
  mixpanel_project_token(
    """The branded URL of the backend (used in certain whitelabel setups)"""
    branded_url: String
  ): String

  """The namespace that the whitelabel setting is in."""
  namespace: String

  """The whitelabel's patient SSO connection"""
  patient_sso_connection: SsoConnection

  """The whitelabel's patient SSO connections"""
  patient_sso_connections: [SsoConnection!]

  """JSON hash of whitelabel replacement words"""
  replacement_words_json: String

  """URL of whitelabeled Selfie icon"""
  selfie_icon_url: String

  """The whitelabel's staff SSO connection"""
  staff_sso_connection: SsoConnection

  """The whitelabel's staff SSO connections"""
  staff_sso_connections: [SsoConnection!]

  """URL of whitelabeled Workout icon"""
  workout_icon_url: String
}

"""A Withings Connection"""
type WithingsConnection {
  """The unique identifier of the connections"""
  id: ID!

  """The last time Withings was synced"""
  last_sync_date: String
}

"""Zoom meeting retrieved from Zoom API"""
type ZoomAppointment {
  """
  The total number of minutes attended by the meeting's host and participants
  """
  duration: Int

  """End time of meeting"""
  end_time: String

  """The unique identifier of the zoom appointment"""
  id: ID

  """The number of meeting participants"""
  participants_count: Int

  """Start time of meeting"""
  start_time: String

  """The meeting's duration, in minutes"""
  total_minutes: Int
}

"""Zoom Feature Inputs"""
input ZoomFeatureInputs {
  """True/false string of cohost enable zoom feature"""
  cohost_enable: String

  """True/false string of breakout rooms enable feature"""
  breakout_rooms_enable: String

  """Cloud/local/none string of cloud recording enable feature"""
  cloud_recording_enable: String

  """True/false string of live captions enable feature"""
  live_captions_enable: String

  """Location string for automatic recording enable feature"""
  automatic_recording_enable: String
}

"""Zus Inputs"""
input ZusInputs {
  """Zus-provided Builder ID"""
  builder_id: String!

  """Zus-provided Display Name"""
  display_name: String!

  """Healthie domain for enterprise clients (https://nothealthie.com)"""
  system_url: String!

  """Zus-provided Organization ID"""
  zus_organization_id: String!
}

"""Autogenerated input type of addLivingPlate"""
input addLivingPlateInput {
  api_key: String!
  user_id: ID!
}

"""Autogenerated return type of addLivingPlate."""
type addLivingPlatePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of addPharmacy"""
input addPharmacyInput {
  """ID from pharmacy search results"""
  pharmacy_id: ID!

  """Healthie patient/client ID"""
  patient_id: ID!
  primary: Boolean = false
}

"""Autogenerated return type of addPharmacy."""
type addPharmacyPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  pharmacy: Pharmacy
}

"""Autogenerated input type of addZusMember"""
input addZusMemberInput {
  """Healthie organization ID"""
  organization_id: ID!

  """Healthie user ID"""
  user_id: ID!
}

"""Autogenerated return type of addZusMember."""
type addZusMemberPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of bulkApplyCarePlanTemplate"""
input bulkApplyCarePlanTemplateInput {
  force_activation: Boolean = false
  id: ID
  user_group_ids: [ID]
  user_ids: [ID]
}

"""Autogenerated return type of bulkApplyCarePlanTemplate."""
type bulkApplyCarePlanTemplatePayload {
  carePlans: [CarePlan]

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of bulkApply"""
input bulkApplyInput {
  ids: [ID]

  """The ID of the user to apply a tag on"""
  taggable_user_id: ID
}

"""Autogenerated return type of bulkApply."""
type bulkApplyPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  tags: [Tag]
}

"""Autogenerated input type of bulkCreateAvailability"""
input bulkCreateAvailabilityInput {
  appointment_location_id: String
  appointment_type_id: String
  availabilities: [AvailabilityInput]
  contact_type_id: String
  end_on: String
  user_id: String
}

"""Autogenerated return type of bulkCreateAvailability."""
type bulkCreateAvailabilityPayload {
  availabilities: [Availability]

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of bulkCreateEntries"""
input bulkCreateEntriesInput {
  entries: [BulkEntryInput]
}

"""Autogenerated return type of bulkCreateEntries."""
type bulkCreateEntriesPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  entries: [Entry]

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of bulkDeleteTasks"""
input bulkDeleteTasksInput {
  ids: [ID]
}

"""Autogenerated return type of bulkDeleteTasks."""
type bulkDeleteTasksPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  tasks: [Task]
}

"""Autogenerated input type of bulkUpdateCardIssues"""
input bulkUpdateCardIssuesInput {
  mark_all_as_seen: Boolean
}

"""Autogenerated return type of bulkUpdateCardIssues."""
type bulkUpdateCardIssuesPayload {
  card_issues: [StripeCustomerDetail]

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of bulkUpdateCarePlanUsers"""
input bulkUpdateCarePlanUsersInput {
  activate: Boolean = false
  ids: [ID] = []
  notify: Boolean = false
}

"""Autogenerated return type of bulkUpdateCarePlanUsers."""
type bulkUpdateCarePlanUsersPayload {
  carePlans: [CarePlan]

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of bulkUpdateClients"""
input bulkUpdateClientsInput {
  active_status: Boolean
  ids: [ID]
  other_provider_ids: String
  select_all_excluded_ids: [ID]
  select_all_status: String
  user_group_id: ID
}

"""Autogenerated return type of bulkUpdateClients."""
type bulkUpdateClientsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  users: [User]
}

"""Autogenerated input type of bulkUpdateNotificationRecords"""
input bulkUpdateNotificationRecordsInput {
  user_id: ID
  viewed_bounced_records: Boolean
}

"""Autogenerated return type of bulkUpdateNotificationRecords."""
type bulkUpdateNotificationRecordsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of bulkUpdateNotifications"""
input bulkUpdateNotificationsInput {
  """If this is left out, updateAllNotifications must be sent as true"""
  notification_ids: [String]
  seen: Boolean

  """When true, recent (last 500) notifications will be updated"""
  updateAllNotifications: Boolean
}

"""Autogenerated return type of bulkUpdateNotifications."""
type bulkUpdateNotificationsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  current_user: User

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  notifications: [Notification]
}

"""Autogenerated input type of bulkUpdateTasks"""
input bulkUpdateTasksInput {
  complete: Boolean
  seen: Boolean
  task_ids: [ID]
  update_all_tasks: Boolean
}

"""Autogenerated return type of bulkUpdateTasks."""
type bulkUpdateTasksPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  tasks: [Task]
}

"""Autogenerated input type of clearUnreconciledObjects"""
input clearUnreconciledObjectsInput {
  user_id: ID
}

"""Autogenerated return type of clearUnreconciledObjects."""
type clearUnreconciledObjectsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of completeCheckout"""
input completeCheckoutInput {
  appointment_id: String

  """
  An array of group appointment IDs. When passed in, the user will be registered for all at the same time.
  """
  appointment_ids: [ID]
  appointment_location_id: String
  appointment_type_id: String
  contact_type: String
  coupon_code: String
  date: String
  email: String
  first_name: String
  form_answer_group: CheckoutFormAnswerGroupInput
  gift: GiftInput
  intake_flow_uuid: String
  is_gift: Boolean
  is_joining_waitlist: Boolean
  last_name: String

  """Optional: The user's legal first name"""
  legal_name: String
  location: String
  offering_id: String

  """
  Currently just used for Klarna. The ID of the completed payment intent that should be used to completed the checkout.
  """
  payment_intent_id: ID
  phone_number: String
  price: String
  provider_id: String
  reason: String
  requested_payment_id: String
  stripe_idempotency_key: String
  timezone: String

  """Token for credit card, created by Stripe.JS"""
  token: String
}

"""Autogenerated return type of completeCheckout."""
type completeCheckoutPayload {
  appointment: Appointment

  """
  An array of all group appointments that were registered for. Used in conjunction with appointment_ids argument.
  """
  appointments: [Appointment]
  billingItem: BillingItem

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  formAnswerGroupSaved: Boolean

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  patientEmail: String

  """
  Returns true if client booking appointment is newly created and has never logged into their account or booked future appointments
  """
  reassignClientProvider: Boolean
  userPackageSelection: UserPackageSelection
  widgetCompletedSubheaderHtml: String
}

"""Autogenerated input type of completeCourseDocument"""
input completeCourseDocumentInput {
  """The ID of related course_item"""
  course_item_id: ID!

  """The ID of user"""
  user_id: ID!
}

"""Autogenerated return type of completeCourseDocument."""
type completeCourseDocumentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """New CompletedCourseItem"""
  completedCourseItem: CompletedCourseItem

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of copyCourse"""
input copyCourseInput {
  id: String
}

"""Autogenerated return type of copyCourse."""
type copyCoursePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  course: Course

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of copyCustomModuleForm"""
input copyCustomModuleFormInput {
  id: ID
  id_list: String
  user_id: String
}

"""Autogenerated return type of copyCustomModuleForm."""
type copyCustomModuleFormPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customModuleForm: CustomModuleForm

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of copyCustomModule"""
input copyCustomModuleInput {
  id: ID
}

"""Autogenerated return type of copyCustomModule."""
type copyCustomModulePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customModule: CustomModule

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of copyOffering"""
input copyOfferingInput {
  id: ID
}

"""Autogenerated return type of copyOffering."""
type copyOfferingPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  offering: Offering
}

"""Autogenerated input type of createAcceptedInsurancePlan"""
input createAcceptedInsurancePlanInput {
  insurance_plan_ids: [ID]
}

"""Autogenerated return type of createAcceptedInsurancePlan."""
type createAcceptedInsurancePlanPayload {
  accepted_insurance_plans: [AcceptedInsurancePlan]
  appointment_setting: AppointmentSetting

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createAddendum"""
input createAddendumInput {
  content: String
  form_answer_group_id: ID
}

"""Autogenerated return type of createAddendum."""
type createAddendumPayload {
  addendum: ChartingNoteAddendumType

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createAllergySensitivity"""
input createAllergySensitivityInput {
  category: String
  category_type: String
  custom_name: String
  custom_reaction: String
  id: ID
  name: String

  """The date of onset"""
  onset_date: String
  reaction: String

  """The type of reaction. Options are [allergy, adverse_reaction]"""
  reaction_type: String
  severity: String

  """Options are [active, inactive, resolved]. Defaults to active"""
  status: String
  user_id: String

  """The drug allergen id to associate with the allergy sensitivity"""
  drug_allergen_id: ID
}

"""Autogenerated return type of createAllergySensitivity."""
type createAllergySensitivityPayload {
  allergy_sensitivity: AllergySensitivity

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  duplicate_allergy: AllergySensitivity

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createAnnouncement"""
input createAnnouncementInput {
  active: Boolean
  announcement_image: AnnouncementImageUpload
  description: String
  name: String
  title: String
  user_group_ids: String
}

"""Autogenerated return type of createAnnouncement."""
type createAnnouncementPayload {
  announcement: Announcement

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createApiKey"""
input createApiKeyInput {
  """A used-defined name for the API key. Optional"""
  name: String

  """The ID of the user to create an API key for. Required"""
  user_id: ID
}

"""Autogenerated return type of createApiKey."""
type createApiKeyPayload {
  api_key: String
  api_key_object: ApiKey

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createAppleHealth"""
input createAppleHealthInput {
  is_enabled: Boolean
  last_sync_date: String
}

"""Autogenerated return type of createAppleHealth."""
type createAppleHealthPayload {
  apple_health: AppleHealth

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createAppointmentFormAnswerGroupConnection"""
input createAppointmentFormAnswerGroupConnectionInput {
  appointment_id: ID
  form_answer_group_id: ID
}

"""
Autogenerated return type of createAppointmentFormAnswerGroupConnection.
"""
type createAppointmentFormAnswerGroupConnectionPayload {
  appointment: Appointment

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  form_answer_group: FormAnswerGroup

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createAppointment"""
input createAppointmentInput {
  appointment_location_id: String
  appointment_type_id: String
  attendee_ids: String

  """The type of appointment (video, in person, phone call, etc.)"""
  contact_type: String

  """Cpt code associated with this appointment"""
  cpt_code_id: ID
  date: String

  """
  Timestamp in YYYY-MM-DD HH:MM:SS or ISO8601 format, supercedes date, time params.
  """
  datetime: String
  end_date: String
  end_time: String
  exclude_no_credits: Boolean

  """
  When passed in, this video chat URL will be used instead of built-in Video Chat or Zoom
  """
  external_videochat_url: String
  insurance_billing_enabled: Boolean
  is_blocker: Boolean
  is_zoom_chat: Boolean
  location: String
  max_attendees: String

  """a serialized JSON string of metadata"""
  metadata: JSON
  notes: String
  other_party_id: String

  """The price associated with this appointment"""
  price: String
  providers: String
  recurring_appointment: RecurringAppointmentInput
  room_id: String
  start_immediately: Boolean
  time: String

  """
  Timezone to use for date and time fields. Overrides the timezone of the current user
  """
  timezone: String

  """Units to use as a multiplier for appointment price"""
  units: String
  user_id: String
}

"""Autogenerated return type of createAppointment."""
type createAppointmentPayload {
  appointment: Appointment

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createAppointmentSetting"""
input createAppointmentSettingInput {
  allow_appointment_type_pricing: Boolean
  allow_clients_to_cancel_appt: Boolean
  allow_external_videochat_urls: Boolean
  always_send_confirm_notification: Boolean
  appointment_locations: [AppointmentLocationInput]
  appt_type_confirmed_email: Boolean
  appt_type_reminder_email: Boolean
  appt_type_website_booking_email: Boolean
  ask_clients_to_confirm: Boolean
  ask_to_confirm_via_text: Boolean
  auto_create_cms1500: Boolean
  auto_schedule_charges_for_late_cancellation_no_show: Boolean
  auto_submit_cms1500: Boolean
  auto_invoicing: Boolean
  booking_interval_restriction: Int
  buffer: String
  calendar_color_schemes: [CalendarColorSchemeInput]
  charge_for_occured_appts: Boolean
  client_should_call_provider: Boolean
  clients_have_billing: Boolean
  confirm_by_default: Boolean
  contact_type_overrides: [ContactTypeOverrideInput]
  default_appt_form_to_group: Boolean
  default_charting_template_id: String
  default_group_charting_template_id: ID
  default_to_zoom: Boolean
  default_video_service: String
  disable_requested_form_notifications: Boolean
  end_time: String
  hide_link: Boolean
  insurance_eligibility_integration: Boolean
  invoice_clients_without_payment_method: Boolean

  """The late cancellation fee in cents"""
  late_cancellation_fee: Int
  max_days_in_future: String

  """
  Prevents the patient from canceling too close the appointment time. In minutes
  """
  minimum_advance_cancel_time: Int

  """
  Prevents the patient from rescheduling too close the appointment time. In minutes
  """
  minimum_advance_reschedule_time: Int

  """
  Prevents the patient from scheduling too close to the desired appointment time. In minutes
  """
  minimum_advance_schedule_time: Int

  """The no show fee in cents"""
  no_show_fee: Int
  prevent_client_booking: Boolean
  prevent_no_credit_booking: Boolean
  reply_to_provider: Boolean
  restore_credit_on_cancel: Boolean
  same_day_appointments: Boolean
  send_appointment_cancellation_email: Boolean
  send_appointment_update_email: Boolean
  send_booking_notice: Boolean
  send_email_before_appointment: Boolean
  send_intake_forms_reminder: Boolean
  send_push_before_appointment: Boolean
  send_reminder_four_days_before: Boolean
  send_reminder_one_day_before: Boolean
  send_reminder_one_hour_before: Boolean
  send_reminder_three_days_before: Boolean
  send_reminder_two_days_before: Boolean
  send_reminder_two_hours_before: Boolean
  send_text_reminder_four_days_before: Boolean
  send_text_reminder_one_day_before: Boolean
  send_text_reminder_one_hour_before: Boolean
  send_text_reminder_three_days_before: Boolean
  send_text_reminder_two_days_before: Boolean
  send_text_reminder_two_hours_before: Boolean

  """
  NOTE: Your organization MUST have its own Twilio account configured to have this feature, and have AppointmentSetting.send_email_before_appointment enabled
  """
  send_text_reminder_five_minutes_before: Boolean
  set_default_videochat_url: Boolean
  show_care_plans: Boolean
  show_faxes: Boolean
  show_insurance_authorization: Boolean
  start_time: String

  """
  Allows times to be grouped by appointment type. NOTE: changing this value will clear all prior availability
  """
  times_by_appointment_type: Boolean

  """
  Allows times to be grouped by contact type. NOTE: changing this value will clear all prior availability
  """
  times_by_contact_type: Boolean

  """
  Allows times to be grouped by location. NOTE: changing this value will clear all prior availability
  """
  times_by_location: Boolean
  use_appointment_type_cpt_units_and_fees: Boolean
  use_client_credit_system: Boolean
  use_client_sources: Boolean
  use_zoom_waiting_room: Boolean
  user_id: String
  video_url_default: VideoUrlDefaultInput
}

"""Autogenerated return type of createAppointmentSetting."""
type createAppointmentSettingPayload {
  appointmentSetting: AppointmentSetting

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createAppointmentTypeCptCode"""
input createAppointmentTypeCptCodeInput {
  appointment_type_id: ID
  cpt_code_id: ID
  units: String
  fee_per_unit: Int
}

"""Autogenerated return type of createAppointmentTypeCptCode."""
type createAppointmentTypeCptCodePayload {
  appointment_type_cpt_code: AppointmentTypeCptCodeType

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createAppointmentType"""
input createAppointmentTypeInput {
  appointment_setting: AppointmentTypeAppointmentSettingInput
  appointment_type_cpt_code: AppointmentTypeCptCode
  bookable_by_groups: Boolean
  bookable_group_ids: String
  bookable_without_group: Boolean

  """
  When false, clients will not have the ability to self-book this appointment
  """
  clients_can_book: Boolean

  """
  When set, will be used as the appointment type name shown to clients in the client booking widget UI.
  """
  client_facing_display_name: String
  contact_type_overrides: [String]

  """
  When true, the client will not be asked to add a reason when booking an appointment of this type
  """
  dont_ask_for_reason: Boolean
  form_requests_before_appointment: [AppointmentTypeFormConnectionInput]
  form_requests_after_appointment: [AppointmentTypeFormConnectionInput]
  form_requests_after_appointment_booking: [AppointmentTypeFormConnectionInput]

  """Whether or not insurance billing is enabled for an appointment type"""
  insurance_billing_enabled: Boolean

  """
  When true, indicates that this appointment type is used for group appointments
  """
  is_group: Boolean
  is_waitlist_enabled: Boolean

  """The length of the appointment type in minutes"""
  length: Int

  """Metadata for an appointment type. Maximum character limit of 128,000."""
  metadata: String

  """The name of the appointment type"""
  name: String
  pricing: String

  """Available options are CUSTOM and CPT_CODE"""
  pricing_option: String
  provider_ids_for_appt_type_connections: String
  room_ids_for_appt_type_connections: String
  require_in_state_clients: Boolean
  require_specific_providers: Boolean
  specific_groups: Boolean
  user_group_id: String
}

"""Autogenerated return type of createAppointmentType."""
type createAppointmentTypePayload {
  appointmentType: AppointmentType

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createAutoTaskGenerator"""
input createAutoTaskGeneratorInput {
  category: String
  days_due_from_created_at: Int
  is_enabled: Boolean
  number_description: String
  number_to_check: String
  task_description: String
  user_id_for_task: String
}

"""Autogenerated return type of createAutoTaskGenerator."""
type createAutoTaskGeneratorPayload {
  auto_task_generator: AutoTaskGenerator

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createAutomatedInsuranceBillingSetting"""
input createAutomatedInsuranceBillingSettingInput {
  auto_create_cms1500s: Boolean
  auto_submit_cms1500s: Boolean
  use_cpt_codes_units_and_fees_with_appointment_types: Boolean
}

"""Autogenerated return type of createAutomatedInsuranceBillingSetting."""
type createAutomatedInsuranceBillingSettingPayload {
  automated_insurance_billing_setting: AutomatedInsuranceBillingSetting

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createAvailability"""
input createAvailabilityInput {
  appointment_location_id: String
  appointment_type_id: String
  contact_type_id: String
  day_of_week: Int
  end_on: String

  """Required time format: `HH MM``, e.g., `07 30`` or `19 00`"""
  end_time: String
  is_repeating: Boolean

  """Required date format: `month_name DD, YYYY``, e.g., `August 16, 2022`"""
  range_start: String

  """Required time format: `HH MM``, e.g., `07 30`` or `19 00`"""
  time: String
  timezone: String
  user_id: String
  end_datetime: String
  range_end: String
  start_datetime: String
}

"""Autogenerated return type of createAvailability."""
type createAvailabilityPayload {
  availability: Availability

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createBillingItem"""
input createBillingItemInput {
  amount_paid: String
  created_at: String
  note: String
  offering_coupon_id: ID
  offering_id: ID
  payment_due_date: String
  payment_medium: String
  recipient_id: ID
  requested_payer_id: ID
  requested_payment_id: ID
  sender_id: ID
  should_charge: Boolean

  """
  When passed in, the patient will be charged on the given payment source. Patient will be charged on their default source if left blank. Comes from the relevant StripeCustomerDetail object.
  """
  stripe_customer_detail_id: ID
  stripe_idempotency_key: String
  user_package_selection_id: ID
}

"""Autogenerated return type of createBillingItem."""
type createBillingItemPayload {
  billingItem: BillingItem

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  stripeError: String
}

"""Autogenerated input type of createBrand"""
input createBrandInput {
  about_description: String
  bg_color: String
  brand_email: String
  brand_name: String
  brand_phone: String
  contact_description: String
  custom_sign_in_path: String
  display_name: String
  email_background_color: String
  facebook: String
  font_color: String
  instagram: String
  logo: Upload
  selected_color: String
  slogan: String
  tab_accent_color: String
  titles: String
  twitter: String
  website: String
}

"""Autogenerated return type of createBrand."""
type createBrandPayload {
  brand: Brand

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createCampaign"""
input createCampaignInput {
  """Text displayed in button below email body"""
  button_text: String

  """URL in email button below email body"""
  button_url: String

  """Text displayed in email body"""
  email_body: String

  """
  Text displayed before client name (example: 'Hello <client_name>', 'Greetings <client_name>', ....)
  """
  email_greeting: String
  email_subject: String

  """Image shown above email body"""
  image: Upload
  include_archived_clients: Boolean
  is_draft: Boolean = true
  is_email: Boolean
  is_sms: Boolean
  name: String

  """
  comma-separated example: "user-12, group-23, tag-34"
  """
  recipient_ids: String

  """SMS text content"""
  sms_body: String
  user_id: ID
}

"""Autogenerated return type of createCampaign."""
type createCampaignPayload {
  campaign: Campaign

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createCarePlan"""
input createCarePlanInput {
  is_hidden: Boolean = true
  is_managing_templates: Boolean = false
  name: String
  patient_id: ID
}

"""Autogenerated return type of createCarePlan."""
type createCarePlanPayload {
  carePlan: CarePlan

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createChatSetting"""
input createChatSettingInput {
  auto_welcome_text: String
  content: String
  end_date: String
  is_active: Boolean
  is_recurring_active: Boolean
  no_end_date: Boolean
  receive_notifications: Boolean
  receive_notifications_recurring: Boolean
  recurring_content: String
  recurring_days_data: RecurringDaysInputObjectType
  recurring_turned_on: Boolean
  scheduled_turned_on: Boolean
  send_auto_welcome: Boolean
  start_date: String
  user_id: String
}

"""Autogenerated return type of createChatSetting."""
type createChatSettingPayload {
  chatSetting: ChatSetting

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createClient"""
input createClientInput {
  additional_record_identifier: String

  """Also known as the provider ID"""
  dietitian_id: String

  """format: YYYY-MM-DD"""
  dob: String

  """if true, welcome email is not sent"""
  dont_send_welcome: Boolean
  email: String
  first_name: String

  """Ex. Male"""
  gender: String
  last_name: String
  legal_name: String

  """
  A serialized JSON string of metadata. Maximum character limit of 10,000.
  """
  metadata: String
  other_provider_ids: [String]
  phone_number: String
  record_identifier: String

  """
  When true, the client will not be placed into a set password state (where links sent to the client will first take them to set a password)
  """
  skip_set_password_state: Boolean = false
  skipped_email: Boolean

  """Timezone of the client. IANA DB name format."""
  timezone: String
  user_group_id: String
}

"""Autogenerated return type of createClient."""
type createClientPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user: User
}

"""Autogenerated input type of createCms1500"""
input createCms1500Input {
  accept_assignment: Boolean
  amount_paid: String
  client_sig_on_file: Boolean
  cms1500_policies: [Cms1500PolicyInput]
  cpt_codes_cms1500s: [CptCodesCms1500Input]
  dietitian: DietitianInput
  dietitian_id: String
  form_answer_group_id: ID
  icd_codes_cms1500s: [IcdCodesCms1500Input]
  include_referrer_information: Boolean
  insured_sig_on_file: Boolean
  nineteen_reserved: String
  organization_info: OrganizationInfoInput
  organization_info_id: String
  orig_ref_number: String
  patient: PatientInput
  patient_account_num: String
  referral_info: ReferralInfoInput
  rendering_provider_other_id: String
  rendering_provider_other_id_number: OtherIdNumberInput
  resubmission_code: String
  service_location_id: String
  tend_reserved: String
  use_indiv_npi: Boolean
}

"""Autogenerated return type of createCms1500."""
type createCms1500Payload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  cms1500: Cms1500

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createCognitiveStatus"""
input createCognitiveStatusInput {
  cognitive_status: String
  start_date: String
  user_id: ID
}

"""Autogenerated return type of createCognitiveStatus."""
type createCognitiveStatusPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  cognitive_status: CognitiveStatus

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createComment"""
input createCommentInput {
  content: String
  entry_id: ID
  is_reaction: Boolean
  user_id: ID
}

"""Autogenerated return type of createComment."""
type createCommentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  comment: Comment

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createCompletedCourseItem"""
input createCompletedCourseItemInput {
  completed_item_id: String
  completed_item_type: String
  course_item_id: String
  id: String
  user_id: String
}

"""Autogenerated return type of createCompletedCourseItem."""
type createCompletedCourseItemPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  completedCourseItem: CompletedCourseItem

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  redirect_url: String
}

"""Autogenerated input type of createCompletedOnboardingItem"""
input createCompletedOnboardingItemInput {
  onboarding_item_id: ID
  skipped: Boolean
  user_id: ID
}

"""Autogenerated return type of createCompletedOnboardingItem."""
type createCompletedOnboardingItemPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  completed_onboarding_item: CompletedOnboardingItem

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createContact"""
input createContactInput {
  about_me: String
  email: String
  first_name: String
  first_url: String
  last_name: String
  phone_number: String
}

"""Autogenerated return type of createContact."""
type createContactPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  visitor: Visitor
}

"""Autogenerated input type of createConversation"""
input createConversationInput {
  appointment_id: String
  name: String

  """
  The ID of the owner of the conversation. Defaults to current_user when not sent in
  """
  owner_id: ID
  added_users: [AddedUsersInput]
  note: NoteInput

  """
  The value of the select all toggle. This overrides simple_added_users and allows you to easily add all of a category to the conversation. Requires simple_added_users to be sent in as well
  """
  select_all_status: String
  simple_added_users: String
}

"""Autogenerated return type of createConversation."""
type createConversationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  conversation: Conversation

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createCourseBenefit"""
input createCourseBenefitInput {
  benefit: String
  course_id: String
}

"""Autogenerated return type of createCourseBenefit."""
type createCourseBenefitPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  courseBenefit: CourseBenefit

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createCourse"""
input createCourseInput {
  course_type: String
  description: String
  external_preview_image_url: String
  formatted_benefits: String
  late_enroll: Boolean
  name: String
  preview_image: Upload
  preview_video_content: String
  start_date: String
}

"""Autogenerated input type of createCourseItem"""
input createCourseItemInput {
  completion_required_for_next_module: Boolean
  course_id: String
  item_id: String
  item_type: String
  name: String
  new_item_type_name: String
  scheduled_release: String
  user_id: String
  video_url: String
}

"""Autogenerated return type of createCourseItem."""
type createCourseItemPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  courseItem: CourseItem

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  redirect_url: String
}

"""Autogenerated return type of createCourse."""
type createCoursePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  course: Course

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createCustomEmail"""
input createCustomEmailInput {
  email_type: String
  greeting: String
  message_body: String
  reactivation_wait_days: String
  subject: String
}

"""Autogenerated return type of createCustomEmail."""
type createCustomEmailPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customEmail: CustomEmail

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createCustomFood"""
input createCustomFoodInput {
  name: String
  nutrients: NutrientsInput
  serving_size: ServingSizeInput
  user_id: String
}

"""Autogenerated return type of createCustomFood."""
type createCustomFoodPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customFood: Food

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createCustomModuleForm"""
input createCustomModuleFormInput {
  external_id: String
  external_id_type: String
  is_video: Boolean

  """Maximum character limit of 10,000."""
  metadata: String
  name: String
  on_completion_ifs_tag_id: String
  prefill: Boolean
  use_for_charting: Boolean
  use_for_program: Boolean
}

"""Autogenerated return type of createCustomModuleForm."""
type createCustomModuleFormPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customModuleForm: CustomModuleForm

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createCustomModule"""
input createCustomModuleInput {
  custom_module_form_id: String
  external_id: String
  external_id_type: String
  index: Int
  is_custom: Boolean
  label: String

  """
  A serialized JSON string of metadata. Maximum character limit of 128,000.
  """
  metadata: String
  mod_type: String
  options: String
  parent_custom_module_id: String
  required: Boolean
  sublabel: String
}

"""Autogenerated return type of createCustomModule."""
type createCustomModulePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customModule: CustomModule

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createCustomNavItem"""
input createCustomNavItemInput {
  """Brand ID"""
  brand_id: ID!

  """The Custom Sidebar Override inputs"""
  custom_nav_item_params: CustomNavItemInputs!
}

"""Autogenerated return type of createCustomNavItem."""
type createCustomNavItemPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success message"""
  success_string: String
}

"""Autogenerated input type of createDocument"""
input createDocumentInput {
  care_plan_id: ID
  clients_ids: String
  course_id: String

  """Requires additional permissions to edit"""
  created_at: String
  description: String
  display_name: String
  file: Upload
  file_string: String
  folder_id: String
  from_date: String
  from_program_create: Boolean

  """When true, a CCDA document is created for the specified rel_user"""
  generate_ccda_for_rel_user_id: Boolean

  """
  When true, a human-readable CCDA document is created for the specified rel_user
  """
  generate_human_readable_ccda_for_rel_user_id: Boolean
  include_in_charting: Boolean
  is_photo_id: Boolean

  """Metadata for an document type. Maximum character limit of 128,000."""
  metadata: String

  """
  Optional. This is passed in when a document is uploaded via a Form Upload question module. Should be the User ID. Otherwise, nil.
  """
  on_form_for_user_id: ID
  org_level: Boolean
  payout_id: ID
  provider_ids: [String] = []
  rcf_id: ID
  rel_user_id: String

  """
  If using the report_type parameter, value must be one of the following options: "Short Client List", "Long Client List", "Client Activity List", "Client Metrics", "Appointments", "Courses", "Program Forms", "Clients Credits", "Payments", "Transfers", "Transactions", "CMS1500s", "Superbills", "Referring Physicians", "Insurance Authorization", "Client Blood Sugar", "Requested Payments"
  """
  report_type: String

  """A comma-separated list of doc_share_ids"""
  share_users: String
  share_with_rel: Boolean
  to_date: String

  """Requires additional permissions to edit"""
  updated_at: String
}

"""Autogenerated return type of createDocument."""
type createDocumentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  currentUser: User
  document: Document

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createDosespotClinician"""
input createDosespotClinicianInput {
  """Required"""
  business_address: String

  """Required"""
  city: String

  """Required"""
  date_of_birth: String

  """
  Required when role is prescribing provider and prescribe_controlled_substances checked
  """
  dea_number: String

  """Required for prescribing provider"""
  eligible_prescribe_medications: Boolean

  """Required"""
  fax_number: String

  """Required"""
  full_name: String

  """Required for prescribing provider"""
  npi_number: String
  prescribe_controlled_substances: Boolean

  """Required. Dosespot user role (Prescribing Provider: 1, Proxy: 6)"""
  role: Int

  """Required"""
  state: String

  """Required"""
  work_phone_number: String

  """Required"""
  zip: String
}

"""Autogenerated return type of createDosespotClinician."""
type createDosespotClinicianPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  dosespot_user: DoseSpot

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createDosespot"""
input createDosespotInput {
  """The ID of the clinic"""
  clinic_id: String!

  """The key of the clinic"""
  clinic_key: String!

  """The ID of the Dosespot user"""
  dosespot_user_id: String!

  """The ID of the user"""
  user_id: ID!

  """This user is a clinic admin in dosespot"""
  is_clinic_admin: Boolean! = false
}

"""Autogenerated return type of createDosespot."""
type createDosespotPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of createDraft"""
input createDraftInput {
  content: String
  conversation_membership_id: String
}

"""Autogenerated return type of createDraft."""
type createDraftPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  draft: Draft

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createDsiComment"""
input createDsiCommentInput {
  content: String!
  intervention_type: InterventionType!
}

"""Autogenerated return type of createDsiComment."""
type createDsiCommentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  dsi_comment: DsiComment

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createEbook"""
input createEbookInput {
  email: String
  first_name: String
  first_url: String
}

"""Autogenerated return type of createEbook."""
type createEbookPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  visitor: Visitor
}

"""Autogenerated input type of createEntry"""
input createEntryInput {
  category: String
  created_at: String
  description: String
  ed_posthunger: String
  ed_prehunger: String
  emotions: String
  food_items: String
  image: Upload
  image_string: String
  meal_ids: String
  meal_name: String
  metric_stat: String
  other_symptom: String
  percieved_hungriness: String
  reflection: String
  symptoms: String

  """Options are apple_health, google_fit, or fitbit"""
  third_party_source: String

  """
  One of MetricEntry, FoodEntry, WorkoutEntry, MirrorEntry, SleepEntry, NoteEntry, WaterIntakeEntry, PoopEntry, SymptomEntry
  """
  type: String
  user_id: String
  subentries: [SubentryInput]
}

"""Autogenerated return type of createEntry."""
type createEntryPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  entry: Entry

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createExternalCalendar"""
input createExternalCalendarInput {
  access_token: String

  """Optional. The resource name (sync partner assigned ID) for the sync"""
  resource_name: String

  """
  When true, appointments will automatically be pushed to the external calendar
  """
  add_to_calendar: Boolean = true

  """The email of the Google or Outlook account that is being synced"""
  email: String

  """The date and time the token will expire. In ISO8601 format."""
  expiry_date: String

  """The type of External Calendar. Can either be Google or Outlook"""
  external_type: String

  """
  When true, appointments will automatically be pulled from the external calendar
  """
  pull_from_calendar: Boolean = true

  """
  (Only for Google). The calendars to pull in from. Defaults to the primary calendar
  """
  pulled_in_calendars: [String]

  """
  The refresh token that can be used to generate new access tokens for the sync. This requires whitelabeled calendar sync to be enabled for your account
  """
  refresh_token: String
  token_type: String = "Bearer"
}

"""Autogenerated return type of createExternalCalendar."""
type createExternalCalendarPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  external_calendar: ExternalCalendar

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createFamilyHistory"""
input createFamilyHistoryInput {
  relationships: [String]
  concept_id: String
  user_id: ID
}

"""Autogenerated return type of createFamilyHistory."""
type createFamilyHistoryPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  duplicate_family_history_condition: FamilyHistoryCondition
  family_history_condition: FamilyHistoryCondition

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createFaxAcctInfo"""
input createFaxAcctInfoInput {
  aes_key: String
  api_key: String
  fax_number: String
  notify_provider: Boolean
  user_id: ID
  username: String
}

"""Autogenerated return type of createFaxAcctInfo."""
type createFaxAcctInfoPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of createFaxLineRequest"""
input createFaxLineRequestInput {
  area_code: String
  bill: Upload
  city: String
  loa: Upload
  request_type: String
  state: String
}

"""Autogenerated return type of createFaxLineRequest."""
type createFaxLineRequestPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  faxLineRequest: FaxLineRequest

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createFeatureToggle"""
input createFeatureToggleInput {
  allow_apple_health_sync: Boolean
  allow_clearstep_sync: Boolean
  allow_community_chat: Boolean
  allow_direct_chat: Boolean
  allow_fitbit_sync: Boolean
  allow_google_fit_sync: Boolean
  allow_shapa_sync: Boolean
  allow_withings_sync: Boolean
  apply_eating_disorder_default: Boolean
  can_schedule_appointments: Boolean
  can_track_poop: Boolean
  can_track_symptoms: Boolean
  can_track_water_intake: Boolean
  can_view_care_plan: Boolean
  can_view_documents: Boolean
  can_view_forms: Boolean
  can_view_goals: Boolean
  can_view_journal_entries: Boolean
  can_view_packages: Boolean
  can_view_payments: Boolean
  can_view_programs: Boolean
  care_plan_id: ID
  custom_metric_overrides: [CustomMetricOverridesInput]
  custom_metrics: [CustomMetricInput]
  default_water_intake: String
  do_not_auto_submit_cms1500: Boolean
  email_notification_frequency: String
  push_notification_frequency: String
  send_unpaid_invoice_reminder: Boolean
  seperate_provider_metric_from_client: Boolean
  show_a1c_metric: Boolean
  show_bf_percent_metric: Boolean
  show_blood_pressure_metric: Boolean
  show_blood_sugar_metric: Boolean
  show_bmi_graph: Boolean
  show_bmi_growth_chart: Boolean
  show_bmr_metric: Boolean
  show_body_temperature_metric: Boolean
  show_client_a1c_metric: Boolean
  show_client_bf_percent_metric: Boolean
  show_client_blood_pressure_metric: Boolean
  show_client_blood_sugar_metric: Boolean
  show_client_bmi_graph: Boolean
  show_client_bmi_growth_chart: Boolean
  show_client_bmr_metric: Boolean
  show_client_body_temperature_metric: Boolean
  show_client_harris_benedict: Boolean
  show_client_height_growth_chart: Boolean
  show_client_ox_sat_metric: Boolean
  show_client_waist_circumference_metric: Boolean
  show_client_weight_growth_chart: Boolean
  show_client_weight_metric: Boolean
  show_ed_posthunger: Boolean
  show_ed_prehunger: Boolean
  show_food: Boolean
  show_food_category: Boolean
  show_food_emotion: Boolean
  show_food_reflection: Boolean
  show_harris_benedict: Boolean
  show_healthiness: Boolean
  show_height_graph: Boolean
  show_height_growth_chart: Boolean
  show_metric: Boolean
  show_mirror: Boolean
  show_normal_hunger: Boolean
  show_note: Boolean
  show_note_emotion: Boolean
  show_nutrients_tracking: Boolean
  show_ox_sat_metric: Boolean
  show_waist_circumference_metric: Boolean
  show_weight_growth_chart: Boolean
  show_weight_metric: Boolean
  show_workout: Boolean
  use_metric_system: Boolean
  user_group_id: ID
  user_id: ID
  view_not_track: Boolean
}

"""Autogenerated return type of createFeatureToggle."""
type createFeatureTogglePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  feature_toggle: FeatureToggle

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createFitbit"""
input createFitbitInput {
  access_token: String
  expires_at: String
  last_sync_date: String
  refresh_token: String
  user_id: ID
}

"""Autogenerated return type of createFitbit."""
type createFitbitPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  fitbit: Fitbit

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createFolder"""
input createFolderInput {
  folder_id: String
  name: String
  rel_user_id: String
  share_users: String
  share_with_rel: Boolean
}

"""Autogenerated return type of createFolder."""
type createFolderPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  folder: Folder

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createFormAnswerGroup"""
input createFormAnswerGroupInput {
  appointment_id: ID
  course_id: String
  course_item_id: ID
  created_at: String
  custom_module_form_id: String
  date: String
  external_id: String
  finished: Boolean
  form_answers: [FormAnswerInput]
  formatted_date: String
  marked_complete: Boolean
  marked_locked: Boolean
  name: String

  """Maximum character limit of 128,000."""
  metadata: String
  requested_form_completion_id: ID = null
  set_initial_answers: Boolean
  time: String

  """Requires additional permissions to edit"""
  updated_at: String
  user_id: String

  """
  Creation of a form_answer_group in the context of an onboarding_item_id
  """
  onboarding_item_id: ID = null
}

"""Autogenerated return type of createFormAnswerGroup."""
type createFormAnswerGroupPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  form_answer_group: FormAnswerGroup

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createFormAnswerGroupSigning"""
input createFormAnswerGroupSigningInput {
  form_answer_group_id: String
  user_id: String
}

"""Autogenerated return type of createFormAnswerGroupSigning."""
type createFormAnswerGroupSigningPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  formAnswerGroupSigning: FormAnswerGroupSigning

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createFullscriptPractitioner"""
input createFullscriptPractitionerInput {
  email: String
  first_name: String
  last_name: String
  practitioner_type_id: String
}

"""Autogenerated return type of createFullscriptPractitioner."""
type createFullscriptPractitionerPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  fullscript_practitioner: FullscriptPractitionerType

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createFunctionalStatus"""
input createFunctionalStatusInput {
  functional_condition: String
  start_date: String
  user_id: ID
}

"""Autogenerated return type of createFunctionalStatus."""
type createFunctionalStatusPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  functional_status: FunctionalStatus

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createGoalHistory"""
input createGoalHistoryInput {
  """
  The day the goal should be marked complete for. Should be of the form: 'yyyy-mm-dd'
  """
  completed_on: String
  goal_id: String

  """If true, will mark parent goal completed (must be a subgoal)"""
  mark_parent_complete: Boolean
  user_id: String
}

"""Autogenerated return type of createGoalHistory."""
type createGoalHistoryPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  goalHistory: GoalHistory

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createGoal"""
input createGoalInput {
  """The id of associated care plan"""
  care_plan_id: ID
  description: String

  """The date the goal should end - format should be: yyyy-mm-dd"""
  due_date: String
  name: String
  parent_id: String

  """If true, create goal for program"""
  program_goal: Boolean
  reminder: ReminderInput

  """
  The frequency of this goal. Possible values are: 'Daily','Weekly', 'Once'
  """
  repeat: String

  """The id of goal template used to create this goal"""
  source_template_id: String

  """The date the goal should start - format should be: yyyy-mm-dd"""
  start_on: String
  subgoals: [SubgoalInput]

  """Title hyperlink. Opens when the name is clicked on."""
  title_link: String

  """If true, use this goal as a template(favorite)"""
  use_as_template: Boolean
  user_id: String
}

"""Autogenerated return type of createGoal."""
type createGoalPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  goal: Goal

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createGoogleFit"""
input createGoogleFitInput {
  access_token: String
  expiry_date: String
  is_enabled: Boolean
  last_sync_date: String
  refresh_token: String
  user_id: ID
}

"""Autogenerated return type of createGoogleFit."""
type createGoogleFitPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  google_fit: GoogleFit

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createGroup"""
input createGroupInput {
  name: String
}

"""Autogenerated return type of createGroup."""
type createGroupPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user_group: UserGroup
}

"""Autogenerated input type of createHarborPartnerApiKey"""
input createHarborPartnerApiKeyInput {
  """The ID of the Harbor Partner to create an API key for"""
  harbor_partner_id: ID

  """The ID of the Organization to create an API key for"""
  organization_id: ID
}

"""Autogenerated return type of createHarborPartnerApiKey."""
type createHarborPartnerApiKeyPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of createHealthConcern"""
input createHealthConcernInput {
  code: String
  description: String
  display_name: String
  effective_time: String
  user_id: ID
}

"""Autogenerated return type of createHealthConcern."""
type createHealthConcernPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  health_concern: HealthConcern

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createImmunization"""
input createImmunizationInput {
  additional_notes: String
  cvx_code: Int
  received_at: String
  status: String
  user_id: ID
  vaccine_name: String
}

"""Autogenerated return type of createImmunization."""
type createImmunizationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  immunization: Immunization

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createImplantableDeviceUser"""
input createImplantableDeviceUserInput {
  user_id: ID
  udi: String
  active: Boolean
  name: String
}

"""Autogenerated return type of createImplantableDeviceUser."""
type createImplantableDeviceUserPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  implantable_device_user: ImplantableDeviceUser

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createImportDataRequest"""
input createImportDataRequestInput {
  clients_template: Upload
  display_name: String
  extension: String
  optional_comment: String
  request_type: String
}

"""Autogenerated return type of createImportDataRequest."""
type createImportDataRequestPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  importDataRequest: ImportDataRequest

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createInsuranceAuthorization"""
input createInsuranceAuthorizationInput {
  authorization_number: String
  end_on: String
  policy_id: String
  start_on: String
  unit_type: String
  units_authorized: String
  units_used: String
  user_id: ID
  visits_authorized: String
  visits_used: String
}

"""Autogenerated return type of createInsuranceAuthorization."""
type createInsuranceAuthorizationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  insuranceAuthorization: InsuranceAuthorizationType

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createInsurancePlan"""
input createInsurancePlanInput {
  add_as_accepted_insurance_plan: Boolean
  payer_id: String
  payer_name: String
}

"""Autogenerated return type of createInsurancePlan."""
type createInsurancePlanPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  insurance_plan: InsurancePlan

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createLabOrder"""
input createLabOrderInput {
  """
  Required. The ID of the PDF or HL7 document containing the lab results. Needs to be pre-created and have a rel_user_id matching the patient ID
  """
  document_id: ID

  """Required. The lab panel that was ordered"""
  lab: String

  """Required. The lab company who processed the order"""
  lab_company: String

  """Required. The ID of the user in Healthie who ordered the lab"""
  orderer_id: ID

  """Required. The ID of the patient"""
  patient_id: ID

  """
  A list of the discrete data points that will be collected in the lab panel
  """
  lab_observation_requests: [LabObservationRequestInput]
}

"""Autogenerated return type of createLabOrder."""
type createLabOrderPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  currentUserNotificationsCount: UserNotificationsCount
  lab_order: LabOrder

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createLocation"""
input createLocationInput {
  city: String
  country: String
  line1: String
  line2: String
  name: String
  npi: String
  other_id: String
  other_id_qual: String
  place_of_service_id: String
  state: String
  user_id: String
  zip: String
}

"""Autogenerated return type of createLocation."""
type createLocationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  location: Location

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createMeal"""
input createMealInput {
  food_items: String
  name: String
  user_id: String
}

"""Autogenerated return type of createMeal."""
type createMealPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  meal: Meal

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createMedication"""
input createMedicationInput {
  active: Boolean = false
  code: String
  comment: String

  """Requires additional permissions to edit"""
  created_at: String
  custom_name: String
  directions: String
  dosage: String

  """The dosage option id to associate with the medication"""
  dosage_option_id: ID
  end_date: String
  frequency: String
  name: String
  route: String
  start_date: String

  """Requires additional permissions to edit"""
  updated_at: String
  user_id: String
}

"""Autogenerated return type of createMedication."""
type createMedicationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  medication: MedicationType

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createMessageBlast"""
input createMessageBlastInput {
  dietitian_id: String
  name: String
  note: NoteInput
  patient_id: String
  scheduled_at: String

  """
  The value of the select all toggle. This overrides simple_added_users and allows you to easily add all of a category to the conversation. Requires simple_added_users to be sent in as well
  """
  select_all_status: String
  simple_added_users: String
}

"""Autogenerated return type of createMessageBlast."""
type createMessageBlastPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  message: String

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createNote"""
input createNoteInput {
  attached_audio: Upload
  attached_document: Upload
  attached_image: Upload
  attached_image_string: String
  content: String
  conversation_id: String
  created_at: String
  hide_org_chat_confirmation: Boolean

  """True, if a note create action called in the organization chat context"""
  org_chat: Boolean
  scheduled_at: String
  updated_at: String
  user_id: String
}

"""Autogenerated return type of createNote."""
type createNotePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  note: Note
}

"""Autogenerated input type of createNotificationContact"""
input createNotificationContactInput {
  client_portal_access: Boolean
  client_portal_setting: ClientPortalSettingInput = null
  contact_form: String

  """Valid values: adult, minor"""
  contact_type: String
  copy_notifications: Boolean
  email: String
  emergency: Boolean
  first_name: String
  last_name: String
  phone_number: String

  """
  Valid values: caregiver, child, dependent, family_member, legal_guardian, is_parent, spouse, other
  """
  relationship: String
  user_id: String
  dietitian_id: String
  linked_client_id: String
  send_invitation: Boolean
  user_group_id: String
}

"""Autogenerated return type of createNotificationContact."""
type createNotificationContactPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  notificationContact: NotificationContact
}

"""Autogenerated input type of createOfferingCoupon"""
input createOfferingCouponInput {
  amount_off: String
  code: String
  expires_at: String
  flat_amount_off: String
  offering_ids: String
  promo_type: String
  repeat_times: String
  usage_limit: String
}

"""Autogenerated return type of createOfferingCoupon."""
type createOfferingCouponPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  offeringCoupon: OfferingCoupon
}

"""Autogenerated input type of createOffering"""
input createOfferingInput {
  billing_frequency: String
  can_be_gifted: Boolean
  charge_immediately: Boolean
  course_id: ID
  course_ids: String
  default_selection_image_url: String
  description: String
  first_time_payment: String
  lab_option_ids: String
  living_plate_meal_plan_id: String
  max_purchases: String
  name: String
  offering_image: OfferingImageUpload
  offering_includes: [OfferingIncludesFields]
  offering_products: [OfferingProductInput]
  override_group_on_purchase: Boolean
  price: String
  repeat_times: String
  require_booking_purchase: Boolean
  selected_image_id: ID
  show_free_text: Boolean
  show_offering: Boolean
  user_group_id: ID
  user_group_ids: String
  user_id: ID
  video_url: String
  visibility_status: String = "hidden"
}

"""Autogenerated return type of createOffering."""
type createOfferingPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  offering: Offering
}

"""Autogenerated input type of createOfficeallySftpAccount"""
input createOfficeallySftpAccountInput {
  ftp_url: String
  password: String
  username: String
}

"""Autogenerated return type of createOfficeallySftpAccount."""
type createOfficeallySftpAccountPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  officeally_sftp_account: OfficeallySftpAccount
}

"""Autogenerated input type of createOnboardingFlow"""
input createOnboardingFlowInput {
  groups_to_use_onboarding_flow: String
  name: String
}

"""Autogenerated return type of createOnboardingFlow."""
type createOnboardingFlowPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  onboardingFlow: OnboardingFlow
}

"""Autogenerated input type of createOnboardingItem"""
input createOnboardingItemInput {
  billing_disclaimer: String
  is_skippable: Boolean
  item_id: String
  item_type: String
  new_form_name: String
  onboarding_flow_id: String
  policy_disclaimer: String
  welcome_text: String
}

"""Autogenerated return type of createOnboardingItem."""
type createOnboardingItemPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  onboardingItem: OnboardingItem
}

"""Autogenerated input type of createOrAddToWaterIntakeEntry"""
input createOrAddToWaterIntakeEntryInput {
  created_at: String
  metric_stat: String
  type: String
  user_id: String
}

"""Autogenerated return type of createOrAddToWaterIntakeEntry."""
type createOrAddToWaterIntakeEntryPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  entry: Entry

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createOrganizationCptCode"""
input createOrganizationCptCodeInput {
  cpt_code_id: ID
  organization_id: ID
  price_per_unit: String
}

"""Autogenerated return type of createOrganizationCptCode."""
type createOrganizationCptCodePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  organization_cpt_code: OrganizationCptCodeType
}

"""Autogenerated input type of createOrganization"""
input createOrganizationInput {
  """
  When true, the new organization will be created as a sub-organization of the current users. Healthie support needs to enable this ability on your account. Must be passed along with user details
  """
  create_as_suborganization: Boolean
  email: String

  """
  Must be provided with create_as_suborganization, last_name, and email. When passed will create a new user that will be the owner of the suborg
  """
  first_name: String
  last_name: String

  """The email of organization"""
  organization_email: String
  organization_info: PrimaryOrganizationInfoInput

  """
  Can optionally be passed in along with last_name, first_name, and email. When passed in, the newly created user will have this password
  """
  password: String

  """
  When email is passed in, this determines whether to send an invite email to the newly created organization user
  """
  send_invite_email: Boolean = true
  sub_org_settings: SubOrganizationInfoInput
}

"""Autogenerated input type of createOrganizationMembership"""
input createOrganizationMembershipInput {
  email: String
  first_name: String
  last_name: String

  """Options are ["Standard", "Support"]"""
  org_role: String

  """Required: The ID of the organization"""
  organization_id: ID

  """
  Can optionally be passed in along with last_name, first_name, and email. When passed in, the newly created user will have this password
  """
  password: String
  professions: [ProfessionsInput]

  """
  When true, an invite email will be sent to the newly created organization member
  """
  send_invite_email: Boolean = true
  specialties: [SpecialtiesInput]

  """Organization’s member timezone"""
  timezone: String

  """
  Lets you add extra metadata about the organization membership. Not used in Healthie UI
  """
  title: String

  """Selected permission template"""
  permission_template_id: ID
}

"""Autogenerated return type of createOrganizationMembership."""
type createOrganizationMembershipPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The current authenticated user (for client state management)"""
  currentUser: User

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  organizationMembership: OrganizationMembership
}

"""Autogenerated return type of createOrganization."""
type createOrganizationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The current authenticated user (for client state management)"""
  currentUser: User

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  organization: Organization
}

"""Autogenerated input type of createPartner"""
input createPartnerInput {
  about_me: String
  email: String
  first_name: String
  first_url: String
  last_name: String
  phone_number: String
}

"""Autogenerated return type of createPartner."""
type createPartnerPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  visitor: Visitor
}

"""Autogenerated input type of createPaymentIntent"""
input createPaymentIntentInput {
  """The amount to charge in decimal format. e.g 10.99"""
  amount_to_pay: String
  coupon_code: String

  """The currency the payment will be made in. e.g 'usd'"""
  currency: String
  email: String
  first_name: String
  last_name: String

  """Optional. Defaults to first_name if left blank."""
  legal_name: String
  offering_id: ID

  """
  An array of possible payment method  Required. Only current option is 'klarna'
  """
  payment_method_types: [String]

  """Optional"""
  phone_number: String

  """The ID of the provider who will receive the payment."""
  recipient_id: ID

  """
  Optional, but recommended. Used to prevent duplicate PaymentIntents from being created.
  """
  stripe_idempotency_key: String

  """Optional"""
  timezone: String
}

"""Autogenerated return type of createPaymentIntent."""
type createPaymentIntentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  intentClientSecret: String

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createPermissionTemplate"""
input createPermissionTemplateInput {
  allow_self_scheduling_in_care_team: Boolean
  auto_create_convo_for_care_team: Boolean
  can_access_calendar_quick_share: Boolean
  can_access_to_members_chat: Boolean
  can_add_clients: Boolean
  can_add_members: Boolean
  can_add_members_to_chat: Boolean
  can_assign_tasks_to_all_org_members: Boolean
  can_be_care_team_member: Boolean
  can_charge_clients: Boolean
  can_delete_charting_notes: Boolean
  can_delete_faxes: Boolean
  can_edit_appointment_types: Boolean
  can_edit_calendar: Boolean
  can_edit_credit: Boolean
  can_edit_docs: Boolean
  can_edit_education: Boolean
  can_edit_forms: Boolean
  can_edit_members: Boolean
  can_edit_packages: Boolean
  can_edit_products: Boolean
  can_edit_settings: Boolean
  can_enroll_clients_to_programs: Boolean
  can_lock_others_charting_notes: Boolean
  can_lock_own_charting_notes: Boolean
  can_mark_assigned_tasks_to_other_org_members_as_completed: Boolean
  can_merge_clients: Boolean
  can_order_labs: Boolean
  can_view_labs: Boolean
  can_remove_client: Boolean
  can_create_tags: Boolean
  can_rename_and_delete_tags: Boolean
  can_see_billing: Boolean
  can_see_calendar: Boolean
  can_see_clients: Boolean
  can_see_docs: Boolean
  can_see_faxes: Boolean
  can_see_fullscript_tab: Boolean
  can_see_sent_faxes: Boolean
  can_see_transfers: Boolean
  can_set_client_password: Boolean
  can_share_documents_and_folders_with_org_members: Boolean
  can_sign_others_charting_notes: Boolean
  can_sign_own_charting_notes: Boolean
  can_submit_cms_1500s_to_office_ally: Boolean
  can_view_audit_log: Boolean
  can_view_all_org_members_tasks: Boolean
  can_view_cms1500s: Boolean
  can_view_goal_templates: Boolean
  can_view_org_dashboard: Boolean
  can_view_reports: Boolean
  can_view_super_bills: Boolean
  can_write_org_addendums: Boolean
  gets_failed_fax_notif: Boolean
  gets_fax_notif: Boolean
  has_own_branding: Boolean
  is_admin: Boolean
  is_provider: Boolean
  is_developer: Boolean
  name: String
  notify_any_client_activity: Boolean
  notify_on_book: Boolean
  notify_on_cancel: Boolean
  notify_on_payment_failure: Boolean
  org_role: String
  organization_id: ID
  request_eligibility_checks: Boolean
  sees_all_billing: Boolean
  sees_all_clients: Boolean
  send_email_on_intake_flow_complete: Boolean
  send_email_on_intake_flow_start: Boolean
  share_appointment_types: Boolean
  share_custom_metrics: Boolean
  share_fullscript: Boolean
  share_goal_templates: Boolean
  share_packages: Boolean
  share_smart_phrases: Boolean
  show_availability_first: Boolean
  show_org_tab: Boolean
  start_conversation_with: Boolean
  share_user_groups: Boolean
  allow_group_level_actions: Boolean
  can_manage_care_plan_templates: Boolean
}

"""Autogenerated return type of createPermissionTemplate."""
type createPermissionTemplatePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  newPermissionTemplate: PermissionTemplateType
}

"""Autogenerated input type of createPersonalizationQuestionnaire"""
input createPersonalizationQuestionnaireInput {
  clients_in_a_month: String
  plans_to_add_more_users: String
  professions: [String]
}

"""Autogenerated return type of createPersonalizationQuestionnaire."""
type createPersonalizationQuestionnairePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  was_saved: Boolean
}

"""Autogenerated input type of createPreferredMedicalCode"""
input createPreferredMedicalCodeInput {
  code_ids: [ID]
  code_type: String
}

"""Autogenerated return type of createPreferredMedicalCode."""
type createPreferredMedicalCodePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  preferred_medical_codes: [PreferredMedicalCode]
}

"""Autogenerated input type of createProcedure"""
input createProcedureInput {
  code: String
  code_system_name: String
  cpt_code_id: ID
  display_name: String
  procedure_end_datetime: String
  procedure_start_datetime: String
  status: String
  target_site: String
  user_id: ID
}

"""Autogenerated return type of createProcedure."""
type createProcedurePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  procedure: Procedure
}

"""Autogenerated input type of createProduct"""
input createProductInput {
  name: String
  price: String
  remaining_quantity: String
  tax_description: String
  tax_rate: String
  unlimited_quantity: Boolean
}

"""Autogenerated return type of createProduct."""
type createProductPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  product: Product
}

"""Autogenerated input type of createProviderCptCodes"""
input createProviderCptCodesInput {
  provider_cpt_codes: [ProviderCptCodeInput]
  provider_id: ID
}

"""Autogenerated return type of createProviderCptCodes."""
type createProviderCptCodesPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of createRecommendation"""
input createRecommendationInput {
  care_plan_id: ID
  form_answer_id: ID
  recommendation_body: String
  recommendation_type: String
}

"""Autogenerated return type of createRecommendation."""
type createRecommendationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  recommendation: Recommendation
}

"""Autogenerated input type of createReferral"""
input createReferralInput {
  """
  A serialized JSON string of metadata. Maximum character limit of 128,000.
  """
  metadata: String
  referral_reason: String
  referring_physician_id: ID
  user_id: ID
}

"""Autogenerated return type of createReferral."""
type createReferralPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  referral: Referral
}

"""Autogenerated input type of createReferringPhysician"""
input createReferringPhysicianInput {
  accepts_insurance: Boolean
  business_name: String
  email: String
  fax_number: String
  first_name: String
  last_name: String
  location: PhysicianLocationInput

  """
  A serialized JSON string of metadata. Maximum character limit of 128,000.
  """
  metadata: String
  notes: String
  npi: String
  other_id: String
  other_id_qualifier: String
  phone_number: String
  referrals: [PhysicianReferralInput] = []
  speciality: String
  website: String
}

"""Autogenerated return type of createReferringPhysician."""
type createReferringPhysicianPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  duplicated_physician: ReferringPhysician

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  referring_physician: ReferringPhysician
}

"""Autogenerated input type of createRequestedForm"""
input createRequestedFormInput {
  custom_module_form_id: ID
  item_type: String
  recipient_id: ID
  ends_on: String

  """
  The ID of the custom form OR the name of the generic form (e.g 'billing_info')
  """
  form: String
  frequency: String
  hour: String
  is_recurring: Boolean
  minute: String
  monthday: String
  period: String

  """
  A comma-separated list of user IDs and/or user group IDs. If passing user group IDs, they should take the following format: 'group-1,group-2,group-3' You can pass both user IDs and user group IDs. Example: '1,2,3,group-1,group-2' If you pass a user group ID, all users in that group will be sent the form.
  """
  recipient_ids: String
  recurrence_ends: Boolean
  weekday: String
}

"""Autogenerated return type of createRequestedForm."""
type createRequestedFormPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  requestedFormCompletion: RequestedFormCompletion
  requestedFormCompletionStatus: RequestedFormStatusType
}

"""Autogenerated input type of createRequestedPayment"""
input createRequestedPaymentInput {
  appointment_id: ID
  cms1500_id: ID
  invoice_type: String
  is_preview: Boolean
  notes: String
  offering_id: ID
  price: String
  recipient_id: ID
  requested_payer: RequestedPayerInput
  requested_payment_template: RequestedPaymentTemplateInput
  sender_id: ID
  service_date: String
  services_provided: String
  status: String
  user_package_selection_id: ID
}

"""Autogenerated return type of createRequestedPayment."""
type createRequestedPaymentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  requestedPayment: RequestedPayment
}

"""Autogenerated input type of createRupaOrder"""
input createRupaOrderInput {
  client_id: ID
}

"""Autogenerated return type of createRupaOrder."""
type createRupaOrderPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  rupa_order_url: String
}

"""Autogenerated input type of createSavedFilter"""
input createSavedFilterInput {
  """Name of the new saved filter"""
  name: String!

  """
  ID of the organization with access to the filter. Will be assigned to organization ID of user if not provided
  """
  organization_id: ID
}

"""Autogenerated return type of createSavedFilter."""
type createSavedFilterPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  savedFilter: SavedFilter
}

"""Autogenerated input type of createSentDirectMessage"""
input createSentDirectMessageInput {
  """Required"""
  message_body: String
  outbound_recipient: String
  subject: String
  patient_id: ID
  binary_attachment_document_id: ID
  include_patient_xml: SentDirectMessageXml
}

"""Autogenerated return type of createSentDirectMessage."""
type createSentDirectMessagePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  sent_direct_message: SentDirectMessage
}

"""Autogenerated input type of createSentFax"""
input createSentFaxInput {
  answer_ids: String
  date: String
  destination_number: String

  """AKA the provider. Required"""
  dietitian: FaxDietitianInput
  document_id: String
  document_ids: String
  form_answer_group_ids: String
  include_header_on_every_page: Boolean
  include_hipaa_disclaimer: Boolean
  patient_id: String
  recipient_company: String
  recipient_name: String
  remarks: String
  skip_cover_page: Boolean
  subject: String
}

"""Autogenerated return type of createSentFax."""
type createSentFaxPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  sent_fax: SentFax
}

"""Autogenerated input type of createSmartPhrase"""
input createSmartPhraseInput {
  name: String
  phrase: String
}

"""Autogenerated return type of createSmartPhrase."""
type createSmartPhrasePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  smartPhrase: SmartPhrase
}

"""Autogenerated input type of createSmokingStatus"""
input createSmokingStatusInput {
  smoking_status_code: String
  status_end_datetime: String
  status_start_datetime: String
  user_id: ID
}

"""Autogenerated return type of createSmokingStatus."""
type createSmokingStatusPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  smokingStatus: SmokingStatus
}

"""Autogenerated input type of createStripeCustomerDetail"""
input createStripeCustomerDetailInput {
  """Options are 'hsa', 'fsa', and 'personal'. Defaults to personal"""
  card_type_label: String
  is_default: Boolean
  token: String
  user_id: ID
}

"""Autogenerated return type of createStripeCustomerDetail."""
type createStripeCustomerDetailPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  stripeError: String
  stripe_customer_detail: StripeCustomerDetail
}

"""Autogenerated input type of createSubscription"""
input createSubscriptionInput {
  plan_id: String

  """
  Can be passed in instead of plan_id to select which plan the subscription should be on. Normally preferable to use plan_id
  """
  plan_name: String
  token: String
  billing_address: BillingAddressInput
}

"""Autogenerated return type of createSubscription."""
type createSubscriptionPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  subscription: SubscriptionInstance
}

"""Autogenerated input type of createSuperBill"""
input createSuperBillInput {
  address: String
  amount_paid: String
  cpt_codes_super_bills: [CptCodesSuperBillInput]
  dietitian_id: ID
  icd_codes_super_bills: [IcdCodesSuperBillInput]
  license_num: String
  location: LocationInputs
  location_id: ID
  npi: String
  patient_dob: String
  patient_id: ID
  patient_location: PatientLocationInputs
  patient_name: String
  patient_phone: String
  place_of_service_id: ID
  prov_city: String
  prov_email: String
  prov_line1: String
  prov_line2: String
  prov_phone: String
  prov_state: String
  prov_zip: String
  provider_name: String
  receipt_line_items: [ReceiptLineItemInput]
  referrer_name: String
  referrer_npi: String
  service_date: String
  status: String
  tax_id: String
}

"""Autogenerated return type of createSuperBill."""
type createSuperBillPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  superBill: SuperBill
}

"""Autogenerated input type of createTag"""
input createTagInput {
  name: String

  """The ID of the user to apply a tag on"""
  taggable_user_id: ID
}

"""Autogenerated return type of createTag."""
type createTagPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  tag: Tag
}

"""Autogenerated input type of createTask"""
input createTaskInput {
  client_id: String
  complete: Boolean
  completed_by_id: ID
  content: String
  created_by_id: String
  due_date: String
  note_id: ID
  priority: Int
  reminder: TaskReminderInput
  seen: Boolean
  user_id: String
}

"""Autogenerated return type of createTask."""
type createTaskPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  task: Task
}

"""Autogenerated input type of createUniqueDeviceIdentifier"""
input createUniqueDeviceIdentifierInput {
  assigning_authority: String
  device_code: String
  display_name: String
  scoping_entity: String
  udi_code: String
  user_id: ID
}

"""Autogenerated return type of createUniqueDeviceIdentifier."""
type createUniqueDeviceIdentifierPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  unique_device_identifier: UniqueDeviceIdentifier
}

"""Autogenerated input type of createVisitor"""
input createVisitorInput {
  email: String
  first_name: String
  first_url: String
}

"""Autogenerated return type of createVisitor."""
type createVisitorPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  visitor: Visitor
}

"""Autogenerated input type of createWebhook"""
input createWebhookInput {
  event_type: String
  is_enabled: Boolean
  should_retry: Boolean = true

  """A valid URL per the WHATWG specification"""
  url: String

  """Webhook events to create"""
  webhook_events: [WebhookEventInput]
}

"""Autogenerated return type of createWebhook."""
type createWebhookPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  webhook: Webhook
}

"""Autogenerated input type of createZus"""
input createZusInput {
  """Healthie organization ID"""
  organization_id: ID!

  """Zus Parameters"""
  zus_params: ZusInputs!
}

"""Autogenerated return type of createZus."""
type createZusPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of deleteAcceptedInsurancePlan"""
input deleteAcceptedInsurancePlanInput {
  id: ID
}

"""Autogenerated return type of deleteAcceptedInsurancePlan."""
type deleteAcceptedInsurancePlanPayload {
  accepted_insurance_plan: AcceptedInsurancePlan
  appointment_setting: AppointmentSetting

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteAllergySensitivity"""
input deleteAllergySensitivityInput {
  id: ID
}

"""Autogenerated return type of deleteAllergySensitivity."""
type deleteAllergySensitivityPayload {
  allergy_sensitivity: AllergySensitivity

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteApiKey"""
input deleteApiKeyInput {
  id: ID
}

"""Autogenerated return type of deleteApiKey."""
type deleteApiKeyPayload {
  api_key: ApiKey

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteAppleHealth"""
input deleteAppleHealthInput {
  id: ID
}

"""Autogenerated return type of deleteAppleHealth."""
type deleteAppleHealthPayload {
  apple_health: AppleHealth

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteAppointmentFormAnswerGroupConnection"""
input deleteAppointmentFormAnswerGroupConnectionInput {
  form_answer_group_id: ID
}

"""
Autogenerated return type of deleteAppointmentFormAnswerGroupConnection.
"""
type deleteAppointmentFormAnswerGroupConnectionPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  form_answer_group: FormAnswerGroup

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteAppointment"""
input deleteAppointmentInput {
  appointment_inclusion_uuid: ID
  deleteRecurring: Boolean
  id: ID
}

"""Autogenerated return type of deleteAppointment."""
type deleteAppointmentPayload {
  appointment: Appointment

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteAppointmentTypeCptCode"""
input deleteAppointmentTypeCptCodeInput {
  id: ID
}

"""Autogenerated return type of deleteAppointmentTypeCptCode."""
type deleteAppointmentTypeCptCodePayload {
  appointment_type_cpt_code: AppointmentTypeCptCodeType

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteAppointmentType"""
input deleteAppointmentTypeInput {
  id: ID
}

"""Autogenerated return type of deleteAppointmentType."""
type deleteAppointmentTypePayload {
  appointmentType: AppointmentType

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteAutoTaskGenerator"""
input deleteAutoTaskGeneratorInput {
  id: ID
}

"""Autogenerated return type of deleteAutoTaskGenerator."""
type deleteAutoTaskGeneratorPayload {
  auto_task_generator: AutoTaskGenerator

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteAutoscoring"""
input deleteAutoscoringInput {
  """ID of the form being edited"""
  form_id: ID!

  """ID of the sections being edited"""
  section_id: ID!
}

"""Autogenerated return type of deleteAutoscoring."""
type deleteAutoscoringPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of deleteAvailability"""
input deleteAvailabilityInput {
  id: ID
}

"""Autogenerated return type of deleteAvailability."""
type deleteAvailabilityPayload {
  availability: Availability

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteBillingItem"""
input deleteBillingItemInput {
  id: ID
}

"""Autogenerated return type of deleteBillingItem."""
type deleteBillingItemPayload {
  billingItem: BillingItem

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteCarePlanConnection"""
input deleteCarePlanConnectionInput {
  care_plan_id: ID
  connectable_id: ID
  connectable_type: String
}

"""Autogenerated return type of deleteCarePlanConnection."""
type deleteCarePlanConnectionPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  connection: CarePlanConnection

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteCarePlan"""
input deleteCarePlanInput {
  id: ID
}

"""Autogenerated return type of deleteCarePlan."""
type deleteCarePlanPayload {
  carePlan: CarePlan

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteCms1500"""
input deleteCms1500Input {
  id: ID
}

"""Autogenerated return type of deleteCms1500."""
type deleteCms1500Payload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  cms1500: Cms1500

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteCognitiveStatus"""
input deleteCognitiveStatusInput {
  id: ID
}

"""Autogenerated return type of deleteCognitiveStatus."""
type deleteCognitiveStatusPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  cognitive_status: CognitiveStatus

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteComment"""
input deleteCommentInput {
  id: ID
}

"""Autogenerated return type of deleteComment."""
type deleteCommentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  comment: Comment

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteConversationMembership"""
input deleteConversationMembershipInput {
  conversation_id: ID
  group_id: ID
  user_id: ID
}

"""Autogenerated return type of deleteConversationMembership."""
type deleteConversationMembershipPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  conversationMembership: ConversationMembership

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteCourseBenefit"""
input deleteCourseBenefitInput {
  id: ID
}

"""Autogenerated return type of deleteCourseBenefit."""
type deleteCourseBenefitPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  courseBenefit: CourseBenefit

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteCourseGroup"""
input deleteCourseGroupInput {
  id: ID
}

"""Autogenerated return type of deleteCourseGroup."""
type deleteCourseGroupPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  courseGroup: CourseGroup

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteCourse"""
input deleteCourseInput {
  id: ID
}

"""Autogenerated input type of deleteCourseItem"""
input deleteCourseItemInput {
  id: ID
}

"""Autogenerated return type of deleteCourseItem."""
type deleteCourseItemPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  courseItem: CourseItem

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteCourseMembership"""
input deleteCourseMembershipInput {
  id: ID
}

"""Autogenerated return type of deleteCourseMembership."""
type deleteCourseMembershipPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  courseMembership: CourseMembership

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated return type of deleteCourse."""
type deleteCoursePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  course: Course

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteCustomEmail"""
input deleteCustomEmailInput {
  id: ID
}

"""Autogenerated return type of deleteCustomEmail."""
type deleteCustomEmailPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customEmail: CustomEmail

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteCustomFood"""
input deleteCustomFoodInput {
  id: ID
  user_id: String
}

"""Autogenerated return type of deleteCustomFood."""
type deleteCustomFoodPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customFood: Food

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteCustomModuleForm"""
input deleteCustomModuleFormInput {
  id: ID
}

"""Autogenerated return type of deleteCustomModuleForm."""
type deleteCustomModuleFormPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customModuleForm: CustomModuleForm

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteCustomModule"""
input deleteCustomModuleInput {
  id: ID
}

"""Autogenerated return type of deleteCustomModule."""
type deleteCustomModulePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customModule: CustomModule

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteCustomNavItem"""
input deleteCustomNavItemInput {
  """Brand ID"""
  brand_id: ID!

  """Custom Sidebar Override ID"""
  custom_nav_item_id: ID!
}

"""Autogenerated return type of deleteCustomNavItem."""
type deleteCustomNavItemPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success message"""
  success_string: String
}

"""Autogenerated input type of deleteDexcomConnection"""
input deleteDexcomConnectionInput {
  id: ID
}

"""Autogenerated return type of deleteDexcomConnection."""
type deleteDexcomConnectionPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  dexcom_connection: DexcomConnection

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteDocument"""
input deleteDocumentInput {
  id: ID
}

"""Autogenerated return type of deleteDocument."""
type deleteDocumentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  document: Document

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteDosespot"""
input deleteDosespotInput {
  """The ID of the dosespot object to delete"""
  dosespot_object_id: ID

  """The ID of the dosespot user to delete"""
  dosespot_user_id: ID
}

"""Autogenerated return type of deleteDosespot."""
type deleteDosespotPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of deleteEntry"""
input deleteEntryInput {
  id: ID
}

"""Autogenerated return type of deleteEntry."""
type deleteEntryPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  entry: Entry

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteExternalCalendar"""
input deleteExternalCalendarInput {
  id: ID
}

"""Autogenerated return type of deleteExternalCalendar."""
type deleteExternalCalendarPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  external_calendar: ExternalCalendar

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteFamilyHistory"""
input deleteFamilyHistoryInput {
  id: ID
}

"""Autogenerated return type of deleteFamilyHistory."""
type deleteFamilyHistoryPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  family_history_condition: FamilyHistoryCondition

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteFitbit"""
input deleteFitbitInput {
  id: ID
}

"""Autogenerated return type of deleteFitbit."""
type deleteFitbitPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  fitbit: Fitbit

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteFolder"""
input deleteFolderInput {
  id: ID
}

"""Autogenerated return type of deleteFolder."""
type deleteFolderPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  folder: Folder

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteFormAnswerGroup"""
input deleteFormAnswerGroupInput {
  id: ID

  """
  If passed, the connection between a form_answer_group and a group appointment for the given user will be removed
  """
  user_id: ID
}

"""Autogenerated return type of deleteFormAnswerGroup."""
type deleteFormAnswerGroupPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  form_answer_group: FormAnswerGroup

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteFunctionalStatus"""
input deleteFunctionalStatusInput {
  id: ID
}

"""Autogenerated return type of deleteFunctionalStatus."""
type deleteFunctionalStatusPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  functional_status: FunctionalStatus

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteGoalHistory"""
input deleteGoalHistoryInput {
  completed_on: String

  """ID of the goal to remove a goal history for"""
  id: ID
}

"""Autogenerated return type of deleteGoalHistory."""
type deleteGoalHistoryPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  goal_history: GoalHistory

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteGoal"""
input deleteGoalInput {
  id: ID
}

"""Autogenerated return type of deleteGoal."""
type deleteGoalPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  goal: Goal

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteGoogleFit"""
input deleteGoogleFitInput {
  id: ID
}

"""Autogenerated return type of deleteGoogleFit."""
type deleteGoogleFitPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  google_fit: GoogleFit

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteHealthConcern"""
input deleteHealthConcernInput {
  id: ID
}

"""Autogenerated return type of deleteHealthConcern."""
type deleteHealthConcernPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  health_concern: HealthConcern

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteImplantableDeviceUser"""
input deleteImplantableDeviceUserInput {
  id: ID
}

"""Autogenerated return type of deleteImplantableDeviceUser."""
type deleteImplantableDeviceUserPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  implantable_device_user: ImplantableDeviceUser

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteInsuranceAuthorization"""
input deleteInsuranceAuthorizationInput {
  id: ID
}

"""Autogenerated return type of deleteInsuranceAuthorization."""
type deleteInsuranceAuthorizationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  insuranceAuthorization: InsuranceAuthorizationType

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteInsurancePlan"""
input deleteInsurancePlanInput {
  id: ID
}

"""Autogenerated return type of deleteInsurancePlan."""
type deleteInsurancePlanPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  insurance_plan: InsurancePlan

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteLocation"""
input deleteLocationInput {
  id: ID
}

"""Autogenerated return type of deleteLocation."""
type deleteLocationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  location: Location

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteMeal"""
input deleteMealInput {
  id: ID
  user_id: String
}

"""Autogenerated return type of deleteMeal."""
type deleteMealPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  meal: Meal

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of deleteNote"""
input deleteNoteInput {
  deleted_by_user: Boolean = false
  id: ID
}

"""Autogenerated return type of deleteNote."""
type deleteNotePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  note: Note
}

"""Autogenerated input type of deleteNotificationContact"""
input deleteNotificationContactInput {
  id: ID
  user_id: ID
}

"""Autogenerated return type of deleteNotificationContact."""
type deleteNotificationContactPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  notificationContact: NotificationContact
}

"""Autogenerated input type of deleteOfferingCoupon"""
input deleteOfferingCouponInput {
  id: ID
}

"""Autogenerated return type of deleteOfferingCoupon."""
type deleteOfferingCouponPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  offeringCoupon: OfferingCoupon
}

"""Autogenerated input type of deleteOffering"""
input deleteOfferingInput {
  id: ID
}

"""Autogenerated return type of deleteOffering."""
type deleteOfferingPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  offering: Offering
}

"""Autogenerated input type of deleteOnboardingFlow"""
input deleteOnboardingFlowInput {
  flow_to_receive_groups: ID
  id: ID
}

"""Autogenerated return type of deleteOnboardingFlow."""
type deleteOnboardingFlowPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  onboardingFlow: OnboardingFlow
}

"""Autogenerated input type of deleteOnboardingItem"""
input deleteOnboardingItemInput {
  id: ID
}

"""Autogenerated return type of deleteOnboardingItem."""
type deleteOnboardingItemPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  onboardingItem: OnboardingItem
}

"""Autogenerated input type of deleteOrganizationCptCode"""
input deleteOrganizationCptCodeInput {
  id: ID
}

"""Autogenerated return type of deleteOrganizationCptCode."""
type deleteOrganizationCptCodePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  organization_cpt_code: OrganizationCptCodeType
}

"""Autogenerated input type of deleteOrganizationInfo"""
input deleteOrganizationInfoInput {
  id: ID
}

"""Autogenerated return type of deleteOrganizationInfo."""
type deleteOrganizationInfoPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  organizationInfo: OrganizationInfo
}

"""Autogenerated input type of deleteOrganizationMembership"""
input deleteOrganizationMembershipInput {
  id: ID
}

"""Autogenerated return type of deleteOrganizationMembership."""
type deleteOrganizationMembershipPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  organizationMembership: OrganizationMembership
}

"""Autogenerated input type of deletePermissionTemplate"""
input deletePermissionTemplateInput {
  id: ID
}

"""Autogenerated return type of deletePermissionTemplate."""
type deletePermissionTemplatePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  permission_template: PermissionTemplateType
}

"""Autogenerated input type of deletePreferredMedicalCode"""
input deletePreferredMedicalCodeInput {
  code_ids: [ID]
  code_type: String
}

"""Autogenerated return type of deletePreferredMedicalCode."""
type deletePreferredMedicalCodePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  preferred_medical_codes: [PreferredMedicalCode]
}

"""Autogenerated input type of deleteProcedure"""
input deleteProcedureInput {
  id: ID
}

"""Autogenerated return type of deleteProcedure."""
type deleteProcedurePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  procedure: Procedure
}

"""Autogenerated input type of deleteProduct"""
input deleteProductInput {
  id: ID
}

"""Autogenerated return type of deleteProduct."""
type deleteProductPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  product: Product
}

"""Autogenerated input type of deleteProviderCptCode"""
input deleteProviderCptCodeInput {
  id: ID
}

"""Autogenerated return type of deleteProviderCptCode."""
type deleteProviderCptCodePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  provider_cpt_code: ProviderCptCodeType
}

"""Autogenerated input type of deleteReceivedFax"""
input deleteReceivedFaxInput {
  id: ID
}

"""Autogenerated return type of deleteReceivedFax."""
type deleteReceivedFaxPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  receivedFax: ReceivedFax
}

"""Autogenerated input type of deleteRecommendation"""
input deleteRecommendationInput {
  id: ID
}

"""Autogenerated return type of deleteRecommendation."""
type deleteRecommendationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  recommendation: Recommendation
}

"""Autogenerated input type of deleteReferral"""
input deleteReferralInput {
  id: ID
}

"""Autogenerated return type of deleteReferral."""
type deleteReferralPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  referral: Referral
}

"""Autogenerated input type of deleteReferringPhysician"""
input deleteReferringPhysicianInput {
  id: ID
}

"""Autogenerated return type of deleteReferringPhysician."""
type deleteReferringPhysicianPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  referringPhysician: ReferringPhysician
}

"""Autogenerated input type of deleteRequestedForm"""
input deleteRequestedFormInput {
  id: ID
  recurringFormId: ID
}

"""Autogenerated return type of deleteRequestedForm."""
type deleteRequestedFormPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  requestedFormCompletion: RequestedFormCompletion
}

"""Autogenerated input type of deleteRequestedPayment"""
input deleteRequestedPaymentInput {
  id: ID!
}

"""Autogenerated return type of deleteRequestedPayment."""
type deleteRequestedPaymentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  requested_payment: RequestedPayment
}

"""Autogenerated input type of deleteSavedFilter"""
input deleteSavedFilterInput {
  """ID of the saved filter to delete"""
  id: ID!
}

"""Autogenerated return type of deleteSavedFilter."""
type deleteSavedFilterPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  savedFilter: SavedFilter
}

"""Autogenerated input type of deleteShapaConnection"""
input deleteShapaConnectionInput {
  id: ID
}

"""Autogenerated return type of deleteShapaConnection."""
type deleteShapaConnectionPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  shapa_connection: ShapaConnection
}

"""Autogenerated input type of deleteSmartPhrase"""
input deleteSmartPhraseInput {
  id: ID
}

"""Autogenerated return type of deleteSmartPhrase."""
type deleteSmartPhrasePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  smartPhrase: SmartPhrase
}

"""Autogenerated input type of deleteSmokingStatus"""
input deleteSmokingStatusInput {
  id: ID
}

"""Autogenerated return type of deleteSmokingStatus."""
type deleteSmokingStatusPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  smokingStatus: SmokingStatus
}

"""Autogenerated input type of deleteStripeCustomerDetail"""
input deleteStripeCustomerDetailInput {
  card_id: String
  user_id: String
}

"""Autogenerated return type of deleteStripeCustomerDetail."""
type deleteStripeCustomerDetailPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  stripe_customer_detail: StripeCustomerDetail
}

"""Autogenerated input type of deleteSuperBill"""
input deleteSuperBillInput {
  id: ID
}

"""Autogenerated return type of deleteSuperBill."""
type deleteSuperBillPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  superBill: SuperBill
}

"""Autogenerated input type of deleteTag"""
input deleteTagInput {
  id: ID
}

"""Autogenerated return type of deleteTag."""
type deleteTagPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  tag: Tag
}

"""Autogenerated input type of deleteTask"""
input deleteTaskInput {
  id: ID
}

"""Autogenerated return type of deleteTask."""
type deleteTaskPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  task: Task
}

"""Autogenerated input type of deleteUniqueDeviceIdentifier"""
input deleteUniqueDeviceIdentifierInput {
  id: ID
}

"""Autogenerated return type of deleteUniqueDeviceIdentifier."""
type deleteUniqueDeviceIdentifierPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  unique_device_identifier: UniqueDeviceIdentifier
}

"""Autogenerated input type of deleteUserGroup"""
input deleteUserGroupInput {
  group_to_receive_clients: ID
  id: ID
}

"""Autogenerated return type of deleteUserGroup."""
type deleteUserGroupPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user_group: UserGroup
}

"""Autogenerated input type of deleteWebhook"""
input deleteWebhookInput {
  id: ID
}

"""Autogenerated return type of deleteWebhook."""
type deleteWebhookPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  webhook: Webhook
}

"""Autogenerated input type of deleteWithingsConnection"""
input deleteWithingsConnectionInput {
  id: ID
}

"""Autogenerated return type of deleteWithingsConnection."""
type deleteWithingsConnectionPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  withings_connection: WithingsConnection
}

"""Autogenerated input type of destroyAnnouncement"""
input destroyAnnouncementInput {
  id: ID
}

"""Autogenerated return type of destroyAnnouncement."""
type destroyAnnouncementPayload {
  announcement: Announcement

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of destroyFaxAcctInfo"""
input destroyFaxAcctInfoInput {
  aes_key: String
  api_key: String
  fax_number: String
  user_id: ID
  username: String
}

"""Autogenerated return type of destroyFaxAcctInfo."""
type destroyFaxAcctInfoPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of destroyHarborPartnerApiKey"""
input destroyHarborPartnerApiKeyInput {
  """The ID of the API key to destroy"""
  api_key_id: ID!
}

"""Autogenerated return type of destroyHarborPartnerApiKey."""
type destroyHarborPartnerApiKeyPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of destroyMedication"""
input destroyMedicationInput {
  id: ID
}

"""Autogenerated return type of destroyMedication."""
type destroyMedicationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  medication: MedicationType

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of destroyRecurringForm"""
input destroyRecurringFormInput {
  connectable_id: ID
  connectable_type: String
  id: ID
}

"""Autogenerated return type of destroyRecurringForm."""
type destroyRecurringFormPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  recurringForm: RecurringForm
}

"""Autogenerated input type of dismissAllAnnouncements"""
input dismissAllAnnouncementsInput {
  patient_id: ID
}

"""Autogenerated return type of dismissAllAnnouncements."""
type dismissAllAnnouncementsPayload {
  announcements: [Announcement]

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of dismissAnnouncement"""
input dismissAnnouncementInput {
  id: ID
  patient_id: ID
}

"""Autogenerated return type of dismissAnnouncement."""
type dismissAnnouncementPayload {
  announcement: Announcement

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of dosespotImport"""
input dosespotImportInput {
  """Healthie Provider ID that will be reviewing the generated report"""
  reviewer_id: ID!

  """Ticket number"""
  ticket: String!

  """Document ID"""
  doc_id: String!
}

"""Autogenerated return type of dosespotImport."""
type dosespotImportPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success message"""
  success_string: String
}

"""Autogenerated input type of dosespotSSO"""
input dosespotSSOInput {
  """The patient ID"""
  patient_id: ID!

  """The user ID of the provider"""
  user_id: ID!
}

"""Autogenerated return type of dosespotSSO."""
type dosespotSSOPayload {
  """The additional info"""
  additional_info: String

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of dummyUser"""
input dummyUserInput {
  """The ID of the clinic"""
  user_id: ID!
}

"""Autogenerated return type of dummyUser."""
type dummyUserPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of editAvailability"""
input editAvailabilityInput {
  appointment_location_id: String
  appointment_type_id: String
  contact_type_id: String
  day_of_week: Int
  end_on: String
  end_time: String
  id: String
  is_repeating: Boolean
  range_end: String
  range_start: String
  time: String
  timezone: String
  user_id: String
}

"""Autogenerated return type of editAvailability."""
type editAvailabilityPayload {
  availability: Availability

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of enableAutoscoring"""
input enableAutoscoringInput {
  """ID of the form being autoscored"""
  item_id: ID!

  """List of form modules to add to a subtotal"""
  module_ids: [ID]!

  """Name of the subtotal"""
  subtotal_label: String
}

"""Autogenerated return type of enableAutoscoring."""
type enableAutoscoringPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of enableGoogleIntegrations"""
input enableGoogleIntegrationsInput {
  """Healthie Provider ID"""
  user_id: ID!

  """Google Analytics ID"""
  ga_id: String

  """Google Tag Manager ID"""
  gtm_id: String
}

"""Autogenerated return type of enableGoogleIntegrations."""
type enableGoogleIntegrationsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success message"""
  success_string: String
}

"""Autogenerated input type of enableSelfSignup"""
input enableSelfSignupInput {
  """The user ID of the provider"""
  user_id: ID!

  """To enable or disable"""
  enable: String!
}

"""Autogenerated return type of enableSelfSignup."""
type enableSelfSignupPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of expireWebhookSignature"""
input expireWebhookSignatureInput {
  """The ID of the webhook"""
  id: ID!
}

"""Autogenerated return type of expireWebhookSignature."""
type expireWebhookSignaturePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  webhook: Webhook
}

"""Autogenerated input type of exportClientEhi"""
input exportClientEhiInput {
  """The ID of the client to export EHI data for."""
  client_id: ID

  """Whether or not we should export the client EHI data in a job."""
  should_run_in_job: Boolean = false
}

"""Autogenerated return type of exportClientEhi."""
type exportClientEhiPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The banner message shown when successful."""
  success_string: String
}

"""Autogenerated input type of exportToTemplate"""
input exportToTemplateInput {
  id: ID
}

"""Autogenerated return type of exportToTemplate."""
type exportToTemplatePayload {
  carePlan: CarePlan

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""A fullscript Sync"""
type fullscript {
  """The unique identifier of the fullscript"""
  id: ID!
}

"""Autogenerated input type of generateChartingPdf"""
input generateChartingPdfInput {
  form_answer_group_array: String
  id: ID
  include_header_on_every_page: Boolean
}

"""Autogenerated return type of generateChartingPdf."""
type generateChartingPdfPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user: User
}

"""Autogenerated input type of mergeClients"""
input mergeClientsInput {
  """the two user IDs to merge"""
  ids: [ID]

  """Optional: the email to update the remaining user to"""
  target_email: String

  """the user that will remain"""
  target_user_id: ID
}

"""Autogenerated return type of mergeClients."""
type mergeClientsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user: User
}

"""Autogenerated input type of parseCcdaDocument"""
input parseCcdaDocumentInput {
  file: Upload
}

"""Autogenerated return type of parseCcdaDocument."""
type parseCcdaDocumentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user: User
  xml_file_name: String
}

"""Autogenerated input type of removeAppliedTag"""
input removeAppliedTagInput {
  id: ID

  """The ID of the user to remove a tag from"""
  taggable_user_id: ID
}

"""Autogenerated return type of removeAppliedTag."""
type removeAppliedTagPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  tag: Tag
}

"""Autogenerated input type of removeDraft"""
input removeDraftInput {
  id: ID
}

"""Autogenerated return type of removeDraft."""
type removeDraftPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  draft: Draft

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of removeUserFromGroupCarePlan"""
input removeUserFromGroupCarePlanInput {
  care_plan_id: ID
  user_id: ID
}

"""Autogenerated return type of removeUserFromGroupCarePlan."""
type removeUserFromGroupCarePlanPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  groupCarePlanUserConnection: GroupCarePlanUserConnection

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of resendSentFax"""
input resendSentFaxInput {
  sent_fax_id: String
}

"""Autogenerated return type of resendSentFax."""
type resendSentFaxPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  sent_fax: SentFax
}

"""Autogenerated input type of resetPassword"""
input resetPasswordInput {
  email: String

  """The authentication namespace to check reset passwords for."""
  namespace: String = "healthie"
}

"""Autogenerated return type of resetPassword."""
type resetPasswordPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of restoreVersions"""
input restoreVersionsInput {
  """The PaperTrail::HealthieVersion ID"""
  version_id: ID!
}

"""Autogenerated return type of restoreVersions."""
type restoreVersionsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of resyncRupaLabOrders"""
input resyncRupaLabOrdersInput {
  """DO NOT USE"""
  clientMutationId: String
}

"""Autogenerated return type of resyncRupaLabOrders."""
type resyncRupaLabOrdersPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success: Boolean
}

"""Autogenerated input type of revokeToken"""
input revokeTokenInput {
  """DO NOT USE"""
  clientMutationId: String
}

"""Autogenerated return type of revokeToken."""
type revokeTokenPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of runEligibilityCheckMutation"""
input runEligibilityCheckMutationInput {
  """The ID of the policy to check"""
  id: ID

  """An array of service type codes to check benefits for."""
  service_codes: [String] = ["30"]

  """
  The service to use to run the eligiblity check. Service needs to be pre-enabled. Current options: [claim_md, change_health]
  """
  eligibility_check_service: EligibilityCheckService = change_health
}

"""Autogenerated return type of runEligibilityCheckMutation."""
type runEligibilityCheckMutationPayload {
  """DEPRECATED. The result of the ChangeHealth elgibility check."""
  claim_eligibility_check: ClaimEligibilityCheck

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The result of the elgibility check."""
  eligibility_check: EligibilityCheck

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of sendCarePlanEmail"""
input sendCarePlanEmailInput {
  id: ID
  patient_id: ID
}

"""Autogenerated return type of sendCarePlanEmail."""
type sendCarePlanEmailPayload {
  carePlan: CarePlan

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of sendTestWebhook"""
input sendTestWebhookInput {
  """The ID of the webhook"""
  id: ID!
}

"""Autogenerated return type of sendTestWebhook."""
type sendTestWebhookPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  sent: Boolean!
}

"""Autogenerated input type of shareAnswersAsDocument"""
input shareAnswersAsDocumentInput {
  answers: String
  email_notification: Boolean
  form_answer_group_id: ID
  letterhead: Boolean
  name: String
  user_id: ID
}

"""Autogenerated return type of shareAnswersAsDocument."""
type shareAnswersAsDocumentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  document: Document

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of shareCourse"""
input shareCourseInput {
  course_share_recipient: String
  id: ID
}

"""Autogenerated return type of shareCourse."""
type shareCoursePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  course: Course

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of shareCustomModuleForm"""
input shareCustomModuleFormInput {
  form_share_recipient: String
  id: ID

  """(DEPRECATED) Does nothing. Permissions are always checked"""
  validate_permissions: Boolean = false
}

"""Autogenerated return type of shareCustomModuleForm."""
type shareCustomModuleFormPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customModuleForm: CustomModuleForm

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of signIn"""
input signInInput {
  """User email"""
  email: String

  """Username"""
  username: String

  """
  When true, an additional API key will be generated (versus replacing the old one)
  """
  allow_multiple_api_keys: Boolean = false

  """
  When true, an API key will be returned, versus a session token. This replaces an existing key.
  """
  generate_api_token: Boolean = false

  """
  The authentication namespace to sign into. Whitelabels can have their own separated auth namespace.
  """
  namespace: String = "healthie"

  """Password"""
  password: String

  """Reset Token"""
  reset_token: String

  """Timezone of user"""
  timezone: String

  """API Token"""
  token: String
}

"""Autogenerated return type of signIn."""
type signInPayload {
  """API Key created"""
  api_key: String

  """Blocked by 2fa status"""
  blocked_by_2fa: Boolean

  """2fa challenge type"""
  blocked_by_2fa_type: MfaType

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """Token returned for authorization"""
  token: String

  """User info"""
  user: User
}

"""Autogenerated input type of signUp"""
input signUpInput {
  """
  The ID of the provider to create a patient for. Required if signing up as a patient and invite_code is not present
  """
  dietitian_id: String
  email: String
  exploring_healthie_reason: String
  exploring_healthie_reason_other: String
  first_name: String
  first_url: String

  """Required if signing up as a patient and dietitian_id is not present"""
  invite_code: String
  last_name: String
  legal_name: String
  password: String
  phone_number: String
  provider_type: String

  """Affliate id used for conversion tracking"""
  ps_xid: String

  """The unique identifier of the Partner in Partnerstack"""
  ps_partner_key: String

  """
  'patient' to create a patient, 'dietitian' to create a staff member or provider
  """
  role: String

  """timezone from TZ database names in IANA Timezone list"""
  timezone: String
}

"""Autogenerated return type of signUp."""
type signUpPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  initialMessage: String

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  nextRequiredStep: String
  token: String
  user: User
  whitelabelSetting: WhitelabelSetting
}

"""Autogenerated input type of toggleCarePlanStatusForSpecificUser"""
input toggleCarePlanStatusForSpecificUserInput {
  activate: Boolean!
  id: ID
  patient_id: ID
}

"""Autogenerated return type of toggleCarePlanStatusForSpecificUser."""
type toggleCarePlanStatusForSpecificUserPayload {
  carePlan: CarePlan

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of unblockIpAddress"""
input unblockIpAddressInput {
  """ID of User"""
  user_id: ID!

  """Ip address to unblock"""
  ip_address: String!
}

"""Autogenerated return type of unblockIpAddress."""
type unblockIpAddressPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """Status"""
  success_string: String
}

"""Autogenerated input type of unlockChartingNote"""
input unlockChartingNoteInput {
  """The ID of the FormAnswerGroup to be unlocked"""
  fang_id: ID!
}

"""Autogenerated return type of unlockChartingNote."""
type unlockChartingNotePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of unsubscribeFromNotification"""
input unsubscribeFromNotificationInput {
  notification_setting_uuid: String
  type_of_notification: String
  user_id: String
}

"""Autogenerated return type of unsubscribeFromNotification."""
type unsubscribeFromNotificationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  notificationSettingUpdated: Boolean
}

"""Autogenerated input type of updateAddendum"""
input updateAddendumInput {
  content: String
  form_answer_group_id: ID
  id: ID
}

"""Autogenerated return type of updateAddendum."""
type updateAddendumPayload {
  addendum: ChartingNoteAddendumType

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateAllergySensitivity"""
input updateAllergySensitivityInput {
  category: String
  category_type: String
  custom_name: String
  custom_reaction: String
  id: String
  name: String

  """The date of onset_date"""
  onset_date: String
  reaction: String

  """The type of reaction. Options are [allergy, adverse_reaction]"""
  reaction_type: String
  severity: String

  """Options are [active, inactive, resolved]. Defaults to active"""
  status: String
  user_id: String
}

"""Autogenerated return type of updateAllergySensitivity."""
type updateAllergySensitivityPayload {
  allergy_sensitivity: AllergySensitivity

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  duplicate_allergy: AllergySensitivity

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateAnnouncement"""
input updateAnnouncementInput {
  active: Boolean
  announcement_image: AnnouncementImageUpload
  delete_image: Boolean
  description: String
  id: ID
  name: String
  title: String
  user_group_ids: String
}

"""Autogenerated return type of updateAnnouncement."""
type updateAnnouncementPayload {
  announcement: Announcement

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateAppleHealth"""
input updateAppleHealthInput {
  is_enabled: Boolean
  last_sync_date: String
}

"""Autogenerated return type of updateAppleHealth."""
type updateAppleHealthPayload {
  apple_health: AppleHealth

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateAppointmentInclusion"""
input updateAppointmentInclusionInput {
  """
  Indicate whether a group appointment attendee have taken part in the appointment
  """
  attended: Boolean

  """Indicate if a group appointment attendee cancelled the appointment"""
  cancelled: Boolean

  """
  Indicate if a group appointment attendee has confirmed. For 1:1 appointments, use client_confirmed on Appointment object
  """
  confirmed: Boolean
  id: ID
}

"""Autogenerated return type of updateAppointmentInclusion."""
type updateAppointmentInclusionPayload {
  appointment_inclusion: AppointmentInclusionType

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateAppointment"""
input updateAppointmentInput {
  actual_duration: String
  appointment_inclusion_uuid: ID
  appointment_location_id: String
  appointment_type_id: String
  attended_clients: [AttendedClientsInput]
  attendee_ids: String
  client_confirmed: Boolean
  client_updating: Boolean
  confirmed: Boolean
  contact_type: String

  """Cpt code associated with this appointment"""
  cpt_code_id: ID
  date: String

  """
  Timestamp in YYYY-MM-DD HH:MM:SS or ISO8601 format, supercedes date, time params.
  """
  datetime: String
  end_date: String
  end_time: String

  """
  When passed in, this video chat URL will be used instead of built-in Video Chat or Zoom
  """
  external_videochat_url: String
  id: ID
  insurance_billing_enabled: Boolean
  is_blocker: Boolean
  is_zoom_chat: Boolean

  """The late cancellation fee in cents"""
  late_cancellation_fee: Int
  location: String
  max_attendees: String

  """a serialized JSON string of metadata"""
  metadata: JSON

  """The no show fee in cents"""
  no_show_fee: Int
  notes: String
  other_party_id: String
  pm_status: String

  """The price associated with this appointment"""
  price: String
  providers: String
  recurring_appointment: RecurringAppointmentInput
  room_id: String
  time: String

  """
  Timezone to use for date and time fields. Overrides the timezone of the current user
  """
  timezone: String

  """Units to use as a multiplier for appointment price"""
  units: String
  updateRecurring: Boolean
  user_id: String
}

"""Autogenerated return type of updateAppointment."""
type updateAppointmentPayload {
  appointment: Appointment

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateAppointmentSetting"""
input updateAppointmentSettingInput {
  advance_pricing_options: String
  allow_appointment_type_pricing: Boolean
  allow_clients_to_cancel_appt: Boolean
  allow_clients_to_reschedule_appt: Boolean
  allow_external_videochat_urls: Boolean
  always_send_confirm_notification: Boolean
  appointment_locations: [AppointmentLocationInput]
  appt_type_confirmed_email: Boolean
  appt_type_reminder_email: Boolean
  appt_type_website_booking_email: Boolean
  ask_clients_to_confirm: Boolean
  ask_to_confirm_via_text: Boolean
  auto_create_cms1500: Boolean
  auto_schedule_charges_for_late_cancellation_no_show: Boolean
  auto_submit_cms1500: Boolean
  auto_invoicing: Boolean
  booking_interval_restriction: Int
  buffer: String
  calendar_color_schemes: [CalendarColorSchemeInput]
  calendar_interval: String
  charge_for_occured_appts: Boolean
  client_should_call_provider: Boolean
  clients_have_billing: Boolean
  confirm_by_default: Boolean
  contact_type_overrides: [ContactTypeOverrideInput]
  default_appt_form_to_group: Boolean
  default_charting_template_id: String
  default_group_charting_template_id: ID
  default_to_zoom: Boolean
  default_video_service: String
  disable_requested_form_notifications: Boolean
  end_time: String
  hide_insurance_getting_started_info: Boolean
  hide_link: Boolean
  id: ID
  insurance_eligibility_integration: Boolean
  invoice_clients_without_payment_method: Boolean

  """The late cancellation fee in cents"""
  late_cancellation_fee: Int
  max_days_in_future: String

  """
  Prevents the patient from canceling too close the appointment time. In minutes
  """
  minimum_advance_cancel_time: Int

  """
  Prevents the patient from rescheduling too close the appointment time. In minutes
  """
  minimum_advance_reschedule_time: Int

  """
  Prevents the patient from scheduling too close to the desired appointment time. In minutes
  """
  minimum_advance_schedule_time: Int

  """The no show fee in cents"""
  no_show_fee: Int
  prevent_client_booking: Boolean
  prevent_no_credit_booking: Boolean
  reply_to_provider: Boolean
  restore_credit_on_cancel: Boolean
  same_day_appointments: Boolean
  send_appointment_cancellation_email: Boolean
  send_appointment_update_email: Boolean
  send_booking_notice: Boolean
  send_email_before_appointment: Boolean
  send_intake_forms_reminder: Boolean
  send_push_before_appointment: Boolean
  send_reminder_four_days_before: Boolean
  send_reminder_one_day_before: Boolean
  send_reminder_one_hour_before: Boolean
  send_reminder_three_days_before: Boolean
  send_reminder_two_days_before: Boolean
  send_reminder_two_hours_before: Boolean
  send_text_reminder_four_days_before: Boolean
  send_text_reminder_one_day_before: Boolean
  send_text_reminder_one_hour_before: Boolean
  send_text_reminder_three_days_before: Boolean
  send_text_reminder_two_days_before: Boolean
  send_text_reminder_two_hours_before: Boolean

  """
  NOTE: Your organization MUST have its own Twilio account configured to have this feature, and have AppointmentSetting.send_email_before_appointment enabled
  """
  send_text_reminder_five_minutes_before: Boolean
  set_default_videochat_url: Boolean
  show_care_plans: Boolean
  show_cms1500s: Boolean
  show_faxes: Boolean
  show_insurance_authorization: Boolean
  show_office_ally: Boolean
  show_superbills: Boolean
  start_time: String

  """Allows times to be grouped by appointment type."""
  times_by_appointment_type: Boolean

  """Allows times to be grouped by contact type."""
  times_by_contact_type: Boolean

  """Allows times to be grouped by location."""
  times_by_location: Boolean
  use_appointment_type_cpt_units_and_fees: Boolean
  use_client_credit_system: Boolean
  use_client_sources: Boolean
  use_zoom_waiting_room: Boolean
  user_id: String
  video_url_default: VideoUrlDefaultInput
}

"""Autogenerated return type of updateAppointmentSetting."""
type updateAppointmentSettingPayload {
  appointmentSetting: AppointmentSetting

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateAppointmentTypeCptCode"""
input updateAppointmentTypeCptCodeInput {
  appointment_type_id: ID
  cpt_code_id: ID
  id: ID
  units: String
  fee_per_unit: Int
}

"""Autogenerated return type of updateAppointmentTypeCptCode."""
type updateAppointmentTypeCptCodePayload {
  appointment_type_cpt_code: AppointmentTypeCptCodeType

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateAppointmentType"""
input updateAppointmentTypeInput {
  appointment_setting: AppointmentTypeAppointmentSettingInput
  appointment_type_cpt_code: AppointmentTypeCptCode
  auto_increase_charge_for_actual_duration: Boolean
  bookable_by_groups: Boolean
  bookable_group_ids: String
  bookable_without_group: Boolean

  """
  When set, will be used as the appointment type name shown to clients in the client booking widget UI.
  """
  client_facing_display_name: String

  """
  When false, clients will not have the ability to self-book this appointment
  """
  clients_can_book: Boolean
  contact_type_override_in_person: ContactTypeOverride
  contact_type_override_phone_call: ContactTypeOverride
  contact_type_override_video_chat: ContactTypeOverride

  """
  If the provider's organization has this feature, setting this will customize the content of SMS reminder's Healthie sends.
  """
  custom_text_reminder_body: String

  """
  When true, the client will not be asked to add a reason when booking an appointment of this type
  """
  dont_ask_for_reason: Boolean
  embed_question_form_id: String
  form_requests_before_appointment: [AppointmentTypeFormConnectionInput]
  form_requests_after_appointment: [AppointmentTypeFormConnectionInput]
  form_requests_after_appointment_booking: [AppointmentTypeFormConnectionInput]
  has_specific_appointment_settings: Boolean
  id: ID

  """Whether or not insurance billing is enabled for an appointment type"""
  insurance_billing_enabled: Boolean

  """
  When true, indicates that this appointment type is used for group appointments
  """
  is_group: Boolean
  is_waitlist_enabled: Boolean

  """The length of the appointment type in minutes"""
  length: Int

  """Metadata for an appointment type. Maximum character limit of 128,000."""
  metadata: String

  """The name of the appointment type"""
  name: String
  pricing: String

  """Available options are CUSTOM and CPT_CODE"""
  pricing_option: String
  provider_ids_for_appt_type_connections: String
  room_ids_for_appt_type_connections: String
  require_in_state_clients: Boolean
  require_specific_providers: Boolean
  row_order: Int
  specific_groups: Boolean
  user_group_id: String
}

"""Autogenerated return type of updateAppointmentType."""
type updateAppointmentTypePayload {
  appointmentType: AppointmentType

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateAutoTaskGenerator"""
input updateAutoTaskGeneratorInput {
  category: String
  days_due_from_created_at: Int
  id: ID
  is_enabled: Boolean
  number_description: String
  number_to_check: String
  task_description: String
  user_id_for_task: String
}

"""Autogenerated return type of updateAutoTaskGenerator."""
type updateAutoTaskGeneratorPayload {
  auto_task_generator: AutoTaskGenerator

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateAutomatedInsuranceBillingSetting"""
input updateAutomatedInsuranceBillingSettingInput {
  auto_create_cms1500s: Boolean
  auto_submit_cms1500s: Boolean
  id: ID
  use_cpt_codes_units_and_fees_with_appointment_types: Boolean
}

"""Autogenerated return type of updateAutomatedInsuranceBillingSetting."""
type updateAutomatedInsuranceBillingSettingPayload {
  automated_insurance_billing_setting: AutomatedInsuranceBillingSetting

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateAutoscoring"""
input updateAutoscoringInput {
  """ID of the form being edited"""
  form_id: ID!

  """List of form modules to add to a subtotal"""
  module_ids: [ID]

  """If the form or section update enables or disables autoscoring"""
  section_autoscoring: Boolean

  """ID of the sections being edited"""
  section_ids: [ID]

  """Label that a scoring section is to be updated to"""
  updated_label: String
}

"""Autogenerated return type of updateAutoscoring."""
type updateAutoscoringPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of updateBillingItem"""
input updateBillingItemInput {
  amount_paid: String
  chosen_refund_amount: String
  created_at: String
  id: ID
  is_canceled: Boolean
  is_paused: Boolean
  new_payment_date: String
  note: String
  payment_medium: String
  recipient_id: ID
  resend_payment: Boolean
  resend_receipt: Boolean
  sender_id: ID
  stripe_idempotency_key: String
}

"""Autogenerated return type of updateBillingItem."""
type updateBillingItemPayload {
  billingItem: BillingItem

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateBrand"""
input updateBrandInput {
  about_description: String
  bg_color: String
  brand_email: String
  brand_name: String
  brand_phone: String
  contact_description: String
  custom_sign_in_path: String
  display_embed_title: Boolean
  display_name: String
  display_package_image: Boolean
  email_background_color: String
  embed_primary_color: String
  facebook: String
  font_color: String
  id: ID
  instagram: String
  logo: Upload
  selected_color: String
  slogan: String
  tab_accent_color: String
  titles: String
  twitter: String
  website: String
}

"""Autogenerated return type of updateBrand."""
type updateBrandPayload {
  brand: Brand

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateByTemplate"""
input updateByTemplateInput {
  care_plan_id: ID
  care_plan_template_id: ID
}

"""Autogenerated return type of updateByTemplate."""
type updateByTemplatePayload {
  care_plan: CarePlanConnection

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateCalendarViewSetting"""
input updateCalendarViewSettingInput {
  appointment_status_filter: String
  appointment_statuses_filter: [String]
  appointment_type_filter: ID
  appointment_types_filter: [ID]
  availability_contact_type_filter: String
  availability_location_filter: ID
  availability_provider_filter: ID
  availablilty_appt_type_filter: ID
  availability_appointment_types_filter: [ID]
  calendar_color_scheme_filter: ID
  calendar_view_filter: String
  client_confirmation_status: String
  document_area_sorting: String
  contact_types_filter: String
  expand_color_schemes: Boolean
  expand_filter_appointments: Boolean
  expand_filter_availabilities: Boolean
  expand_filter_by_providers: Boolean
  expand_filter_providers: Boolean
  expand_show_availabilities: Boolean
  id: ID
  location_filter: ID
  locations_filter: [ID]
  one_time_availabilities: Boolean
  org_calendar_view_filter: String
  provider_confirmation_status: String
  selected_availability_provider_filter: ID
  selected_availability_providers_filter: String
  selected_provider_filter: ID
  selected_providers_filter: String
  show_appointments: Boolean
  show_availabilities: Boolean
  show_synced_appointments: Boolean
  timezone: String
  weekly_availabilities: Boolean
}

"""Autogenerated return type of updateCalendarViewSetting."""
type updateCalendarViewSettingPayload {
  calendar_view_setting: CalendarViewSetting

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateCampaign"""
input updateCampaignInput {
  """Text displayed in button below email body"""
  button_text: String

  """URL in email button below email body"""
  button_url: String

  """Text displayed in email body"""
  email_body: String

  """
  Text displayed before client name (example: 'Hello <client_name>', 'Greetings <client_name>', ....)
  """
  email_greeting: String
  email_subject: String
  id: ID

  """Image shown above email body"""
  image: Upload
  include_archived_clients: Boolean
  is_draft: Boolean = true
  is_email: Boolean
  is_sms: Boolean
  name: String

  """
  comma-separated example: "user-12, group-23, tag-34"
  """
  recipient_ids: String

  """If true, campaign emails and sms will be sent after mutation"""
  send_campaign: Boolean

  """SMS text content"""
  sms_body: String
  user_id: ID
}

"""Autogenerated return type of updateCampaign."""
type updateCampaignPayload {
  campaign: Campaign

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateCarePlan"""
input updateCarePlanInput {
  description: String
  doc_id: ID
  from_template: Boolean
  id: ID
  is_creating: Boolean
  is_hidden: Boolean
  is_managing_templates: Boolean = false
  is_template: Boolean
  is_updating: Boolean
  name: String
  new_patient_id: ID
  user_group_id: ID
}

"""Autogenerated return type of updateCarePlan."""
type updateCarePlanPayload {
  carePlan: CarePlan

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateChangeHealthAccount"""
input updateChangeHealthAccountInput {
  """
  Update the stored password for the ChangeHealthAccount  in Healthie. Note this does not affect the password of the account with Change
  """
  password: String
}

"""Autogenerated return type of updateChangeHealthAccount."""
type updateChangeHealthAccountPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of updateChargeBack"""
input updateChargeBackInput {
  charge_back_evidence: ChargeBackEvidenceInput

  """
  When true, the evidence will be submitted immediately. Evidence can only be submitted once
  """
  final_submission: Boolean = false
  id: ID
}

"""Autogenerated return type of updateChargeBack."""
type updateChargeBackPayload {
  charge_back: ChargeBack

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateChatSetting"""
input updateChatSettingInput {
  auto_welcome_text: String
  content: String
  end_date: String
  id: ID
  is_active: Boolean
  is_recurring_active: Boolean
  no_end_date: Boolean
  receive_notifications: Boolean
  receive_notifications_recurring: Boolean
  recurring_content: String
  recurring_days_data: RecurringDaysInputObjectType
  recurring_turned_on: Boolean
  scheduled_turned_on: Boolean
  send_auto_welcome: Boolean
  start_date: String
  user_id: String
}

"""Autogenerated return type of updateChatSetting."""
type updateChatSettingPayload {
  chatSetting: ChatSetting

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateClient"""
input updateClientInput {
  active: Boolean
  activity_level: String
  additional_phone_number: String
  additional_record_identifier: String
  advance_appointment_prices: [AdvanceAppointmentPriceInput]
  appointment_type_credits_attributes: [AppointmentTypeCreditInput]
  auto_charge_enabled: Boolean
  client_source: ClientSourceInput
  current_email: String
  diagnoses: [DiagnosesInput]
  dietitian_id: String
  dob: String
  email: String
  first_name: String
  for_changing_groups: Boolean
  gender: String
  gender_identity: String
  gender_identity_code: String
  height: String

  """
  The default Dosespot Clinic ID to use for a patient. Commonly nil, in which case the provider's default is used
  """
  default_dosespot_clinic_id: String
  id: ID
  is_intake_item: Boolean
  last_name: String
  legal_name: String
  location: ClientLocationInput
  locations: [ClientLocationInput]

  """a serialized JSON string of metadata, maximum length of 128,000"""
  metadata: String
  other_provider_ids: [String]
  password: String
  phone_number: String
  policies: [ClientPolicyInput]
  preferred_language_code: String
  primary_ethnicity_code: String
  primary_race_code: String
  pronouns: String
  quick_notes: String
  record_identifier: String
  referrals: [ReferralInput]
  remove_card_on_file: Boolean
  requested_form_completion_id: String
  resend_welcome: Boolean
  secondary_ethnicity_code: String
  secondary_race_code: String
  send_form_request_reminder: Boolean
  sex: String
  sexual_orientation_code: String
  sexual_orientation_other: String
  skipped_email: Boolean
  timezone: String

  """Token for credit card, created by Stripe.JS"""
  token: String
  user_group_id: String
}

"""Autogenerated return type of updateClient."""
type updateClientPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user: User
}

"""Autogenerated input type of updateCms1500"""
input updateCms1500Input {
  accept_assignment: Boolean
  additional_text: String
  adjustment: String
  amount_paid: String
  amount_reimbursed: String
  client_responsibility_removed: Boolean
  client_sig_on_file: Boolean
  cms1500_policies: [Cms1500PolicyInput]
  copay: String
  copay_still_owed: String
  cpt_codes_cms1500s: [CptCodesCms1500Input]
  dietitian: DietitianInput
  dietitian_id: String
  form_answer_group_id: ID
  icd_codes_cms1500s: [IcdCodesCms1500Input]
  id: ID
  include_referrer_information: Boolean
  insured_sig_on_file: Boolean
  nineteen_reserved: String
  organization_info: OrganizationInfoInput
  organization_info_id: String
  orig_ref_number: String
  patient: PatientInput
  patient_account_num: String
  referral_info: ReferralInfoInput
  reimbursed_at: String
  rendering_provider_other_id: String
  rendering_provider_other_id_number: OtherIdNumberInput
  resubmission_code: String
  service_location_id: String
  status: String
  tend_reserved: String
  use_indiv_npi: Boolean
}

"""Autogenerated return type of updateCms1500."""
type updateCms1500Payload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  cms1500: Cms1500

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateCognitiveStatus"""
input updateCognitiveStatusInput {
  cognitive_status: String
  id: ID
  start_date: String
}

"""Autogenerated return type of updateCognitiveStatus."""
type updateCognitiveStatusPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  cognitive_status: CognitiveStatus

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateConversation"""
input updateConversationInput {
  """The ID of a user closing the conversation"""
  closed_by_id: ID

  """
  If TRUE, next time a PRovider closes a conversation will not see the warning pop-up about closing the conversation
  """
  hide_close_confirmation: Boolean
  id: ID
  name: String

  """
  The value of the select all toggle. This overrides simple_added_users and allows you to easily add all of a category to the conversation. Requires simple_added_users to be sent in as well
  """
  select_all_status: String
  simple_added_users: String
}

"""Autogenerated input type of updateConversationMembership"""
input updateConversationMembershipInput {
  archived: Boolean
  id: ID
  viewed: Boolean
}

"""Autogenerated return type of updateConversationMembership."""
type updateConversationMembershipPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  conversation_membership: ConversationMembership

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated return type of updateConversation."""
type updateConversationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  conversation: Conversation

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateCourseGroup"""
input updateCourseGroupInput {
  id: ID
  start_at: String
}

"""Autogenerated return type of updateCourseGroup."""
type updateCourseGroupPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  courseGroup: CourseGroup

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateCourse"""
input updateCourseInput {
  course_members: [CourseMembersInput]
  course_type: String
  description: String
  external_preview_image_url: String
  formatted_benefits: String
  id: String
  late_enroll: Boolean
  name: String
  preview_image: Upload
  preview_video_content: String
  start_at: String
  start_date: String
  start_on_group_assignment: Boolean
}

"""Autogenerated input type of updateCourseItem"""
input updateCourseItemInput {
  completion_required_for_next_module: Boolean
  course_id: String
  id: String
  item_id: String
  item_type: String
  name: String
  position: Int
  scheduled_release: String
  user_id: String
  video_url: String
}

"""Autogenerated return type of updateCourseItem."""
type updateCourseItemPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  courseItem: CourseItem

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateCourseMembership"""
input updateCourseMembershipInput {
  id: ID

  """
  Defaults to false. When passed in as true, other updates (like updating start_at) are ignored.
  """
  send_nudge: Boolean
  start_at: String
}

"""Autogenerated return type of updateCourseMembership."""
type updateCourseMembershipPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  courseMembership: CourseMembership

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated return type of updateCourse."""
type updateCoursePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  course: Course

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateCustomEmail"""
input updateCustomEmailInput {
  email_type: String
  greeting: String
  id: ID
  message_body: String
  reactivation_wait_days: String
  subject: String
}

"""Autogenerated return type of updateCustomEmail."""
type updateCustomEmailPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customEmail: CustomEmail

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateCustomFood"""
input updateCustomFoodInput {
  id: ID
  user_id: String
  name: String
  nutrients: NutrientsInput
  serving_size: ServingSizeInput
}

"""Autogenerated return type of updateCustomFood."""
type updateCustomFoodPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customFood: Food

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateCustomModuleForm"""
input updateCustomModuleFormInput {
  external_id: String
  external_id_type: String
  id: ID
  is_archived: Boolean
  is_video: Boolean

  """Maximum character limit of 10,000."""
  metadata: String
  name: String
  on_completion_ifs_tag_id: String
  prefill: Boolean
  use_for_charting: Boolean
  use_for_program: Boolean
}

"""Autogenerated return type of updateCustomModuleForm."""
type updateCustomModuleFormPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customModuleForm: CustomModuleForm

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateCustomModule"""
input updateCustomModuleInput {
  custom_module_condition: CustomModuleConditionInput
  external_id: String
  external_id_type: String
  id: ID
  index: Int
  is_custom: Boolean
  label: String

  """
  A serialized JSON string of metadata. Maximum character limit of 128,000.
  """
  metadata: String
  mod_type: String
  options: String
  options_array: [String]
  parent_custom_module_id: Int
  required: Boolean
  sublabel: String
}

"""Autogenerated return type of updateCustomModule."""
type updateCustomModulePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  customModule: CustomModule

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateCustomNavItems"""
input updateCustomNavItemsInput {
  """Custom Sidebar Override Brand ID"""
  brand_id: ID!

  """Custom Sidebar Override ID"""
  custom_nav_item_id: ID!

  """Custom Nav Item Params"""
  update_custom_nav_item_params: UpdateCustomNavItemInputs!
}

"""Autogenerated return type of updateCustomNavItems."""
type updateCustomNavItemsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success message"""
  success_string: String
}

"""Autogenerated input type of updateDocument"""
input updateDocumentInput {
  care_plan_id: ID
  description: String
  display_name: String
  email_on_welcome: Boolean
  folder_id: String
  id: ID
  include_in_charting: Boolean
  internal_notes: String

  """Metadata for an document type. Maximum character limit of 128,000."""
  metadata: String
  parse_ccda: Boolean
  rel_user_id: ID

  """A comma-separated list of doc_share_ids"""
  share_users: String
  share_with_rel: Boolean
  shared_on_welcome: Boolean
  shared_with_dietitians: Boolean
}

"""Autogenerated return type of updateDocument."""
type updateDocumentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  document: Document

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateDsiComment"""
input updateDsiCommentInput {
  content: String!
  intervention_type: InterventionType!
}

"""Autogenerated return type of updateDsiComment."""
type updateDsiCommentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  dsi_comment: DsiComment

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateEntry"""
input updateEntryInput {
  category: String
  created_at: String
  description: String
  ed_posthunger: String
  ed_prehunger: String
  emotions: String
  food_items: String
  hide_from_main_feed: Boolean
  id: ID
  image: Upload
  image_string: String
  meal_ids: String
  meal_name: String
  metric_stat: String
  other_symptom: String
  percieved_hungriness: String
  reflection: String
  subentries: [SubentryInput]
  symptoms: String

  """Options are apple_health, google_fit, or fitbit"""
  third_party_source: String
  user_id: String
  viewed: Boolean
}

"""Autogenerated return type of updateEntry."""
type updateEntryPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  entry: Entry

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateExternalCalendar"""
input updateExternalCalendarInput {
  add_to_calendar: Boolean
  id: ID
  pull_from_calendar: Boolean
  pull_in_event_details: Boolean
  pulled_in_calendars: [String]
}

"""Autogenerated return type of updateExternalCalendar."""
type updateExternalCalendarPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  external_calendar: ExternalCalendar

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateFamilyHistory"""
input updateFamilyHistoryInput {
  relationships: [String]
  concept_id: String
  user_id: ID
  id: ID
}

"""Autogenerated return type of updateFamilyHistory."""
type updateFamilyHistoryPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  duplicate_family_history_condition: FamilyHistoryCondition
  family_history_condition: FamilyHistoryCondition

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateFaxAcctInfo"""
input updateFaxAcctInfoInput {
  aes_key: String
  api_key: String
  fax_number: String
  user_id: ID
  username: String
}

"""Autogenerated return type of updateFaxAcctInfo."""
type updateFaxAcctInfoPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of updateFeatureToggle"""
input updateFeatureToggleInput {
  allow_apple_health_sync: Boolean
  allow_clearstep_sync: Boolean
  allow_community_chat: Boolean
  allow_direct_chat: Boolean
  allow_fitbit_sync: Boolean
  allow_google_fit_sync: Boolean
  allow_shapa_sync: Boolean
  allow_withings_sync: Boolean
  apply_eating_disorder_default: Boolean
  can_schedule_appointments: Boolean
  can_track_poop: Boolean
  can_track_symptoms: Boolean
  can_track_water_intake: Boolean
  can_view_care_plan: Boolean
  can_view_documents: Boolean
  can_view_forms: Boolean
  can_view_goals: Boolean
  can_view_journal_entries: Boolean
  can_view_packages: Boolean
  can_view_payments: Boolean
  can_view_programs: Boolean
  custom_metric_overrides: [CustomMetricOverridesInput]
  custom_metrics: [CustomMetricInput]
  date_range_preference: String
  default_water_intake: String
  do_not_auto_submit_cms1500: Boolean
  email_notification_frequency: String
  id: ID
  last_journal_from_date: String
  last_journal_to_date: String
  push_notification_frequency: String
  send_unpaid_invoice_reminder: Boolean
  seperate_provider_metric_from_client: Boolean
  show_a1c_metric: Boolean
  show_bf_percent_metric: Boolean
  show_blood_pressure_metric: Boolean
  show_blood_sugar_metric: Boolean
  show_bmi_graph: Boolean
  show_bmi_growth_chart: Boolean
  show_bmr_metric: Boolean
  show_body_temperature_metric: Boolean
  show_client_a1c_metric: Boolean
  show_client_bf_percent_metric: Boolean
  show_client_blood_pressure_metric: Boolean
  show_client_blood_sugar_metric: Boolean
  show_client_bmi_graph: Boolean
  show_client_bmi_growth_chart: Boolean
  show_client_bmr_metric: Boolean
  show_client_body_temperature_metric: Boolean
  show_client_harris_benedict: Boolean
  show_client_height_growth_chart: Boolean
  show_client_ox_sat_metric: Boolean
  show_client_waist_circumference_metric: Boolean
  show_client_weight_growth_chart: Boolean
  show_client_weight_metric: Boolean
  show_ed_posthunger: Boolean
  show_ed_prehunger: Boolean
  show_food: Boolean
  show_food_category: Boolean
  show_food_emotion: Boolean
  show_food_reflection: Boolean
  show_harris_benedict: Boolean
  show_healthiness: Boolean
  show_height_graph: Boolean
  show_height_growth_chart: Boolean
  show_metric: Boolean
  show_mirror: Boolean
  show_normal_hunger: Boolean
  show_note: Boolean
  show_note_emotion: Boolean
  show_nutrients_tracking: Boolean
  show_ox_sat_metric: Boolean
  show_waist_circumference_metric: Boolean
  show_weight_growth_chart: Boolean
  show_weight_metric: Boolean
  show_workout: Boolean
  use_metric_system: Boolean
  user_id: ID
  view_not_track: Boolean
}

"""Autogenerated return type of updateFeatureToggle."""
type updateFeatureTogglePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  feature_toggle: FeatureToggle

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateFitbit"""
input updateFitbitInput {
  access_token: String
  expires_at: String
  id: ID
  last_sync_date: String
  refresh_token: String
  user_id: ID
}

"""Autogenerated return type of updateFitbit."""
type updateFitbitPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  fitbit: Fitbit

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateFolder"""
input updateFolderInput {
  email_on_welcome: Boolean
  folder_id: String
  id: ID
  name: String
  share_users: String
  share_with_rel: Boolean
  shared_on_welcome: Boolean
  shared_with_dietitians: Boolean
}

"""Autogenerated return type of updateFolder."""
type updateFolderPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  folder: Folder

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateFormAnswerGroup"""
input updateFormAnswerGroupInput {
  course_item_id: ID
  date: String
  external_id: String
  finished: Boolean
  form_answers: [FormAnswerInput]
  formatted_date: String
  id: ID
  individual_client_notes: [IndividualClientNoteInput]
  marked_complete: Boolean
  marked_locked: Boolean

  """Maximum character limit of 128,000."""
  metadata: String
  name: String

  """
  Format ex.: "11 30"
  """
  time: String

  """The associated appointment (if any)"""
  appointment_id: ID

  """Used to track changes in `form_answers`"""
  tab_uuid: UUID
}

"""Autogenerated return type of updateFormAnswerGroup."""
type updateFormAnswerGroupPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  form_answer_group: FormAnswerGroup

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateFunctionalStatus"""
input updateFunctionalStatusInput {
  functional_condition: String
  id: ID
  start_date: String
}

"""Autogenerated return type of updateFunctionalStatus."""
type updateFunctionalStatusPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  functional_status: FunctionalStatus

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateGoal"""
input updateGoalInput {
  created_user_id: String
  description: String

  """The date the goal should end - format should be: yyyy-mm-dd"""
  due_date: String

  """If true, goal was submitted via the update form"""
  from_update_form: Boolean
  id: String
  name: String

  """If true, update goal for program"""
  program_goal: Boolean
  reminder: ReminderInput
  repeat: String

  """The id of goal template used to create this goal"""
  source_template_id: String

  """The date the goal should start - format should be: yyyy-mm-dd"""
  start_on: String
  subgoals: [SubgoalInput]

  """Title hyperlink. Opens when the name is clicked on."""
  title_link: String

  """If true, use this goal as a template(favorite)"""
  use_as_template: Boolean
  user_id: String
}

"""Autogenerated return type of updateGoal."""
type updateGoalPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  goal: Goal

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateGoogleFit"""
input updateGoogleFitInput {
  access_token: String
  expiry_date: String
  id: ID
  is_enabled: Boolean
  last_sync_date: String
  refresh_token: String
}

"""Autogenerated return type of updateGoogleFit."""
type updateGoogleFitPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  google_fit: GoogleFit

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateGroupCarePlan"""
input updateGroupCarePlanInput {
  id: ID
  is_active: Boolean
}

"""Autogenerated return type of updateGroupCarePlan."""
type updateGroupCarePlanPayload {
  carePlan: CarePlan

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateHealthConcern"""
input updateHealthConcernInput {
  code: String
  description: String
  display_name: String
  effective_time: String
  id: ID
}

"""Autogenerated return type of updateHealthConcern."""
type updateHealthConcernPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  health_concern: HealthConcern

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateHuman"""
input updateHumanInput {
  current_user_id: ID
  id: ID
}

"""Autogenerated return type of updateHuman."""
type updateHumanPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  human: Human

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateImmunization"""
input updateImmunizationInput {
  additional_notes: String
  cvx_code: Int
  id: ID
  received_at: String
  status: String
  user_id: ID
  vaccine_name: String
}

"""Autogenerated return type of updateImmunization."""
type updateImmunizationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  immunization: Immunization

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateImplantableDeviceUser"""
input updateImplantableDeviceUserInput {
  id: ID
  user_id: ID
  udi: String
  active: Boolean
  name: String
}

"""Autogenerated return type of updateImplantableDeviceUser."""
type updateImplantableDeviceUserPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  implantable_device_user: ImplantableDeviceUser

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateInsuranceAuthorization"""
input updateInsuranceAuthorizationInput {
  authorization_number: String
  end_on: String
  id: ID
  policy_id: String
  start_on: String
  unit_type: String
  units_authorized: String
  units_used: String
  visits_authorized: String
  visits_used: String
}

"""Autogenerated return type of updateInsuranceAuthorization."""
type updateInsuranceAuthorizationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  insuranceAuthorization: InsuranceAuthorizationType

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateInsurancePlan"""
input updateInsurancePlanInput {
  add_as_accepted_insurance_plan: Boolean
  id: ID
  payer_id: String
  payer_name: String
}

"""Autogenerated return type of updateInsurancePlan."""
type updateInsurancePlanPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  insurance_plan: InsurancePlan

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateLabOrder"""
input updateLabOrderInput {
  appt_confirmation_code: String
  force_appointment_reload: Boolean
  id: ID
  patient_id: ID
}

"""Autogenerated return type of updateLabOrder."""
type updateLabOrderPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  currentUserNotificationsCount: UserNotificationsCount
  lab_order: LabOrder

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateLocation"""
input updateLocationInput {
  city: String
  country: String
  id: String
  line1: String
  line2: String
  name: String
  npi: String
  other_id: String
  other_id_qual: String
  place_of_service_id: String
  state: String
  zip: String
}

"""Autogenerated return type of updateLocation."""
type updateLocationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  location: Location

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateMeal"""
input updateMealInput {
  id: ID
  user_id: String
  food_items: String
  name: String
}

"""Autogenerated return type of updateMeal."""
type updateMealPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  meal: Meal

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateMedication"""
input updateMedicationInput {
  active: Boolean
  code: String
  comment: String
  custom_name: String
  directions: String
  dosage: String
  end_date: String
  frequency: String
  id: ID
  name: String
  route: String
  start_date: String
}

"""Autogenerated return type of updateMedication."""
type updateMedicationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  medication: MedicationType

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateNote"""
input updateNoteInput {
  attached_audio: Upload
  attached_document: Upload
  attached_image: Upload
  attached_image_string: String
  content: String
  conversation_id: String
  id: ID
  scheduled_at: String
  user_id: String
}

"""Autogenerated return type of updateNote."""
type updateNotePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  note: Note
}

"""Autogenerated input type of updateNoteScheduler"""
input updateNoteSchedulerInput {
  id: ID
  participant_ids: String

  """
  The value of the select all toggle. This overrides participant_ids and allows you to easily add all of a category to the conversation. Requires participant_ids to be sent in as well
  """
  select_all_status: String
}

"""Autogenerated return type of updateNoteScheduler."""
type updateNoteSchedulerPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  noteScheduler: NoteScheduler
}

"""Autogenerated input type of updateNotificationContact"""
input updateNotificationContactInput {
  client_portal_access: Boolean
  client_portal_setting: ClientPortalSettingInput = null

  """Valid values: adult, minor"""
  contact_type: String
  copy_notifications: Boolean
  email: String
  emergency: Boolean
  first_name: String
  id: ID
  last_name: String
  phone_number: String

  """
  Valid values: caregiver, child, dependent, family_member, legal_guardian, is_parent, spouse, other
  """
  relationship: String
}

"""Autogenerated return type of updateNotificationContact."""
type updateNotificationContactPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  notificationContact: NotificationContact
}

"""Autogenerated input type of updateNotification"""
input updateNotificationInput {
  id: ID
  read: Boolean
  seen: Boolean
}

"""Autogenerated return type of updateNotification."""
type updateNotificationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  currentUser: User

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  notification: Notification
}

"""Autogenerated input type of updateNotificationSetting"""
input updateNotificationSettingInput {
  id: ID

  """An option of receiving pdates and special offers [email/sms]"""
  marketing_communcation_preference: String

  """Send an email when a course module is completed"""
  notification_on_module_completion: Boolean

  """Receive updates and special offers"""
  receive_updates_and_offers: Boolean
  send_comment_emails: Boolean

  """Get a push notification when there is a new comment"""
  send_comment_push: Boolean

  """Send an email when a client completes a program"""
  send_course_complete_email: Boolean

  """"""
  send_email_before_appointment: Boolean

  """"""
  send_email_on_appointment_book: Boolean

  """"""
  send_email_on_appointment_cancel: Boolean

  """Send an email to provider when client has been assigned"""
  send_email_on_client_has_been_assigned_to_you: Boolean

  """"""
  send_email_on_fax_delivery_failure: Boolean

  """"""
  send_email_on_fax_received: Boolean

  """"""
  send_email_on_intake_flow_complete: Boolean

  """"""
  send_email_on_intake_flow_item_complete: Boolean

  """"""
  send_email_on_intake_flow_start: Boolean

  """"""
  send_email_on_new_document: Boolean

  """"""
  send_email_on_new_folder: Boolean

  """Send an email when a client purchases a package"""
  send_email_on_package_purchase: Boolean

  """Get an email when a scheduled payment fails"""
  send_email_on_scheduled_payment_failed: Boolean

  """
  Send an email to primary account holder when subscription payment is made
  """
  send_email_receipt_for_subscription_payment: Boolean

  """Get an email when provider adds an emoji to a journal entry"""
  send_emoji_email: Boolean

  """Get a push notification when provider adds an emoji to a journal entry"""
  send_emoji_push: Boolean
  send_entry_emails: Boolean

  """Send an email to client when reminder to complete goal checked"""
  send_goal_reminder_email: Boolean

  """
  Send a push notification to client when reminder to complete goal checked
  """
  send_goal_reminder_push: Boolean

  """Get an email notification when there is a new message in a group chat"""
  send_group_message_emails: Boolean

  """Get a push notification when there is a new message in a group chat"""
  send_group_message_push: Boolean

  """
  When true, it will send an expiration notification to the provider when their client insurance is about to expire
  """
  send_insurance_expiry_notifications: Boolean
  send_message_emails: Boolean

  """Get a push notification when there is a new message"""
  send_message_push: Boolean
  send_new_clients_emails: Boolean

  """
  When true and client updated insurance via client form, the assigned provider will be notified
  """
  send_new_insurance_added_notifications: Boolean

  """Send an email to client when new program module is available"""
  send_new_module_email: Boolean

  """
  Send a push notification to client when new program module is available
  """
  send_new_module_push: Boolean

  """Get a push notification 5 minutes before the appointment"""
  send_push_before_appointment: Boolean
}

"""Autogenerated return type of updateNotificationSetting."""
type updateNotificationSettingPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  notificationSetting: NotificationSetting
}

"""Autogenerated input type of updateOffering"""
input updateOfferingInput {
  archived: Boolean
  billing_frequency: String
  can_be_gifted: Boolean
  charge_immediately: Boolean
  course_id: ID
  course_ids: String
  default_selection_image_url: String
  description: String
  embed_question_form_id: String
  first_time_payment: String
  has_first_payment: Boolean
  id: ID
  lab_option_ids: String
  living_plate_meal_plan_id: String
  max_purchases: String
  name: String
  offering_image: OfferingImageUpload
  offering_includes: [OfferingIncludesFields]
  offering_products: [OfferingProductInput]
  override_group_on_purchase: Boolean
  price: String
  repeat_times: String
  require_booking_purchase: Boolean
  row_order: Int
  selected_image_id: ID
  show_free_text: Boolean
  show_offering: Boolean
  user_group_id: ID
  user_group_ids: String
  user_id: ID
  video_url: String
  visibility_status: String
}

"""Autogenerated return type of updateOffering."""
type updateOfferingPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  offering: Offering
}

"""Autogenerated input type of updateOfficeallySftpAccount"""
input updateOfficeallySftpAccountInput {
  ftp_url: String
  id: ID
  is_enabled: Boolean
  password: String
  username: String
}

"""Autogenerated return type of updateOfficeallySftpAccount."""
type updateOfficeallySftpAccountPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  officeally_sftp_account: OfficeallySftpAccount
}

"""Autogenerated input type of updateOnboardingFlow"""
input updateOnboardingFlowInput {
  groups_to_use_onboarding_flow: String
  id: ID
  name: String
}

"""Autogenerated return type of updateOnboardingFlow."""
type updateOnboardingFlowPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  onboardingFlow: OnboardingFlow
}

"""Autogenerated input type of updateOnboardingItem"""
input updateOnboardingItemInput {
  billing_disclaimer: String
  id: ID
  is_skippable: Boolean
  item_id: String
  item_type: String
  onboarding_flow_id: String
  photo_id_disclaimer: String
  policy_disclaimer: String
  row_order: Int
  welcome_text: String
}

"""Autogenerated return type of updateOnboardingItem."""
type updateOnboardingItemPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  onboardingItem: OnboardingItem
}

"""Autogenerated input type of updateOrgOwner"""
input updateOrgOwnerInput {
  """The ID of the Org Member to Become Owner"""
  org_member_id: ID!

  """The ID of the Org Member to Become Owner"""
  current_owner_id: ID!

  """The ID of the Org to Become Owner"""
  org_id: ID!
}

"""Autogenerated return type of updateOrgOwner."""
type updateOrgOwnerPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]

  """The success string"""
  success_string: String
}

"""Autogenerated input type of updateOrganizationCptCode"""
input updateOrganizationCptCodeInput {
  cpt_code_id: ID
  id: ID
  organization_id: ID
  price_per_unit: String
}

"""Autogenerated return type of updateOrganizationCptCode."""
type updateOrganizationCptCodePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  organization_cpt_code: OrganizationCptCodeType
}

"""Autogenerated input type of updateOrganization"""
input updateOrganizationInput {
  id: ID

  """The email of organization"""
  organization_email: String
  organization_info: PrimaryOrganizationInfoInput
}

"""Autogenerated input type of updateOrganizationMember"""
input updateOrganizationMemberInput {
  additional_record_identifier: String
  avatar: Upload

  """image in Base64 format"""
  avatar_string: String
  email: String
  first_name: String
  id: ID
  last_name: String

  """
  A serialized JSON string of metadata. Maximum character limit of 10,000.
  """
  metadata: String
  npi: String
  phone_number: String
  provider_appointment_locations: [ProviderAppointmentLocationsInput]
  qualifications: String
  record_identifier: String
  scheduling_priority: String
  state_licenses: [StateLicensesInput]
  timezone: String
}

"""Autogenerated return type of updateOrganizationMember."""
type updateOrganizationMemberPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user: User
}

"""Autogenerated input type of updateOrganizationMembership"""
input updateOrganizationMembershipInput {
  action_for_appointments: String
  active: Boolean
  allow_group_level_actions: Boolean
  allow_self_scheduling_in_care_team: Boolean
  auto_create_convo_for_care_team: Boolean
  can_access_calendar_quick_share: Boolean
  can_access_to_members_chat: Boolean
  can_add_clients: Boolean
  can_add_members: Boolean
  can_add_members_to_chat: Boolean
  can_assign_tasks_to_all_org_members: Boolean
  can_be_care_team_member: Boolean
  can_charge_clients: Boolean
  can_delete_charting_notes: Boolean
  can_delete_faxes: Boolean
  can_edit_appointment_types: Boolean
  can_edit_calendar: Boolean
  can_edit_credit: Boolean
  can_edit_docs: Boolean
  can_edit_education: Boolean
  can_edit_forms: Boolean
  can_edit_members: Boolean
  can_edit_packages: Boolean
  can_edit_products: Boolean
  can_edit_settings: Boolean
  can_enroll_clients_to_programs: Boolean
  can_lock_form_answer_groups: Boolean
  can_lock_others_charting_notes: Boolean
  can_lock_own_charting_notes: Boolean
  can_mark_assigned_tasks_to_other_org_members_as_completed: Boolean
  can_merge_clients: Boolean
  can_order_labs: Boolean
  can_remove_client: Boolean
  can_create_tags: Boolean
  can_rename_and_delete_tags: Boolean
  can_see_billing: Boolean
  can_see_calendar: Boolean
  can_see_clients: Boolean
  can_see_docs: Boolean
  can_see_faxes: Boolean
  can_see_fullscript_tab: Boolean
  can_see_sent_faxes: Boolean
  can_see_option_to_use_erx_dosespot: Boolean
  can_see_transfers: Boolean
  can_set_client_password: Boolean
  can_share_documents_and_folders_with_org_members: Boolean
  can_sign_others_charting_notes: Boolean
  can_sign_own_charting_notes: Boolean
  can_submit_cms_1500s_to_change_health: Boolean
  can_submit_cms_1500s_to_office_ally: Boolean
  can_unlock_charting_notes: Boolean
  can_view_audit_log: Boolean
  can_view_all_org_members_tasks: Boolean
  can_view_cms1500s: Boolean
  can_view_goal_templates: Boolean
  can_view_labs: Boolean
  can_view_org_dashboard: Boolean
  can_view_reports: Boolean
  can_view_super_bills: Boolean
  can_write_org_addendums: Boolean
  email: String
  erx_dosespot_role: String
  first_name: String
  fullscript_practitioner_id: String
  gets_failed_fax_notif: Boolean
  gets_fax_notif: Boolean
  has_own_branding: Boolean
  id: ID
  is_admin: Boolean
  is_developer: Boolean
  is_provider: Boolean
  last_name: String
  notify_any_client_activity: Boolean
  notify_on_book: Boolean
  notify_on_cancel: Boolean
  notify_on_payment_failure: Boolean

  """Options are ["Standard", "Support"]"""
  org_role: String

  """Selected permission template"""
  permission_template_id: ID
  phone_number: String
  position: Int
  professions: [ProfessionsInput]
  provider_to_receive_clients: ID

  """Updates the qualifications of the org member (optional)"""
  qualifications: String
  request_eligibility_checks: Boolean
  scheduling_priority: String
  sees_all_billing: Boolean
  sees_all_clients: Boolean
  selected_licensed_in_filter: [String]
  selected_locations_filter: [String]
  selected_statuses_filter: [String]
  selected_tags_filter: [String]
  send_email_on_intake_flow_complete: Boolean
  send_email_on_intake_flow_start: Boolean
  share_appointment_types: Boolean
  share_custom_metrics: Boolean
  share_fullscript: Boolean
  share_goal_templates: Boolean
  share_packages: Boolean
  share_smart_phrases: Boolean
  share_user_groups: Boolean
  show_availability_first: Boolean
  show_org_tab: Boolean
  specialties: [SpecialtiesInput]
  start_conversation_with: Boolean

  """Updates the timezone of the org member (optional)"""
  timezone: String

  """
  Lets you add extra metadata about the organization membership. Not used in Healthie UI
  """
  title: String

  """Indicate that the user applied a permission template on this update"""
  permission_template_applied: Boolean
  can_manage_care_plan_templates: Boolean
}

"""Autogenerated return type of updateOrganizationMembership."""
type updateOrganizationMembershipPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  organizationMembership: OrganizationMembership
}

"""Autogenerated return type of updateOrganization."""
type updateOrganizationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  organization: Organization
  updated_organization_info: OrganizationInfo
}

"""Autogenerated input type of updatePermissionTemplate"""
input updatePermissionTemplateInput {
  allow_self_scheduling_in_care_team: Boolean
  auto_create_convo_for_care_team: Boolean
  can_access_calendar_quick_share: Boolean
  can_access_to_members_chat: Boolean
  can_add_clients: Boolean
  can_add_members: Boolean
  can_add_members_to_chat: Boolean
  can_assign_tasks_to_all_org_members: Boolean
  can_be_care_team_member: Boolean
  can_charge_clients: Boolean
  can_delete_charting_notes: Boolean
  can_delete_faxes: Boolean
  can_edit_appointment_types: Boolean
  can_edit_calendar: Boolean
  can_edit_credit: Boolean
  can_edit_docs: Boolean
  can_edit_education: Boolean
  can_edit_forms: Boolean
  can_edit_members: Boolean
  can_edit_packages: Boolean
  can_edit_products: Boolean
  can_edit_settings: Boolean
  can_enroll_clients_to_programs: Boolean
  can_lock_others_charting_notes: Boolean
  can_lock_own_charting_notes: Boolean
  can_mark_assigned_tasks_to_other_org_members_as_completed: Boolean
  can_merge_clients: Boolean
  can_order_labs: Boolean
  can_view_labs: Boolean
  can_remove_client: Boolean
  can_create_tags: Boolean
  can_rename_and_delete_tags: Boolean
  can_see_billing: Boolean
  can_see_calendar: Boolean
  can_see_clients: Boolean
  can_see_docs: Boolean
  can_see_faxes: Boolean
  can_see_fullscript_tab: Boolean
  can_see_sent_faxes: Boolean
  can_see_transfers: Boolean
  can_set_client_password: Boolean
  can_share_documents_and_folders_with_org_members: Boolean
  can_sign_others_charting_notes: Boolean
  can_sign_own_charting_notes: Boolean
  can_submit_cms_1500s_to_change_health: Boolean
  can_submit_cms_1500s_to_office_ally: Boolean
  can_view_audit_log: Boolean
  can_view_all_org_members_tasks: Boolean
  can_view_cms1500s: Boolean
  can_view_goal_templates: Boolean
  can_view_org_dashboard: Boolean
  can_view_reports: Boolean
  can_view_super_bills: Boolean
  can_write_org_addendums: Boolean
  gets_failed_fax_notif: Boolean
  gets_fax_notif: Boolean
  has_own_branding: Boolean
  id: ID
  is_admin: Boolean
  is_provider: Boolean
  is_developer: Boolean
  name: String
  notify_any_client_activity: Boolean
  notify_on_book: Boolean
  notify_on_cancel: Boolean
  notify_on_payment_failure: Boolean
  org_role: String
  organization_id: ID
  request_eligibility_checks: Boolean
  sees_all_billing: Boolean
  sees_all_clients: Boolean
  send_email_on_intake_flow_complete: Boolean
  send_email_on_intake_flow_start: Boolean
  share_appointment_types: Boolean
  share_custom_metrics: Boolean
  share_fullscript: Boolean
  share_goal_templates: Boolean
  share_packages: Boolean
  share_smart_phrases: Boolean
  show_availability_first: Boolean
  show_org_tab: Boolean
  start_conversation_with: Boolean
  allow_group_level_actions: Boolean
  can_manage_care_plan_templates: Boolean
}

"""Autogenerated return type of updatePermissionTemplate."""
type updatePermissionTemplatePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  permissionTemplate: PermissionTemplateType
}

"""Autogenerated input type of updatePolicyMutation"""
input updatePolicyMutationInput {
  benefits: [BenefitInput]
  call_reference: CallReferenceInput
  cpt_codes_policies: [CptCodesPolicyInput]
  effective_end: String
  effective_start: String
  holder_dob: String
  holder_first: String
  holder_gender: String
  holder_last: String
  holder_mi: String
  holder_phone: String
  icd_codes_policies: [IcdCodesPolicyInput]
  id: ID
  insurance_authorization: InsuranceAuthorizationInput
  insurance_authorization_required: Boolean
  insurance_card_back_id: String
  insurance_card_front_id: String
  notes: String
  policy_phone_number: String
  priority_type: String
  referral_required: Boolean
  referring_physician_id: String
  same_address_as_client: Boolean
  type_string: String
  user_id: String
}

"""Autogenerated return type of updatePolicyMutation."""
type updatePolicyMutationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  policy: Policy
}

"""Autogenerated input type of updateProcedure"""
input updateProcedureInput {
  code: String
  code_system_name: String
  cpt_code_id: ID
  display_name: String
  id: ID
  procedure_end_datetime: String
  procedure_start_datetime: String
  status: String
  target_site: String
}

"""Autogenerated return type of updateProcedure."""
type updateProcedurePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  procedure: Procedure
}

"""Autogenerated input type of updateProduct"""
input updateProductInput {
  id: ID
  name: String
  price: String
  remaining_quantity: String
  tax_description: String
  tax_rate: String
  unlimited_quantity: Boolean
}

"""Autogenerated return type of updateProduct."""
type updateProductPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  product: Product
}

"""Autogenerated input type of updateProviderCptCodes"""
input updateProviderCptCodesInput {
  provider_cpt_codes: [ProviderCptCodeInput]
  provider_id: ID
}

"""Autogenerated return type of updateProviderCptCodes."""
type updateProviderCptCodesPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateReceivedDirectMessage"""
input updateReceivedDirectMessageInput {
  id: ID
  patient_id: ID
}

"""Autogenerated return type of updateReceivedDirectMessage."""
type updateReceivedDirectMessagePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  received_direct_message: ReceivedDirectMessage
}

"""Autogenerated input type of updateReceivedFax"""
input updateReceivedFaxInput {
  archived: Boolean
  comments: String
  id: ID
}

"""Autogenerated return type of updateReceivedFax."""
type updateReceivedFaxPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  receivedFax: ReceivedFax
}

"""Autogenerated input type of updateRecommendation"""
input updateRecommendationInput {
  id: ID
  recommendation_body: String
  recommendation_type: String
}

"""Autogenerated return type of updateRecommendation."""
type updateRecommendationPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  recommendation: Recommendation
}

"""Autogenerated input type of updateRecurringForm"""
input updateRecurringFormInput {
  ends_on: String
  frequency: String
  hour: String
  id: String
  is_active: Boolean
  is_recurring: Boolean
  minute: String
  monthday: String
  period: String
  recipient_ids: String
  recurrence_ends: Boolean
  weekday: String
}

"""Autogenerated return type of updateRecurringForm."""
type updateRecurringFormPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  recurringForm: RecurringForm
}

"""Autogenerated input type of updateReferral"""
input updateReferralInput {
  id: ID

  """
  A serialized JSON string of metadata. Maximum character limit of 128,000.
  """
  metadata: String
  referral_reason: String
  referring_physician_id: ID
  user_id: ID
}

"""Autogenerated return type of updateReferral."""
type updateReferralPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  referral: Referral
}

"""Autogenerated input type of updateReferringPhysician"""
input updateReferringPhysicianInput {
  accepts_insurance: Boolean
  business_name: String
  email: String
  fax_number: String
  first_name: String
  id: ID
  last_name: String
  location: PhysicianLocationInput

  """
  A serialized JSON string of metadata. Maximum character limit of 128,000.
  """
  metadata: String
  notes: String
  npi: String
  other_id: String
  other_id_qualifier: String
  phone_number: String
  referrals: [PhysicianReferralInput] = []
  speciality: String
  website: String
}

"""Autogenerated return type of updateReferringPhysician."""
type updateReferringPhysicianPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  referring_physician: ReferringPhysician
}

"""Autogenerated input type of updateRequestedPayment"""
input updateRequestedPaymentInput {
  appointment_id: ID
  cms1500_id: ID
  id: ID!
  invoice_type: String
  is_preview: Boolean
  notes: String
  offering_id: ID
  price: String
  recipient_id: ID
  requested_payer: RequestedPayerInput
  requested_payment_template: RequestedPaymentTemplateInput
  resend_receipt: Boolean
  send_request_email: Boolean
  sender_id: ID
  service_date: String
  services_provided: String
  status: String
  use_as_template: Boolean
}

"""Autogenerated return type of updateRequestedPayment."""
type updateRequestedPaymentPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  requested_payment: RequestedPayment
}

"""Autogenerated input type of updateSavedFilter"""
input updateSavedFilterInput {
  """ID of the saved filter to update"""
  id: ID!

  """New name for the saved filter"""
  name: String!
}

"""Autogenerated return type of updateSavedFilter."""
type updateSavedFilterPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  savedFilter: SavedFilter
}

"""Autogenerated input type of updateSmartPhrase"""
input updateSmartPhraseInput {
  id: ID
  name: String
  phrase: String
}

"""Autogenerated return type of updateSmartPhrase."""
type updateSmartPhrasePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  smartPhrase: SmartPhrase
}

"""Autogenerated input type of updateSmokingStatus"""
input updateSmokingStatusInput {
  id: ID
  smoking_status_code: String
  status_end_datetime: String
  status_start_datetime: String
}

"""Autogenerated return type of updateSmokingStatus."""
type updateSmokingStatusPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  smokingStatus: SmokingStatus
}

"""Autogenerated input type of updateState"""
input updateStateInput {
  active: Boolean
  id: ID!
}

"""Autogenerated return type of updateState."""
type updateStatePayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  course: Course

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateStripeCustomerDetail"""
input updateStripeCustomerDetailInput {
  card_type_label: String
  first_microdeposit: String
  id: ID
  is_default: Boolean
  second_microdeposit: String
  user_id: ID
}

"""Autogenerated return type of updateStripeCustomerDetail."""
type updateStripeCustomerDetailPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  stripe_customer_detail: StripeCustomerDetail
}

"""Autogenerated input type of updateStripeVerificationDetails"""
input updateStripeVerificationDetailsInput {
  account_holder_name: String
  account_number: String
  additional_verification_document: Upload
  appointment_type_credits_attributes: [AppointmentTypeCreditInput]

  """
  Additional documentation for bank accounts, e.g. voided checks, bank statements, etc
  """
  bank_verification_document: Upload

  """Description of the product sold or service provided by the business"""
  business_description: String

  """The customer-facing business name"""
  business_name: String
  business_tax_id: String

  """The business's publicly available website"""
  business_url: String
  company_verification_document: Upload
  currency: String
  dob: String
  email: String
  entity_type: String
  first_name: String
  id: ID
  last_name: String
  location: ClientLocationInput
  new_country: String
  personal_address: ClientLocationInput
  personal_phone: String
  phone: String
  routing_number: String
  skip_adding_bank_info: Boolean
  ssn: String
  ssn_last_4: String
  verification_document: Upload
}

"""Autogenerated return type of updateStripeVerificationDetails."""
type updateStripeVerificationDetailsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user: User
}

"""Autogenerated input type of updateSubscription"""
input updateSubscriptionInput {
  activate_short_trial: Boolean
  details: String
  id: ID

  """
  The name of the new Stripe Plan to switch to. Currently, this just supports moving trialing members to starter.
  """
  new_plan_name: String
  reactivate_plan: String
  reason: String

  """
  Value can either be monthly or annual. Allows users on Practice Plus or Small Pracitce to switch billing cycles.
  """
  switch_plan: String
  token: String
  wants_to_cancel: Boolean
}

"""Autogenerated return type of updateSubscription."""
type updateSubscriptionPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  currentUser: User

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  subscription: SubscriptionInstance
}

"""Autogenerated input type of updateSuperBill"""
input updateSuperBillInput {
  address: String
  amount_paid: String
  cpt_codes_super_bills: [CptCodesSuperBillInput]
  dietitian_id: ID
  icd_codes_super_bills: [IcdCodesSuperBillInput]
  id: ID
  license_num: String
  location: LocationInputs
  location_id: ID
  npi: String
  patient_dob: String
  patient_id: ID
  patient_location: PatientLocationInputs
  patient_name: String
  patient_phone: String
  place_of_service_id: ID
  prov_city: String
  prov_email: String
  prov_line1: String
  prov_line2: String
  prov_phone: String
  prov_state: String
  prov_zip: String
  provider_name: String
  receipt_line_items: [ReceiptLineItemInput]
  referrer_name: String
  referrer_npi: String
  service_date: String
  should_email_to_client: Boolean
  status: String
  tax_id: String
}

"""Autogenerated return type of updateSuperBill."""
type updateSuperBillPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  superBill: SuperBill
}

"""Autogenerated input type of updateTag"""
input updateTagInput {
  id: ID
  name: String
}

"""Autogenerated return type of updateTag."""
type updateTagPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  tag: Tag
}

"""Autogenerated input type of updateTask"""
input updateTaskInput {
  client_id: String
  complete: Boolean
  completed_by_id: ID
  content: String
  created_by_id: String
  due_date: String
  hidden: Boolean
  id: String
  position: Int
  priority: Int
  reminder: TaskReminderInput
  seen: Boolean
  user_id: String
}

"""Autogenerated return type of updateTask."""
type updateTaskPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  task: Task
}

"""Autogenerated input type of updateUniqueDeviceIdentifier"""
input updateUniqueDeviceIdentifierInput {
  assigning_authority: String
  device_code: String
  display_name: String
  id: ID
  scoping_entity: String
  udi_code: String
}

"""Autogenerated return type of updateUniqueDeviceIdentifier."""
type updateUniqueDeviceIdentifierPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  unique_device_identifier: UniqueDeviceIdentifier
}

"""Autogenerated input type of updateUserAppointmentPricing"""
input updateUserAppointmentPricingInput {
  advance_appointment_prices: [AdvanceAppointmentPricesInput]
  user_id: ID
}

"""Autogenerated return type of updateUserAppointmentPricing."""
type updateUserAppointmentPricingPayload {
  advance_appointment_prices: [AdvanceAppointmentPrice]

  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
}

"""Autogenerated input type of updateUserGroup"""
input updateUserGroupInput {
  id: ID
  name: String
  onboarding_flow_id: ID
}

"""Autogenerated return type of updateUserGroup."""
type updateUserGroupPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user_group: UserGroup
}

"""Autogenerated input type of updateUser"""
input updateUserInput {
  active_care_plan_id: ID
  assign_tasks_seen: Boolean
  avatar: Upload

  """image in Base64 format"""
  avatar_string: String
  blast_seen: Boolean
  card_type_label: String
  consented_to_labs: Boolean
  current_email: String
  current_password: String
  default_onboarding_flow_id: ID
  dimissed_calendar_prompt: Boolean
  dismissed_charting_note_addendum_warning: Boolean
  dismissed_insurance_eligibility_warning: Boolean
  dismissed_fullscript: Boolean
  dismissed_products_tab: Boolean
  dob: String
  email: String
  first_name: String
  gender: String
  gender_identity: String
  gender_identity_code: String
  human_id: ID
  id: ID
  last_name: String
  legal_name: String
  locations: [ClientLocationInput]

  """This field does not do anything, and should not be used"""
  name: String
  password: String
  password_confirmation: String
  phone_number: String
  policies: [UserPolicyInput]
  preferred_language_code: String
  pretend_to_be: String
  primary_ethnicity_code: String
  primary_race_code: String
  product_update_articles: Int
  pronouns: String
  qualifications: String
  resend_welcome_to_dietitian: Boolean
  secondary_ethnicity_code: Int
  secondary_race_code: String
  seen_onboarding_complete_page: Boolean
  seen_welcome: Boolean
  send_get_mobile_app_email: Boolean
  sex: String
  sexual_orientation_code: String
  sexual_orientation_other: String
  skipped_email: Boolean
  submit_labs_immediately: Boolean
  timezone: String

  """Token for credit card, created by Stripe.JS"""
  token: String
  uniq_push_id: String
}

"""Autogenerated return type of updateUser."""
type updateUserPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user: User
}

"""Autogenerated input type of updateWebhook"""
input updateWebhookInput {
  event_type: String
  id: ID
  is_enabled: Boolean
  should_retry: Boolean

  """A valid URL per the WHATWG specification"""
  url: String

  """Webhook events to update or delete"""
  webhook_events: [WebhookEventInput]
}

"""Autogenerated return type of updateWebhook."""
type updateWebhookPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  webhook: Webhook
}

"""Autogenerated input type of uploadBatchToCandidHealth"""
input uploadBatchToCandidHealthInput {
  cms1500_ids: [ID]
}

"""Autogenerated return type of uploadBatchToCandidHealth."""
type uploadBatchToCandidHealthPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  cms1500s: [Cms1500]

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of uploadBatchToChangeHealth"""
input uploadBatchToChangeHealthInput {
  cms1500_ids: [ID]
}

"""Autogenerated return type of uploadBatchToChangeHealth."""
type uploadBatchToChangeHealthPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  cms1500s: [Cms1500]

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of uploadBatchToOfficeally"""
input uploadBatchToOfficeallyInput {
  cms1500_ids: [ID]
}

"""Autogenerated return type of uploadBatchToOfficeally."""
type uploadBatchToOfficeallyPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  cms1500s: [Cms1500]

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_string: String
}

"""Autogenerated input type of uploadToIntegrations"""
input uploadToIntegrationsInput {
  """
  Supercedes cms1500_ids if provided. The ID of a singular Cms1500 to submit
  """
  cms1500_id: ID

  """An array of IDs of CMS1500 objects to submit"""
  cms1500_ids: [ID]

  """The claims integration to submit the specified claim(s) to"""
  destination_integration: ClaimDestinationIntegration
}

"""Autogenerated return type of uploadToIntegrations."""
type uploadToIntegrationsPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")
  cms1500s: [Cms1500]

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  success_message: String
}

"""Autogenerated input type of validateVerificationToken"""
input validateVerificationTokenInput {
  verification_code: String
}

"""Autogenerated return type of validateVerificationToken."""
type validateVerificationTokenPayload {
  """DO NOT USE"""
  clientMutationId: String @deprecated(reason: "DO NOT USE")

  """The list of errors occurred during the mutation"""
  messages: [FieldError]
  user: User
}